// Generated from antlr_plsql/plsql.g4 by ANTLR 4.6.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var plsqlListener = require('./plsqlListener').plsqlListener;
var grammarFileName = "plsql.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u020b\u1448\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0004",
    "\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004\u0123\t",
    "\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t\u0126\u0004",
    "\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004\u012a\t",
    "\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t\u012d\u0004",
    "\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004\u0131\t",
    "\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t\u0134\u0004",
    "\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004\u0138\t",
    "\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t\u013b\u0004",
    "\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004\u013f\t",
    "\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t\u0142\u0004",
    "\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004\u0146\t",
    "\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t\u0149\u0004",
    "\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004\u014d\t",
    "\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t\u0150\u0004",
    "\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004\u0154\t",
    "\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t\u0157\u0004",
    "\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004\u015b\t",
    "\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t\u015e\u0004",
    "\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004\u0162\t",
    "\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t\u0165\u0004",
    "\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004\u0169\t",
    "\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t\u016c\u0004",
    "\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004\u0170\t",
    "\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t\u0173\u0004",
    "\u0174\t\u0174\u0003\u0002\u0006\u0002\u02ea\n\u0002\r\u0002\u000e\u0002",
    "\u02eb\u0003\u0003\u0007\u0003\u02ef\n\u0003\f\u0003\u000e\u0003\u02f2",
    "\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u02f8\n\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u0302\n\u0004",
    "\f\u0004\u000e\u0004\u0305\u000b\u0004\u0003\u0004\u0005\u0004\u0308",
    "\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u031d\n\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0005\u0007\u0328\n\u0007\u0003\u0007\u0007\u0007",
    "\u032b\n\u0007\f\u0007\u000e\u0007\u032e\u000b\u0007\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u0332\n\u0007\u0003\b\u0003\b\u0003\b\u0005\b\u0337",
    "\n\b\u0005\b\u0339\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0007\b\u0341\n\b\f\b\u000e\b\u0344\u000b\b\u0003\b\u0003\b\u0005",
    "\b\u0348\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b",
    "\u0350\n\b\f\b\u000e\b\u0353\u000b\b\u0003\b\u0005\b\u0356\n\b\u0003",
    "\b\u0003\b\u0005\b\u035a\n\b\u0003\b\u0007\b\u035d\n\b\f\b\u000e\b\u0360",
    "\u000b\b\u0003\b\u0003\b\u0005\b\u0364\n\b\u0003\b\u0003\b\u0003\b\u0005",
    "\b\u0369\n\b\u0003\t\u0003\t\u0005\t\u036d\n\t\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0379",
    "\n\n\f\n\u000e\n\u037c\u000b\n\u0003\n\u0003\n\u0005\n\u0380\n\n\u0003",
    "\n\u0005\n\u0383\n\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u0389\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u0390",
    "\n\f\f\f\u000e\f\u0393\u000b\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u039e\n\r\f\r\u000e\r\u03a1",
    "\u000b\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u03a8\n\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u03b1\n\u000f\u0003\u000f",
    "\u0005\u000f\u03b4\n\u000f\u0003\u000f\u0007\u000f\u03b7\n\u000f\f\u000f",
    "\u000e\u000f\u03ba\u000b\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u03be",
    "\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u03c3\n\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u03c8\n\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u03ce\n\u0011",
    "\f\u0011\u000e\u0011\u03d1\u000b\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u03d7\n\u0011\u0005\u0011\u03d9\n\u0011",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u03dd\n\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u03e1\n\u0012\f\u0012\u000e\u0012\u03e4\u000b\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u03e8\n\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u03f3\n\u0013\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u03fb\n",
    "\u0014\f\u0014\u000e\u0014\u03fe\u000b\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u0402\n\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u040c",
    "\n\u0015\f\u0015\u000e\u0015\u040f\u000b\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0413\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u0418\n\u0015\u0003\u0015\u0005\u0015\u041b\n\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016",
    "\u0429\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0434",
    "\n\u0018\u0003\u0018\u0007\u0018\u0437\n\u0018\f\u0018\u000e\u0018\u043a",
    "\u000b\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u043e\n\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0443\n\u0019\u0005\u0019",
    "\u0445\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0007\u0019\u044d\n\u0019\f\u0019\u000e\u0019\u0450",
    "\u000b\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0454\n\u0019\u0003",
    "\u0019\u0005\u0019\u0457\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u045b\n\u0019\u0003\u0019\u0007\u0019\u045e\n\u0019\f\u0019\u000e\u0019",
    "\u0461\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0466",
    "\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u0475\n\u001b\u0003\u001b\u0007",
    "\u001b\u0478\n\u001b\f\u001b\u000e\u001b\u047b\u000b\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u047f\n\u001b\u0005\u001b\u0481\n\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0486\n\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u048d\n",
    "\u001c\u0003\u001c\u0005\u001c\u0490\n\u001c\u0003\u001c\u0005\u001c",
    "\u0493\n\u001c\u0003\u001c\u0005\u001c\u0496\n\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u049e",
    "\n\u001d\f\u001d\u000e\u001d\u04a1\u000b\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u04ac\n\u001f\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u04b0\n\u001f\u0003\u001f\u0005\u001f\u04b3\n\u001f\u0003 \u0003",
    " \u0003 \u0003 \u0003!\u0003!\u0003!\u0005!\u04bc\n!\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0007\"\u04c2\n\"\f\"\u000e\"\u04c5\u000b\"\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u04cc\n\"\u0003\"\u0005\"\u04cf",
    "\n\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u04d6\n#\u0003$\u0003",
    "$\u0005$\u04da\n$\u0003%\u0003%\u0003%\u0007%\u04df\n%\f%\u000e%\u04e2",
    "\u000b%\u0003%\u0006%\u04e5\n%\r%\u000e%\u04e6\u0003%\u0003%\u0003%",
    "\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0510\n&\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u052c",
    "\n\'\u0003(\u0003(\u0003(\u0007(\u0531\n(\f(\u000e(\u0534\u000b(\u0003",
    "(\u0003(\u0005(\u0538\n(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0007)\u0541\n)\f)\u000e)\u0544\u000b)\u0005)\u0546\n)\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003+\u0003+\u0006+\u054f\n+\r+\u000e+\u0550",
    "\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0005-\u0559\n-\u0003-\u0003",
    "-\u0005-\u055d\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0005.\u0567\n.\u0003.\u0005.\u056a\n.\u0003/\u0003/\u0005/\u056e",
    "\n/\u0003/\u0005/\u0571\n/\u0003/\u0007/\u0574\n/\f/\u000e/\u0577\u000b",
    "/\u0003/\u0003/\u0005/\u057b\n/\u00030\u00030\u00050\u057f\n0\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00070\u0587\n0\f0\u000e0\u058a",
    "\u000b0\u00030\u00030\u00031\u00031\u00031\u00071\u0591\n1\f1\u000e",
    "1\u0594\u000b1\u00032\u00032\u00032\u00052\u0599\n2\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00073\u05a2\n3\f3\u000e3\u05a5\u000b",
    "3\u00033\u00033\u00053\u05a9\n3\u00034\u00034\u00054\u05ad\n4\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00055\u05b5\n5\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00056\u05bd\n6\u00036\u00036\u00036\u00056\u05c2",
    "\n6\u00036\u00056\u05c5\n6\u00056\u05c7\n6\u00037\u00057\u05ca\n7\u0003",
    "7\u00037\u00037\u00037\u00038\u00038\u00038\u00058\u05d3\n8\u00038\u0003",
    "8\u00038\u00058\u05d8\n8\u00039\u00039\u00039\u00059\u05dd\n9\u0003",
    "9\u00059\u05e0\n9\u0003:\u0005:\u05e3\n:\u0003:\u0003:\u0005:\u05e7",
    "\n:\u0003:\u0005:\u05ea\n:\u0003:\u0003:\u0003:\u0003:\u0007:\u05f0",
    "\n:\f:\u000e:\u05f3\u000b:\u0003:\u0003:\u0005:\u05f7\n:\u0003:\u0007",
    ":\u05fa\n:\f:\u000e:\u05fd\u000b:\u0003;\u0003;\u0003;\u0003;\u0005",
    ";\u0603\n;\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0005",
    "=\u060d\n=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    "?\u0003?\u0003?\u0003?\u0006?\u061b\n?\r?\u000e?\u061c\u0003?\u0003",
    "?\u0003@\u0003@\u0005@\u0623\n@\u0003A\u0003A\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0003B\u0005B\u062d\nB\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0007C\u0635\nC\fC\u000eC\u0638\u000bC\u0003C\u0003C\u0003C\u0003",
    "C\u0005C\u063e\nC\u0003C\u0007C\u0641\nC\fC\u000eC\u0644\u000bC\u0003",
    "C\u0003C\u0003C\u0005C\u0649\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0007D\u0651\nD\fD\u000eD\u0654\u000bD\u0003D\u0003D\u0005D\u0658",
    "\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u065f\nD\u0003D\u0007",
    "D\u0662\nD\fD\u000eD\u0665\u000bD\u0003D\u0003D\u0003D\u0005D\u066a",
    "\nD\u0003E\u0005E\u066d\nE\u0003E\u0005E\u0670\nE\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0007E\u067f\nE\fE\u000eE\u0682\u000bE\u0003E\u0003E\u0005E\u0686",
    "\nE\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u068f\n",
    "E\u0003E\u0007E\u0692\nE\fE\u000eE\u0695\u000bE\u0003E\u0003E\u0003",
    "E\u0005E\u069a\nE\u0003F\u0005F\u069d\nF\u0003F\u0003F\u0003G\u0003",
    "G\u0003G\u0005G\u06a4\nG\u0003G\u0005G\u06a7\nG\u0003H\u0003H\u0003",
    "H\u0003H\u0003I\u0005I\u06ae\nI\u0003I\u0006I\u06b1\nI\rI\u000eI\u06b2",
    "\u0003I\u0003I\u0005I\u06b7\nI\u0003J\u0003J\u0003J\u0005J\u06bc\nJ",
    "\u0003K\u0003K\u0003K\u0005K\u06c1\nK\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0007L\u06c9\nL\fL\u000eL\u06cc\u000bL\u0003L\u0003L\u0003",
    "L\u0005L\u06d1\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u06d9",
    "\nM\fM\u000eM\u06dc\u000bM\u0003M\u0003M\u0005M\u06e0\nM\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0005M\u06e7\nM\u0003M\u0003M\u0003M\u0003M\u0005",
    "M\u06ed\nM\u0003M\u0003M\u0005M\u06f1\nM\u0003N\u0005N\u06f4\nN\u0003",
    "N\u0005N\u06f7\nN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0007N\u0706\nN\fN\u000eN\u0709",
    "\u000bN\u0003N\u0003N\u0005N\u070d\nN\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0005N\u0715\nN\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0007P\u0721\nP\fP\u000eP\u0724\u000bP\u0003",
    "P\u0003P\u0003Q\u0003Q\u0005Q\u072a\nQ\u0003R\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0006T\u0737\nT\rT\u000e",
    "T\u0738\u0003U\u0003U\u0003U\u0003U\u0003U\u0007U\u0740\nU\fU\u000e",
    "U\u0743\u000bU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u0755",
    "\nV\u0003W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Z\u0003Z\u0003Z\u0005Z\u0765\nZ\u0003[\u0003[\u0003[\u0003",
    "[\u0003\\\u0003\\\u0003\\\u0005\\\u076e\n\\\u0003\\\u0003\\\u0003\\",
    "\u0005\\\u0773\n\\\u0003\\\u0003\\\u0005\\\u0777\n\\\u0003\\\u0005\\",
    "\u077a\n\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0007]\u0782\n",
    "]\f]\u000e]\u0785\u000b]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0007^\u078e\n^\f^\u000e^\u0791\u000b^\u0003^\u0003^\u0003^\u0005",
    "^\u0796\n^\u0003^\u0003^\u0003_\u0003_\u0007_\u079c\n_\f_\u000e_\u079f",
    "\u000b_\u0003_\u0005_\u07a2\n_\u0003_\u0005_\u07a5\n_\u0003`\u0003`",
    "\u0003`\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0005a\u07b3\na\u0003b\u0003b\u0005b\u07b7\nb\u0003b\u0003b\u0003",
    "b\u0005b\u07bc\nb\u0003b\u0005b\u07bf\nb\u0003b\u0003b\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005c\u07cc\nc\u0003",
    "c\u0003c\u0005c\u07d0\nc\u0003c\u0003c\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0007d\u07da\nd\fd\u000ed\u07dd\u000bd\u0003d\u0003d\u0005",
    "d\u07e1\nd\u0003d\u0003d\u0005d\u07e5\nd\u0003d\u0003d\u0005d\u07e9",
    "\nd\u0003d\u0003d\u0003e\u0003e\u0005e\u07ef\ne\u0003e\u0005e\u07f2",
    "\ne\u0003e\u0005e\u07f5\ne\u0003f\u0003f\u0003f\u0003f\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0005",
    "g\u0810\ng\u0003g\u0003g\u0006g\u0814\ng\rg\u000eg\u0815\u0003g\u0003",
    "g\u0005g\u081a\ng\u0003g\u0003g\u0003h\u0003h\u0005h\u0820\nh\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0007i\u082a\ni\f",
    "i\u000ei\u082d\u000bi\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005",
    "i\u0835\ni\u0005i\u0837\ni\u0003i\u0003i\u0003j\u0003j\u0005j\u083d",
    "\nj\u0003j\u0003j\u0005j\u0841\nj\u0003j\u0005j\u0844\nj\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0003l\u0003l\u0005l\u084d\nl\u0003l\u0003l\u0003",
    "m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\u0858\nm\u0003m\u0003",
    "m\u0005m\u085c\nm\u0003m\u0005m\u085f\nm\u0003n\u0003n\u0005n\u0863",
    "\nn\u0003n\u0003n\u0003n\u0003o\u0003o\u0003o\u0005o\u086b\no\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0005o\u0874\no\u0003p\u0003",
    "p\u0003p\u0003q\u0003q\u0003q\u0003q\u0006q\u087d\nq\rq\u000eq\u087e",
    "\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0005s\u088d\ns\u0003s\u0003s\u0003s\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0005s\u08a1\ns\u0003t\u0003t\u0005t\u08a5\nt\u0003",
    "t\u0003t\u0003t\u0003u\u0003u\u0005u\u08ac\nu\u0003u\u0003u\u0005u\u08b0",
    "\nu\u0003v\u0003v\u0005v\u08b4\nv\u0003v\u0003v\u0005v\u08b8\nv\u0003",
    "w\u0003w\u0003w\u0003x\u0003x\u0003x\u0003x\u0003x\u0007x\u08c2\nx\f",
    "x\u000ex\u08c5\u000bx\u0003x\u0005x\u08c8\nx\u0003x\u0003x\u0003x\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003z\u0003z\u0003z\u0003{\u0005{\u08d6",
    "\n{\u0003{\u0003{\u0003{\u0003{\u0005{\u08dc\n{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0005{\u08e3\n{\u0003|\u0003|\u0003|\u0005|\u08e8\n",
    "|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0005|\u08f2",
    "\n|\u0003|\u0003|\u0003|\u0003|\u0005|\u08f8\n|\u0005|\u08fa\n|\u0003",
    "}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0005}\u0903\n}\u0003~\u0003",
    "~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0005~\u090d\n~\u0003~\u0003",
    "~\u0003~\u0005~\u0912\n~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0082",
    "\u0003\u0082\u0003\u0083\u0003\u0083\u0005\u0083\u0921\n\u0083\u0003",
    "\u0084\u0003\u0084\u0005\u0084\u0925\n\u0084\u0003\u0085\u0005\u0085",
    "\u0928\n\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u092c\n\u0085\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0006\u0086\u0932\n\u0086",
    "\r\u0086\u000e\u0086\u0933\u0005\u0086\u0936\n\u0086\u0003\u0086\u0003",
    "\u0086\u0005\u0086\u093a\n\u0086\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0007\u0087\u0940\n\u0087\f\u0087\u000e\u0087\u0943\u000b",
    "\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0088\u0005\u0088\u0949",
    "\n\u0088\u0003\u0088\u0006\u0088\u094c\n\u0088\r\u0088\u000e\u0088\u094d",
    "\u0005\u0088\u0950\n\u0088\u0003\u0088\u0003\u0088\u0003\u0089\u0005",
    "\u0089\u0955\n\u0089\u0003\u0089\u0006\u0089\u0958\n\u0089\r\u0089\u000e",
    "\u0089\u0959\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a",
    "\u0003\u008a\u0005\u008a\u0962\n\u008a\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u0969\n\u008b\u0003\u008b",
    "\u0003\u008b\u0005\u008b\u096d\n\u008b\u0003\u008b\u0005\u008b\u0970",
    "\n\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d",
    "\u097c\n\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005",
    "\u008e\u0982\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0005\u0090\u098a\n\u0090\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0007\u0091\u0992",
    "\n\u0091\f\u0091\u000e\u0091\u0995\u000b\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0007\u0091\u099d\n",
    "\u0091\f\u0091\u000e\u0091\u09a0\u000b\u0091\u0005\u0091\u09a2\n\u0091",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092",
    "\u09a9\n\u0092\u0003\u0092\u0005\u0092\u09ac\n\u0092\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u09b3\n\u0093",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u09be\n\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u09c4\n\u0094",
    "\u0003\u0094\u0003\u0094\u0005\u0094\u09c8\n\u0094\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0007\u0095\u09d0",
    "\n\u0095\f\u0095\u000e\u0095\u09d3\u000b\u0095\u0005\u0095\u09d5\n\u0095",
    "\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0005\u0096\u09db\n",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0005\u0096\u09e6\n\u0096",
    "\u0005\u0096\u09e8\n\u0096\u0005\u0096\u09ea\n\u0096\u0003\u0096\u0005",
    "\u0096\u09ed\n\u0096\u0003\u0097\u0003\u0097\u0005\u0097\u09f1\n\u0097",
    "\u0003\u0097\u0005\u0097\u09f4\n\u0097\u0003\u0098\u0003\u0098\u0005",
    "\u0098\u09f8\n\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u09fc\n\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u0a01\n\u0098\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0a0c\n\u009a\u0003\u009a",
    "\u0003\u009a\u0005\u009a\u0a10\n\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0a18\n\u009a",
    "\u0003\u009b\u0005\u009b\u0a1b\n\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0007\u009c\u0a23\n\u009c",
    "\f\u009c\u000e\u009c\u0a26\u000b\u009c\u0003\u009d\u0003\u009d\u0003",
    "\u009d\u0003\u009d\u0003\u009d\u0007\u009d\u0a2d\n\u009d\f\u009d\u000e",
    "\u009d\u0a30\u000b\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0a34\n",
    "\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0a3a",
    "\n\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0a3e\n\u009d\u0003\u009d",
    "\u0005\u009d\u0a41\n\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0a49\n\u009e\u0003\u009e",
    "\u0005\u009e\u0a4c\n\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0a50",
    "\n\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0a54\n\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u0a59\n\u009e\u0003\u009e\u0005",
    "\u009e\u0a5c\n\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0a60\n\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u0a64\n\u009e\u0007\u009e\u0a66",
    "\n\u009e\f\u009e\u000e\u009e\u0a69\u000b\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0007\u009f",
    "\u0a72\n\u009f\f\u009f\u000e\u009f\u0a75\u000b\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0005",
    "\u00a0\u0a84\n\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0007\u00a0\u0a8a\n\u00a0\f\u00a0\u000e\u00a0\u0a8d\u000b\u00a0\u0003",
    "\u00a1\u0003\u00a1\u0005\u00a1\u0a91\n\u00a1\u0003\u00a1\u0003\u00a1",
    "\u0005\u00a1\u0a95\n\u00a1\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0a99",
    "\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0007\u00a2\u0a9e\n\u00a2",
    "\f\u00a2\u000e\u00a2\u0aa1\u000b\u00a2\u0003\u00a2\u0005\u00a2\u0aa4",
    "\n\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0aa8\n\u00a2\u0003\u00a2",
    "\u0005\u00a2\u0aab\n\u00a2\u0003\u00a2\u0003\u00a2\u0007\u00a2\u0aaf",
    "\n\u00a2\f\u00a2\u000e\u00a2\u0ab2\u000b\u00a2\u0003\u00a2\u0005\u00a2",
    "\u0ab5\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0007\u00a2\u0aba",
    "\n\u00a2\f\u00a2\u000e\u00a2\u0abd\u000b\u00a2\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0005\u00a3\u0ac7\n\u00a3\u0005\u00a3\u0ac9\n\u00a3\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0007\u00a5\u0ad1",
    "\n\u00a5\f\u00a5\u000e\u00a5\u0ad4\u000b\u00a5\u0003\u00a6\u0003\u00a6",
    "\u0007\u00a6\u0ad8\n\u00a6\f\u00a6\u000e\u00a6\u0adb\u000b\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0005\u00a6\u0adf\n\u00a6\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0005\u00a7\u0ae4\n\u00a7\u0003\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0007\u00a7\u0ae9\n\u00a7\f\u00a7\u000e\u00a7\u0aec\u000b\u00a7",
    "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7\u0af1\n\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0005\u00a7\u0afb\n\u00a7\u0005\u00a7\u0afd\n\u00a7",
    "\u0003\u00a7\u0007\u00a7\u0b00\n\u00a7\f\u00a7\u000e\u00a7\u0b03\u000b",
    "\u00a7\u0003\u00a7\u0005\u00a7\u0b06\n\u00a7\u0003\u00a8\u0005\u00a8",
    "\u0b09\n\u00a8\u0003\u00a8\u0005\u00a8\u0b0c\n\u00a8\u0003\u00a8\u0003",
    "\u00a8\u0005\u00a8\u0b10\n\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8",
    "\u0005\u00a8\u0b15\n\u00a8\u0003\u00a8\u0003\u00a8\u0007\u00a8\u0b19",
    "\n\u00a8\f\u00a8\u000e\u00a8\u0b1c\u000b\u00a8\u0003\u00a9\u0003\u00a9",
    "\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0007\u00aa\u0b26\n\u00aa\f\u00aa\u000e\u00aa\u0b29\u000b\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0b2f\n\u00ab",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0007\u00ac\u0b3b\n",
    "\u00ac\f\u00ac\u000e\u00ac\u0b3e\u000b\u00ac\u0005\u00ac\u0b40\n\u00ac",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0005\u00ad\u0b4a\n\u00ad\u0003\u00ae\u0003",
    "\u00ae\u0005\u00ae\u0b4e\n\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0007\u00ae\u0b54\n\u00ae\f\u00ae\u000e\u00ae\u0b57\u000b",
    "\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003",
    "\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u0b62\n\u00af",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0",
    "\u0007\u00b0\u0b6a\n\u00b0\f\u00b0\u000e\u00b0\u0b6d\u000b\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0005\u00b0\u0b71\n\u00b0\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0007\u00b1\u0b79\n",
    "\u00b1\f\u00b1\u000e\u00b1\u0b7c\u000b\u00b1\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0007\u00b1\u0b81\n\u00b1\f\u00b1\u000e\u00b1\u0b84\u000b",
    "\u00b1\u0005\u00b1\u0b86\n\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b2",
    "\u0003\u00b2\u0005\u00b2\u0b8c\n\u00b2\u0003\u00b3\u0003\u00b3\u0005",
    "\u00b3\u0b90\n\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4",
    "\u0b95\n\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0007\u00b4\u0b9d\n\u00b4\f\u00b4\u000e\u00b4\u0ba0",
    "\u000b\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u0ba4\n\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0003\u00b5\u0003\u00b5\u0007\u00b5\u0baf\n\u00b5\f\u00b5\u000e",
    "\u00b5\u0bb2\u000b\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0007\u00b6\u0bbb\n\u00b6\f\u00b6",
    "\u000e\u00b6\u0bbe\u000b\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0bc2",
    "\n\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0007\u00b6\u0bca\n\u00b6\f\u00b6\u000e\u00b6\u0bcd\u000b",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0bd1\n\u00b6\u0005\u00b6",
    "\u0bd3\n\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0bd8",
    "\n\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0bdc\n\u00b7\u0003\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0be2\n\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0005\u00b7\u0be6\n\u00b7\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9",
    "\u0003\u00b9\u0007\u00b9\u0bf1\n\u00b9\f\u00b9\u000e\u00b9\u0bf4\u000b",
    "\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u0bf9\n\u00ba",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0007\u00bb",
    "\u0c00\n\u00bb\f\u00bb\u000e\u00bb\u0c03\u000b\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0007\u00bc\u0c0d\n\u00bc\f\u00bc\u000e\u00bc\u0c10\u000b\u00bc",
    "\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd",
    "\u0c17\n\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00bf\u0003",
    "\u00bf\u0007\u00bf\u0c1e\n\u00bf\f\u00bf\u000e\u00bf\u0c21\u000b\u00bf",
    "\u0003\u00bf\u0005\u00bf\u0c24\n\u00bf\u0003\u00bf\u0007\u00bf\u0c27",
    "\n\u00bf\f\u00bf\u000e\u00bf\u0c2a\u000b\u00bf\u0003\u00bf\u0003\u00bf",
    "\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0",
    "\u0005\u00c0\u0c34\n\u00c0\u0005\u00c0\u0c36\n\u00c0\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0007\u00c2\u0c44",
    "\n\u00c2\f\u00c2\u000e\u00c2\u0c47\u000b\u00c2\u0003\u00c3\u0003\u00c3",
    "\u0005\u00c3\u0c4b\n\u00c3\u0003\u00c3\u0003\u00c3\u0007\u00c3\u0c4f",
    "\n\u00c3\f\u00c3\u000e\u00c3\u0c52\u000b\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c4\u0005\u00c4\u0c57\n\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0007",
    "\u00c6\u0c67\n\u00c6\f\u00c6\u000e\u00c6\u0c6a\u000b\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0c70\n\u00c7\u0003",
    "\u00c8\u0005\u00c8\u0c73\n\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0007\u00c8\u0c79\n\u00c8\f\u00c8\u000e\u00c8\u0c7c\u000b",
    "\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0005\u00c9\u0c84\n\u00c9\u0005\u00c9\u0c86\n\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0005\u00c9\u0c8a\n\u00c9\u0003\u00c9\u0005\u00c9\u0c8d",
    "\n\u00c9\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0c92\n\u00ca",
    "\u0005\u00ca\u0c94\n\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0c98",
    "\n\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc",
    "\u0ca4\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003",
    "\u00cd\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0cad\n\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0007\u00ce\u0cb3\n\u00ce\f\u00ce",
    "\u000e\u00ce\u0cb6\u000b\u00ce\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0cba",
    "\n\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0cbe\n\u00cf\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0cc3\n\u00d0\u0003\u00d0\u0005",
    "\u00d0\u0cc6\n\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0007\u00d1\u0ccc\n\u00d1\f\u00d1\u000e\u00d1\u0ccf\u000b\u00d1\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0005\u00d2\u0cd6",
    "\n\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0cdf\n\u00d4\u0003\u00d4\u0005",
    "\u00d4\u0ce2\n\u00d4\u0003\u00d4\u0005\u00d4\u0ce5\n\u00d4\u0003\u00d5",
    "\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0007\u00d5\u0ceb\n\u00d5\f\u00d5",
    "\u000e\u00d5\u0cee\u000b\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003",
    "\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0005\u00d5\u0cf7\n\u00d5",
    "\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d6\u0007\u00d6\u0d01\n\u00d6\f\u00d6\u000e\u00d6",
    "\u0d04\u000b\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0005",
    "\u00d6\u0d0a\n\u00d6\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0d0e\n\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0d12\n\u00d7\u0003\u00d7\u0005",
    "\u00d7\u0d15\n\u00d7\u0003\u00d7\u0005\u00d7\u0d18\n\u00d7\u0003\u00d8",
    "\u0003\u00d8\u0003\u00d8\u0005\u00d8\u0d1d\n\u00d8\u0003\u00d9\u0003",
    "\u00d9\u0003\u00d9\u0005\u00d9\u0d22\n\u00d9\u0003\u00d9\u0005\u00d9",
    "\u0d25\n\u00d9\u0003\u00d9\u0005\u00d9\u0d28\n\u00d9\u0003\u00da\u0003",
    "\u00da\u0006\u00da\u0d2c\n\u00da\r\u00da\u000e\u00da\u0d2d\u0003\u00da",
    "\u0005\u00da\u0d31\n\u00da\u0003\u00da\u0003\u00da\u0003\u00db\u0003",
    "\u00db\u0005\u00db\u0d37\n\u00db\u0003\u00db\u0005\u00db\u0d3a\n\u00db",
    "\u0003\u00dc\u0005\u00dc\u0d3d\n\u00dc\u0003\u00dc\u0006\u00dc\u0d40",
    "\n\u00dc\r\u00dc\u000e\u00dc\u0d41\u0003\u00dc\u0005\u00dc\u0d45\n\u00dc",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0006\u00dd\u0d4b\n",
    "\u00dd\r\u00dd\u000e\u00dd\u0d4c\u0003\u00de\u0003\u00de\u0006\u00de",
    "\u0d51\n\u00de\r\u00de\u000e\u00de\u0d52\u0003\u00df\u0003\u00df\u0003",
    "\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0007\u00df\u0d5b\n\u00df",
    "\f\u00df\u000e\u00df\u0d5e\u000b\u00df\u0003\u00df\u0003\u00df\u0005",
    "\u00df\u0d62\n\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1\u0d6b\n\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0005\u00e1\u0d75\n\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0005\u00e1\u0d79\n\u00e1\u0005\u00e1\u0d7b\n\u00e1\u0003\u00e1\u0005",
    "\u00e1\u0d7e\n\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0007\u00e2\u0d88\n",
    "\u00e2\f\u00e2\u000e\u00e2\u0d8b\u000b\u00e2\u0003\u00e2\u0005\u00e2",
    "\u0d8e\n\u00e2\u0003\u00e2\u0005\u00e2\u0d91\n\u00e2\u0003\u00e3\u0003",
    "\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003",
    "\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003",
    "\u00e5\u0003\u00e5\u0003\u00e5\u0007\u00e5\u0da3\n\u00e5\f\u00e5\u000e",
    "\u00e5\u0da6\u000b\u00e5\u0003\u00e5\u0003\u00e5\u0005\u00e5\u0daa\n",
    "\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0005\u00e5\u0daf\n\u00e5",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6",
    "\u0db6\n\u00e6\u0003\u00e6\u0005\u00e6\u0db9\n\u00e6\u0003\u00e7\u0003",
    "\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0007\u00e7\u0dc0\n\u00e7",
    "\f\u00e7\u000e\u00e7\u0dc3\u000b\u00e7\u0003\u00e7\u0003\u00e7\u0003",
    "\u00e7\u0003\u00e7\u0005\u00e7\u0dc9\n\u00e7\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0005\u00e8\u0dce\n\u00e8\u0003\u00e9\u0003\u00e9\u0005",
    "\u00e9\u0dd2\n\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0dda\n\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0de0\n\u00ea\u0003\u00eb",
    "\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0005\u00eb",
    "\u0de8\n\u00eb\u0003\u00eb\u0005\u00eb\u0deb\n\u00eb\u0003\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0007\u00ec\u0df1\n\u00ec\f\u00ec\u000e",
    "\u00ec\u0df4\u000b\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0005\u00ed\u0dfb\n\u00ed\u0003\u00ed\u0005\u00ed\u0dfe",
    "\n\u00ed\u0003\u00ed\u0005\u00ed\u0e01\n\u00ed\u0003\u00ee\u0003\u00ee",
    "\u0003\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef",
    "\u0e0a\n\u00ef\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005",
    "\u00f0\u0e10\n\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0",
    "\u0005\u00f0\u0e16\n\u00f0\u0005\u00f0\u0e18\n\u00f0\u0003\u00f1\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u0e25\n\u00f1",
    "\u0005\u00f1\u0e27\n\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003",
    "\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u0e30\n\u00f2",
    "\u0005\u00f2\u0e32\n\u00f2\u0003\u00f3\u0003\u00f3\u0005\u00f3\u0e36",
    "\n\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3",
    "\u0e3c\n\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3\u0e40\n\u00f3\u0003",
    "\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f5\u0003",
    "\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f6\u0003\u00f6\u0005",
    "\u00f6\u0e4e\n\u00f6\u0003\u00f6\u0003\u00f6\u0007\u00f6\u0e52\n\u00f6",
    "\f\u00f6\u000e\u00f6\u0e55\u000b\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f7\u0003\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0005",
    "\u00f8\u0e65\n\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8\u0e69\n\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0005\u00f8\u0e7f\n\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8\u0e85\n\u00f8\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8\u0e8b\n\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8\u0e90\n\u00f8\u0003\u00f8",
    "\u0007\u00f8\u0e93\n\u00f8\f\u00f8\u000e\u00f8\u0e96\u000b\u00f8\u0003",
    "\u00f9\u0005\u00f9\u0e99\n\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9",
    "\u0005\u00f9\u0ea4\n\u00f9\u0003\u00f9\u0003\u00f9\u0005\u00f9\u0ea8",
    "\n\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0007\u00f9\u0ead\n\u00f9",
    "\f\u00f9\u000e\u00f9\u0eb0\u000b\u00f9\u0003\u00f9\u0003\u00f9\u0005",
    "\u00f9\u0eb4\n\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0003\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc",
    "\u0003\u00fc\u0003\u00fc\u0005\u00fc\u0ec2\n\u00fc\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00ff\u0003\u00ff\u0003",
    "\u00ff\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0007",
    "\u00ff\u0ed1\n\u00ff\f\u00ff\u000e\u00ff\u0ed4\u000b\u00ff\u0003\u00ff",
    "\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0005\u00ff\u0edb\n",
    "\u00ff\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0101\u0003",
    "\u0101\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003",
    "\u0102\u0005\u0102\u0ee9\n\u0102\u0003\u0102\u0003\u0102\u0003\u0102",
    "\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102",
    "\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102",
    "\u0005\u0102\u0efa\n\u0102\u0003\u0102\u0005\u0102\u0efd\n\u0102\u0007",
    "\u0102\u0eff\n\u0102\f\u0102\u000e\u0102\u0f02\u000b\u0102\u0003\u0103",
    "\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0005\u0103\u0f09\n",
    "\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003",
    "\u0103\u0005\u0103\u0f11\n\u0103\u0003\u0103\u0003\u0103\u0003\u0103",
    "\u0003\u0103\u0003\u0103\u0005\u0103\u0f18\n\u0103\u0003\u0103\u0003",
    "\u0103\u0005\u0103\u0f1c\n\u0103\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0003\u0105\u0003\u0105\u0005\u0105\u0f25\n",
    "\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u0f2a\n\u0105",
    "\u0007\u0105\u0f2c\n\u0105\f\u0105\u000e\u0105\u0f2f\u000b\u0105\u0003",
    "\u0105\u0003\u0105\u0003\u0105\u0007\u0105\u0f34\n\u0105\f\u0105\u000e",
    "\u0105\u0f37\u000b\u0105\u0003\u0105\u0005\u0105\u0f3a\n\u0105\u0003",
    "\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0005\u0106\u0f41",
    "\n\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106",
    "\u0003\u0106\u0003\u0106\u0005\u0106\u0f4a\n\u0106\u0003\u0107\u0003",
    "\u0107\u0003\u0107\u0003\u0108\u0003\u0108\u0003\u0109\u0003\u0109\u0003",
    "\u0109\u0003\u0109\u0003\u0109\u0007\u0109\u0f56\n\u0109\f\u0109\u000e",
    "\u0109\u0f59\u000b\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109",
    "\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0007\u0109\u0f63\n",
    "\u0109\f\u0109\u000e\u0109\u0f66\u000b\u0109\u0003\u0109\u0003\u0109",
    "\u0005\u0109\u0f6a\n\u0109\u0003\u0109\u0003\u0109\u0003\u010a\u0003",
    "\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003",
    "\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003",
    "\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0005\u010a\u0f7f\n\u010a",
    "\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0007\u010a",
    "\u0f86\n\u010a\f\u010a\u000e\u010a\u0f89\u000b\u010a\u0003\u010b\u0003",
    "\u010b\u0005\u010b\u0f8d\n\u010b\u0003\u010c\u0005\u010c\u0f90\n\u010c",
    "\u0003\u010c\u0003\u010c\u0003\u010c\u0006\u010c\u0f95\n\u010c\r\u010c",
    "\u000e\u010c\u0f96\u0003\u010c\u0005\u010c\u0f9a\n\u010c\u0003\u010c",
    "\u0003\u010c\u0005\u010c\u0f9e\n\u010c\u0003\u010c\u0005\u010c\u0fa1",
    "\n\u010c\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d",
    "\u0005\u010d\u0fa8\n\u010d\u0003\u010e\u0005\u010e\u0fab\n\u010e\u0003",
    "\u010e\u0003\u010e\u0006\u010e\u0faf\n\u010e\r\u010e\u000e\u010e\u0fb0",
    "\u0003\u010e\u0005\u010e\u0fb4\n\u010e\u0003\u010e\u0003\u010e\u0005",
    "\u010e\u0fb8\n\u010e\u0003\u010e\u0005\u010e\u0fbb\n\u010e\u0003\u010f",
    "\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0005\u010f\u0fc2\n",
    "\u010f\u0003\u0110\u0003\u0110\u0003\u0110\u0005\u0110\u0fc7\n\u0110",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u0fd8\n\u0111\u0005",
    "\u0111\u0fda\n\u0111\u0003\u0112\u0003\u0112\u0005\u0112\u0fde\n\u0112",
    "\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0007\u0113\u0fe4\n",
    "\u0113\f\u0113\u000e\u0113\u0fe7\u000b\u0113\u0003\u0114\u0003\u0114",
    "\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114",
    "\u0003\u0114\u0005\u0114\u0ff2\n\u0114\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0005\u0115\u0ff8\n\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0005\u0115\u1002\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u1012",
    "\n\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u1016\n\u0115\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0006\u0115\u101d\n",
    "\u0115\r\u0115\u000e\u0115\u101e\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0005\u0115\u1025\n\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u1033\n\u0115",
    "\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0007\u0115\u103c\n\u0115\f\u0115\u000e\u0115\u103f\u000b",
    "\u0115\u0003\u0115\u0005\u0115\u1042\n\u0115\u0003\u0115\u0005\u0115",
    "\u1045\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u104e\n\u0115\u0003\u0115",
    "\u0003\u0115\u0007\u0115\u1052\n\u0115\f\u0115\u000e\u0115\u1055\u000b",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0005\u0115\u105e\n\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u1066\n",
    "\u0115\u0003\u0115\u0005\u0115\u1069\n\u0115\u0003\u0115\u0005\u0115",
    "\u106c\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u1075\n\u0115\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0005\u0115\u107a\n\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0007\u0115\u1081\n\u0115",
    "\f\u0115\u000e\u0115\u1084\u000b\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0005\u0115\u1089\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0005\u0115\u108e\n\u0115\u0003\u0115\u0005\u0115\u1091\n\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u1096\n\u0115\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0005\u0115\u109b\n\u0115\u0007\u0115\u109d",
    "\n\u0115\f\u0115\u000e\u0115\u10a0\u000b\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0005\u0115\u10a5\n\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0005\u0115\u10ab\n\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115",
    "\u10b4\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u10b9",
    "\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0005\u0115\u10c1\n\u0115\u0003\u0115\u0003\u0115\u0005",
    "\u0115\u10c5\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115",
    "\u10ca\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005",
    "\u0115\u10d0\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0005\u0115\u10d7\n\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0005\u0115\u10dc\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0005\u0115\u10e3\n\u0115\u0003\u0115\u0003",
    "\u0115\u0005\u0115\u10e7\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0005\u0115\u10ec\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u10f4\n\u0115\u0003\u0115",
    "\u0005\u0115\u10f7\n\u0115\u0003\u0115\u0005\u0115\u10fa\n\u0115\u0003",
    "\u0115\u0005\u0115\u10fd\n\u0115\u0003\u0115\u0003\u0115\u0005\u0115",
    "\u1101\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u1106",
    "\n\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u110b\n\u0115",
    "\u0003\u0115\u0003\u0115\u0005\u0115\u110f\n\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u1116\n\u0115",
    "\u0003\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u111b\n\u0115\u0005",
    "\u0115\u111d\n\u0115\u0003\u0116\u0003\u0116\u0003\u0116\u0005\u0116",
    "\u1122\n\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0005",
    "\u0116\u1128\n\u0116\u0003\u0116\u0005\u0116\u112b\n\u0116\u0003\u0116",
    "\u0003\u0116\u0005\u0116\u112f\n\u0116\u0005\u0116\u1131\n\u0116\u0003",
    "\u0117\u0003\u0117\u0003\u0118\u0003\u0118\u0003\u0119\u0003\u0119\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0005\u011a\u113c\n\u011a\u0003\u011a",
    "\u0003\u011a\u0005\u011a\u1140\n\u011a\u0005\u011a\u1142\n\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003",
    "\u011b\u0003\u011b\u0003\u011b\u0005\u011b\u114d\n\u011b\u0003\u011c",
    "\u0003\u011c\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0005\u011d\u1158\n\u011d\u0003\u011e\u0003",
    "\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0007\u011e\u115f\n\u011e",
    "\f\u011e\u000e\u011e\u1162\u000b\u011e\u0005\u011e\u1164\n\u011e\u0003",
    "\u011f\u0003\u011f\u0005\u011f\u1168\n\u011f\u0003\u011f\u0005\u011f",
    "\u116b\n\u011f\u0003\u011f\u0003\u011f\u0005\u011f\u116f\n\u011f\u0003",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0121\u0003\u0121\u0003",
    "\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0005\u0121\u117c",
    "\n\u0121\u0003\u0122\u0003\u0122\u0003\u0122\u0005\u0122\u1181\n\u0122",
    "\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0007\u0122\u1187\n",
    "\u0122\f\u0122\u000e\u0122\u118a\u000b\u0122\u0003\u0122\u0003\u0122",
    "\u0003\u0122\u0003\u0122\u0005\u0122\u1190\n\u0122\u0003\u0123\u0003",
    "\u0123\u0003\u0123\u0005\u0123\u1195\n\u0123\u0003\u0123\u0003\u0123",
    "\u0005\u0123\u1199\n\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0005",
    "\u0123\u119e\n\u0123\u0003\u0124\u0003\u0124\u0003\u0124\u0005\u0124",
    "\u11a3\n\u0124\u0003\u0124\u0005\u0124\u11a6\n\u0124\u0003\u0124\u0003",
    "\u0124\u0003\u0124\u0007\u0124\u11ab\n\u0124\f\u0124\u000e\u0124\u11ae",
    "\u000b\u0124\u0003\u0124\u0003\u0124\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0005\u0125\u11b7\n\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0007\u0125\u11bd\n\u0125\f\u0125\u000e",
    "\u0125\u11c0\u000b\u0125\u0003\u0125\u0005\u0125\u11c3\n\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003",
    "\u0126\u0003\u0126\u0005\u0126\u11cd\n\u0126\u0003\u0126\u0005\u0126",
    "\u11d0\n\u0126\u0005\u0126\u11d2\n\u0126\u0003\u0127\u0003\u0127\u0003",
    "\u0127\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005",
    "\u0128\u11dc\n\u0128\u0005\u0128\u11de\n\u0128\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0005\u0129\u11e4\n\u0129\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0005\u012a\u11ea\n\u012a\u0005\u012a",
    "\u11ec\n\u012a\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012c\u0003",
    "\u012c\u0003\u012c\u0003\u012d\u0003\u012d\u0003\u012d\u0003\u012d\u0003",
    "\u012d\u0003\u012d\u0005\u012d\u11fa\n\u012d\u0005\u012d\u11fc\n\u012d",
    "\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e",
    "\u0005\u012e\u1204\n\u012e\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u120d\n\u012f",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0005\u0130\u1216\n\u0130\u0003\u0131\u0003\u0131\u0003",
    "\u0132\u0003\u0132\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005",
    "\u0133\u1220\n\u0133\u0003\u0134\u0003\u0134\u0005\u0134\u1224\n\u0134",
    "\u0003\u0134\u0003\u0134\u0003\u0135\u0005\u0135\u1229\n\u0135\u0003",
    "\u0135\u0003\u0135\u0005\u0135\u122d\n\u0135\u0003\u0135\u0005\u0135",
    "\u1230\n\u0135\u0003\u0136\u0003\u0136\u0005\u0136\u1234\n\u0136\u0003",
    "\u0137\u0003\u0137\u0003\u0138\u0003\u0138\u0003\u0138\u0005\u0138\u123b",
    "\n\u0138\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u013a",
    "\u0003\u013a\u0003\u013a\u0003\u013a\u0007\u013a\u1245\n\u013a\f\u013a",
    "\u000e\u013a\u1248\u000b\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0003",
    "\u013a\u0003\u013a\u0003\u013a\u0007\u013a\u1250\n\u013a\f\u013a\u000e",
    "\u013a\u1253\u000b\u013a\u0005\u013a\u1255\n\u013a\u0003\u013b\u0003",
    "\u013b\u0005\u013b\u1259\n\u013b\u0003\u013c\u0003\u013c\u0003\u013d",
    "\u0003\u013d\u0003\u013e\u0003\u013e\u0003\u013f\u0003\u013f\u0003\u0140",
    "\u0003\u0140\u0003\u0141\u0003\u0141\u0003\u0142\u0003\u0142\u0003\u0142",
    "\u0007\u0142\u126a\n\u0142\f\u0142\u000e\u0142\u126d\u000b\u0142\u0003",
    "\u0142\u0003\u0142\u0005\u0142\u1271\n\u0142\u0003\u0143\u0003\u0143",
    "\u0003\u0144\u0003\u0144\u0003\u0144\u0005\u0144\u1278\n\u0144\u0003",
    "\u0145\u0003\u0145\u0003\u0146\u0003\u0146\u0003\u0147\u0003\u0147\u0003",
    "\u0148\u0003\u0148\u0003\u0148\u0007\u0148\u1283\n\u0148\f\u0148\u000e",
    "\u0148\u1286\u000b\u0148\u0003\u0149\u0003\u0149\u0003\u014a\u0003\u014a",
    "\u0003\u014a\u0007\u014a\u128d\n\u014a\f\u014a\u000e\u014a\u1290\u000b",
    "\u014a\u0003\u014a\u0003\u014a\u0005\u014a\u1294\n\u014a\u0003\u014b",
    "\u0003\u014b\u0003\u014c\u0003\u014c\u0003\u014c\u0007\u014c\u129b\n",
    "\u014c\f\u014c\u000e\u014c\u129e\u000b\u014c\u0003\u014d\u0003\u014d",
    "\u0003\u014d\u0007\u014d\u12a3\n\u014d\f\u014d\u000e\u014d\u12a6\u000b",
    "\u014d\u0003\u014e\u0003\u014e\u0003\u014e\u0007\u014e\u12ab\n\u014e",
    "\f\u014e\u000e\u014e\u12ae\u000b\u014e\u0003\u014f\u0003\u014f\u0003",
    "\u014f\u0005\u014f\u12b3\n\u014f\u0003\u0150\u0003\u0150\u0003\u0150",
    "\u0005\u0150\u12b8\n\u0150\u0003\u0151\u0003\u0151\u0003\u0151\u0005",
    "\u0151\u12bd\n\u0151\u0003\u0152\u0003\u0152\u0005\u0152\u12c1\n\u0152",
    "\u0003\u0153\u0003\u0153\u0003\u0154\u0003\u0154\u0005\u0154\u12c7\n",
    "\u0154\u0003\u0155\u0003\u0155\u0005\u0155\u12cb\n\u0155\u0003\u0156",
    "\u0003\u0156\u0003\u0156\u0005\u0156\u12d0\n\u0156\u0003\u0157\u0003",
    "\u0157\u0003\u0158\u0003\u0158\u0003\u0158\u0007\u0158\u12d7\n\u0158",
    "\f\u0158\u000e\u0158\u12da\u000b\u0158\u0003\u0159\u0003\u0159\u0003",
    "\u0159\u0003\u0159\u0005\u0159\u12e0\n\u0159\u0003\u015a\u0003\u015a",
    "\u0003\u015a\u0007\u015a\u12e5\n\u015a\f\u015a\u000e\u015a\u12e8\u000b",
    "\u015a\u0003\u015b\u0003\u015b\u0003\u015c\u0003\u015c\u0003\u015c\u0003",
    "\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0005\u015c\u12f3\n\u015c",
    "\u0003\u015d\u0003\u015d\u0005\u015d\u12f7\n\u015d\u0003\u015d\u0003",
    "\u015d\u0007\u015d\u12fb\n\u015d\f\u015d\u000e\u015d\u12fe\u000b\u015d",
    "\u0003\u015d\u0003\u015d\u0005\u015d\u1302\n\u015d\u0003\u015e\u0003",
    "\u015e\u0003\u015e\u0005\u015e\u1307\n\u015e\u0005\u015e\u1309\n\u015e",
    "\u0003\u015e\u0003\u015e\u0003\u015e\u0005\u015e\u130e\n\u015e\u0007",
    "\u015e\u1310\n\u015e\f\u015e\u000e\u015e\u1313\u000b\u015e\u0003\u015e",
    "\u0003\u015e\u0005\u015e\u1317\n\u015e\u0003\u015f\u0003\u015f\u0003",
    "\u015f\u0003\u015f\u0003\u015f\u0005\u015f\u131e\n\u015f\u0003\u015f",
    "\u0003\u015f\u0003\u015f\u0005\u015f\u1323\n\u015f\u0005\u015f\u1325",
    "\n\u015f\u0005\u015f\u1327\n\u015f\u0003\u015f\u0003\u015f\u0003\u015f",
    "\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0005\u015f",
    "\u1331\n\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0005\u015f\u1336",
    "\n\u015f\u0007\u015f\u1338\n\u015f\f\u015f\u000e\u015f\u133b\u000b\u015f",
    "\u0005\u015f\u133d\n\u015f\u0003\u015f\u0003\u015f\u0005\u015f\u1341",
    "\n\u015f\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0161\u0003\u0161",
    "\u0003\u0161\u0003\u0161\u0005\u0161\u134a\n\u0161\u0003\u0161\u0003",
    "\u0161\u0003\u0162\u0003\u0162\u0005\u0162\u1350\n\u0162\u0003\u0162",
    "\u0003\u0162\u0005\u0162\u1354\n\u0162\u0005\u0162\u1356\n\u0162\u0003",
    "\u0163\u0003\u0163\u0005\u0163\u135a\n\u0163\u0003\u0163\u0003\u0163",
    "\u0005\u0163\u135e\n\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u1362",
    "\n\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163",
    "\u0003\u0163\u0005\u0163\u136a\n\u0163\u0003\u0163\u0003\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u1372\n\u0163",
    "\u0005\u0163\u1374\n\u0163\u0003\u0164\u0003\u0164\u0003\u0164\u0003",
    "\u0164\u0005\u0164\u137a\n\u0164\u0003\u0164\u0005\u0164\u137d\n\u0164",
    "\u0003\u0164\u0003\u0164\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0005\u0165\u1395\n",
    "\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0005",
    "\u0165\u139c\n\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0005\u0165\u13bd\n\u0165\u0003",
    "\u0166\u0003\u0166\u0003\u0166\u0005\u0166\u13c2\n\u0166\u0003\u0166",
    "\u0005\u0166\u13c5\n\u0166\u0003\u0166\u0003\u0166\u0003\u0166\u0005",
    "\u0166\u13ca\n\u0166\u0005\u0166\u13cc\n\u0166\u0003\u0166\u0003\u0166",
    "\u0007\u0166\u13d0\n\u0166\f\u0166\u000e\u0166\u13d3\u000b\u0166\u0003",
    "\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0005\u0167\u13d9\n\u0167",
    "\u0003\u0168\u0003\u0168\u0003\u0169\u0003\u0169\u0003\u0169\u0005\u0169",
    "\u13e0\n\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0005",
    "\u0169\u13e6\n\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169",
    "\u0005\u0169\u13ec\n\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003",
    "\u0169\u0005\u0169\u13f2\n\u0169\u0003\u0169\u0003\u0169\u0003\u0169",
    "\u0005\u0169\u13f7\n\u0169\u0005\u0169\u13f9\n\u0169\u0003\u0169\u0005",
    "\u0169\u13fc\n\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169",
    "\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0005\u0169\u1406\n",
    "\u0169\u0003\u0169\u0005\u0169\u1409\n\u0169\u0005\u0169\u140b\n\u0169",
    "\u0005\u0169\u140d\n\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003",
    "\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003",
    "\u0169\u0003\u0169\u0003\u0169\u0005\u0169\u141b\n\u0169\u0003\u016a",
    "\u0003\u016a\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016c\u0003\u016c",
    "\u0003\u016d\u0003\u016d\u0003\u016e\u0003\u016e\u0005\u016e\u1428\n",
    "\u016e\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0003",
    "\u016f\u0003\u016f\u0005\u016f\u1431\n\u016f\u0003\u0170\u0003\u0170",
    "\u0003\u0170\u0005\u0170\u1436\n\u0170\u0003\u0171\u0003\u0171\u0003",
    "\u0171\u0005\u0171\u143b\n\u0171\u0003\u0172\u0003\u0172\u0003\u0172",
    "\u0005\u0172\u1440\n\u0172\u0003\u0173\u0003\u0173\u0003\u0173\u0003",
    "\u0173\u0003\u0174\u0003\u0174\u0003\u0174\u0002\u0006\u013e\u01ee\u0202",
    "\u0212\u0175\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
    "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094",
    "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac",
    "\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4",
    "\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc",
    "\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4",
    "\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c",
    "\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124",
    "\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c",
    "\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154",
    "\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c",
    "\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184",
    "\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c",
    "\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4",
    "\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc",
    "\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4",
    "\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc",
    "\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214",
    "\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c",
    "\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244",
    "\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c",
    "\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274",
    "\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c",
    "\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4",
    "\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc",
    "\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4",
    "\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u0002R\u0003",
    "\u0002\u01f7\u01f7\u0004\u0002\u000f\u000f\u00bc\u00bc\u0004\u0002\b",
    "\b\u011d\u011d\u0004\u0002\u009f\u009f\u012a\u012a\u0004\u000288\u010d",
    "\u010d\u0005\u0002##\u0114\u0114\u0167\u0167\u0004\u0002mmyy\u0004\u0002",
    "\u0006\u0006\u001a\u001a\u0005\u0002hh\u00b3\u00b3\u0195\u0195\u0005",
    "\u0002\u00ef\u00ef\u0106\u0106\u0117\u0117\u0004\u0002\u0097\u0097\u019b",
    "\u019b\u0004\u0002##\u0167\u0167\u0004\u0002\u0005\u0005rr\u0005\u0002",
    "\u0005\u0005rr\u00e3\u00e3\u0005\u0002UU\u010c\u010c\u0168\u0168\u0004",
    "\u0002\u00d7\u00d7\u010d\u010d\u0004\u0002\u00db\u00db\u016f\u016f\u0005",
    "\u0002\u008f\u008f\u00b4\u00b4\u0113\u0113\u0004\u0002SSgg\u0006\u0002",
    "\u00a6\u00a6\u00b2\u00b2\u00f3\u00f3\u0110\u0110\u0004\u0002dd\u01f4",
    "\u01f4\u0003\u0002\u011b\u011c\u0003\u0003\u01f7\u01f7\u0003\u0002\u013a",
    "\u013b\u0004\u0002\u0108\u0108\u01af\u01af\u0003\u0002DE\u0004\u0002",
    "ff\u00a5\u00a5\u0004\u0002\u00fc\u00fc\u01a5\u01a5\u0004\u0002\u0019",
    "\u0019\u00a5\u00a5\u0004\u0002&&ii\u0005\u0002\t\too\u0191\u0191\u0004",
    "\u0002PP\u00e8\u00e8\u0005\u0002\u0099\u0099\u00c6\u00c6\u013f\u013f",
    "\u0004\u0002\u014b\u014b\u017c\u017c\u0005\u0002\u014b\u014b\u0165\u0165",
    "\u017c\u017c\u0004\u0002\u0084\u0084\u00a7\u00a7\u0004\u0002QQ\u0141",
    "\u0141\u0004\u0002\u00a4\u00a4\u00c1\u00c1\u0004\u0002\t\t\u0196\u0196",
    "\u0004\u0002\u0017\u0017\u0153\u0153\u0004\u0002\u0010\u0010jj\u0004",
    "\u0002\u0090\u0090\u00c3\u00c3\u0004\u0002\t\t\u0090\u0090\u0003\u0002",
    "\u0178\u0179\u0004\u0002\u00db\u00db\u0172\u0172\u0003\u0002\u00c9\u00cc",
    "\u0005\u0002\u01e9\u01e9\u01ee\u01ee\u01f2\u01f2\u0003\u0002\u01ef\u01f0",
    "\u0004\u0002cc\u00a9\u00a9\u0006\u0002\t\t\r\r\u0087\u0087\u0166\u0166",
    "\u0004\u000200\u01b3\u01b3\u0004\u0002oo\u0191\u0191\u0004\u0002-->",
    ">\u0004\u0002\u0091\u0091\u00c4\u00c4\u0004\u000222\u00ec\u00ec\u0005",
    "\u0002%%\u00c5\u00c5\u0185\u0185\u0004\u0002\u01b4\u01b4\u01b7\u01b7",
    "\u0004\u0002||\u00f5\u00f5\u0004\u0002\u0080\u0080\u00e6\u00e6\u0004",
    "\u0002GGpp\u0004\u0002\u00a1\u00a1\u015c\u015c\u0003\u0002\u01d0\u01df",
    "\u0003\u0002\u01c9\u01cf\u0003\u0002\u01c3\u01c8\u0004\u0002\u012a\u012a",
    "\u0144\u0144\u0004\u0002\u0093\u0093\u0124\u0124\u0004\u0002\u00fa\u00fa",
    "\u014a\u014a\u0004\u0002\u010f\u010f\u0169\u0169\u0005\u0002\u008c\u008c",
    "\u0176\u0176\u01a6\u01a6\u0004\u0002<<\u0140\u0140\u0005\u0002<<\u00f8",
    "\u00f8\u0140\u0140\u0004\u0002\u0118\u0118\u0173\u0173\u0004\u0002\u00a4",
    "\u00a4\u0136\u0136\u0004\u0002ZZ\u01bf\u01bf\u0004\u0002\u00e4\u00e4",
    "\u014d\u014d\u0004\u0002))11\u0006\u0002ZZ\u00a2\u00a2\u00de\u00de\u014d",
    "\u014d\u0003\u0002\u01e5\u01e6\u0004\u0002\u01e0\u01e0\u01e7\u01e7G",
    "\u0002\u0004\b\u000b\u000b\u000e\u000e\u0011\u001a\u001d%\'\')*,.03",
    "5@CNPQSXZ`bcegknpqsuxz|\u0084\u0086\u0086\u0088\u008c\u008f\u0094\u0096",
    "\u0097\u0099\u009a\u009e\u009f\u00a1\u00a2\u00a4\u00a5\u00a7\u00aa\u00ac",
    "\u00b2\u00b4\u00b7\u00b9\u00b9\u00bb\u00bb\u00bd\u00c8\u00ca\u00ce\u00d0",
    "\u00dc\u00de\u00e0\u00e2\u00f1\u00f3\u00f5\u00f8\u00f8\u00fa\u00fa\u00fe",
    "\u0102\u0104\u0106\u0108\u0109\u010c\u010c\u010e\u011a\u011d\u011d\u011f",
    "\u0126\u0129\u013d\u013f\u014b\u014d\u014f\u0151\u0151\u0153\u015a\u015c",
    "\u0161\u0163\u016a\u016c\u0177\u017b\u0183\u0185\u018a\u018c\u018f\u0192",
    "\u0192\u0194\u0194\u0196\u0199\u019b\u019c\u019e\u01a7\u01a9\u01a9\u01ab",
    "\u01ab\u01ad\u01df\u020a\u020a\u169d\u0002\u02e9\u0003\u0002\u0002\u0002",
    "\u0004\u02f0\u0003\u0002\u0002\u0002\u0006\u0307\u0003\u0002\u0002\u0002",
    "\b\u031c\u0003\u0002\u0002\u0002\n\u031e\u0003\u0002\u0002\u0002\f\u0322",
    "\u0003\u0002\u0002\u0002\u000e\u0338\u0003\u0002\u0002\u0002\u0010\u036a",
    "\u0003\u0002\u0002\u0002\u0012\u036e\u0003\u0002\u0002\u0002\u0014\u0386",
    "\u0003\u0002\u0002\u0002\u0016\u038a\u0003\u0002\u0002\u0002\u0018\u0396",
    "\u0003\u0002\u0002\u0002\u001a\u03a4\u0003\u0002\u0002\u0002\u001c\u03ab",
    "\u0003\u0002\u0002\u0002\u001e\u03bf\u0003\u0002\u0002\u0002 \u03c9",
    "\u0003\u0002\u0002\u0002\"\u03da\u0003\u0002\u0002\u0002$\u03f2\u0003",
    "\u0002\u0002\u0002&\u03f4\u0003\u0002\u0002\u0002(\u0405\u0003\u0002",
    "\u0002\u0002*\u0428\u0003\u0002\u0002\u0002,\u042a\u0003\u0002\u0002",
    "\u0002.\u042e\u0003\u0002\u0002\u00020\u0444\u0003\u0002\u0002\u0002",
    "2\u0467\u0003\u0002\u0002\u00024\u046b\u0003\u0002\u0002\u00026\u0482",
    "\u0003\u0002\u0002\u00028\u0499\u0003\u0002\u0002\u0002:\u04a2\u0003",
    "\u0002\u0002\u0002<\u04ab\u0003\u0002\u0002\u0002>\u04b4\u0003\u0002",
    "\u0002\u0002@\u04b8\u0003\u0002\u0002\u0002B\u04bd\u0003\u0002\u0002",
    "\u0002D\u04d5\u0003\u0002\u0002\u0002F\u04d7\u0003\u0002\u0002\u0002",
    "H\u04db\u0003\u0002\u0002\u0002J\u050f\u0003\u0002\u0002\u0002L\u052b",
    "\u0003\u0002\u0002\u0002N\u052d\u0003\u0002\u0002\u0002P\u053b\u0003",
    "\u0002\u0002\u0002R\u0547\u0003\u0002\u0002\u0002T\u054c\u0003\u0002",
    "\u0002\u0002V\u0552\u0003\u0002\u0002\u0002X\u0555\u0003\u0002\u0002",
    "\u0002Z\u055e\u0003\u0002\u0002\u0002\\\u056b\u0003\u0002\u0002\u0002",
    "^\u057c\u0003\u0002\u0002\u0002`\u058d\u0003\u0002\u0002\u0002b\u0595",
    "\u0003\u0002\u0002\u0002d\u059a\u0003\u0002\u0002\u0002f\u05aa\u0003",
    "\u0002\u0002\u0002h\u05ae\u0003\u0002\u0002\u0002j\u05c6\u0003\u0002",
    "\u0002\u0002l\u05c9\u0003\u0002\u0002\u0002n\u05cf\u0003\u0002\u0002",
    "\u0002p\u05d9\u0003\u0002\u0002\u0002r\u05e2\u0003\u0002\u0002\u0002",
    "t\u05fe\u0003\u0002\u0002\u0002v\u0604\u0003\u0002\u0002\u0002x\u0607",
    "\u0003\u0002\u0002\u0002z\u060e\u0003\u0002\u0002\u0002|\u0616\u0003",
    "\u0002\u0002\u0002~\u0622\u0003\u0002\u0002\u0002\u0080\u0624\u0003",
    "\u0002\u0002\u0002\u0082\u0628\u0003\u0002\u0002\u0002\u0084\u062e\u0003",
    "\u0002\u0002\u0002\u0086\u064a\u0003\u0002\u0002\u0002\u0088\u066c\u0003",
    "\u0002\u0002\u0002\u008a\u069c\u0003\u0002\u0002\u0002\u008c\u06a6\u0003",
    "\u0002\u0002\u0002\u008e\u06a8\u0003\u0002\u0002\u0002\u0090\u06ad\u0003",
    "\u0002\u0002\u0002\u0092\u06bb\u0003\u0002\u0002\u0002\u0094\u06bd\u0003",
    "\u0002\u0002\u0002\u0096\u06c2\u0003\u0002\u0002\u0002\u0098\u06d2\u0003",
    "\u0002\u0002\u0002\u009a\u06f3\u0003\u0002\u0002\u0002\u009c\u0716\u0003",
    "\u0002\u0002\u0002\u009e\u071a\u0003\u0002\u0002\u0002\u00a0\u0729\u0003",
    "\u0002\u0002\u0002\u00a2\u072b\u0003\u0002\u0002\u0002\u00a4\u072e\u0003",
    "\u0002\u0002\u0002\u00a6\u0732\u0003\u0002\u0002\u0002\u00a8\u073a\u0003",
    "\u0002\u0002\u0002\u00aa\u0754\u0003\u0002\u0002\u0002\u00ac\u0756\u0003",
    "\u0002\u0002\u0002\u00ae\u075a\u0003\u0002\u0002\u0002\u00b0\u075d\u0003",
    "\u0002\u0002\u0002\u00b2\u0761\u0003\u0002\u0002\u0002\u00b4\u0766\u0003",
    "\u0002\u0002\u0002\u00b6\u076a\u0003\u0002\u0002\u0002\u00b8\u077b\u0003",
    "\u0002\u0002\u0002\u00ba\u0788\u0003\u0002\u0002\u0002\u00bc\u0799\u0003",
    "\u0002\u0002\u0002\u00be\u07a6\u0003\u0002\u0002\u0002\u00c0\u07b2\u0003",
    "\u0002\u0002\u0002\u00c2\u07b4\u0003\u0002\u0002\u0002\u00c4\u07c2\u0003",
    "\u0002\u0002\u0002\u00c6\u07d3\u0003\u0002\u0002\u0002\u00c8\u07ec\u0003",
    "\u0002\u0002\u0002\u00ca\u07f6\u0003\u0002\u0002\u0002\u00cc\u07fa\u0003",
    "\u0002\u0002\u0002\u00ce\u081f\u0003\u0002\u0002\u0002\u00d0\u0821\u0003",
    "\u0002\u0002\u0002\u00d2\u083a\u0003\u0002\u0002\u0002\u00d4\u0845\u0003",
    "\u0002\u0002\u0002\u00d6\u084c\u0003\u0002\u0002\u0002\u00d8\u0850\u0003",
    "\u0002\u0002\u0002\u00da\u0862\u0003\u0002\u0002\u0002\u00dc\u086a\u0003",
    "\u0002\u0002\u0002\u00de\u0875\u0003\u0002\u0002\u0002\u00e0\u087c\u0003",
    "\u0002\u0002\u0002\u00e2\u0880\u0003\u0002\u0002\u0002\u00e4\u08a0\u0003",
    "\u0002\u0002\u0002\u00e6\u08a4\u0003\u0002\u0002\u0002\u00e8\u08a9\u0003",
    "\u0002\u0002\u0002\u00ea\u08b1\u0003\u0002\u0002\u0002\u00ec\u08b9\u0003",
    "\u0002\u0002\u0002\u00ee\u08bc\u0003\u0002\u0002\u0002\u00f0\u08cc\u0003",
    "\u0002\u0002\u0002\u00f2\u08d1\u0003\u0002\u0002\u0002\u00f4\u08d5\u0003",
    "\u0002\u0002\u0002\u00f6\u08f9\u0003\u0002\u0002\u0002\u00f8\u08fb\u0003",
    "\u0002\u0002\u0002\u00fa\u0911\u0003\u0002\u0002\u0002\u00fc\u0913\u0003",
    "\u0002\u0002\u0002\u00fe\u0918\u0003\u0002\u0002\u0002\u0100\u091a\u0003",
    "\u0002\u0002\u0002\u0102\u091c\u0003\u0002\u0002\u0002\u0104\u091e\u0003",
    "\u0002\u0002\u0002\u0106\u0922\u0003\u0002\u0002\u0002\u0108\u0927\u0003",
    "\u0002\u0002\u0002\u010a\u092d\u0003\u0002\u0002\u0002\u010c\u093b\u0003",
    "\u0002\u0002\u0002\u010e\u094f\u0003\u0002\u0002\u0002\u0110\u0954\u0003",
    "\u0002\u0002\u0002\u0112\u0961\u0003\u0002\u0002\u0002\u0114\u0963\u0003",
    "\u0002\u0002\u0002\u0116\u0971\u0003\u0002\u0002\u0002\u0118\u097b\u0003",
    "\u0002\u0002\u0002\u011a\u0981\u0003\u0002\u0002\u0002\u011c\u0983\u0003",
    "\u0002\u0002\u0002\u011e\u0986\u0003\u0002\u0002\u0002\u0120\u098b\u0003",
    "\u0002\u0002\u0002\u0122\u09a3\u0003\u0002\u0002\u0002\u0124\u09b2\u0003",
    "\u0002\u0002\u0002\u0126\u09b4\u0003\u0002\u0002\u0002\u0128\u09c9\u0003",
    "\u0002\u0002\u0002\u012a\u09d8\u0003\u0002\u0002\u0002\u012c\u09ee\u0003",
    "\u0002\u0002\u0002\u012e\u09f5\u0003\u0002\u0002\u0002\u0130\u0a02\u0003",
    "\u0002\u0002\u0002\u0132\u0a05\u0003\u0002\u0002\u0002\u0134\u0a1a\u0003",
    "\u0002\u0002\u0002\u0136\u0a1e\u0003\u0002\u0002\u0002\u0138\u0a27\u0003",
    "\u0002\u0002\u0002\u013a\u0a42\u0003\u0002\u0002\u0002\u013c\u0a6d\u0003",
    "\u0002\u0002\u0002\u013e\u0a83\u0003\u0002\u0002\u0002\u0140\u0a94\u0003",
    "\u0002\u0002\u0002\u0142\u0a96\u0003\u0002\u0002\u0002\u0144\u0ac8\u0003",
    "\u0002\u0002\u0002\u0146\u0aca\u0003\u0002\u0002\u0002\u0148\u0acd\u0003",
    "\u0002\u0002\u0002\u014a\u0ad5\u0003\u0002\u0002\u0002\u014c\u0afc\u0003",
    "\u0002\u0002\u0002\u014e\u0b08\u0003\u0002\u0002\u0002\u0150\u0b1d\u0003",
    "\u0002\u0002\u0002\u0152\u0b20\u0003\u0002\u0002\u0002\u0154\u0b2c\u0003",
    "\u0002\u0002\u0002\u0156\u0b30\u0003\u0002\u0002\u0002\u0158\u0b49\u0003",
    "\u0002\u0002\u0002\u015a\u0b4b\u0003\u0002\u0002\u0002\u015c\u0b5c\u0003",
    "\u0002\u0002\u0002\u015e\u0b63\u0003\u0002\u0002\u0002\u0160\u0b72\u0003",
    "\u0002\u0002\u0002\u0162\u0b89\u0003\u0002\u0002\u0002\u0164\u0b8f\u0003",
    "\u0002\u0002\u0002\u0166\u0b91\u0003\u0002\u0002\u0002\u0168\u0ba9\u0003",
    "\u0002\u0002\u0002\u016a\u0bc1\u0003\u0002\u0002\u0002\u016c\u0be5\u0003",
    "\u0002\u0002\u0002\u016e\u0be7\u0003\u0002\u0002\u0002\u0170\u0beb\u0003",
    "\u0002\u0002\u0002\u0172\u0bf8\u0003\u0002\u0002\u0002\u0174\u0bfa\u0003",
    "\u0002\u0002\u0002\u0176\u0c06\u0003\u0002\u0002\u0002\u0178\u0c16\u0003",
    "\u0002\u0002\u0002\u017a\u0c18\u0003\u0002\u0002\u0002\u017c\u0c1b\u0003",
    "\u0002\u0002\u0002\u017e\u0c35\u0003\u0002\u0002\u0002\u0180\u0c37\u0003",
    "\u0002\u0002\u0002\u0182\u0c3b\u0003\u0002\u0002\u0002\u0184\u0c4a\u0003",
    "\u0002\u0002\u0002\u0186\u0c56\u0003\u0002\u0002\u0002\u0188\u0c5e\u0003",
    "\u0002\u0002\u0002\u018a\u0c62\u0003\u0002\u0002\u0002\u018c\u0c6d\u0003",
    "\u0002\u0002\u0002\u018e\u0c72\u0003\u0002\u0002\u0002\u0190\u0c7f\u0003",
    "\u0002\u0002\u0002\u0192\u0c93\u0003\u0002\u0002\u0002\u0194\u0c9c\u0003",
    "\u0002\u0002\u0002\u0196\u0c9e\u0003\u0002\u0002\u0002\u0198\u0ca5\u0003",
    "\u0002\u0002\u0002\u019a\u0caa\u0003\u0002\u0002\u0002\u019c\u0cb7\u0003",
    "\u0002\u0002\u0002\u019e\u0cbf\u0003\u0002\u0002\u0002\u01a0\u0cc7\u0003",
    "\u0002\u0002\u0002\u01a2\u0cd5\u0003\u0002\u0002\u0002\u01a4\u0cd7\u0003",
    "\u0002\u0002\u0002\u01a6\u0cda\u0003\u0002\u0002\u0002\u01a8\u0ce6\u0003",
    "\u0002\u0002\u0002\u01aa\u0d09\u0003\u0002\u0002\u0002\u01ac\u0d0b\u0003",
    "\u0002\u0002\u0002\u01ae\u0d19\u0003\u0002\u0002\u0002\u01b0\u0d1e\u0003",
    "\u0002\u0002\u0002\u01b2\u0d30\u0003\u0002\u0002\u0002\u01b4\u0d34\u0003",
    "\u0002\u0002\u0002\u01b6\u0d3c\u0003\u0002\u0002\u0002\u01b8\u0d46\u0003",
    "\u0002\u0002\u0002\u01ba\u0d4e\u0003\u0002\u0002\u0002\u01bc\u0d54\u0003",
    "\u0002\u0002\u0002\u01be\u0d63\u0003\u0002\u0002\u0002\u01c0\u0d66\u0003",
    "\u0002\u0002\u0002\u01c2\u0d7f\u0003\u0002\u0002\u0002\u01c4\u0d92\u0003",
    "\u0002\u0002\u0002\u01c6\u0d96\u0003\u0002\u0002\u0002\u01c8\u0d99\u0003",
    "\u0002\u0002\u0002\u01ca\u0db5\u0003\u0002\u0002\u0002\u01cc\u0dba\u0003",
    "\u0002\u0002\u0002\u01ce\u0dcd\u0003\u0002\u0002\u0002\u01d0\u0dcf\u0003",
    "\u0002\u0002\u0002\u01d2\u0ddf\u0003\u0002\u0002\u0002\u01d4\u0de7\u0003",
    "\u0002\u0002\u0002\u01d6\u0dec\u0003\u0002\u0002\u0002\u01d8\u0df7\u0003",
    "\u0002\u0002\u0002\u01da\u0e02\u0003\u0002\u0002\u0002\u01dc\u0e05\u0003",
    "\u0002\u0002\u0002\u01de\u0e17\u0003\u0002\u0002\u0002\u01e0\u0e19\u0003",
    "\u0002\u0002\u0002\u01e2\u0e28\u0003\u0002\u0002\u0002\u01e4\u0e33\u0003",
    "\u0002\u0002\u0002\u01e6\u0e41\u0003\u0002\u0002\u0002\u01e8\u0e46\u0003",
    "\u0002\u0002\u0002\u01ea\u0e4b\u0003\u0002\u0002\u0002\u01ec\u0e58\u0003",
    "\u0002\u0002\u0002\u01ee\u0e64\u0003\u0002\u0002\u0002\u01f0\u0e98\u0003",
    "\u0002\u0002\u0002\u01f2\u0eb5\u0003\u0002\u0002\u0002\u01f4\u0eb9\u0003",
    "\u0002\u0002\u0002\u01f6\u0ec1\u0003\u0002\u0002\u0002\u01f8\u0ec3\u0003",
    "\u0002\u0002\u0002\u01fa\u0ec5\u0003\u0002\u0002\u0002\u01fc\u0eda\u0003",
    "\u0002\u0002\u0002\u01fe\u0edc\u0003\u0002\u0002\u0002\u0200\u0ee0\u0003",
    "\u0002\u0002\u0002\u0202\u0ee8\u0003\u0002\u0002\u0002\u0204\u0f1b\u0003",
    "\u0002\u0002\u0002\u0206\u0f1d\u0003\u0002\u0002\u0002\u0208\u0f39\u0003",
    "\u0002\u0002\u0002\u020a\u0f3b\u0003\u0002\u0002\u0002\u020c\u0f4b\u0003",
    "\u0002\u0002\u0002\u020e\u0f4e\u0003\u0002\u0002\u0002\u0210\u0f50\u0003",
    "\u0002\u0002\u0002\u0212\u0f7e\u0003\u0002\u0002\u0002\u0214\u0f8c\u0003",
    "\u0002\u0002\u0002\u0216\u0f8f\u0003\u0002\u0002\u0002\u0218\u0fa2\u0003",
    "\u0002\u0002\u0002\u021a\u0faa\u0003\u0002\u0002\u0002\u021c\u0fbc\u0003",
    "\u0002\u0002\u0002\u021e\u0fc3\u0003\u0002\u0002\u0002\u0220\u0fd9\u0003",
    "\u0002\u0002\u0002\u0222\u0fdb\u0003\u0002\u0002\u0002\u0224\u0fdf\u0003",
    "\u0002\u0002\u0002\u0226\u0fe8\u0003\u0002\u0002\u0002\u0228\u111c\u0003",
    "\u0002\u0002\u0002\u022a\u1130\u0003\u0002\u0002\u0002\u022c\u1132\u0003",
    "\u0002\u0002\u0002\u022e\u1134\u0003\u0002\u0002\u0002\u0230\u1136\u0003",
    "\u0002\u0002\u0002\u0232\u1138\u0003\u0002\u0002\u0002\u0234\u1145\u0003",
    "\u0002\u0002\u0002\u0236\u114e\u0003\u0002\u0002\u0002\u0238\u1157\u0003",
    "\u0002\u0002\u0002\u023a\u1159\u0003\u0002\u0002\u0002\u023c\u116a\u0003",
    "\u0002\u0002\u0002\u023e\u1170\u0003\u0002\u0002\u0002\u0240\u117b\u0003",
    "\u0002\u0002\u0002\u0242\u117d\u0003\u0002\u0002\u0002\u0244\u1191\u0003",
    "\u0002\u0002\u0002\u0246\u119f\u0003\u0002\u0002\u0002\u0248\u11b1\u0003",
    "\u0002\u0002\u0002\u024a\u11c6\u0003\u0002\u0002\u0002\u024c\u11d3\u0003",
    "\u0002\u0002\u0002\u024e\u11d6\u0003\u0002\u0002\u0002\u0250\u11df\u0003",
    "\u0002\u0002\u0002\u0252\u11e5\u0003\u0002\u0002\u0002\u0254\u11ed\u0003",
    "\u0002\u0002\u0002\u0256\u11f0\u0003\u0002\u0002\u0002\u0258\u11fb\u0003",
    "\u0002\u0002\u0002\u025a\u1203\u0003\u0002\u0002\u0002\u025c\u1205\u0003",
    "\u0002\u0002\u0002\u025e\u120e\u0003\u0002\u0002\u0002\u0260\u1217\u0003",
    "\u0002\u0002\u0002\u0262\u1219\u0003\u0002\u0002\u0002\u0264\u121f\u0003",
    "\u0002\u0002\u0002\u0266\u1221\u0003\u0002\u0002\u0002\u0268\u122f\u0003",
    "\u0002\u0002\u0002\u026a\u1233\u0003\u0002\u0002\u0002\u026c\u1235\u0003",
    "\u0002\u0002\u0002\u026e\u1237\u0003\u0002\u0002\u0002\u0270\u123c\u0003",
    "\u0002\u0002\u0002\u0272\u1254\u0003\u0002\u0002\u0002\u0274\u1258\u0003",
    "\u0002\u0002\u0002\u0276\u125a\u0003\u0002\u0002\u0002\u0278\u125c\u0003",
    "\u0002\u0002\u0002\u027a\u125e\u0003\u0002\u0002\u0002\u027c\u1260\u0003",
    "\u0002\u0002\u0002\u027e\u1262\u0003\u0002\u0002\u0002\u0280\u1264\u0003",
    "\u0002\u0002\u0002\u0282\u1266\u0003\u0002\u0002\u0002\u0284\u1272\u0003",
    "\u0002\u0002\u0002\u0286\u1274\u0003\u0002\u0002\u0002\u0288\u1279\u0003",
    "\u0002\u0002\u0002\u028a\u127b\u0003\u0002\u0002\u0002\u028c\u127d\u0003",
    "\u0002\u0002\u0002\u028e\u127f\u0003\u0002\u0002\u0002\u0290\u1287\u0003",
    "\u0002\u0002\u0002\u0292\u1289\u0003\u0002\u0002\u0002\u0294\u1295\u0003",
    "\u0002\u0002\u0002\u0296\u1297\u0003\u0002\u0002\u0002\u0298\u129f\u0003",
    "\u0002\u0002\u0002\u029a\u12a7\u0003\u0002\u0002\u0002\u029c\u12af\u0003",
    "\u0002\u0002\u0002\u029e\u12b4\u0003\u0002\u0002\u0002\u02a0\u12b9\u0003",
    "\u0002\u0002\u0002\u02a2\u12c0\u0003\u0002\u0002\u0002\u02a4\u12c2\u0003",
    "\u0002\u0002\u0002\u02a6\u12c6\u0003\u0002\u0002\u0002\u02a8\u12ca\u0003",
    "\u0002\u0002\u0002\u02aa\u12cc\u0003\u0002\u0002\u0002\u02ac\u12d1\u0003",
    "\u0002\u0002\u0002\u02ae\u12d3\u0003\u0002\u0002\u0002\u02b0\u12db\u0003",
    "\u0002\u0002\u0002\u02b2\u12e1\u0003\u0002\u0002\u0002\u02b4\u12e9\u0003",
    "\u0002\u0002\u0002\u02b6\u12eb\u0003\u0002\u0002\u0002\u02b8\u12f4\u0003",
    "\u0002\u0002\u0002\u02ba\u1303\u0003\u0002\u0002\u0002\u02bc\u1318\u0003",
    "\u0002\u0002\u0002\u02be\u1342\u0003\u0002\u0002\u0002\u02c0\u1349\u0003",
    "\u0002\u0002\u0002\u02c2\u1355\u0003\u0002\u0002\u0002\u02c4\u1373\u0003",
    "\u0002\u0002\u0002\u02c6\u1375\u0003\u0002\u0002\u0002\u02c8\u13bc\u0003",
    "\u0002\u0002\u0002\u02ca\u13c1\u0003\u0002\u0002\u0002\u02cc\u13d8\u0003",
    "\u0002\u0002\u0002\u02ce\u13da\u0003\u0002\u0002\u0002\u02d0\u141a\u0003",
    "\u0002\u0002\u0002\u02d2\u141c\u0003\u0002\u0002\u0002\u02d4\u141e\u0003",
    "\u0002\u0002\u0002\u02d6\u1421\u0003\u0002\u0002\u0002\u02d8\u1423\u0003",
    "\u0002\u0002\u0002\u02da\u1427\u0003\u0002\u0002\u0002\u02dc\u1430\u0003",
    "\u0002\u0002\u0002\u02de\u1435\u0003\u0002\u0002\u0002\u02e0\u143a\u0003",
    "\u0002\u0002\u0002\u02e2\u143f\u0003\u0002\u0002\u0002\u02e4\u1441\u0003",
    "\u0002\u0002\u0002\u02e6\u1445\u0003\u0002\u0002\u0002\u02e8\u02ea\n",
    "\u0002\u0002\u0002\u02e9\u02e8\u0003\u0002\u0002\u0002\u02ea\u02eb\u0003",
    "\u0002\u0002\u0002\u02eb\u02e9\u0003\u0002\u0002\u0002\u02eb\u02ec\u0003",
    "\u0002\u0002\u0002\u02ec\u0003\u0003\u0002\u0002\u0002\u02ed\u02ef\u0005",
    "\b\u0005\u0002\u02ee\u02ed\u0003\u0002\u0002\u0002\u02ef\u02f2\u0003",
    "\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003",
    "\u0002\u0002\u0002\u02f1\u02f3\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003",
    "\u0002\u0002\u0002\u02f3\u02f4\u0007\u0002\u0002\u0003\u02f4\u0005\u0003",
    "\u0002\u0002\u0002\u02f5\u02f8\u0005\b\u0005\u0002\u02f6\u02f8\u0005",
    "\u025a\u012e\u0002\u02f7\u02f5\u0003\u0002\u0002\u0002\u02f7\u02f6\u0003",
    "\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fa\u0007",
    "\u0002\u0002\u0003\u02fa\u0308\u0003\u0002\u0002\u0002\u02fb\u02fc\u0005",
    "\b\u0005\u0002\u02fc\u02fd\u0007\u01f7\u0002\u0002\u02fd\u0302\u0003",
    "\u0002\u0002\u0002\u02fe\u02ff\u0005\u025a\u012e\u0002\u02ff\u0300\u0007",
    "\u01f7\u0002\u0002\u0300\u0302\u0003\u0002\u0002\u0002\u0301\u02fb\u0003",
    "\u0002\u0002\u0002\u0301\u02fe\u0003\u0002\u0002\u0002\u0302\u0305\u0003",
    "\u0002\u0002\u0002\u0303\u0301\u0003\u0002\u0002\u0002\u0303\u0304\u0003",
    "\u0002\u0002\u0002\u0304\u0306\u0003\u0002\u0002\u0002\u0305\u0303\u0003",
    "\u0002\u0002\u0002\u0306\u0308\u0007\u0002\u0002\u0003\u0307\u02f7\u0003",
    "\u0002\u0002\u0002\u0307\u0303\u0003\u0002\u0002\u0002\u0308\u0007\u0003",
    "\u0002\u0002\u0002\u0309\u031d\u0005\f\u0007\u0002\u030a\u031d\u0005",
    "\u001c\u000f\u0002\u030b\u031d\u0005.\u0018\u0002\u030c\u031d\u0005",
    "\u00a6T\u0002\u030d\u031d\u00054\u001b\u0002\u030e\u031d\u0005Z.\u0002",
    "\u030f\u031d\u0005\u000e\b\u0002\u0310\u031d\u00050\u0019\u0002\u0311",
    "\u031d\u0005\u001e\u0010\u0002\u0312\u031d\u0005\u00a8U\u0002\u0313",
    "\u031d\u00056\u001c\u0002\u0314\u031d\u0005n8\u0002\u0315\u031d\u0005",
    "\n\u0006\u0002\u0316\u031d\u0005\u001a\u000e\u0002\u0317\u031d\u0005",
    ",\u0017\u0002\u0318\u031d\u0005\u00a4S\u0002\u0319\u031d\u00052\u001a",
    "\u0002\u031a\u031d\u0005X-\u0002\u031b\u031d\u0005\u0118\u008d\u0002",
    "\u031c\u0309\u0003\u0002\u0002\u0002\u031c\u030a\u0003\u0002\u0002\u0002",
    "\u031c\u030b\u0003\u0002\u0002\u0002\u031c\u030c\u0003\u0002\u0002\u0002",
    "\u031c\u030d\u0003\u0002\u0002\u0002\u031c\u030e\u0003\u0002\u0002\u0002",
    "\u031c\u030f\u0003\u0002\u0002\u0002\u031c\u0310\u0003\u0002\u0002\u0002",
    "\u031c\u0311\u0003\u0002\u0002\u0002\u031c\u0312\u0003\u0002\u0002\u0002",
    "\u031c\u0313\u0003\u0002\u0002\u0002\u031c\u0314\u0003\u0002\u0002\u0002",
    "\u031c\u0315\u0003\u0002\u0002\u0002\u031c\u0316\u0003\u0002\u0002\u0002",
    "\u031c\u0317\u0003\u0002\u0002\u0002\u031c\u0318\u0003\u0002\u0002\u0002",
    "\u031c\u0319\u0003\u0002\u0002\u0002\u031c\u031a\u0003\u0002\u0002\u0002",
    "\u031c\u031b\u0003\u0002\u0002\u0002\u031d\t\u0003\u0002\u0002\u0002",
    "\u031e\u031f\u0007r\u0002\u0002\u031f\u0320\u0007\u009a\u0002\u0002",
    "\u0320\u0321\u0005\u029c\u014f\u0002\u0321\u000b\u0003\u0002\u0002\u0002",
    "\u0322\u0323\u0007\n\u0002\u0002\u0323\u0324\u0007\u009a\u0002\u0002",
    "\u0324\u0325\u0005\u029c\u014f\u0002\u0325\u0327\u0007?\u0002\u0002",
    "\u0326\u0328\u0007^\u0002\u0002\u0327\u0326\u0003\u0002\u0002\u0002",
    "\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u032c\u0003\u0002\u0002\u0002",
    "\u0329\u032b\u0005\u00b0Y\u0002\u032a\u0329\u0003\u0002\u0002\u0002",
    "\u032b\u032e\u0003\u0002\u0002\u0002\u032c\u032a\u0003\u0002\u0002\u0002",
    "\u032c\u032d\u0003\u0002\u0002\u0002\u032d\u0331\u0003\u0002\u0002\u0002",
    "\u032e\u032c\u0003\u0002\u0002\u0002\u032f\u0330\u0007\u013c\u0002\u0002",
    "\u0330\u0332\u0007\u015a\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002",
    "\u0331\u0332\u0003\u0002\u0002\u0002\u0332\r\u0003\u0002\u0002\u0002",
    "\u0333\u0336\u0007O\u0002\u0002\u0334\u0335\u0007\u010b\u0002\u0002",
    "\u0335\u0337\u0007\u0135\u0002\u0002\u0336\u0334\u0003\u0002\u0002\u0002",
    "\u0336\u0337\u0003\u0002\u0002\u0002\u0337\u0339\u0003\u0002\u0002\u0002",
    "\u0338\u0333\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002",
    "\u0339\u033a\u0003\u0002\u0002\u0002\u033a\u033b\u0007\u009a\u0002\u0002",
    "\u033b\u0347\u0005\u029c\u014f\u0002\u033c\u033d\u0007\u01eb\u0002\u0002",
    "\u033d\u0342\u0005\u00bc_\u0002\u033e\u033f\u0007\u01f1\u0002\u0002",
    "\u033f\u0341\u0005\u00bc_\u0002\u0340\u033e\u0003\u0002\u0002\u0002",
    "\u0341\u0344\u0003\u0002\u0002\u0002\u0342\u0340\u0003\u0002\u0002\u0002",
    "\u0342\u0343\u0003\u0002\u0002\u0002\u0343\u0345\u0003\u0002\u0002\u0002",
    "\u0344\u0342\u0003\u0002\u0002\u0002\u0345\u0346\u0007\u01ec\u0002\u0002",
    "\u0346\u0348\u0003\u0002\u0002\u0002\u0347\u033c\u0003\u0002\u0002\u0002",
    "\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002",
    "\u0349\u034a\u0007\u013a\u0002\u0002\u034a\u0351\u0005\u02c2\u0162\u0002",
    "\u034b\u0350\u0005\u00aeX\u0002\u034c\u0350\u0005\u0010\t\u0002\u034d",
    "\u0350\u0005\u0014\u000b\u0002\u034e\u0350\u0007k\u0002\u0002\u034f",
    "\u034b\u0003\u0002\u0002\u0002\u034f\u034c\u0003\u0002\u0002\u0002\u034f",
    "\u034d\u0003\u0002\u0002\u0002\u034f\u034e\u0003\u0002\u0002\u0002\u0350",
    "\u0353\u0003\u0002\u0002\u0002\u0351\u034f\u0003\u0002\u0002\u0002\u0351",
    "\u0352\u0003\u0002\u0002\u0002\u0352\u0368\u0003\u0002\u0002\u0002\u0353",
    "\u0351\u0003\u0002\u0002\u0002\u0354\u0356\u0007\u011d\u0002\u0002\u0355",
    "\u0354\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356",
    "\u0357\u0003\u0002\u0002\u0002\u0357\u0363\t\u0003\u0002\u0002\u0358",
    "\u035a\u0007a\u0002\u0002\u0359\u0358\u0003\u0002\u0002\u0002\u0359",
    "\u035a\u0003\u0002\u0002\u0002\u035a\u035e\u0003\u0002\u0002\u0002\u035b",
    "\u035d\u0005\u00c0a\u0002\u035c\u035b\u0003\u0002\u0002\u0002\u035d",
    "\u0360\u0003\u0002\u0002\u0002\u035e\u035c\u0003\u0002\u0002\u0002\u035e",
    "\u035f\u0003\u0002\u0002\u0002\u035f\u0361\u0003\u0002\u0002\u0002\u0360",
    "\u035e\u0003\u0002\u0002\u0002\u0361\u0364\u0005\u010a\u0086\u0002\u0362",
    "\u0364\u0005\u00b2Z\u0002\u0363\u0359\u0003\u0002\u0002\u0002\u0363",
    "\u0362\u0003\u0002\u0002\u0002\u0364\u0369\u0003\u0002\u0002\u0002\u0365",
    "\u0366\t\u0004\u0002\u0002\u0366\u0367\u0007\u019a\u0002\u0002\u0367",
    "\u0369\u0005\u0286\u0144\u0002\u0368\u0355\u0003\u0002\u0002\u0002\u0368",
    "\u0365\u0003\u0002\u0002\u0002\u0369\u000f\u0003\u0002\u0002\u0002\u036a",
    "\u036c\u0007\u0115\u0002\u0002\u036b\u036d\u0005\u0012\n\u0002\u036c",
    "\u036b\u0003\u0002\u0002\u0002\u036c\u036d\u0003\u0002\u0002\u0002\u036d",
    "\u0011\u0003\u0002\u0002\u0002\u036e\u036f\u0007\u01eb\u0002\u0002\u036f",
    "\u0370\u0007\u0118\u0002\u0002\u0370\u0371\u0005\u01ee\u00f8\u0002\u0371",
    "\u037f\u0007(\u0002\u0002\u0372\u0380\u0007\r\u0002\u0002\u0373\u0374",
    "\t\u0005\u0002\u0002\u0374\u0375\u0007\u01eb\u0002\u0002\u0375\u037a",
    "\u0005\u02ae\u0158\u0002\u0376\u0377\u0007\u01f1\u0002\u0002\u0377\u0379",
    "\u0005\u02ae\u0158\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0379\u037c",
    "\u0003\u0002\u0002\u0002\u037a\u0378\u0003\u0002\u0002\u0002\u037a\u037b",
    "\u0003\u0002\u0002\u0002\u037b\u037d\u0003\u0002\u0002\u0002\u037c\u037a",
    "\u0003\u0002\u0002\u0002\u037d\u037e\u0007\u01ec\u0002\u0002\u037e\u0380",
    "\u0003\u0002\u0002\u0002\u037f\u0372\u0003\u0002\u0002\u0002\u037f\u0373",
    "\u0003\u0002\u0002\u0002\u0380\u0382\u0003\u0002\u0002\u0002\u0381\u0383",
    "\u0005\u0018\r\u0002\u0382\u0381\u0003\u0002\u0002\u0002\u0382\u0383",
    "\u0003\u0002\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0385",
    "\u0007\u01ec\u0002\u0002\u0385\u0013\u0003\u0002\u0002\u0002\u0386\u0388",
    "\u0007\u0139\u0002\u0002\u0387\u0389\u0005\u0016\f\u0002\u0388\u0387",
    "\u0003\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002\u0389\u0015",
    "\u0003\u0002\u0002\u0002\u038a\u038b\u0007\u0133\u0002\u0002\u038b\u038c",
    "\u0007\u01eb\u0002\u0002\u038c\u0391\u0005\u02b0\u0159\u0002\u038d\u038e",
    "\u0007\u01f1\u0002\u0002\u038e\u0390\u0005\u02b0\u0159\u0002\u038f\u038d",
    "\u0003\u0002\u0002\u0002\u0390\u0393\u0003\u0002\u0002\u0002\u0391\u038f",
    "\u0003\u0002\u0002\u0002\u0391\u0392\u0003\u0002\u0002\u0002\u0392\u0394",
    "\u0003\u0002\u0002\u0002\u0393\u0391\u0003\u0002\u0002\u0002\u0394\u0395",
    "\u0007\u01ec\u0002\u0002\u0395\u0017\u0003\u0002\u0002\u0002\u0396\u0397",
    "\t\u0006\u0002\u0002\u0397\u0398\u0005\u01ee\u00f8\u0002\u0398\u0399",
    "\u0007(\u0002\u0002\u0399\u039a\u0007\u01eb\u0002\u0002\u039a\u039f",
    "\u0005\u02ae\u0158\u0002\u039b\u039c\u0007\u01f1\u0002\u0002\u039c\u039e",
    "\u0005\u02ae\u0158\u0002\u039d\u039b\u0003\u0002\u0002\u0002\u039e\u03a1",
    "\u0003\u0002\u0002\u0002\u039f\u039d\u0003\u0002\u0002\u0002\u039f\u03a0",
    "\u0003\u0002\u0002\u0002\u03a0\u03a2\u0003\u0002\u0002\u0002\u03a1\u039f",
    "\u0003\u0002\u0002\u0002\u03a2\u03a3\u0007\u01ec\u0002\u0002\u03a3\u0019",
    "\u0003\u0002\u0002\u0002\u03a4\u03a5\u0007r\u0002\u0002\u03a5\u03a7",
    "\u0007\u0114\u0002\u0002\u03a6\u03a8\u0007#\u0002\u0002\u03a7\u03a6",
    "\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8\u03a9",
    "\u0003\u0002\u0002\u0002\u03a9\u03aa\u0005\u0284\u0143\u0002\u03aa\u001b",
    "\u0003\u0002\u0002\u0002\u03ab\u03ac\u0007\n\u0002\u0002\u03ac\u03ad",
    "\u0007\u0114\u0002\u0002\u03ad\u03ae\u0005\u0284\u0143\u0002\u03ae\u03b0",
    "\u0007?\u0002\u0002\u03af\u03b1\u0007^\u0002\u0002\u03b0\u03af\u0003",
    "\u0002\u0002\u0002\u03b0\u03b1\u0003\u0002\u0002\u0002\u03b1\u03b3\u0003",
    "\u0002\u0002\u0002\u03b2\u03b4\t\u0007\u0002\u0002\u03b3\u03b2\u0003",
    "\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002\u03b4\u03b8\u0003",
    "\u0002\u0002\u0002\u03b5\u03b7\u0005\u00b0Y\u0002\u03b6\u03b5\u0003",
    "\u0002\u0002\u0002\u03b7\u03ba\u0003\u0002\u0002\u0002\u03b8\u03b6\u0003",
    "\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03bd\u0003",
    "\u0002\u0002\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03bb\u03bc\u0007",
    "\u013c\u0002\u0002\u03bc\u03be\u0007\u015a\u0002\u0002\u03bd\u03bb\u0003",
    "\u0002\u0002\u0002\u03bd\u03be\u0003\u0002\u0002\u0002\u03be\u001d\u0003",
    "\u0002\u0002\u0002\u03bf\u03c2\u0007O\u0002\u0002\u03c0\u03c1\u0007",
    "\u010b\u0002\u0002\u03c1\u03c3\u0007\u0135\u0002\u0002\u03c2\u03c0\u0003",
    "\u0002\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003",
    "\u0002\u0002\u0002\u03c4\u03c7\u0007\u0114\u0002\u0002\u03c5\u03c8\u0005",
    "\"\u0012\u0002\u03c6\u03c8\u0005 \u0011\u0002\u03c7\u03c5\u0003\u0002",
    "\u0002\u0002\u03c7\u03c6\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002",
    "\u0002\u0002\u03c8\u001f\u0003\u0002\u0002\u0002\u03c9\u03ca\u0007#",
    "\u0002\u0002\u03ca\u03cb\u0005\u0284\u0143\u0002\u03cb\u03cf\t\u0003",
    "\u0002\u0002\u03cc\u03ce\u0005*\u0016\u0002\u03cd\u03cc\u0003\u0002",
    "\u0002\u0002\u03ce\u03d1\u0003\u0002\u0002\u0002\u03cf\u03cd\u0003\u0002",
    "\u0002\u0002\u03cf\u03d0\u0003\u0002\u0002\u0002\u03d0\u03d8\u0003\u0002",
    "\u0002\u0002\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d2\u03d3\u0007\u001b",
    "\u0002\u0002\u03d3\u03d9\u0005\u00e0q\u0002\u03d4\u03d6\u0007{\u0002",
    "\u0002\u03d5\u03d7\u0005\u0284\u0143\u0002\u03d6\u03d5\u0003\u0002\u0002",
    "\u0002\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7\u03d9\u0003\u0002\u0002",
    "\u0002\u03d8\u03d2\u0003\u0002\u0002\u0002\u03d8\u03d4\u0003\u0002\u0002",
    "\u0002\u03d9!\u0003\u0002\u0002\u0002\u03da\u03dc\u0005\u0284\u0143",
    "\u0002\u03db\u03dd\u0005\u00aeX\u0002\u03dc\u03db\u0003\u0002\u0002",
    "\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03de\u0003\u0002\u0002",
    "\u0002\u03de\u03e2\t\u0003\u0002\u0002\u03df\u03e1\u0005$\u0013\u0002",
    "\u03e0\u03df\u0003\u0002\u0002\u0002\u03e1\u03e4\u0003\u0002\u0002\u0002",
    "\u03e2\u03e0\u0003\u0002\u0002\u0002\u03e2\u03e3\u0003\u0002\u0002\u0002",
    "\u03e3\u03e5\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002\u0002\u0002",
    "\u03e5\u03e7\u0007{\u0002\u0002\u03e6\u03e8\u0005\u0284\u0143\u0002",
    "\u03e7\u03e6\u0003\u0002\u0002\u0002\u03e7\u03e8\u0003\u0002\u0002\u0002",
    "\u03e8#\u0003\u0002\u0002\u0002\u03e9\u03f3\u0005\u00c2b\u0002\u03ea",
    "\u03f3\u0005\u00c4c\u0002\u03eb\u03f3\u0005\u00c6d\u0002\u03ec\u03f3",
    "\u0005\u00caf\u0002\u03ed\u03f3\u0005\u00ccg\u0002\u03ee\u03f3\u0005",
    "\u00ceh\u0002\u03ef\u03f3\u0005\u00d6l\u0002\u03f0\u03f3\u0005&\u0014",
    "\u0002\u03f1\u03f3\u0005(\u0015\u0002\u03f2\u03e9\u0003\u0002\u0002",
    "\u0002\u03f2\u03ea\u0003\u0002\u0002\u0002\u03f2\u03eb\u0003\u0002\u0002",
    "\u0002\u03f2\u03ec\u0003\u0002\u0002\u0002\u03f2\u03ed\u0003\u0002\u0002",
    "\u0002\u03f2\u03ee\u0003\u0002\u0002\u0002\u03f2\u03ef\u0003\u0002\u0002",
    "\u0002\u03f2\u03f0\u0003\u0002\u0002\u0002\u03f2\u03f1\u0003\u0002\u0002",
    "\u0002\u03f3%\u0003\u0002\u0002\u0002\u03f4\u03f5\u0007\u0128\u0002",
    "\u0002\u03f5\u0401\u0005\u029e\u0150\u0002\u03f6\u03f7\u0007\u01eb\u0002",
    "\u0002\u03f7\u03fc\u0005\u00bc_\u0002\u03f8\u03f9\u0007\u01f1\u0002",
    "\u0002\u03f9\u03fb\u0005\u00bc_\u0002\u03fa\u03f8\u0003\u0002\u0002",
    "\u0002\u03fb\u03fe\u0003\u0002\u0002\u0002\u03fc\u03fa\u0003\u0002\u0002",
    "\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u03ff\u0003\u0002\u0002",
    "\u0002\u03fe\u03fc\u0003\u0002\u0002\u0002\u03ff\u0400\u0007\u01ec\u0002",
    "\u0002\u0400\u0402\u0003\u0002\u0002\u0002\u0401\u03f6\u0003\u0002\u0002",
    "\u0002\u0401\u0402\u0003\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002",
    "\u0002\u0403\u0404\u0007\u01f7\u0002\u0002\u0404\'\u0003\u0002\u0002",
    "\u0002\u0405\u0406\u0007\u009a\u0002\u0002\u0406\u0412\u0005\u029c\u014f",
    "\u0002\u0407\u0408\u0007\u01eb\u0002\u0002\u0408\u040d\u0005\u00bc_",
    "\u0002\u0409\u040a\u0007\u01f1\u0002\u0002\u040a\u040c\u0005\u00bc_",
    "\u0002\u040b\u0409\u0003\u0002\u0002\u0002\u040c\u040f\u0003\u0002\u0002",
    "\u0002\u040d\u040b\u0003\u0002\u0002\u0002\u040d\u040e\u0003\u0002\u0002",
    "\u0002\u040e\u0410\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002",
    "\u0002\u0410\u0411\u0007\u01ec\u0002\u0002\u0411\u0413\u0003\u0002\u0002",
    "\u0002\u0412\u0407\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002",
    "\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u0415\u0007\u013a\u0002",
    "\u0002\u0415\u0417\u0005\u02c2\u0162\u0002\u0416\u0418\u0007k\u0002",
    "\u0002\u0417\u0416\u0003\u0002\u0002\u0002\u0417\u0418\u0003\u0002\u0002",
    "\u0002\u0418\u041a\u0003\u0002\u0002\u0002\u0419\u041b\u0007\u0139\u0002",
    "\u0002\u041a\u0419\u0003\u0002\u0002\u0002\u041a\u041b\u0003\u0002\u0002",
    "\u0002\u041b\u041c\u0003\u0002\u0002\u0002\u041c\u041d\u0007\u01f7\u0002",
    "\u0002\u041d)\u0003\u0002\u0002\u0002\u041e\u0429\u0005\u00c2b\u0002",
    "\u041f\u0429\u0005\u00c4c\u0002\u0420\u0429\u0005\u00c6d\u0002\u0421",
    "\u0429\u0005\u00caf\u0002\u0422\u0429\u0005\u00ceh\u0002\u0423\u0429",
    "\u0005\u00d6l\u0002\u0424\u0429\u00050\u0019\u0002\u0425\u0429\u0005",
    "\u000e\b\u0002\u0426\u0429\u0005&\u0014\u0002\u0427\u0429\u0005(\u0015",
    "\u0002\u0428\u041e\u0003\u0002\u0002\u0002\u0428\u041f\u0003\u0002\u0002",
    "\u0002\u0428\u0420\u0003\u0002\u0002\u0002\u0428\u0421\u0003\u0002\u0002",
    "\u0002\u0428\u0422\u0003\u0002\u0002\u0002\u0428\u0423\u0003\u0002\u0002",
    "\u0002\u0428\u0424\u0003\u0002\u0002\u0002\u0428\u0425\u0003\u0002\u0002",
    "\u0002\u0428\u0426\u0003\u0002\u0002\u0002\u0428\u0427\u0003\u0002\u0002",
    "\u0002\u0429+\u0003\u0002\u0002\u0002\u042a\u042b\u0007r\u0002\u0002",
    "\u042b\u042c\u0007\u0128\u0002\u0002\u042c\u042d\u0005\u029e\u0150\u0002",
    "\u042d-\u0003\u0002\u0002\u0002\u042e\u042f\u0007\n\u0002\u0002\u042f",
    "\u0430\u0007\u0128\u0002\u0002\u0430\u0431\u0005\u029e\u0150\u0002\u0431",
    "\u0433\u0007?\u0002\u0002\u0432\u0434\u0007^\u0002\u0002\u0433\u0432",
    "\u0003\u0002\u0002\u0002\u0433\u0434\u0003\u0002\u0002\u0002\u0434\u0438",
    "\u0003\u0002\u0002\u0002\u0435\u0437\u0005\u00b0Y\u0002\u0436\u0435",
    "\u0003\u0002\u0002\u0002\u0437\u043a\u0003\u0002\u0002\u0002\u0438\u0436",
    "\u0003\u0002\u0002\u0002\u0438\u0439\u0003\u0002\u0002\u0002\u0439\u043d",
    "\u0003\u0002\u0002\u0002\u043a\u0438\u0003\u0002\u0002\u0002\u043b\u043c",
    "\u0007\u013c\u0002\u0002\u043c\u043e\u0007\u015a\u0002\u0002\u043d\u043b",
    "\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e/",
    "\u0003\u0002\u0002\u0002\u043f\u0442\u0007O\u0002\u0002\u0440\u0441",
    "\u0007\u010b\u0002\u0002\u0441\u0443\u0007\u0135\u0002\u0002\u0442\u0440",
    "\u0003\u0002\u0002\u0002\u0442\u0443\u0003\u0002\u0002\u0002\u0443\u0445",
    "\u0003\u0002\u0002\u0002\u0444\u043f\u0003\u0002\u0002\u0002\u0444\u0445",
    "\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002\u0002\u0446\u0447",
    "\u0007\u0128\u0002\u0002\u0447\u0453\u0005\u029e\u0150\u0002\u0448\u0449",
    "\u0007\u01eb\u0002\u0002\u0449\u044e\u0005\u00bc_\u0002\u044a\u044b",
    "\u0007\u01f1\u0002\u0002\u044b\u044d\u0005\u00bc_\u0002\u044c\u044a",
    "\u0003\u0002\u0002\u0002\u044d\u0450\u0003\u0002\u0002\u0002\u044e\u044c",
    "\u0003\u0002\u0002\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u0451",
    "\u0003\u0002\u0002\u0002\u0450\u044e\u0003\u0002\u0002\u0002\u0451\u0452",
    "\u0007\u01ec\u0002\u0002\u0452\u0454\u0003\u0002\u0002\u0002\u0453\u0448",
    "\u0003\u0002\u0002\u0002\u0453\u0454\u0003\u0002\u0002\u0002\u0454\u0456",
    "\u0003\u0002\u0002\u0002\u0455\u0457\u0005\u00aeX\u0002\u0456\u0455",
    "\u0003\u0002\u0002\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457\u0458",
    "\u0003\u0002\u0002\u0002\u0458\u0465\t\u0003\u0002\u0002\u0459\u045b",
    "\u0007a\u0002\u0002\u045a\u0459\u0003\u0002\u0002\u0002\u045a\u045b",
    "\u0003\u0002\u0002\u0002\u045b\u045f\u0003\u0002\u0002\u0002\u045c\u045e",
    "\u0005\u00c0a\u0002\u045d\u045c\u0003\u0002\u0002\u0002\u045e\u0461",
    "\u0003\u0002\u0002\u0002\u045f\u045d\u0003\u0002\u0002\u0002\u045f\u0460",
    "\u0003\u0002\u0002\u0002\u0460\u0462\u0003\u0002\u0002\u0002\u0461\u045f",
    "\u0003\u0002\u0002\u0002\u0462\u0466\u0005\u010a\u0086\u0002\u0463\u0466",
    "\u0005\u00b2Z\u0002\u0464\u0466\u0007\u008a\u0002\u0002\u0465\u045a",
    "\u0003\u0002\u0002\u0002\u0465\u0463\u0003\u0002\u0002\u0002\u0465\u0464",
    "\u0003\u0002\u0002\u0002\u04661\u0003\u0002\u0002\u0002\u0467\u0468",
    "\u0007r\u0002\u0002\u0468\u0469\u0007\u0189\u0002\u0002\u0469\u046a",
    "\u0005\u02a0\u0151\u0002\u046a3\u0003\u0002\u0002\u0002\u046b\u046c",
    "\u0007\n\u0002\u0002\u046c\u046d\u0007\u0189\u0002\u0002\u046d\u0480",
    "\u0005\u02a0\u0151\u0002\u046e\u0481\t\b\u0002\u0002\u046f\u0470\u0007",
    "\u0134\u0002\u0002\u0470\u0471\u0007\u0184\u0002\u0002\u0471\u0481\u0005",
    "\u02a0\u0151\u0002\u0472\u0474\u0007?\u0002\u0002\u0473\u0475\u0007",
    "^\u0002\u0002\u0474\u0473\u0003\u0002\u0002\u0002\u0474\u0475\u0003",
    "\u0002\u0002\u0002\u0475\u0479\u0003\u0002\u0002\u0002\u0476\u0478\u0005",
    "\u00b0Y\u0002\u0477\u0476\u0003\u0002\u0002\u0002\u0478\u047b\u0003",
    "\u0002\u0002\u0002\u0479\u0477\u0003\u0002\u0002\u0002\u0479\u047a\u0003",
    "\u0002\u0002\u0002\u047a\u047e\u0003\u0002\u0002\u0002\u047b\u0479\u0003",
    "\u0002\u0002\u0002\u047c\u047d\u0007\u013c\u0002\u0002\u047d\u047f\u0007",
    "\u015a\u0002\u0002\u047e\u047c\u0003\u0002\u0002\u0002\u047e\u047f\u0003",
    "\u0002\u0002\u0002\u047f\u0481\u0003\u0002\u0002\u0002\u0480\u046e\u0003",
    "\u0002\u0002\u0002\u0480\u046f\u0003\u0002\u0002\u0002\u0480\u0472\u0003",
    "\u0002\u0002\u0002\u04815\u0003\u0002\u0002\u0002\u0482\u0485\u0007",
    "O\u0002\u0002\u0483\u0484\u0007\u010b\u0002\u0002\u0484\u0486\u0007",
    "\u0135\u0002\u0002\u0485\u0483\u0003\u0002\u0002\u0002\u0485\u0486\u0003",
    "\u0002\u0002\u0002\u0486\u0487\u0003\u0002\u0002\u0002\u0487\u0488\u0007",
    "\u0189\u0002\u0002\u0488\u048c\u0005\u02a0\u0151\u0002\u0489\u048d\u0005",
    "<\u001f\u0002\u048a\u048d\u0005@!\u0002\u048b\u048d\u0005B\"\u0002\u048c",
    "\u0489\u0003\u0002\u0002\u0002\u048c\u048a\u0003\u0002\u0002\u0002\u048c",
    "\u048b\u0003\u0002\u0002\u0002\u048d\u048f\u0003\u0002\u0002\u0002\u048e",
    "\u0490\u00058\u001d\u0002\u048f\u048e\u0003\u0002\u0002\u0002\u048f",
    "\u0490\u0003\u0002\u0002\u0002\u0490\u0492\u0003\u0002\u0002\u0002\u0491",
    "\u0493\t\b\u0002\u0002\u0492\u0491\u0003\u0002\u0002\u0002\u0492\u0493",
    "\u0003\u0002\u0002\u0002\u0493\u0495\u0003\u0002\u0002\u0002\u0494\u0496",
    "\u0005:\u001e\u0002\u0495\u0494\u0003\u0002\u0002\u0002\u0495\u0496",
    "\u0003\u0002\u0002\u0002\u0496\u0497\u0003\u0002\u0002\u0002\u0497\u0498",
    "\u0005D#\u0002\u04987\u0003\u0002\u0002\u0002\u0499\u049a\u0007\u0094",
    "\u0002\u0002\u049a\u049f\u0005\u02a0\u0151\u0002\u049b\u049c\u0007\u01f1",
    "\u0002\u0002\u049c\u049e\u0005\u02a0\u0151\u0002\u049d\u049b\u0003\u0002",
    "\u0002\u0002\u049e\u04a1\u0003\u0002\u0002\u0002\u049f\u049d\u0003\u0002",
    "\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002\u04a09\u0003\u0002",
    "\u0002\u0002\u04a1\u049f\u0003\u0002\u0002\u0002\u04a2\u04a3\u0007\u01a8",
    "\u0002\u0002\u04a3\u04a4\u0007\u01eb\u0002\u0002\u04a4\u04a5\u0005\u01ec",
    "\u00f7\u0002\u04a5\u04a6\u0007\u01ec\u0002\u0002\u04a6;\u0003\u0002",
    "\u0002\u0002\u04a7\u04ac\u0007\u001a\u0002\u0002\u04a8\u04ac\u0007\u0006",
    "\u0002\u0002\u04a9\u04aa\u0007\u00b5\u0002\u0002\u04aa\u04ac\u0007\u0103",
    "\u0002\u0002\u04ab\u04a7\u0003\u0002\u0002\u0002\u04ab\u04a8\u0003\u0002",
    "\u0002\u0002\u04ab\u04a9\u0003\u0002\u0002\u0002\u04ac\u04ad\u0003\u0002",
    "\u0002\u0002\u04ad\u04af\u0005N(\u0002\u04ae\u04b0\u0005T+\u0002\u04af",
    "\u04ae\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0",
    "\u04b2\u0003\u0002\u0002\u0002\u04b1\u04b3\u0005> \u0002\u04b2\u04b1",
    "\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3=",
    "\u0003\u0002\u0002\u0002\u04b4\u04b5\u0007\u0095\u0002\u0002\u04b5\u04b6",
    "\u0007t\u0002\u0002\u04b6\u04b7\u0007\u0142\u0002\u0002\u04b7?\u0003",
    "\u0002\u0002\u0002\u04b8\u04b9\u0007\u0095\u0002\u0002\u04b9\u04bb\u0005",
    "N(\u0002\u04ba\u04bc\u0005T+\u0002\u04bb\u04ba\u0003\u0002\u0002\u0002",
    "\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bcA\u0003\u0002\u0002\u0002",
    "\u04bd\u04be\t\t\u0002\u0002\u04be\u04c3\u0005L\'\u0002\u04bf\u04c0",
    "\u0007\u010b\u0002\u0002\u04c0\u04c2\u0005L\'\u0002\u04c1\u04bf\u0003",
    "\u0002\u0002\u0002\u04c2\u04c5\u0003\u0002\u0002\u0002\u04c3\u04c1\u0003",
    "\u0002\u0002\u0002\u04c3\u04c4\u0003\u0002\u0002\u0002\u04c4\u04c6\u0003",
    "\u0002\u0002\u0002\u04c5\u04c3\u0003\u0002\u0002\u0002\u04c6\u04ce\u0007",
    "\u0107\u0002\u0002\u04c7\u04cf\u0007X\u0002\u0002\u04c8\u04c9\u0005",
    "\u0280\u0141\u0002\u04c9\u04ca\u0007\u01e4\u0002\u0002\u04ca\u04cc\u0003",
    "\u0002\u0002\u0002\u04cb\u04c8\u0003\u0002\u0002\u0002\u04cb\u04cc\u0003",
    "\u0002\u0002\u0002\u04cc\u04cd\u0003\u0002\u0002\u0002\u04cd\u04cf\u0007",
    "\u0149\u0002\u0002\u04ce\u04c7\u0003\u0002\u0002\u0002\u04ce\u04cb\u0003",
    "\u0002\u0002\u0002\u04cfC\u0003\u0002\u0002\u0002\u04d0\u04d1\u0007",
    "@\u0002\u0002\u04d1\u04d6\u0007\u0189\u0002\u0002\u04d2\u04d3\u0007",
    ",\u0002\u0002\u04d3\u04d6\u0005\u02d8\u016d\u0002\u04d4\u04d6\u0005",
    "\u010e\u0088\u0002\u04d5\u04d0\u0003\u0002\u0002\u0002\u04d5\u04d2\u0003",
    "\u0002\u0002\u0002\u04d5\u04d4\u0003\u0002\u0002\u0002\u04d6E\u0003",
    "\u0002\u0002\u0002\u04d7\u04d9\u0005\u0282\u0142\u0002\u04d8\u04da\u0005",
    "\u02b8\u015d\u0002\u04d9\u04d8\u0003\u0002\u0002\u0002\u04d9\u04da\u0003",
    "\u0002\u0002\u0002\u04daG\u0003\u0002\u0002\u0002\u04db\u04dc\u0007",
    "@\u0002\u0002\u04dc\u04e0\u0007\u0189\u0002\u0002\u04dd\u04df\u0005",
    "\u00c0a\u0002\u04de\u04dd\u0003\u0002\u0002\u0002\u04df\u04e2\u0003",
    "\u0002\u0002\u0002\u04e0\u04de\u0003\u0002\u0002\u0002\u04e0\u04e1\u0003",
    "\u0002\u0002\u0002\u04e1\u04e4\u0003\u0002\u0002\u0002\u04e2\u04e0\u0003",
    "\u0002\u0002\u0002\u04e3\u04e5\u0005J&\u0002\u04e4\u04e3\u0003\u0002",
    "\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6\u04e4\u0003\u0002",
    "\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002",
    "\u0002\u0002\u04e8\u04e9\u0007{\u0002\u0002\u04e9\u04ea\u0005\u02a0",
    "\u0151\u0002\u04eaI\u0003\u0002\u0002\u0002\u04eb\u04ec\u0007\u001a",
    "\u0002\u0002\u04ec\u04ed\u0007\u016d\u0002\u0002\u04ed\u04ee\u0007\u00bc",
    "\u0002\u0002\u04ee\u04ef\u0005\u010e\u0088\u0002\u04ef\u04f0\u0007\u001a",
    "\u0002\u0002\u04f0\u04f1\u0007\u016d\u0002\u0002\u04f1\u04f2\u0007\u01f7",
    "\u0002\u0002\u04f2\u0510\u0003\u0002\u0002\u0002\u04f3\u04f4\u0007\u001a",
    "\u0002\u0002\u04f4\u04f5\u0007t\u0002\u0002\u04f5\u04f6\u0007\u0142",
    "\u0002\u0002\u04f6\u04f7\u0007\u00bc\u0002\u0002\u04f7\u04f8\u0005\u010e",
    "\u0088\u0002\u04f8\u04f9\u0007\u001a\u0002\u0002\u04f9\u04fa\u0007t",
    "\u0002\u0002\u04fa\u04fb\u0007\u0142\u0002\u0002\u04fb\u04fc\u0007\u01f7",
    "\u0002\u0002\u04fc\u0510\u0003\u0002\u0002\u0002\u04fd\u04fe\u0007\u0006",
    "\u0002\u0002\u04fe\u04ff\u0007\u016d\u0002\u0002\u04ff\u0500\u0007\u00bc",
    "\u0002\u0002\u0500\u0501\u0005\u010e\u0088\u0002\u0501\u0502\u0007\u0006",
    "\u0002\u0002\u0502\u0503\u0007\u016d\u0002\u0002\u0503\u0504\u0007\u01f7",
    "\u0002\u0002\u0504\u0510\u0003\u0002\u0002\u0002\u0505\u0506\u0007\u0006",
    "\u0002\u0002\u0506\u0507\u0007t\u0002\u0002\u0507\u0508\u0007\u0142",
    "\u0002\u0002\u0508\u0509\u0007\u00bc\u0002\u0002\u0509\u050a\u0005\u010e",
    "\u0088\u0002\u050a\u050b\u0007\u0006\u0002\u0002\u050b\u050c\u0007t",
    "\u0002\u0002\u050c\u050d\u0007\u0142\u0002\u0002\u050d\u050e\u0007\u01f7",
    "\u0002\u0002\u050e\u0510\u0003\u0002\u0002\u0002\u050f\u04eb\u0003\u0002",
    "\u0002\u0002\u050f\u04f3\u0003\u0002\u0002\u0002\u050f\u04fd\u0003\u0002",
    "\u0002\u0002\u050f\u0505\u0003\u0002\u0002\u0002\u0510K\u0003\u0002",
    "\u0002\u0002\u0511\u052c\u0007\n\u0002\u0002\u0512\u052c\u0007\u000b",
    "\u0002\u0002\u0513\u0514\u0007\u0011\u0002\u0002\u0514\u052c\u0007\u0170",
    "\u0002\u0002\u0515\u052c\u0007\u0014\u0002\u0002\u0516\u052c\u0007;",
    "\u0002\u0002\u0517\u052c\u0007O\u0002\u0002\u0518\u0519\u0007n\u0002",
    "\u0002\u0519\u052c\u0007\u0170\u0002\u0002\u051a\u052c\u0007r\u0002",
    "\u0002\u051b\u052c\u0007\u009c\u0002\u0002\u051c\u052c\u0007\u00f1\u0002",
    "\u0002\u051d\u052c\u0007\u0134\u0002\u0002\u051e\u052c\u0007\u013e\u0002",
    "\u0002\u051f\u052c\u0007\u018c\u0002\u0002\u0520\u052c\u0007]\u0002",
    "\u0002\u0521\u052c\u0007\u016c\u0002\u0002\u0522\u052c\u0007\u015d\u0002",
    "\u0002\u0523\u052c\u0007[\u0002\u0002\u0524\u052c\u0007\u00d3\u0002",
    "\u0002\u0525\u052c\u0007\u00d2\u0002\u0002\u0526\u052c\u0007\u0156\u0002",
    "\u0002\u0527\u052c\u0007\u0177\u0002\u0002\u0528\u052c\u0007X\u0002",
    "\u0002\u0529\u052c\u0007\u0149\u0002\u0002\u052a\u052c\u0007\u0094\u0002",
    "\u0002\u052b\u0511\u0003\u0002\u0002\u0002\u052b\u0512\u0003\u0002\u0002",
    "\u0002\u052b\u0513\u0003\u0002\u0002\u0002\u052b\u0515\u0003\u0002\u0002",
    "\u0002\u052b\u0516\u0003\u0002\u0002\u0002\u052b\u0517\u0003\u0002\u0002",
    "\u0002\u052b\u0518\u0003\u0002\u0002\u0002\u052b\u051a\u0003\u0002\u0002",
    "\u0002\u052b\u051b\u0003\u0002\u0002\u0002\u052b\u051c\u0003\u0002\u0002",
    "\u0002\u052b\u051d\u0003\u0002\u0002\u0002\u052b\u051e\u0003\u0002\u0002",
    "\u0002\u052b\u051f\u0003\u0002\u0002\u0002\u052b\u0520\u0003\u0002\u0002",
    "\u0002\u052b\u0521\u0003\u0002\u0002\u0002\u052b\u0522\u0003\u0002\u0002",
    "\u0002\u052b\u0523\u0003\u0002\u0002\u0002\u052b\u0524\u0003\u0002\u0002",
    "\u0002\u052b\u0525\u0003\u0002\u0002\u0002\u052b\u0526\u0003\u0002\u0002",
    "\u0002\u052b\u0527\u0003\u0002\u0002\u0002\u052b\u0528\u0003\u0002\u0002",
    "\u0002\u052b\u0529\u0003\u0002\u0002\u0002\u052b\u052a\u0003\u0002\u0002",
    "\u0002\u052cM\u0003\u0002\u0002\u0002\u052d\u0532\u0005P)\u0002\u052e",
    "\u052f\u0007\u010b\u0002\u0002\u052f\u0531\u0005P)\u0002\u0530\u052e",
    "\u0003\u0002\u0002\u0002\u0531\u0534\u0003\u0002\u0002\u0002\u0532\u0530",
    "\u0003\u0002\u0002\u0002\u0532\u0533\u0003\u0002\u0002\u0002\u0533\u0535",
    "\u0003\u0002\u0002\u0002\u0534\u0532\u0003\u0002\u0002\u0002\u0535\u0537",
    "\u0007\u0107\u0002\u0002\u0536\u0538\u0005R*\u0002\u0537\u0536\u0003",
    "\u0002\u0002\u0002\u0537\u0538\u0003\u0002\u0002\u0002\u0538\u0539\u0003",
    "\u0002\u0002\u0002\u0539\u053a\u0005\u02b0\u0159\u0002\u053aO\u0003",
    "\u0002\u0002\u0002\u053b\u0545\t\n\u0002\u0002\u053c\u053d\u0007\u0103",
    "\u0002\u0002\u053d\u0542\u0005\u02ae\u0158\u0002\u053e\u053f\u0007\u01f1",
    "\u0002\u0002\u053f\u0541\u0005\u02ae\u0158\u0002\u0540\u053e\u0003\u0002",
    "\u0002\u0002\u0541\u0544\u0003\u0002\u0002\u0002\u0542\u0540\u0003\u0002",
    "\u0002\u0002\u0542\u0543\u0003\u0002\u0002\u0002\u0543\u0546\u0003\u0002",
    "\u0002\u0002\u0544\u0542\u0003\u0002\u0002\u0002\u0545\u053c\u0003\u0002",
    "\u0002\u0002\u0545\u0546\u0003\u0002\u0002\u0002\u0546Q\u0003\u0002",
    "\u0002\u0002\u0547\u0548\u0007\u00ee\u0002\u0002\u0548\u0549\u0007\u0178",
    "\u0002\u0002\u0549\u054a\u0005\u02b0\u0159\u0002\u054a\u054b\u0007\u0103",
    "\u0002\u0002\u054bS\u0003\u0002\u0002\u0002\u054c\u054e\u0007\u0131",
    "\u0002\u0002\u054d\u054f\u0005V,\u0002\u054e\u054d\u0003\u0002\u0002",
    "\u0002\u054f\u0550\u0003\u0002\u0002\u0002\u0550\u054e\u0003\u0002\u0002",
    "\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551U\u0003\u0002\u0002",
    "\u0002\u0552\u0553\t\u000b\u0002\u0002\u0553\u0554\u0005\u0268\u0135",
    "\u0002\u0554W\u0003\u0002\u0002\u0002\u0555\u0556\u0007r\u0002\u0002",
    "\u0556\u0558\u0007\u018d\u0002\u0002\u0557\u0559\u0007#\u0002\u0002",
    "\u0558\u0557\u0003\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002",
    "\u0559\u055a\u0003\u0002\u0002\u0002\u055a\u055c\u0005\u0296\u014c\u0002",
    "\u055b\u055d\t\f\u0002\u0002\u055c\u055b\u0003\u0002\u0002\u0002\u055c",
    "\u055d\u0003\u0002\u0002\u0002\u055dY\u0003\u0002\u0002\u0002\u055e",
    "\u055f\u0007\n\u0002\u0002\u055f\u0560\u0007\u018d\u0002\u0002\u0560",
    "\u0566\u0005\u0296\u014c\u0002\u0561\u0567\u0005\\/\u0002\u0562\u0567",
    "\u0005^0\u0002\u0563\u0567\u0005`1\u0002\u0564\u0567\u0005h5\u0002\u0565",
    "\u0567\u0005\u008aF\u0002\u0566\u0561\u0003\u0002\u0002\u0002\u0566",
    "\u0562\u0003\u0002\u0002\u0002\u0566\u0563\u0003\u0002\u0002\u0002\u0566",
    "\u0564\u0003\u0002\u0002\u0002\u0566\u0565\u0003\u0002\u0002\u0002\u0567",
    "\u0569\u0003\u0002\u0002\u0002\u0568\u056a\u0005j6\u0002\u0569\u0568",
    "\u0003\u0002\u0002\u0002\u0569\u056a\u0003\u0002\u0002\u0002\u056a[",
    "\u0003\u0002\u0002\u0002\u056b\u056d\u0007?\u0002\u0002\u056c\u056e",
    "\u0007^\u0002\u0002\u056d\u056c\u0003\u0002\u0002\u0002\u056d\u056e",
    "\u0003\u0002\u0002\u0002\u056e\u0570\u0003\u0002\u0002\u0002\u056f\u0571",
    "\t\r\u0002\u0002\u0570\u056f\u0003\u0002\u0002\u0002\u0570\u0571\u0003",
    "\u0002\u0002\u0002\u0571\u0575\u0003\u0002\u0002\u0002\u0572\u0574\u0005",
    "\u00b0Y\u0002\u0573\u0572\u0003\u0002\u0002\u0002\u0574\u0577\u0003",
    "\u0002\u0002\u0002\u0575\u0573\u0003\u0002\u0002\u0002\u0575\u0576\u0003",
    "\u0002\u0002\u0002\u0576\u057a\u0003\u0002\u0002\u0002\u0577\u0575\u0003",
    "\u0002\u0002\u0002\u0578\u0579\u0007\u013c\u0002\u0002\u0579\u057b\u0007",
    "\u015a\u0002\u0002\u057a\u0578\u0003\u0002\u0002\u0002\u057a\u057b\u0003",
    "\u0002\u0002\u0002\u057b]\u0003\u0002\u0002\u0002\u057c\u057e\u0007",
    "\u0135\u0002\u0002\u057d\u057f\u0005\u00aeX\u0002\u057e\u057d\u0003",
    "\u0002\u0002\u0002\u057e\u057f\u0003\u0002\u0002\u0002\u057f\u0580\u0003",
    "\u0002\u0002\u0002\u0580\u0581\u0007\u000f\u0002\u0002\u0581\u0582\u0007",
    "\u0102\u0002\u0002\u0582\u0583\u0007\u01eb\u0002\u0002\u0583\u0588\u0005",
    "\u008cG\u0002\u0584\u0585\u0007\u01f1\u0002\u0002\u0585\u0587\u0005",
    "\u008cG\u0002\u0586\u0584\u0003\u0002\u0002\u0002\u0587\u058a\u0003",
    "\u0002\u0002\u0002\u0588\u0586\u0003\u0002\u0002\u0002\u0588\u0589\u0003",
    "\u0002\u0002\u0002\u0589\u058b\u0003\u0002\u0002\u0002\u058a\u0588\u0003",
    "\u0002\u0002\u0002\u058b\u058c\u0007\u01ec\u0002\u0002\u058c_\u0003",
    "\u0002\u0002\u0002\u058d\u0592\u0005b2\u0002\u058e\u058f\u0007\u01f1",
    "\u0002\u0002\u058f\u0591\u0005b2\u0002\u0590\u058e\u0003\u0002\u0002",
    "\u0002\u0591\u0594\u0003\u0002\u0002\u0002\u0592\u0590\u0003\u0002\u0002",
    "\u0002\u0592\u0593\u0003\u0002\u0002\u0002\u0593a\u0003\u0002\u0002",
    "\u0002\u0594\u0592\u0003\u0002\u0002\u0002\u0595\u0598\t\u000e\u0002",
    "\u0002\u0596\u0599\u0005\u009cO\u0002\u0597\u0599\u0005\u0094K\u0002",
    "\u0598\u0596\u0003\u0002\u0002\u0002\u0598\u0597\u0003\u0002\u0002\u0002",
    "\u0599c\u0003\u0002\u0002\u0002\u059a\u059b\t\u000f\u0002\u0002\u059b",
    "\u05a8\u0007\u0013\u0002\u0002\u059c\u05a9\u0005f4\u0002\u059d\u059e",
    "\u0007\u01eb\u0002\u0002\u059e\u05a3\u0005f4\u0002\u059f\u05a0\u0007",
    "\u01f1\u0002\u0002\u05a0\u05a2\u0005f4\u0002\u05a1\u059f\u0003\u0002",
    "\u0002\u0002\u05a2\u05a5\u0003\u0002\u0002\u0002\u05a3\u05a1\u0003\u0002",
    "\u0002\u0002\u05a3\u05a4\u0003\u0002\u0002\u0002\u05a4\u05a6\u0003\u0002",
    "\u0002\u0002\u05a5\u05a3\u0003\u0002\u0002\u0002\u05a6\u05a7\u0007\u01ec",
    "\u0002\u0002\u05a7\u05a9\u0003\u0002\u0002\u0002\u05a8\u059c\u0003\u0002",
    "\u0002\u0002\u05a8\u059d\u0003\u0002\u0002\u0002\u05a9e\u0003\u0002",
    "\u0002\u0002\u05aa\u05ac\u0005\u0278\u013d\u0002\u05ab\u05ad\u0005\u02c2",
    "\u0162\u0002\u05ac\u05ab\u0003\u0002\u0002\u0002\u05ac\u05ad\u0003\u0002",
    "\u0002\u0002\u05adg\u0003\u0002\u0002\u0002\u05ae\u05b4\u0007\u00e3",
    "\u0002\u0002\u05af\u05b0\u0007\u00cd\u0002\u0002\u05b0\u05b5\u0005\u01ee",
    "\u00f8\u0002\u05b1\u05b2\u0007u\u0002\u0002\u05b2\u05b3\u0007\u018d",
    "\u0002\u0002\u05b3\u05b5\u0005\u02c2\u0162\u0002\u05b4\u05af\u0003\u0002",
    "\u0002\u0002\u05b4\u05b1\u0003\u0002\u0002\u0002\u05b5i\u0003\u0002",
    "\u0002\u0002\u05b6\u05c7\u0007\u00bb\u0002\u0002\u05b7\u05c1\u0007.",
    "\u0002\u0002\u05b8\u05b9\u0007J\u0002\u0002\u05b9\u05ba\u0007\u0184",
    "\u0002\u0002\u05ba\u05c2\u0007\u0174\u0002\u0002\u05bb\u05bd\u0007\u00fb",
    "\u0002\u0002\u05bc\u05bb\u0003\u0002\u0002\u0002\u05bc\u05bd\u0003\u0002",
    "\u0002\u0002\u05bd\u05be\u0003\u0002\u0002\u0002\u05be\u05bf\u0007\u00a8",
    "\u0002\u0002\u05bf\u05c0\u0007\u0178\u0002\u0002\u05c0\u05c2\u0007W",
    "\u0002\u0002\u05c1\u05b8\u0003\u0002\u0002\u0002\u05c1\u05bc\u0003\u0002",
    "\u0002\u0002\u05c1\u05c2\u0003\u0002\u0002\u0002\u05c2\u05c4\u0003\u0002",
    "\u0002\u0002\u05c3\u05c5\u0005l7\u0002\u05c4\u05c3\u0003\u0002\u0002",
    "\u0002\u05c4\u05c5\u0003\u0002\u0002\u0002\u05c5\u05c7\u0003\u0002\u0002",
    "\u0002\u05c6\u05b6\u0003\u0002\u0002\u0002\u05c6\u05b7\u0003\u0002\u0002",
    "\u0002\u05c7k\u0003\u0002\u0002\u0002\u05c8\u05ca\u0007\u0097\u0002",
    "\u0002\u05c9\u05c8\u0003\u0002\u0002\u0002\u05c9\u05ca\u0003\u0002\u0002",
    "\u0002\u05ca\u05cb\u0003\u0002\u0002\u0002\u05cb\u05cc\u0007\u0083\u0002",
    "\u0002\u05cc\u05cd\u0007\u00ba\u0002\u0002\u05cd\u05ce\u0005\u02b0\u0159",
    "\u0002\u05cem\u0003\u0002\u0002\u0002\u05cf\u05d2\u0007O\u0002\u0002",
    "\u05d0\u05d1\u0007\u010b\u0002\u0002\u05d1\u05d3\u0007\u0135\u0002\u0002",
    "\u05d2\u05d0\u0003\u0002\u0002\u0002\u05d2\u05d3\u0003\u0002\u0002\u0002",
    "\u05d3\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d7\u0007\u018d\u0002\u0002",
    "\u05d5\u05d8\u0005p9\u0002\u05d6\u05d8\u0005|?\u0002\u05d7\u05d5\u0003",
    "\u0002\u0002\u0002\u05d7\u05d6\u0003\u0002\u0002\u0002\u05d8o\u0003",
    "\u0002\u0002\u0002\u05d9\u05dc\u0005\u0296\u014c\u0002\u05da\u05db\u0007",
    "\u0105\u0002\u0002\u05db\u05dd\u0007\u01e7\u0002\u0002\u05dc\u05da\u0003",
    "\u0002\u0002\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05df\u0003",
    "\u0002\u0002\u0002\u05de\u05e0\u0005r:\u0002\u05df\u05de\u0003\u0002",
    "\u0002\u0002\u05df\u05e0\u0003\u0002\u0002\u0002\u05e0q\u0003\u0002",
    "\u0002\u0002\u05e1\u05e3\u0005\u00aeX\u0002\u05e2\u05e1\u0003\u0002",
    "\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e6\u0003\u0002",
    "\u0002\u0002\u05e4\u05e7\u0005t;\u0002\u05e5\u05e7\u0005v<\u0002\u05e6",
    "\u05e4\u0003\u0002\u0002\u0002\u05e6\u05e5\u0003\u0002\u0002\u0002\u05e7",
    "\u05e9\u0003\u0002\u0002\u0002\u05e8\u05ea\u0005z>\u0002\u05e9\u05e8",
    "\u0003\u0002\u0002\u0002\u05e9\u05ea\u0003\u0002\u0002\u0002\u05ea\u05f6",
    "\u0003\u0002\u0002\u0002\u05eb\u05ec\u0007\u01eb\u0002\u0002\u05ec\u05f1",
    "\u0005\u008cG\u0002\u05ed\u05ee\u0007\u01f1\u0002\u0002\u05ee\u05f0",
    "\u0005\u008cG\u0002\u05ef\u05ed\u0003\u0002\u0002\u0002\u05f0\u05f3",
    "\u0003\u0002\u0002\u0002\u05f1\u05ef\u0003\u0002\u0002\u0002\u05f1\u05f2",
    "\u0003\u0002\u0002\u0002\u05f2\u05f4\u0003\u0002\u0002\u0002\u05f3\u05f1",
    "\u0003\u0002\u0002\u0002\u05f4\u05f5\u0007\u01ec\u0002\u0002\u05f5\u05f7",
    "\u0003\u0002\u0002\u0002\u05f6\u05eb\u0003\u0002\u0002\u0002\u05f6\u05f7",
    "\u0003\u0002\u0002\u0002\u05f7\u05fb\u0003\u0002\u0002\u0002\u05f8\u05fa",
    "\u0005\u008aF\u0002\u05f9\u05f8\u0003\u0002\u0002\u0002\u05fa\u05fd",
    "\u0003\u0002\u0002\u0002\u05fb\u05f9\u0003\u0002\u0002\u0002\u05fb\u05fc",
    "\u0003\u0002\u0002\u0002\u05fcs\u0003\u0002\u0002\u0002\u05fd\u05fb",
    "\u0003\u0002\u0002\u0002\u05fe\u0602\t\u0003\u0002\u0002\u05ff\u0603",
    "\u0007\u0102\u0002\u0002\u0600\u0603\u0005\u00dco\u0002\u0601\u0603",
    "\u0005x=\u0002\u0602\u05ff\u0003\u0002\u0002\u0002\u0602\u0600\u0003",
    "\u0002\u0002\u0002\u0602\u0601\u0003\u0002\u0002\u0002\u0603u\u0003",
    "\u0002\u0002\u0002\u0604\u0605\u0007\u018f\u0002\u0002\u0605\u0606\u0005",
    "\u02c2\u0162\u0002\u0606w\u0003\u0002\u0002\u0002\u0607\u0608\u0007",
    "\u0178\u0002\u0002\u0608\u0609\u0007\u0103\u0002\u0002\u0609\u060c\u0005",
    "\u02c2\u0162\u0002\u060a\u060b\u0007\u00fb\u0002\u0002\u060b\u060d\u0007",
    "\u00fd\u0002\u0002\u060c\u060a\u0003\u0002\u0002\u0002\u060c\u060d\u0003",
    "\u0002\u0002\u0002\u060dy\u0003\u0002\u0002\u0002\u060e\u060f\u0007",
    "\u008a\u0002\u0002\u060f\u0610\u0007\u00e6\u0002\u0002\u0610\u0611\u0005",
    "\u01ee\u00f8\u0002\u0611\u0612\u0007\u00c2\u0002\u0002\u0612\u0613\u0007",
    "\u00bf\u0002\u0002\u0613\u0614\u0007\u019a\u0002\u0002\u0614\u0615\t",
    "\u0010\u0002\u0002\u0615{\u0003\u0002\u0002\u0002\u0616\u0617\u0007",
    "#\u0002\u0002\u0617\u0618\u0005\u0296\u014c\u0002\u0618\u061a\t\u0003",
    "\u0002\u0002\u0619\u061b\u0005~@\u0002\u061a\u0619\u0003\u0002\u0002",
    "\u0002\u061b\u061c\u0003\u0002\u0002\u0002\u061c\u061a\u0003\u0002\u0002",
    "\u0002\u061c\u061d\u0003\u0002\u0002\u0002\u061d\u061e\u0003\u0002\u0002",
    "\u0002\u061e\u061f\u0007{\u0002\u0002\u061f}\u0003\u0002\u0002\u0002",
    "\u0620\u0623\u0005\u0080A\u0002\u0621\u0623\u0005\u0082B\u0002\u0622",
    "\u0620\u0003\u0002\u0002\u0002\u0622\u0621\u0003\u0002\u0002\u0002\u0623",
    "\u007f\u0003\u0002\u0002\u0002\u0624\u0625\t\u0011\u0002\u0002\u0625",
    "\u0626\u0007\u00db\u0002\u0002\u0626\u0627\u0005\u0086D\u0002\u0627",
    "\u0081\u0003\u0002\u0002\u0002\u0628\u062c\t\u0012\u0002\u0002\u0629",
    "\u062d\u0005\u0084C\u0002\u062a\u062d\u0005\u0086D\u0002\u062b\u062d",
    "\u0005\u0088E\u0002\u062c\u0629\u0003\u0002\u0002\u0002\u062c\u062a",
    "\u0003\u0002\u0002\u0002\u062c\u062b\u0003\u0002\u0002\u0002\u062d\u0083",
    "\u0003\u0002\u0002\u0002\u062e\u062f\u0007\u0128\u0002\u0002\u062f\u0630",
    "\u0005\u029e\u0150\u0002\u0630\u0631\u0007\u01eb\u0002\u0002\u0631\u0636",
    "\u0005\u00a2R\u0002\u0632\u0633\u0007\u01f1\u0002\u0002\u0633\u0635",
    "\u0005\u00a2R\u0002\u0634\u0632\u0003\u0002\u0002\u0002\u0635\u0638",
    "\u0003\u0002\u0002\u0002\u0636\u0634\u0003\u0002\u0002\u0002\u0636\u0637",
    "\u0003\u0002\u0002\u0002\u0637\u0639\u0003\u0002\u0002\u0002\u0638\u0636",
    "\u0003\u0002\u0002\u0002\u0639\u063a\u0007\u01ec\u0002\u0002\u063a\u0648",
    "\t\u0003\u0002\u0002\u063b\u0649\u0005\u00b2Z\u0002\u063c\u063e\u0007",
    "a\u0002\u0002\u063d\u063c\u0003\u0002\u0002\u0002\u063d\u063e\u0003",
    "\u0002\u0002\u0002\u063e\u0642\u0003\u0002\u0002\u0002\u063f\u0641\u0005",
    "\u00c0a\u0002\u0640\u063f\u0003\u0002\u0002\u0002\u0641\u0644\u0003",
    "\u0002\u0002\u0002\u0642\u0640\u0003\u0002\u0002\u0002\u0642\u0643\u0003",
    "\u0002\u0002\u0002\u0643\u0645\u0003\u0002\u0002\u0002\u0644\u0642\u0003",
    "\u0002\u0002\u0002\u0645\u0646\u0005\u010a\u0086\u0002\u0646\u0647\u0007",
    "\u01f7\u0002\u0002\u0647\u0649\u0003\u0002\u0002\u0002\u0648\u063b\u0003",
    "\u0002\u0002\u0002\u0648\u063d\u0003\u0002\u0002\u0002\u0649\u0085\u0003",
    "\u0002\u0002\u0002\u064a\u064b\u0007\u009a\u0002\u0002\u064b\u0657\u0005",
    "\u029c\u014f\u0002\u064c\u064d\u0007\u01eb\u0002\u0002\u064d\u0652\u0005",
    "\u00a2R\u0002\u064e\u064f\u0007\u01f1\u0002\u0002\u064f\u0651\u0005",
    "\u00a2R\u0002\u0650\u064e\u0003\u0002\u0002\u0002\u0651\u0654\u0003",
    "\u0002\u0002\u0002\u0652\u0650\u0003\u0002\u0002\u0002\u0652\u0653\u0003",
    "\u0002\u0002\u0002\u0653\u0655\u0003\u0002\u0002\u0002\u0654\u0652\u0003",
    "\u0002\u0002\u0002\u0655\u0656\u0007\u01ec\u0002\u0002\u0656\u0658\u0003",
    "\u0002\u0002\u0002\u0657\u064c\u0003\u0002\u0002\u0002\u0657\u0658\u0003",
    "\u0002\u0002\u0002\u0658\u0659\u0003\u0002\u0002\u0002\u0659\u065a\u0007",
    "\u013a\u0002\u0002\u065a\u065b\u0005\u02c2\u0162\u0002\u065b\u0669\t",
    "\u0003\u0002\u0002\u065c\u066a\u0005\u00b2Z\u0002\u065d\u065f\u0007",
    "a\u0002\u0002\u065e\u065d\u0003\u0002\u0002\u0002\u065e\u065f\u0003",
    "\u0002\u0002\u0002\u065f\u0663\u0003\u0002\u0002\u0002\u0660\u0662\u0005",
    "\u00c0a\u0002\u0661\u0660\u0003\u0002\u0002\u0002\u0662\u0665\u0003",
    "\u0002\u0002\u0002\u0663\u0661\u0003\u0002\u0002\u0002\u0663\u0664\u0003",
    "\u0002\u0002\u0002\u0664\u0666\u0003\u0002\u0002\u0002\u0665\u0663\u0003",
    "\u0002\u0002\u0002\u0666\u0667\u0005\u010a\u0086\u0002\u0667\u0668\u0007",
    "\u01f7\u0002\u0002\u0668\u066a\u0003\u0002\u0002\u0002\u0669\u065c\u0003",
    "\u0002\u0002\u0002\u0669\u065e\u0003\u0002\u0002\u0002\u066a\u0087\u0003",
    "\u0002\u0002\u0002\u066b\u066d\u0007\u008f\u0002\u0002\u066c\u066b\u0003",
    "\u0002\u0002\u0002\u066c\u066d\u0003\u0002\u0002\u0002\u066d\u066f\u0003",
    "\u0002\u0002\u0002\u066e\u0670\u0007\u00b4\u0002\u0002\u066f\u066e\u0003",
    "\u0002\u0002\u0002\u066f\u0670\u0003\u0002\u0002\u0002\u0670\u0671\u0003",
    "\u0002\u0002\u0002\u0671\u0672\u0007F\u0002\u0002\u0672\u0673\u0007",
    "\u009a\u0002\u0002\u0673\u0685\u0005\u02c2\u0162\u0002\u0674\u0675\u0007",
    "\u01eb\u0002\u0002\u0675\u0676\u0007\u0151\u0002\u0002\u0676\u0677\u0007",
    "\u00a6\u0002\u0002\u0677\u0678\u0007\u0110\u0002\u0002\u0678\u0679\u0005",
    "\u02c2\u0162\u0002\u0679\u067a\u0007\u01f1\u0002\u0002\u067a\u067b\u0003",
    "\u0002\u0002\u0002\u067b\u0680\u0005\u00a2R\u0002\u067c\u067d\u0007",
    "\u01f1\u0002\u0002\u067d\u067f\u0005\u00a2R\u0002\u067e\u067c\u0003",
    "\u0002\u0002\u0002\u067f\u0682\u0003\u0002\u0002\u0002\u0680\u067e\u0003",
    "\u0002\u0002\u0002\u0680\u0681\u0003\u0002\u0002\u0002\u0681\u0683\u0003",
    "\u0002\u0002\u0002\u0682\u0680\u0003\u0002\u0002\u0002\u0683\u0684\u0007",
    "\u01ec\u0002\u0002\u0684\u0686\u0003\u0002\u0002\u0002\u0685\u0674\u0003",
    "\u0002\u0002\u0002\u0685\u0686\u0003\u0002\u0002\u0002\u0686\u0687\u0003",
    "\u0002\u0002\u0002\u0687\u0688\u0007\u013a\u0002\u0002\u0688\u0689\u0007",
    "\u0151\u0002\u0002\u0689\u068a\u0007\u000f\u0002\u0002\u068a\u068b\u0007",
    "\u0138\u0002\u0002\u068b\u0699\t\u0003\u0002\u0002\u068c\u069a\u0005",
    "\u00b2Z\u0002\u068d\u068f\u0007a\u0002\u0002\u068e\u068d\u0003\u0002",
    "\u0002\u0002\u068e\u068f\u0003\u0002\u0002\u0002\u068f\u0693\u0003\u0002",
    "\u0002\u0002\u0690\u0692\u0005\u00c0a\u0002\u0691\u0690\u0003\u0002",
    "\u0002\u0002\u0692\u0695\u0003\u0002\u0002\u0002\u0693\u0691\u0003\u0002",
    "\u0002\u0002\u0693\u0694\u0003\u0002\u0002\u0002\u0694\u0696\u0003\u0002",
    "\u0002\u0002\u0695\u0693\u0003\u0002\u0002\u0002\u0696\u0697\u0005\u010a",
    "\u0086\u0002\u0697\u0698\u0007\u01f7\u0002\u0002\u0698\u069a\u0003\u0002",
    "\u0002\u0002\u0699\u068c\u0003\u0002\u0002\u0002\u0699\u068e\u0003\u0002",
    "\u0002\u0002\u069a\u0089\u0003\u0002\u0002\u0002\u069b\u069d\u0007\u00fb",
    "\u0002\u0002\u069c\u069b\u0003\u0002\u0002\u0002\u069c\u069d\u0003\u0002",
    "\u0002\u0002\u069d\u069e\u0003\u0002\u0002\u0002\u069e\u069f\t\u0013",
    "\u0002\u0002\u069f\u008b\u0003\u0002\u0002\u0002\u06a0\u06a1\u0005\u02d8",
    "\u016d\u0002\u06a1\u06a3\u0005\u02c2\u0162\u0002\u06a2\u06a4\u0005\u008e",
    "H\u0002\u06a3\u06a2\u0003\u0002\u0002\u0002\u06a3\u06a4\u0003\u0002",
    "\u0002\u0002\u06a4\u06a7\u0003\u0002\u0002\u0002\u06a5\u06a7\u0005\u0090",
    "I\u0002\u06a6\u06a0\u0003\u0002\u0002\u0002\u06a6\u06a5\u0003\u0002",
    "\u0002\u0002\u06a7\u008d\u0003\u0002\u0002\u0002\u06a8\u06a9\u0007\u008a",
    "\u0002\u0002\u06a9\u06aa\u0007\u00e6\u0002\u0002\u06aa\u06ab\u0005\u01ee",
    "\u00f8\u0002\u06ab\u008f\u0003\u0002\u0002\u0002\u06ac\u06ae\u0005\u008a",
    "F\u0002\u06ad\u06ac\u0003\u0002\u0002\u0002\u06ad\u06ae\u0003\u0002",
    "\u0002\u0002\u06ae\u06b0\u0003\u0002\u0002\u0002\u06af\u06b1\u0005\u0092",
    "J\u0002\u06b0\u06af\u0003\u0002\u0002\u0002\u06b1\u06b2\u0003\u0002",
    "\u0002\u0002\u06b2\u06b0\u0003\u0002\u0002\u0002\u06b2\u06b3\u0003\u0002",
    "\u0002\u0002\u06b3\u06b6\u0003\u0002\u0002\u0002\u06b4\u06b5\u0007\u01f1",
    "\u0002\u0002\u06b5\u06b7\u0005\u009eP\u0002\u06b6\u06b4\u0003\u0002",
    "\u0002\u0002\u06b6\u06b7\u0003\u0002\u0002\u0002\u06b7\u0091\u0003\u0002",
    "\u0002\u0002\u06b8\u06bc\u0005\u0094K\u0002\u06b9\u06bc\u0005\u009a",
    "N\u0002\u06ba\u06bc\u0005\u009cO\u0002\u06bb\u06b8\u0003\u0002\u0002",
    "\u0002\u06bb\u06b9\u0003\u0002\u0002\u0002\u06bb\u06ba\u0003\u0002\u0002",
    "\u0002\u06bc\u0093\u0003\u0002\u0002\u0002\u06bd\u06c0\t\u0012\u0002",
    "\u0002\u06be\u06c1\u0005\u0096L\u0002\u06bf\u06c1\u0005\u0098M\u0002",
    "\u06c0\u06be\u0003\u0002\u0002\u0002\u06c0\u06bf\u0003\u0002\u0002\u0002",
    "\u06c1\u0095\u0003\u0002\u0002\u0002\u06c2\u06c3\u0007\u0128\u0002\u0002",
    "\u06c3\u06c4\u0005\u029e\u0150\u0002\u06c4\u06c5\u0007\u01eb\u0002\u0002",
    "\u06c5\u06ca\u0005\u00a2R\u0002\u06c6\u06c7\u0007\u01f1\u0002\u0002",
    "\u06c7\u06c9\u0005\u00a2R\u0002\u06c8\u06c6\u0003\u0002\u0002\u0002",
    "\u06c9\u06cc\u0003\u0002\u0002\u0002\u06ca\u06c8\u0003\u0002\u0002\u0002",
    "\u06ca\u06cb\u0003\u0002\u0002\u0002\u06cb\u06cd\u0003\u0002\u0002\u0002",
    "\u06cc\u06ca\u0003\u0002\u0002\u0002\u06cd\u06d0\u0007\u01ec\u0002\u0002",
    "\u06ce\u06cf\t\u0003\u0002\u0002\u06cf\u06d1\u0005\u00b2Z\u0002\u06d0",
    "\u06ce\u0003\u0002\u0002\u0002\u06d0\u06d1\u0003\u0002\u0002\u0002\u06d1",
    "\u0097\u0003\u0002\u0002\u0002\u06d2\u06d3\u0007\u009a\u0002\u0002\u06d3",
    "\u06df\u0005\u029c\u014f\u0002\u06d4\u06d5\u0007\u01eb\u0002\u0002\u06d5",
    "\u06da\u0005\u00a2R\u0002\u06d6\u06d7\u0007\u01f1\u0002\u0002\u06d7",
    "\u06d9\u0005\u00a2R\u0002\u06d8\u06d6\u0003\u0002\u0002\u0002\u06d9",
    "\u06dc\u0003\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002\u0002\u06da",
    "\u06db\u0003\u0002\u0002\u0002\u06db\u06dd\u0003\u0002\u0002\u0002\u06dc",
    "\u06da\u0003\u0002\u0002\u0002\u06dd\u06de\u0007\u01ec\u0002\u0002\u06de",
    "\u06e0\u0003\u0002\u0002\u0002\u06df\u06d4\u0003\u0002\u0002\u0002\u06df",
    "\u06e0\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002\u06e1",
    "\u06e6\u0007\u013a\u0002\u0002\u06e2\u06e7\u0005\u02c2\u0162\u0002\u06e3",
    "\u06e4\u0007\u0151\u0002\u0002\u06e4\u06e5\u0007\u000f\u0002\u0002\u06e5",
    "\u06e7\u0007\u0138\u0002\u0002\u06e6\u06e2\u0003\u0002\u0002\u0002\u06e6",
    "\u06e3\u0003\u0002\u0002\u0002\u06e7\u06f0\u0003\u0002\u0002\u0002\u06e8",
    "\u06e9\t\u0003\u0002\u0002\u06e9\u06f1\u0005\u00b2Z\u0002\u06ea\u06ec",
    "\u0007\u008a\u0002\u0002\u06eb\u06ed\u0007\u01a0\u0002\u0002\u06ec\u06eb",
    "\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002\u0002\u06ed\u06ee",
    "\u0003\u0002\u0002\u0002\u06ee\u06ef\u0007\u00e6\u0002\u0002\u06ef\u06f1",
    "\u0005\u01ee\u00f8\u0002\u06f0\u06e8\u0003\u0002\u0002\u0002\u06f0\u06ea",
    "\u0003\u0002\u0002\u0002\u06f0\u06f1\u0003\u0002\u0002\u0002\u06f1\u0099",
    "\u0003\u0002\u0002\u0002\u06f2\u06f4\u0007\u008f\u0002\u0002\u06f3\u06f2",
    "\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002\u06f4\u06f6",
    "\u0003\u0002\u0002\u0002\u06f5\u06f7\u0007\u00b4\u0002\u0002\u06f6\u06f5",
    "\u0003\u0002\u0002\u0002\u06f6\u06f7\u0003\u0002\u0002\u0002\u06f7\u06f8",
    "\u0003\u0002\u0002\u0002\u06f8\u06f9\u0007F\u0002\u0002\u06f9\u06fa",
    "\u0007\u009a\u0002\u0002\u06fa\u070c\u0005\u02c2\u0162\u0002\u06fb\u06fc",
    "\u0007\u01eb\u0002\u0002\u06fc\u06fd\u0007\u0151\u0002\u0002\u06fd\u06fe",
    "\u0007\u00a6\u0002\u0002\u06fe\u06ff\u0007\u0110\u0002\u0002\u06ff\u0700",
    "\u0005\u02c2\u0162\u0002\u0700\u0701\u0007\u01f1\u0002\u0002\u0701\u0702",
    "\u0003\u0002\u0002\u0002\u0702\u0707\u0005\u00a2R\u0002\u0703\u0704",
    "\u0007\u01f1\u0002\u0002\u0704\u0706\u0005\u00a2R\u0002\u0705\u0703",
    "\u0003\u0002\u0002\u0002\u0706\u0709\u0003\u0002\u0002\u0002\u0707\u0705",
    "\u0003\u0002\u0002\u0002\u0707\u0708\u0003\u0002\u0002\u0002\u0708\u070a",
    "\u0003\u0002\u0002\u0002\u0709\u0707\u0003\u0002\u0002\u0002\u070a\u070b",
    "\u0007\u01ec\u0002\u0002\u070b\u070d\u0003\u0002\u0002\u0002\u070c\u06fb",
    "\u0003\u0002\u0002\u0002\u070c\u070d\u0003\u0002\u0002\u0002\u070d\u070e",
    "\u0003\u0002\u0002\u0002\u070e\u070f\u0007\u013a\u0002\u0002\u070f\u0710",
    "\u0007\u0151\u0002\u0002\u0710\u0711\u0007\u000f\u0002\u0002\u0711\u0714",
    "\u0007\u0138\u0002\u0002\u0712\u0713\t\u0003\u0002\u0002\u0713\u0715",
    "\u0005\u00b2Z\u0002\u0714\u0712\u0003\u0002\u0002\u0002\u0714\u0715",
    "\u0003\u0002\u0002\u0002\u0715\u009b\u0003\u0002\u0002\u0002\u0716\u0717",
    "\t\u0011\u0002\u0002\u0717\u0718\u0007\u00db\u0002\u0002\u0718\u0719",
    "\u0005\u0098M\u0002\u0719\u009d\u0003\u0002\u0002\u0002\u071a\u071b",
    "\u0007\u0123\u0002\u0002\u071b\u071c\u0007\u0137\u0002\u0002\u071c\u071d",
    "\u0007\u01eb\u0002\u0002\u071d\u0722\u0005\u00a0Q\u0002\u071e\u071f",
    "\u0007\u01f1\u0002\u0002\u071f\u0721\u0005\u00a0Q\u0002\u0720\u071e",
    "\u0003\u0002\u0002\u0002\u0721\u0724\u0003\u0002\u0002\u0002\u0722\u0720",
    "\u0003\u0002\u0002\u0002\u0722\u0723\u0003\u0002\u0002\u0002\u0723\u0725",
    "\u0003\u0002\u0002\u0002\u0724\u0722\u0003\u0002\u0002\u0002\u0725\u0726",
    "\u0007\u01ec\u0002\u0002\u0726\u009f\u0003\u0002\u0002\u0002\u0727\u072a",
    "\u0005\u02d8\u016d\u0002\u0728\u072a\u0007d\u0002\u0002\u0729\u0727",
    "\u0003\u0002\u0002\u0002\u0729\u0728\u0003\u0002\u0002\u0002\u072a\u00a1",
    "\u0003\u0002\u0002\u0002\u072b\u072c\u0005\u0288\u0145\u0002\u072c\u072d",
    "\u0005\u02c2\u0162\u0002\u072d\u00a3\u0003\u0002\u0002\u0002\u072e\u072f",
    "\u0007r\u0002\u0002\u072f\u0730\u0007\u0152\u0002\u0002\u0730\u0731",
    "\u0005\u0298\u014d\u0002\u0731\u00a5\u0003\u0002\u0002\u0002\u0732\u0733",
    "\u0007\n\u0002\u0002\u0733\u0734\u0007\u0152\u0002\u0002\u0734\u0736",
    "\u0005\u0298\u014d\u0002\u0735\u0737\u0005\u00aaV\u0002\u0736\u0735",
    "\u0003\u0002\u0002\u0002\u0737\u0738\u0003\u0002\u0002\u0002\u0738\u0736",
    "\u0003\u0002\u0002\u0002\u0738\u0739\u0003\u0002\u0002\u0002\u0739\u00a7",
    "\u0003\u0002\u0002\u0002\u073a\u073b\u0007O\u0002\u0002\u073b\u073c",
    "\u0007\u0152\u0002\u0002\u073c\u0741\u0005\u0298\u014d\u0002\u073d\u0740",
    "\u0005\u00acW\u0002\u073e\u0740\u0005\u00aaV\u0002\u073f\u073d\u0003",
    "\u0002\u0002\u0002\u073f\u073e\u0003\u0002\u0002\u0002\u0740\u0743\u0003",
    "\u0002\u0002\u0002\u0741\u073f\u0003\u0002\u0002\u0002\u0741\u0742\u0003",
    "\u0002\u0002\u0002\u0742\u00a9\u0003\u0002\u0002\u0002\u0743\u0741\u0003",
    "\u0002\u0002\u0002\u0744\u0745\u0007\u00a9\u0002\u0002\u0745\u0746\u0007",
    "(\u0002\u0002\u0746\u0755\u0007\u01e5\u0002\u0002\u0747\u0748\u0007",
    "\u00d9\u0002\u0002\u0748\u0755\u0007\u01e5\u0002\u0002\u0749\u0755\u0007",
    "\u00f6\u0002\u0002\u074a\u074b\u0007\u00df\u0002\u0002\u074b\u0755\u0007",
    "\u01e5\u0002\u0002\u074c\u0755\u0007\u00f7\u0002\u0002\u074d\u0755\u0007",
    "V\u0002\u0002\u074e\u0755\u0007\u00f4\u0002\u0002\u074f\u0750\u0007",
    "+\u0002\u0002\u0750\u0755\u0007\u01e5\u0002\u0002\u0751\u0755\u0007",
    "\u00f2\u0002\u0002\u0752\u0755\u0007\u010d\u0002\u0002\u0753\u0755\u0007",
    "\u00f9\u0002\u0002\u0754\u0744\u0003\u0002\u0002\u0002\u0754\u0747\u0003",
    "\u0002\u0002\u0002\u0754\u0749\u0003\u0002\u0002\u0002\u0754\u074a\u0003",
    "\u0002\u0002\u0002\u0754\u074c\u0003\u0002\u0002\u0002\u0754\u074d\u0003",
    "\u0002\u0002\u0002\u0754\u074e\u0003\u0002\u0002\u0002\u0754\u074f\u0003",
    "\u0002\u0002\u0002\u0754\u0751\u0003\u0002\u0002\u0002\u0754\u0752\u0003",
    "\u0002\u0002\u0002\u0754\u0753\u0003\u0002\u0002\u0002\u0755\u00ab\u0003",
    "\u0002\u0002\u0002\u0756\u0757\u0007\u016b\u0002\u0002\u0757\u0758\u0007",
    "\u01ac\u0002\u0002\u0758\u0759\u0007\u01e5\u0002\u0002\u0759\u00ad\u0003",
    "\u0002\u0002\u0002\u075a\u075b\u0007\u0015\u0002\u0002\u075b\u075c\t",
    "\u0014\u0002\u0002\u075c\u00af\u0003\u0002\u0002\u0002\u075d\u075e\u0005",
    "\u02d8\u016d\u0002\u075e\u075f\u0007\u0202\u0002\u0002\u075f\u0760\u0005",
    "\u01ee\u00f8\u0002\u0760\u00b1\u0003\u0002\u0002\u0002\u0761\u0764\u0007",
    "\u00c2\u0002\u0002\u0762\u0765\u0005\u00b4[\u0002\u0763\u0765\u0005",
    "\u00b6\\\u0002\u0764\u0762\u0003\u0002\u0002\u0002\u0764\u0763\u0003",
    "\u0002\u0002\u0002\u0765\u00b3\u0003\u0002\u0002\u0002\u0766\u0767\u0007",
    "\u00bf\u0002\u0002\u0767\u0768\u0007\u00e6\u0002\u0002\u0768\u0769\u0007",
    "\u01e7\u0002\u0002\u0769\u00b5\u0003\u0002\u0002\u0002\u076a\u076d\u0007",
    "*\u0002\u0002\u076b\u076c\u0007\u00e6\u0002\u0002\u076c\u076e\u0007",
    "\u01e7\u0002\u0002\u076d\u076b\u0003\u0002\u0002\u0002\u076d\u076e\u0003",
    "\u0002\u0002\u0002\u076e\u076f\u0003\u0002\u0002\u0002\u076f\u0770\u0007",
    "\u00c8\u0002\u0002\u0770\u0772\u0005\u02d8\u016d\u0002\u0771\u0773\u0005",
    "\u00b8]\u0002\u0772\u0771\u0003\u0002\u0002\u0002\u0772\u0773\u0003",
    "\u0002\u0002\u0002\u0773\u0776\u0003\u0002\u0002\u0002\u0774\u0775\u0007",
    "\u01ac\u0002\u0002\u0775\u0777\u0007H\u0002\u0002\u0776\u0774\u0003",
    "\u0002\u0002\u0002\u0776\u0777\u0003\u0002\u0002\u0002\u0777\u0779\u0003",
    "\u0002\u0002\u0002\u0778\u077a\u0005\u00ba^\u0002\u0779\u0778\u0003",
    "\u0002\u0002\u0002\u0779\u077a\u0003\u0002\u0002\u0002\u077a\u00b7\u0003",
    "\u0002\u0002\u0002\u077b\u077c\u0007\u0007\u0002\u0002\u077c\u077d\u0007",
    "\u00a6\u0002\u0002\u077d\u077e\u0007\u01eb\u0002\u0002\u077e\u0783\u0005",
    "\u01ee\u00f8\u0002\u077f\u0780\u0007\u01f1\u0002\u0002\u0780\u0782\u0005",
    "\u01ee\u00f8\u0002\u0781\u077f\u0003\u0002\u0002\u0002\u0782\u0785\u0003",
    "\u0002\u0002\u0002\u0783\u0781\u0003\u0002\u0002\u0002\u0783\u0784\u0003",
    "\u0002\u0002\u0002\u0784\u0786\u0003\u0002\u0002\u0002\u0785\u0783\u0003",
    "\u0002\u0002\u0002\u0786\u0787\u0007\u01ec\u0002\u0002\u0787\u00b9\u0003",
    "\u0002\u0002\u0002\u0788\u0789\u0007\u0116\u0002\u0002\u0789\u0795\u0007",
    "\u01eb\u0002\u0002\u078a\u078f\u0005\u01ee\u00f8\u0002\u078b\u078c\u0007",
    "\u01f1\u0002\u0002\u078c\u078e\u0005\u01ee\u00f8\u0002\u078d\u078b\u0003",
    "\u0002\u0002\u0002\u078e\u0791\u0003\u0002\u0002\u0002\u078f\u078d\u0003",
    "\u0002\u0002\u0002\u078f\u0790\u0003\u0002\u0002\u0002\u0790\u0796\u0003",
    "\u0002\u0002\u0002\u0791\u078f\u0003\u0002\u0002\u0002\u0792\u0793\u0007",
    "\u01e4\u0002\u0002\u0793\u0794\u0007\u01e4\u0002\u0002\u0794\u0796\u0007",
    "\u01e4\u0002\u0002\u0795\u078a\u0003\u0002\u0002\u0002\u0795\u0792\u0003",
    "\u0002\u0002\u0002\u0796\u0797\u0003\u0002\u0002\u0002\u0797\u0798\u0007",
    "\u01ec\u0002\u0002\u0798\u00bb\u0003\u0002\u0002\u0002\u0799\u079d\u0005",
    "\u0288\u0145\u0002\u079a\u079c\t\u0015\u0002\u0002\u079b\u079a\u0003",
    "\u0002\u0002\u0002\u079c\u079f\u0003\u0002\u0002\u0002\u079d\u079b\u0003",
    "\u0002\u0002\u0002\u079d\u079e\u0003\u0002\u0002\u0002\u079e\u07a1\u0003",
    "\u0002\u0002\u0002\u079f\u079d\u0003\u0002\u0002\u0002\u07a0\u07a2\u0005",
    "\u02c2\u0162\u0002\u07a1\u07a0\u0003\u0002\u0002\u0002\u07a1\u07a2\u0003",
    "\u0002\u0002\u0002\u07a2\u07a4\u0003\u0002\u0002\u0002\u07a3\u07a5\u0005",
    "\u00be`\u0002\u07a4\u07a3\u0003\u0002\u0002\u0002\u07a4\u07a5\u0003",
    "\u0002\u0002\u0002\u07a5\u00bd\u0003\u0002\u0002\u0002\u07a6\u07a7\t",
    "\u0016\u0002\u0002\u07a7\u07a8\u0005\u01ee\u00f8\u0002\u07a8\u00bf\u0003",
    "\u0002\u0002\u0002\u07a9\u07b3\u0005\u00c2b\u0002\u07aa\u07b3\u0005",
    "\u00c4c\u0002\u07ab\u07b3\u0005\u00c6d\u0002\u07ac\u07b3\u0005\u00ca",
    "f\u0002\u07ad\u07b3\u0005\u00ccg\u0002\u07ae\u07b3\u0005\u00ceh\u0002",
    "\u07af\u07b3\u0005\u00d6l\u0002\u07b0\u07b3\u00050\u0019\u0002\u07b1",
    "\u07b3\u0005\u000e\b\u0002\u07b2\u07a9\u0003\u0002\u0002\u0002\u07b2",
    "\u07aa\u0003\u0002\u0002\u0002\u07b2\u07ab\u0003\u0002\u0002\u0002\u07b2",
    "\u07ac\u0003\u0002\u0002\u0002\u07b2\u07ad\u0003\u0002\u0002\u0002\u07b2",
    "\u07ae\u0003\u0002\u0002\u0002\u07b2\u07af\u0003\u0002\u0002\u0002\u07b2",
    "\u07b0\u0003\u0002\u0002\u0002\u07b2\u07b1\u0003\u0002\u0002\u0002\u07b3",
    "\u00c1\u0003\u0002\u0002\u0002\u07b4\u07b6\u0005\u02a2\u0152\u0002\u07b5",
    "\u07b7\u0007C\u0002\u0002\u07b6\u07b5\u0003\u0002\u0002\u0002\u07b6",
    "\u07b7\u0003\u0002\u0002\u0002\u07b7\u07b8\u0003\u0002\u0002\u0002\u07b8",
    "\u07bb\u0005\u02c2\u0162\u0002\u07b9\u07ba\u0007\u00fb\u0002\u0002\u07ba",
    "\u07bc\u0007\u00fd\u0002\u0002\u07bb\u07b9\u0003\u0002\u0002\u0002\u07bb",
    "\u07bc\u0003\u0002\u0002\u0002\u07bc\u07be\u0003\u0002\u0002\u0002\u07bd",
    "\u07bf\u0005\u00be`\u0002\u07be\u07bd\u0003\u0002\u0002\u0002\u07be",
    "\u07bf\u0003\u0002\u0002\u0002\u07bf\u07c0\u0003\u0002\u0002\u0002\u07c0",
    "\u07c1\u0007\u01f7\u0002\u0002\u07c1\u00c3\u0003\u0002\u0002\u0002\u07c2",
    "\u07c3\u0007\u0175\u0002\u0002\u07c3\u07c4\u0005\u0296\u014c\u0002\u07c4",
    "\u07c5\u0007\u00bc\u0002\u0002\u07c5\u07cb\u0005\u02c2\u0162\u0002\u07c6",
    "\u07c7\u0007\u012a\u0002\u0002\u07c7\u07c8\u0005\u01ee\u00f8\u0002\u07c8",
    "\u07c9\u0007\u0003\u0002\u0002\u07c9\u07ca\u0005\u01ee\u00f8\u0002\u07ca",
    "\u07cc\u0003\u0002\u0002\u0002\u07cb\u07c6\u0003\u0002\u0002\u0002\u07cb",
    "\u07cc\u0003\u0002\u0002\u0002\u07cc\u07cf\u0003\u0002\u0002\u0002\u07cd",
    "\u07ce\u0007\u00fb\u0002\u0002\u07ce\u07d0\u0007\u00fd\u0002\u0002\u07cf",
    "\u07cd\u0003\u0002\u0002\u0002\u07cf\u07d0\u0003\u0002\u0002\u0002\u07d0",
    "\u07d1\u0003\u0002\u0002\u0002\u07d1\u07d2\u0007\u01f7\u0002\u0002\u07d2",
    "\u00c5\u0003\u0002\u0002\u0002\u07d3\u07d4\u0007T\u0002\u0002\u07d4",
    "\u07e0\u0005\u02a6\u0154\u0002\u07d5\u07d6\u0007\u01eb\u0002\u0002\u07d6",
    "\u07db\u0005\u00c8e\u0002\u07d7\u07d8\u0007\u01f1\u0002\u0002\u07d8",
    "\u07da\u0005\u00c8e\u0002\u07d9\u07d7\u0003\u0002\u0002\u0002\u07da",
    "\u07dd\u0003\u0002\u0002\u0002\u07db\u07d9\u0003\u0002\u0002\u0002\u07db",
    "\u07dc\u0003\u0002\u0002\u0002\u07dc\u07de\u0003\u0002\u0002\u0002\u07dd",
    "\u07db\u0003\u0002\u0002\u0002\u07de\u07df\u0007\u01ec\u0002\u0002\u07df",
    "\u07e1\u0003\u0002\u0002\u0002\u07e0\u07d5\u0003\u0002\u0002\u0002\u07e0",
    "\u07e1\u0003\u0002\u0002\u0002\u07e1\u07e4\u0003\u0002\u0002\u0002\u07e2",
    "\u07e3\u0007\u013a\u0002\u0002\u07e3\u07e5\u0005\u02c2\u0162\u0002\u07e4",
    "\u07e2\u0003\u0002\u0002\u0002\u07e4\u07e5\u0003\u0002\u0002\u0002\u07e5",
    "\u07e8\u0003\u0002\u0002\u0002\u07e6\u07e7\u0007\u00bc\u0002\u0002\u07e7",
    "\u07e9\u0005\u0134\u009b\u0002\u07e8\u07e6\u0003\u0002\u0002\u0002\u07e8",
    "\u07e9\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003\u0002\u0002\u0002\u07ea",
    "\u07eb\u0007\u01f7\u0002\u0002\u07eb\u00c7\u0003\u0002\u0002\u0002\u07ec",
    "\u07f1\u0005\u0288\u0145\u0002\u07ed\u07ef\u0007\u00a6\u0002\u0002\u07ee",
    "\u07ed\u0003\u0002\u0002\u0002\u07ee\u07ef\u0003\u0002\u0002\u0002\u07ef",
    "\u07f0\u0003\u0002\u0002\u0002\u07f0\u07f2\u0005\u02c2\u0162\u0002\u07f1",
    "\u07ee\u0003\u0002\u0002\u0002\u07f1\u07f2\u0003\u0002\u0002\u0002\u07f2",
    "\u07f4\u0003\u0002\u0002\u0002\u07f3\u07f5\u0005\u00be`\u0002\u07f4",
    "\u07f3\u0003\u0002\u0002\u0002\u07f4\u07f5\u0003\u0002\u0002\u0002\u07f5",
    "\u00c9\u0003\u0002\u0002\u0002\u07f6\u07f7\u0005\u029a\u014e\u0002\u07f7",
    "\u07f8\u0007\u0081\u0002\u0002\u07f8\u07f9\u0007\u01f7\u0002\u0002\u07f9",
    "\u00cb\u0003\u0002\u0002\u0002\u07fa\u0819\u0007\u0123\u0002\u0002\u07fb",
    "\u081a\u0007\u0155\u0002\u0002\u07fc\u081a\u0007\u0018\u0002\u0002\u07fd",
    "\u07fe\u0007\u0082\u0002\u0002\u07fe\u07ff\u0007\u01eb\u0002\u0002\u07ff",
    "\u0800\u0005\u029a\u014e\u0002\u0800\u0801\u0007\u01f1\u0002\u0002\u0801",
    "\u0802\u0005\u02d4\u016b\u0002\u0802\u0803\u0007\u01ec\u0002\u0002\u0803",
    "\u081a\u0003\u0002\u0002\u0002\u0804\u0805\u0007\u00b0\u0002\u0002\u0805",
    "\u0806\u0007\u01eb\u0002\u0002\u0806\u0807\u0005\u02d8\u016d\u0002\u0807",
    "\u0808\u0007\u01f1\u0002\u0002\u0808\u0809\u0005\u01ee\u00f8\u0002\u0809",
    "\u080a\u0007\u01ec\u0002\u0002\u080a\u081a\u0003\u0002\u0002\u0002\u080b",
    "\u080c\u0007\u0137\u0002\u0002\u080c\u080f\u0007\u01eb\u0002\u0002\u080d",
    "\u0810\u0005\u02d8\u016d\u0002\u080e\u0810\u0007d\u0002\u0002\u080f",
    "\u080d\u0003\u0002\u0002\u0002\u080f\u080e\u0003\u0002\u0002\u0002\u0810",
    "\u0813\u0003\u0002\u0002\u0002\u0811\u0812\u0007\u01f1\u0002\u0002\u0812",
    "\u0814\u0005\u02d8\u016d\u0002\u0813\u0811\u0003\u0002\u0002\u0002\u0814",
    "\u0815\u0003\u0002\u0002\u0002\u0815\u0813\u0003\u0002\u0002\u0002\u0815",
    "\u0816\u0003\u0002\u0002\u0002\u0816\u0817\u0003\u0002\u0002\u0002\u0817",
    "\u0818\u0007\u01ec\u0002\u0002\u0818\u081a\u0003\u0002\u0002\u0002\u0819",
    "\u07fb\u0003\u0002\u0002\u0002\u0819\u07fc\u0003\u0002\u0002\u0002\u0819",
    "\u07fd\u0003\u0002\u0002\u0002\u0819\u0804\u0003\u0002\u0002\u0002\u0819",
    "\u080b\u0003\u0002\u0002\u0002\u081a\u081b\u0003\u0002\u0002\u0002\u081b",
    "\u081c\u0007\u01f7\u0002\u0002\u081c\u00cd\u0003\u0002\u0002\u0002\u081d",
    "\u0820\u0005\u00d0i\u0002\u081e\u0820\u0005\u00d4k\u0002\u081f\u081d",
    "\u0003\u0002\u0002\u0002\u081f\u081e\u0003\u0002\u0002\u0002\u0820\u00cf",
    "\u0003\u0002\u0002\u0002\u0821\u0822\u0007\u018d\u0002\u0002\u0822\u0823",
    "\u0005\u0296\u014c\u0002\u0823\u0836\u0007\u00bc\u0002\u0002\u0824\u0825",
    "\u0007\u012e\u0002\u0002\u0825\u0826\u0007\u01eb\u0002\u0002\u0826\u082b",
    "\u0005\u00d2j\u0002\u0827\u0828\u0007\u01f1\u0002\u0002\u0828\u082a",
    "\u0005\u00d2j\u0002\u0829\u0827\u0003\u0002\u0002\u0002\u082a\u082d",
    "\u0003\u0002\u0002\u0002\u082b\u0829\u0003\u0002\u0002\u0002\u082b\u082c",
    "\u0003\u0002\u0002\u0002\u082c\u082e\u0003\u0002\u0002\u0002\u082d\u082b",
    "\u0003\u0002\u0002\u0002\u082e\u082f\u0007\u01ec\u0002\u0002\u082f\u0837",
    "\u0003\u0002\u0002\u0002\u0830\u0831\u0007\u012f\u0002\u0002\u0831\u0834",
    "\u0007T\u0002\u0002\u0832\u0833\u0007\u013a\u0002\u0002\u0833\u0835",
    "\u0005\u02c2\u0162\u0002\u0834\u0832\u0003\u0002\u0002\u0002\u0834\u0835",
    "\u0003\u0002\u0002\u0002\u0835\u0837\u0003\u0002\u0002\u0002\u0836\u0824",
    "\u0003\u0002\u0002\u0002\u0836\u0830\u0003\u0002\u0002\u0002\u0837\u0838",
    "\u0003\u0002\u0002\u0002\u0838\u0839\u0007\u01f7\u0002\u0002\u0839\u00d1",
    "\u0003\u0002\u0002\u0002\u083a\u083c\u0005\u02ae\u0158\u0002\u083b\u083d",
    "\u0005\u02c2\u0162\u0002\u083c\u083b\u0003\u0002\u0002\u0002\u083c\u083d",
    "\u0003\u0002\u0002\u0002\u083d\u0840\u0003\u0002\u0002\u0002\u083e\u083f",
    "\u0007\u00fb\u0002\u0002\u083f\u0841\u0007\u00fd\u0002\u0002\u0840\u083e",
    "\u0003\u0002\u0002\u0002\u0840\u0841\u0003\u0002\u0002\u0002\u0841\u0843",
    "\u0003\u0002\u0002\u0002\u0842\u0844\u0005\u00be`\u0002\u0843\u0842",
    "\u0003\u0002\u0002\u0002\u0843\u0844\u0003\u0002\u0002\u0002\u0844\u00d3",
    "\u0003\u0002\u0002\u0002\u0845\u0846\u0005\u02a8\u0155\u0002\u0846\u0847",
    "\u0005\u0296\u014c\u0002\u0847\u0848\t\u0017\u0002\u0002\u0848\u0849",
    "\u0007\u01f7\u0002\u0002\u0849\u00d5\u0003\u0002\u0002\u0002\u084a\u084d",
    "\u0005\u00d8m\u0002\u084b\u084d\u0005\u00dep\u0002\u084c\u084a\u0003",
    "\u0002\u0002\u0002\u084c\u084b\u0003\u0002\u0002\u0002\u084d\u084e\u0003",
    "\u0002\u0002\u0002\u084e\u084f\u0007\u01f7\u0002\u0002\u084f\u00d7\u0003",
    "\u0002\u0002\u0002\u0850\u0851\u0007\u018d\u0002\u0002\u0851\u0852\u0005",
    "\u0296\u014c\u0002\u0852\u085e\u0007\u00bc\u0002\u0002\u0853\u0854\u0007",
    "\u0178\u0002\u0002\u0854\u0855\u0007\u0103\u0002\u0002\u0855\u0857\u0005",
    "\u02c2\u0162\u0002\u0856\u0858\u0005\u00dan\u0002\u0857\u0856\u0003",
    "\u0002\u0002\u0002\u0857\u0858\u0003\u0002\u0002\u0002\u0858\u085b\u0003",
    "\u0002\u0002\u0002\u0859\u085a\u0007\u00fb\u0002\u0002\u085a\u085c\u0007",
    "\u00fd\u0002\u0002\u085b\u0859\u0003\u0002\u0002\u0002\u085b\u085c\u0003",
    "\u0002\u0002\u0002\u085c\u085f\u0003\u0002\u0002\u0002\u085d\u085f\u0005",
    "\u00dco\u0002\u085e\u0853\u0003\u0002\u0002\u0002\u085e\u085d\u0003",
    "\u0002\u0002\u0002\u085f\u00d9\u0003\u0002\u0002\u0002\u0860\u0863\u0007",
    "\u00ac\u0002\u0002\u0861\u0863\u0007\u00ab\u0002\u0002\u0862\u0860\u0003",
    "\u0002\u0002\u0002\u0862\u0861\u0003\u0002\u0002\u0002\u0863\u0864\u0003",
    "\u0002\u0002\u0002\u0864\u0865\u0007(\u0002\u0002\u0865\u0866\u0005",
    "\u02c2\u0162\u0002\u0866\u00db\u0003\u0002\u0002\u0002\u0867\u086b\u0007",
    "\u01a1\u0002\u0002\u0868\u0869\u0007\u01a2\u0002\u0002\u0869\u086b\u0007",
    "\u000e\u0002\u0002\u086a\u0867\u0003\u0002\u0002\u0002\u086a\u0868\u0003",
    "\u0002\u0002\u0002\u086b\u086c\u0003\u0002\u0002\u0002\u086c\u086d\u0007",
    "\u01eb\u0002\u0002\u086d\u086e\u0005\u01ee\u00f8\u0002\u086e\u086f\u0007",
    "\u01ec\u0002\u0002\u086f\u0870\u0007\u0103\u0002\u0002\u0870\u0873\u0005",
    "\u02c2\u0162\u0002\u0871\u0872\u0007\u00fb\u0002\u0002\u0872\u0874\u0007",
    "\u00fd\u0002\u0002\u0873\u0871\u0003\u0002\u0002\u0002\u0873\u0874\u0003",
    "\u0002\u0002\u0002\u0874\u00dd\u0003\u0002\u0002\u0002\u0875\u0876\u0005",
    "\u027e\u0140\u0002\u0876\u0877\u0005\u02c2\u0162\u0002\u0877\u00df\u0003",
    "\u0002\u0002\u0002\u0878\u0879\u0005\u00e4s\u0002\u0879\u087a\t\u0018",
    "\u0002\u0002\u087a\u087d\u0003\u0002\u0002\u0002\u087b\u087d\u0005\u00e2",
    "r\u0002\u087c\u0878\u0003\u0002\u0002\u0002\u087c\u087b\u0003\u0002",
    "\u0002\u0002\u087d\u087e\u0003\u0002\u0002\u0002\u087e\u087c\u0003\u0002",
    "\u0002\u0002\u087e\u087f\u0003\u0002\u0002\u0002\u087f\u00e1\u0003\u0002",
    "\u0002\u0002\u0880\u0881\u0007\u01f9\u0002\u0002\u0881\u0882\u0007\u01f9",
    "\u0002\u0002\u0882\u0883\u0005\u0294\u014b\u0002\u0883\u0884\u0007\u01ff",
    "\u0002\u0002\u0884\u0885\u0007\u01ff\u0002\u0002\u0885\u00e3\u0003\u0002",
    "\u0002\u0002\u0886\u0887\u0007O\u0002\u0002\u0887\u08a1\u0005\u0002",
    "\u0002\u0002\u0888\u0889\u0007\n\u0002\u0002\u0889\u08a1\u0005\u0002",
    "\u0002\u0002\u088a\u088c\u0007\u009c\u0002\u0002\u088b\u088d\u0007\t",
    "\u0002\u0002\u088c\u088b\u0003\u0002\u0002\u0002\u088c\u088d\u0003\u0002",
    "\u0002\u0002\u088d\u088e\u0003\u0002\u0002\u0002\u088e\u08a1\u0005\u0002",
    "\u0002\u0002\u088f\u0890\u0007\u018c\u0002\u0002\u0890\u08a1\u0005\u0002",
    "\u0002\u0002\u0891\u08a1\u0005\u010a\u0086\u0002\u0892\u08a1\u0005\u0110",
    "\u0089\u0002\u0893\u08a1\u0005\u00e6t\u0002\u0894\u08a1\u0005\u00e8",
    "u\u0002\u0895\u08a1\u0005\u00eav\u0002\u0896\u08a1\u0005\u00ecw\u0002",
    "\u0897\u08a1\u0005\u00eex\u0002\u0898\u08a1\u0005\u00f4{\u0002\u0899",
    "\u08a1\u0005\u00f8}\u0002\u089a\u08a1\u0005\u0102\u0082\u0002\u089b",
    "\u08a1\u0005\u0104\u0083\u0002\u089c\u08a1\u0005\u0106\u0084\u0002\u089d",
    "\u08a1\u0005\u0214\u010b\u0002\u089e\u08a1\u0005\u0112\u008a\u0002\u089f",
    "\u08a1\u0005\u0108\u0085\u0002\u08a0\u0886\u0003\u0002\u0002\u0002\u08a0",
    "\u0888\u0003\u0002\u0002\u0002\u08a0\u088a\u0003\u0002\u0002\u0002\u08a0",
    "\u088f\u0003\u0002\u0002\u0002\u08a0\u0891\u0003\u0002\u0002\u0002\u08a0",
    "\u0892\u0003\u0002\u0002\u0002\u08a0\u0893\u0003\u0002\u0002\u0002\u08a0",
    "\u0894\u0003\u0002\u0002\u0002\u08a0\u0895\u0003\u0002\u0002\u0002\u08a0",
    "\u0896\u0003\u0002\u0002\u0002\u08a0\u0897\u0003\u0002\u0002\u0002\u08a0",
    "\u0898\u0003\u0002\u0002\u0002\u08a0\u0899\u0003\u0002\u0002\u0002\u08a0",
    "\u089a\u0003\u0002\u0002\u0002\u08a0\u089b\u0003\u0002\u0002\u0002\u08a0",
    "\u089c\u0003\u0002\u0002\u0002\u08a0\u089d\u0003\u0002\u0002\u0002\u08a0",
    "\u089e\u0003\u0002\u0002\u0002\u08a0\u089f\u0003\u0002\u0002\u0002\u08a1",
    "\u00e5\u0003\u0002\u0002\u0002\u08a2\u08a5\u0005\u02cc\u0167\u0002\u08a3",
    "\u08a5\u0005\u02ca\u0166\u0002\u08a4\u08a2\u0003\u0002\u0002\u0002\u08a4",
    "\u08a3\u0003\u0002\u0002\u0002\u08a5\u08a6\u0003\u0002\u0002\u0002\u08a6",
    "\u08a7\u0007\u01f4\u0002\u0002\u08a7\u08a8\u0005\u01ee\u00f8\u0002\u08a8",
    "\u00e7\u0003\u0002\u0002\u0002\u08a9\u08ab\u0007I\u0002\u0002\u08aa",
    "\u08ac\u0005\u0294\u014b\u0002\u08ab\u08aa\u0003\u0002\u0002\u0002\u08ab",
    "\u08ac\u0003\u0002\u0002\u0002\u08ac\u08af\u0003\u0002\u0002\u0002\u08ad",
    "\u08ae\u0007\u01a8\u0002\u0002\u08ae\u08b0\u0005\u01ec\u00f7\u0002\u08af",
    "\u08ad\u0003\u0002\u0002\u0002\u08af\u08b0\u0003\u0002\u0002\u0002\u08b0",
    "\u00e9\u0003\u0002\u0002\u0002\u08b1\u08b3\u0007\u0088\u0002\u0002\u08b2",
    "\u08b4\u0005\u0294\u014b\u0002\u08b3\u08b2\u0003\u0002\u0002\u0002\u08b3",
    "\u08b4\u0003\u0002\u0002\u0002\u08b4\u08b7\u0003\u0002\u0002\u0002\u08b5",
    "\u08b6\u0007\u01a8\u0002\u0002\u08b6\u08b8\u0005\u01ec\u00f7\u0002\u08b7",
    "\u08b5\u0003\u0002\u0002\u0002\u08b7\u08b8\u0003\u0002\u0002\u0002\u08b8",
    "\u00eb\u0003\u0002\u0002\u0002\u08b9\u08ba\u0007\u009b\u0002\u0002\u08ba",
    "\u08bb\u0005\u0294\u014b\u0002\u08bb\u00ed\u0003\u0002\u0002\u0002\u08bc",
    "\u08bd\u0007\u00a3\u0002\u0002\u08bd\u08be\u0005\u01ec\u00f7\u0002\u08be",
    "\u08bf\u0007\u017a\u0002\u0002\u08bf\u08c3\u0005\u00e0q\u0002\u08c0",
    "\u08c2\u0005\u00f0y\u0002\u08c1\u08c0\u0003\u0002\u0002\u0002\u08c2",
    "\u08c5\u0003\u0002\u0002\u0002\u08c3\u08c1\u0003\u0002\u0002\u0002\u08c3",
    "\u08c4\u0003\u0002\u0002\u0002\u08c4\u08c7\u0003\u0002\u0002\u0002\u08c5",
    "\u08c3\u0003\u0002\u0002\u0002\u08c6\u08c8\u0005\u00f2z\u0002\u08c7",
    "\u08c6\u0003\u0002\u0002\u0002\u08c7\u08c8\u0003\u0002\u0002\u0002\u08c8",
    "\u08c9\u0003\u0002\u0002\u0002\u08c9\u08ca\u0007{\u0002\u0002\u08ca",
    "\u08cb\u0007\u00a3\u0002\u0002\u08cb\u00ef\u0003\u0002\u0002\u0002\u08cc",
    "\u08cd\u0007w\u0002\u0002\u08cd\u08ce\u0005\u01ec\u00f7\u0002\u08ce",
    "\u08cf\u0007\u017a\u0002\u0002\u08cf\u08d0\u0005\u00e0q\u0002\u08d0",
    "\u00f1\u0003\u0002\u0002\u0002\u08d1\u08d2\u0007v\u0002\u0002\u08d2",
    "\u08d3\u0005\u00e0q\u0002\u08d3\u00f3\u0003\u0002\u0002\u0002\u08d4",
    "\u08d6\u0005\u0294\u014b\u0002\u08d5\u08d4\u0003\u0002\u0002\u0002\u08d5",
    "\u08d6\u0003\u0002\u0002\u0002\u08d6\u08db\u0003\u0002\u0002\u0002\u08d7",
    "\u08d8\u0007\u01ab\u0002\u0002\u08d8\u08dc\u0005\u01ec\u00f7\u0002\u08d9",
    "\u08da\u0007\u0095\u0002\u0002\u08da\u08dc\u0005\u00f6|\u0002\u08db",
    "\u08d7\u0003\u0002\u0002\u0002\u08db\u08d9\u0003\u0002\u0002\u0002\u08db",
    "\u08dc\u0003\u0002\u0002\u0002\u08dc\u08dd\u0003\u0002\u0002\u0002\u08dd",
    "\u08de\u0007\u00d5\u0002\u0002\u08de\u08df\u0005\u00e0q\u0002\u08df",
    "\u08e0\u0007{\u0002\u0002\u08e0\u08e2\u0007\u00d5\u0002\u0002\u08e1",
    "\u08e3\u0005\u0294\u014b\u0002\u08e2\u08e1\u0003\u0002\u0002\u0002\u08e2",
    "\u08e3\u0003\u0002\u0002\u0002\u08e3\u00f5\u0003\u0002\u0002\u0002\u08e4",
    "\u08e5\u0005\u02a4\u0153\u0002\u08e5\u08e7\u0007\u00a6\u0002\u0002\u08e6",
    "\u08e8\u0007\u013d\u0002\u0002\u08e7\u08e6\u0003\u0002\u0002\u0002\u08e7",
    "\u08e8\u0003\u0002\u0002\u0002\u08e8\u08e9\u0003\u0002\u0002\u0002\u08e9",
    "\u08ea\u0005\u00fe\u0080\u0002\u08ea\u08eb\u0007\u0003\u0002\u0002\u08eb",
    "\u08ec\u0005\u0100\u0081\u0002\u08ec\u08fa\u0003\u0002\u0002\u0002\u08ed",
    "\u08ee\u0005\u02a8\u0155\u0002\u08ee\u08f7\u0007\u00a6\u0002\u0002\u08ef",
    "\u08f1\u0005\u02a6\u0154\u0002\u08f0\u08f2\u0005\u01ea\u00f6\u0002\u08f1",
    "\u08f0\u0003\u0002\u0002\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2",
    "\u08f8\u0003\u0002\u0002\u0002\u08f3\u08f4\u0007\u01eb\u0002\u0002\u08f4",
    "\u08f5\u0005\u0134\u009b\u0002\u08f5\u08f6\u0007\u01ec\u0002\u0002\u08f6",
    "\u08f8\u0003\u0002\u0002\u0002\u08f7\u08ef\u0003\u0002\u0002\u0002\u08f7",
    "\u08f3\u0003\u0002\u0002\u0002\u08f8\u08fa\u0003\u0002\u0002\u0002\u08f9",
    "\u08e4\u0003\u0002\u0002\u0002\u08f9\u08ed\u0003\u0002\u0002\u0002\u08fa",
    "\u00f7\u0003\u0002\u0002\u0002\u08fb\u08fc\u0007\u0096\u0002\u0002\u08fc",
    "\u08fd\u0005\u02a4\u0153\u0002\u08fd\u08fe\u0007\u00a6\u0002\u0002\u08fe",
    "\u08ff\u0005\u00fa~\u0002\u08ff\u0902\u0005\u0112\u008a\u0002\u0900",
    "\u0901\u0007\u0147\u0002\u0002\u0901\u0903\u0007\u0083\u0002\u0002\u0902",
    "\u0900\u0003\u0002\u0002\u0002\u0902\u0903\u0003\u0002\u0002\u0002\u0903",
    "\u00f9\u0003\u0002\u0002\u0002\u0904\u0905\u0005\u00fe\u0080\u0002\u0905",
    "\u0906\u0007\u0003\u0002\u0002\u0906\u0907\u0005\u0100\u0081\u0002\u0907",
    "\u0912\u0003\u0002\u0002\u0002\u0908\u0909\u0007\u00ae\u0002\u0002\u0909",
    "\u090a\u0007\u0103\u0002\u0002\u090a\u090c\u0005\u02aa\u0156\u0002\u090b",
    "\u090d\u0005\u00fc\u007f\u0002\u090c\u090b\u0003\u0002\u0002\u0002\u090c",
    "\u090d\u0003\u0002\u0002\u0002\u090d\u0912\u0003\u0002\u0002\u0002\u090e",
    "\u090f\u0007\u019d\u0002\u0002\u090f\u0910\u0007\u0103\u0002\u0002\u0910",
    "\u0912\u0005\u02a4\u0153\u0002\u0911\u0904\u0003\u0002\u0002\u0002\u0911",
    "\u0908\u0003\u0002\u0002\u0002\u0911\u090e\u0003\u0002\u0002\u0002\u0912",
    "\u00fb\u0003\u0002\u0002\u0002\u0913\u0914\u0007\u001c\u0002\u0002\u0914",
    "\u0915\u0005\u00fe\u0080\u0002\u0915\u0916\u0007\f\u0002\u0002\u0916",
    "\u0917\u0005\u0100\u0081\u0002\u0917\u00fd\u0003\u0002\u0002\u0002\u0918",
    "\u0919\u0005\u0200\u0101\u0002\u0919\u00ff\u0003\u0002\u0002\u0002\u091a",
    "\u091b\u0005\u0200\u0101\u0002\u091b\u0101\u0003\u0002\u0002\u0002\u091c",
    "\u091d\u0007\u00fd\u0002\u0002\u091d\u0103\u0003\u0002\u0002\u0002\u091e",
    "\u0920\u0007\u0129\u0002\u0002\u091f\u0921\u0005\u029a\u014e\u0002\u0920",
    "\u091f\u0003\u0002\u0002\u0002\u0920\u0921\u0003\u0002\u0002\u0002\u0921",
    "\u0105\u0003\u0002\u0002\u0002\u0922\u0924\u0007\u013a\u0002\u0002\u0923",
    "\u0925\u0005\u01ec\u00f7\u0002\u0924\u0923\u0003\u0002\u0002\u0002\u0924",
    "\u0925\u0003\u0002\u0002\u0002\u0925\u0107\u0003\u0002\u0002\u0002\u0926",
    "\u0928\u0007,\u0002\u0002\u0927\u0926\u0003\u0002\u0002\u0002\u0927",
    "\u0928\u0003\u0002\u0002\u0002\u0928\u0929\u0003\u0002\u0002\u0002\u0929",
    "\u092b\u0005\u0282\u0142\u0002\u092a\u092c\u0005\u02b8\u015d\u0002\u092b",
    "\u092a\u0003\u0002\u0002\u0002\u092b\u092c\u0003\u0002\u0002\u0002\u092c",
    "\u0109\u0003\u0002\u0002\u0002\u092d\u092e\u0007\u001b\u0002\u0002\u092e",
    "\u0935\u0005\u00e0q\u0002\u092f\u0931\u0007\u0081\u0002\u0002\u0930",
    "\u0932\u0005\u010c\u0087\u0002\u0931\u0930\u0003\u0002\u0002\u0002\u0932",
    "\u0933\u0003\u0002\u0002\u0002\u0933\u0931\u0003\u0002\u0002\u0002\u0933",
    "\u0934\u0003\u0002\u0002\u0002\u0934\u0936\u0003\u0002\u0002\u0002\u0935",
    "\u092f\u0003\u0002\u0002\u0002\u0935\u0936\u0003\u0002\u0002\u0002\u0936",
    "\u0937\u0003\u0002\u0002\u0002\u0937\u0939\u0007{\u0002\u0002\u0938",
    "\u093a\u0005\u0294\u014b\u0002\u0939\u0938\u0003\u0002\u0002\u0002\u0939",
    "\u093a\u0003\u0002\u0002\u0002\u093a\u010b\u0003\u0002\u0002\u0002\u093b",
    "\u093c\u0007\u01a8\u0002\u0002\u093c\u0941\u0005\u029a\u014e\u0002\u093d",
    "\u093e\u0007\u010b\u0002\u0002\u093e\u0940\u0005\u029a\u014e\u0002\u093f",
    "\u093d\u0003\u0002\u0002\u0002\u0940\u0943\u0003\u0002\u0002\u0002\u0941",
    "\u093f\u0003\u0002\u0002\u0002\u0941\u0942\u0003\u0002\u0002\u0002\u0942",
    "\u0944\u0003\u0002\u0002\u0002\u0943\u0941\u0003\u0002\u0002\u0002\u0944",
    "\u0945\u0007\u017a\u0002\u0002\u0945\u0946\u0005\u00e0q\u0002\u0946",
    "\u010d\u0003\u0002\u0002\u0002\u0947\u0949\u0007a\u0002\u0002\u0948",
    "\u0947\u0003\u0002\u0002\u0002\u0948\u0949\u0003\u0002\u0002\u0002\u0949",
    "\u094b\u0003\u0002\u0002\u0002\u094a\u094c\u0005\u00c0a\u0002\u094b",
    "\u094a\u0003\u0002\u0002\u0002\u094c\u094d\u0003\u0002\u0002\u0002\u094d",
    "\u094b\u0003\u0002\u0002\u0002\u094d\u094e\u0003\u0002\u0002\u0002\u094e",
    "\u0950\u0003\u0002\u0002\u0002\u094f\u0948\u0003\u0002\u0002\u0002\u094f",
    "\u0950\u0003\u0002\u0002\u0002\u0950\u0951\u0003\u0002\u0002\u0002\u0951",
    "\u0952\u0005\u010a\u0086\u0002\u0952\u010f\u0003\u0002\u0002\u0002\u0953",
    "\u0955\u0007a\u0002\u0002\u0954\u0953\u0003\u0002\u0002\u0002\u0954",
    "\u0955\u0003\u0002\u0002\u0002\u0955\u0957\u0003\u0002\u0002\u0002\u0956",
    "\u0958\u0005\u00c0a\u0002\u0957\u0956\u0003\u0002\u0002\u0002\u0958",
    "\u0959\u0003\u0002\u0002\u0002\u0959\u0957\u0003\u0002\u0002\u0002\u0959",
    "\u095a\u0003\u0002\u0002\u0002\u095a\u095b\u0003\u0002\u0002\u0002\u095b",
    "\u095c\u0005\u010a\u0086\u0002\u095c\u0111\u0003\u0002\u0002\u0002\u095d",
    "\u0962\u0005\u0114\u008b\u0002\u095e\u0962\u0005\u0118\u008d\u0002\u095f",
    "\u0962\u0005\u011a\u008e\u0002\u0960\u0962\u0005\u0124\u0093\u0002\u0961",
    "\u095d\u0003\u0002\u0002\u0002\u0961\u095e\u0003\u0002\u0002\u0002\u0961",
    "\u095f\u0003\u0002\u0002\u0002\u0961\u0960\u0003\u0002\u0002\u0002\u0962",
    "\u0113\u0003\u0002\u0002\u0002\u0963\u0964\u0007\u0086\u0002\u0002\u0964",
    "\u0965\u0007\u00a5\u0002\u0002\u0965\u096f\u0005\u01ee\u00f8\u0002\u0966",
    "\u0968\u0005\u0272\u013a\u0002\u0967\u0969\u0005\u023a\u011e\u0002\u0968",
    "\u0967\u0003\u0002\u0002\u0002\u0968\u0969\u0003\u0002\u0002\u0002\u0969",
    "\u0970\u0003\u0002\u0002\u0002\u096a\u096c\u0005\u023a\u011e\u0002\u096b",
    "\u096d\u0005\u0116\u008c\u0002\u096c\u096b\u0003\u0002\u0002\u0002\u096c",
    "\u096d\u0003\u0002\u0002\u0002\u096d\u0970\u0003\u0002\u0002\u0002\u096e",
    "\u0970\u0005\u0116\u008c\u0002\u096f\u0966\u0003\u0002\u0002\u0002\u096f",
    "\u096a\u0003\u0002\u0002\u0002\u096f\u096e\u0003\u0002\u0002\u0002\u096f",
    "\u0970\u0003\u0002\u0002\u0002\u0970\u0115\u0003\u0002\u0002\u0002\u0971",
    "\u0972\t\u0019\u0002\u0002\u0972\u0973\u0005\u0272\u013a\u0002\u0973",
    "\u0117\u0003\u0002\u0002\u0002\u0974\u097c\u0005\u01c0\u00e1\u0002\u0975",
    "\u097c\u0005\u01cc\u00e7\u0002\u0976\u097c\u0005\u0134\u009b\u0002\u0977",
    "\u097c\u0005\u01a6\u00d4\u0002\u0978\u097c\u0005\u01ac\u00d7\u0002\u0979",
    "\u097c\u0005\u01ae\u00d8\u0002\u097a\u097c\u0005\u0132\u009a\u0002\u097b",
    "\u0974\u0003\u0002\u0002\u0002\u097b\u0975\u0003\u0002\u0002\u0002\u097b",
    "\u0976\u0003\u0002\u0002\u0002\u097b\u0977\u0003\u0002\u0002\u0002\u097b",
    "\u0978\u0003\u0002\u0002\u0002\u097b\u0979\u0003\u0002\u0002\u0002\u097b",
    "\u097a\u0003\u0002\u0002\u0002\u097c\u0119\u0003\u0002\u0002\u0002\u097d",
    "\u0982\u0005\u011c\u008f\u0002\u097e\u0982\u0005\u011e\u0090\u0002\u097f",
    "\u0982\u0005\u0120\u0091\u0002\u0980\u0982\u0005\u0122\u0092\u0002\u0981",
    "\u097d\u0003\u0002\u0002\u0002\u0981\u097e\u0003\u0002\u0002\u0002\u0981",
    "\u097f\u0003\u0002\u0002\u0002\u0981\u0980\u0003\u0002\u0002\u0002\u0982",
    "\u011b\u0003\u0002\u0002\u0002\u0983\u0984\u00077\u0002\u0002\u0984",
    "\u0985\u0005\u02a6\u0154\u0002\u0985\u011d\u0003\u0002\u0002\u0002\u0986",
    "\u0987\u0007\u0109\u0002\u0002\u0987\u0989\u0005\u02a6\u0154\u0002\u0988",
    "\u098a\u0005\u01ea\u00f6\u0002\u0989\u0988\u0003\u0002\u0002\u0002\u0989",
    "\u098a\u0003\u0002\u0002\u0002\u098a\u011f\u0003\u0002\u0002\u0002\u098b",
    "\u098c\u0007\u008e\u0002\u0002\u098c\u09a1\u0005\u02a6\u0154\u0002\u098d",
    "\u098e\u0007\u00ba\u0002\u0002\u098e\u0993\u0005\u02a2\u0152\u0002\u098f",
    "\u0990\u0007\u01f1\u0002\u0002\u0990\u0992\u0005\u02a2\u0152\u0002\u0991",
    "\u098f\u0003\u0002\u0002\u0002\u0992\u0995\u0003\u0002\u0002\u0002\u0993",
    "\u0991\u0003\u0002\u0002\u0002\u0993\u0994\u0003\u0002\u0002\u0002\u0994",
    "\u09a2\u0003\u0002\u0002\u0002\u0995\u0993\u0003\u0002\u0002\u0002\u0996",
    "\u0997\u0007\'\u0002\u0002\u0997\u0998\u00079\u0002\u0002\u0998\u0999",
    "\u0007\u00ba\u0002\u0002\u0999\u099e\u0005\u02a2\u0152\u0002\u099a\u099b",
    "\u0007\u01f1\u0002\u0002\u099b\u099d\u0005\u02a2\u0152\u0002\u099c\u099a",
    "\u0003\u0002\u0002\u0002\u099d\u09a0\u0003\u0002\u0002\u0002\u099e\u099c",
    "\u0003\u0002\u0002\u0002\u099e\u099f\u0003\u0002\u0002\u0002\u099f\u09a2",
    "\u0003\u0002\u0002\u0002\u09a0\u099e\u0003\u0002\u0002\u0002\u09a1\u098d",
    "\u0003\u0002\u0002\u0002\u09a1\u0996\u0003\u0002\u0002\u0002\u09a2\u0121",
    "\u0003\u0002\u0002\u0002\u09a3\u09a4\u0007\u0109\u0002\u0002\u09a4\u09a5",
    "\u0005\u02a2\u0152\u0002\u09a5\u09a8\u0007\u0095\u0002\u0002\u09a6\u09a9",
    "\u0005\u0134\u009b\u0002\u09a7\u09a9\u0005\u01ee\u00f8\u0002\u09a8\u09a6",
    "\u0003\u0002\u0002\u0002\u09a8\u09a7\u0003\u0002\u0002\u0002\u09a9\u09ab",
    "\u0003\u0002\u0002\u0002\u09aa\u09ac\u0005\u023a\u011e\u0002\u09ab\u09aa",
    "\u0003\u0002\u0002\u0002\u09ab\u09ac\u0003\u0002\u0002\u0002\u09ac\u0123",
    "\u0003\u0002\u0002\u0002\u09ad\u09b3\u0005\u0126\u0094\u0002\u09ae\u09b3",
    "\u0005\u0128\u0095\u0002\u09af\u09b3\u0005\u012a\u0096\u0002\u09b0\u09b3",
    "\u0005\u012e\u0098\u0002\u09b1\u09b3\u0005\u0130\u0099\u0002\u09b2\u09ad",
    "\u0003\u0002\u0002\u0002\u09b2\u09ae\u0003\u0002\u0002\u0002\u09b2\u09af",
    "\u0003\u0002\u0002\u0002\u09b2\u09b0\u0003\u0002\u0002\u0002\u09b2\u09b1",
    "\u0003\u0002\u0002\u0002\u09b3\u0125\u0003\u0002\u0002\u0002\u09b4\u09b5",
    "\u0007\u0158\u0002\u0002\u09b5\u09c3\u0007\u0186\u0002\u0002\u09b6\u09b7",
    "\u0007\u012c\u0002\u0002\u09b7\u09c4\t\u001a\u0002\u0002\u09b8\u09b9",
    "\u0007\u00bd\u0002\u0002\u09b9\u09bd\u0007\u00c7\u0002\u0002\u09ba\u09be",
    "\u0007\u0154\u0002\u0002\u09bb\u09bc\u0007\u012c\u0002\u0002\u09bc\u09be",
    "\u0007=\u0002\u0002\u09bd\u09ba\u0003\u0002\u0002\u0002\u09bd\u09bb",
    "\u0003\u0002\u0002\u0002\u09be\u09c4\u0003\u0002\u0002\u0002\u09bf\u09c0",
    "\u0007\u0199\u0002\u0002\u09c0\u09c1\u0007\u0140\u0002\u0002\u09c1\u09c2",
    "\u0007\u014f\u0002\u0002\u09c2\u09c4\u0005\u027c\u013f\u0002\u09c3\u09b6",
    "\u0003\u0002\u0002\u0002\u09c3\u09b8\u0003\u0002\u0002\u0002\u09c3\u09bf",
    "\u0003\u0002\u0002\u0002\u09c3\u09c4\u0003\u0002\u0002\u0002\u09c4\u09c7",
    "\u0003\u0002\u0002\u0002\u09c5\u09c6\u0007\u00e6\u0002\u0002\u09c6\u09c8",
    "\u0005\u02d6\u016c\u0002\u09c7\u09c5\u0003\u0002\u0002\u0002\u09c7\u09c8",
    "\u0003\u0002\u0002\u0002\u09c8\u0127\u0003\u0002\u0002\u0002\u09c9\u09ca",
    "\u0007\u0158\u0002\u0002\u09ca\u09d4\t\u001b\u0002\u0002\u09cb\u09d5",
    "\u0007\t\u0002\u0002\u09cc\u09d1\u0005\u0292\u014a\u0002\u09cd\u09ce",
    "\u0007\u01f1\u0002\u0002\u09ce\u09d0\u0005\u0292\u014a\u0002\u09cf\u09cd",
    "\u0003\u0002\u0002\u0002\u09d0\u09d3\u0003\u0002\u0002\u0002\u09d1\u09cf",
    "\u0003\u0002\u0002\u0002\u09d1\u09d2\u0003\u0002\u0002\u0002\u09d2\u09d5",
    "\u0003\u0002\u0002\u0002\u09d3\u09d1\u0003\u0002\u0002\u0002\u09d4\u09cb",
    "\u0003\u0002\u0002\u0002\u09d4\u09cc\u0003\u0002\u0002\u0002\u09d5\u09d6",
    "\u0003\u0002\u0002\u0002\u09d6\u09d7\t\u001c\u0002\u0002\u09d7\u0129",
    "\u0003\u0002\u0002\u0002\u09d8\u09da\u0007<\u0002\u0002\u09d9\u09db",
    "\u0007\u01ae\u0002\u0002\u09da\u09d9\u0003\u0002\u0002\u0002\u09da\u09db",
    "\u0003\u0002\u0002\u0002\u09db\u09e9\u0003\u0002\u0002\u0002\u09dc\u09dd",
    "\u0007;\u0002\u0002\u09dd\u09ea\u0005\u01ee\u00f8\u0002\u09de\u09e7",
    "\u0007\u0097\u0002\u0002\u09df\u09e0\u0007K\u0002\u0002\u09e0\u09e8",
    "\u0005\u01ee\u00f8\u0002\u09e1\u09e8\u0007L\u0002\u0002\u09e2\u09e5",
    "\u0005\u01ee\u00f8\u0002\u09e3\u09e4\u0007\u01f1\u0002\u0002\u09e4\u09e6",
    "\u0005\u01ee\u00f8\u0002\u09e5\u09e3\u0003\u0002\u0002\u0002\u09e5\u09e6",
    "\u0003\u0002\u0002\u0002\u09e6\u09e8\u0003\u0002\u0002\u0002\u09e7\u09df",
    "\u0003\u0002\u0002\u0002\u09e7\u09e1\u0003\u0002\u0002\u0002\u09e7\u09e2",
    "\u0003\u0002\u0002\u0002\u09e8\u09ea\u0003\u0002\u0002\u0002\u09e9\u09dc",
    "\u0003\u0002\u0002\u0002\u09e9\u09de\u0003\u0002\u0002\u0002\u09e9\u09ea",
    "\u0003\u0002\u0002\u0002\u09ea\u09ec\u0003\u0002\u0002\u0002\u09eb\u09ed",
    "\u0005\u012c\u0097\u0002\u09ec\u09eb\u0003\u0002\u0002\u0002\u09ec\u09ed",
    "\u0003\u0002\u0002\u0002\u09ed\u012b\u0003\u0002\u0002\u0002\u09ee\u09f0",
    "\u0007\u01af\u0002\u0002\u09ef\u09f1\t\u001d\u0002\u0002\u09f0\u09ef",
    "\u0003\u0002\u0002\u0002\u09f0\u09f1\u0003\u0002\u0002\u0002\u09f1\u09f3",
    "\u0003\u0002\u0002\u0002\u09f2\u09f4\t\u001e\u0002\u0002\u09f3\u09f2",
    "\u0003\u0002\u0002\u0002\u09f3\u09f4\u0003\u0002\u0002\u0002\u09f4\u012d",
    "\u0003\u0002\u0002\u0002\u09f5\u09f7\u0007\u0140\u0002\u0002\u09f6\u09f8",
    "\u0007\u01ae\u0002\u0002\u09f7\u09f6\u0003\u0002\u0002\u0002\u09f7\u09f8",
    "\u0003\u0002\u0002\u0002\u09f8\u0a00\u0003\u0002\u0002\u0002\u09f9\u09fb",
    "\u0007\u0184\u0002\u0002\u09fa\u09fc\u0007\u0148\u0002\u0002\u09fb\u09fa",
    "\u0003\u0002\u0002\u0002\u09fb\u09fc\u0003\u0002\u0002\u0002\u09fc\u09fd",
    "\u0003\u0002\u0002\u0002\u09fd\u0a01\u0005\u027a\u013e\u0002\u09fe\u09ff",
    "\u0007\u0097\u0002\u0002\u09ff\u0a01\u0005\u02d6\u016c\u0002\u0a00\u09f9",
    "\u0003\u0002\u0002\u0002\u0a00\u09fe\u0003\u0002\u0002\u0002\u0a00\u0a01",
    "\u0003\u0002\u0002\u0002\u0a01\u012f\u0003\u0002\u0002\u0002\u0a02\u0a03",
    "\u0007\u0148\u0002\u0002\u0a03\u0a04\u0005\u027a\u013e\u0002\u0a04\u0131",
    "\u0003\u0002\u0002\u0002\u0a05\u0a06\u0007\u0089\u0002\u0002\u0a06\u0a0b",
    "\u0007\u011f\u0002\u0002\u0a07\u0a08\u0007\u0158\u0002\u0002\u0a08\u0a09",
    "\u0007\u016e\u0002\u0002\u0a09\u0a0a\u0007\u0202\u0002\u0002\u0a0a\u0a0c",
    "\u0005\u02d6\u016c\u0002\u0a0b\u0a07\u0003\u0002\u0002\u0002\u0a0b\u0a0c",
    "\u0003\u0002\u0002\u0002\u0a0c\u0a0f\u0003\u0002\u0002\u0002\u0a0d\u0a0e",
    "\u0007\u00ba\u0002\u0002\u0a0e\u0a10\u0005\u02b0\u0159\u0002\u0a0f\u0a0d",
    "\u0003\u0002\u0002\u0002\u0a0f\u0a10\u0003\u0002\u0002\u0002\u0a10\u0a11",
    "\u0003\u0002\u0002\u0002\u0a11\u0a17\u0007\u0095\u0002\u0002\u0a12\u0a18",
    "\u0005\u0134\u009b\u0002\u0a13\u0a18\u0005\u01a6\u00d4\u0002\u0a14\u0a18",
    "\u0005\u01ac\u00d7\u0002\u0a15\u0a18\u0005\u01ae\u00d8\u0002\u0a16\u0a18",
    "\u0005\u01c0\u00e1\u0002\u0a17\u0a12\u0003\u0002\u0002\u0002\u0a17\u0a13",
    "\u0003\u0002\u0002\u0002\u0a17\u0a14\u0003\u0002\u0002\u0002\u0a17\u0a15",
    "\u0003\u0002\u0002\u0002\u0a17\u0a16\u0003\u0002\u0002\u0002\u0a18\u0133",
    "\u0003\u0002\u0002\u0002\u0a19\u0a1b\u0005\u0136\u009c\u0002\u0a1a\u0a19",
    "\u0003\u0002\u0002\u0002\u0a1a\u0a1b\u0003\u0002\u0002\u0002\u0a1b\u0a1c",
    "\u0003\u0002\u0002\u0002\u0a1c\u0a1d\u0005\u013e\u00a0\u0002\u0a1d\u0135",
    "\u0003\u0002\u0002\u0002\u0a1e\u0a1f\u0007\u01ac\u0002\u0002\u0a1f\u0a24",
    "\u0005\u0138\u009d\u0002\u0a20\u0a21\u0007\u01f1\u0002\u0002\u0a21\u0a23",
    "\u0005\u0138\u009d\u0002\u0a22\u0a20\u0003\u0002\u0002\u0002\u0a23\u0a26",
    "\u0003\u0002\u0002\u0002\u0a24\u0a22\u0003\u0002\u0002\u0002\u0a24\u0a25",
    "\u0003\u0002\u0002\u0002\u0a25\u0137\u0003\u0002\u0002\u0002\u0a26\u0a24",
    "\u0003\u0002\u0002\u0002\u0a27\u0a33\u0005\u0290\u0149\u0002\u0a28\u0a29",
    "\u0007\u01eb\u0002\u0002\u0a29\u0a2e\u0005\u02ae\u0158\u0002\u0a2a\u0a2b",
    "\u0007\u01f1\u0002\u0002\u0a2b\u0a2d\u0005\u02ae\u0158\u0002\u0a2c\u0a2a",
    "\u0003\u0002\u0002\u0002\u0a2d\u0a30\u0003\u0002\u0002\u0002\u0a2e\u0a2c",
    "\u0003\u0002\u0002\u0002\u0a2e\u0a2f\u0003\u0002\u0002\u0002\u0a2f\u0a31",
    "\u0003\u0002\u0002\u0002\u0a30\u0a2e\u0003\u0002\u0002\u0002\u0a31\u0a32",
    "\u0007\u01ec\u0002\u0002\u0a32\u0a34\u0003\u0002\u0002\u0002\u0a33\u0a28",
    "\u0003\u0002\u0002\u0002\u0a33\u0a34\u0003\u0002\u0002\u0002\u0a34\u0a35",
    "\u0003\u0002\u0002\u0002\u0a35\u0a36\u0007\u000f\u0002\u0002\u0a36\u0a37",
    "\u0007\u01eb\u0002\u0002\u0a37\u0a39\u0005\u013e\u00a0\u0002\u0a38\u0a3a",
    "\u0005\u019a\u00ce\u0002\u0a39\u0a38\u0003\u0002\u0002\u0002\u0a39\u0a3a",
    "\u0003\u0002\u0002\u0002\u0a3a\u0a3b\u0003\u0002\u0002\u0002\u0a3b\u0a3d",
    "\u0007\u01ec\u0002\u0002\u0a3c\u0a3e\u0005\u013a\u009e\u0002\u0a3d\u0a3c",
    "\u0003\u0002\u0002\u0002\u0a3d\u0a3e\u0003\u0002\u0002\u0002\u0a3e\u0a40",
    "\u0003\u0002\u0002\u0002\u0a3f\u0a41\u0005\u013c\u009f\u0002\u0a40\u0a3f",
    "\u0003\u0002\u0002\u0002\u0a40\u0a41\u0003\u0002\u0002\u0002\u0a41\u0139",
    "\u0003\u0002\u0002\u0002\u0a42\u0a43\u0007\u014c\u0002\u0002\u0a43\u0a44",
    "\t\u001f\u0002\u0002\u0a44\u0a45\u0007\u0090\u0002\u0002\u0a45\u0a46",
    "\u0007(\u0002\u0002\u0a46\u0a48\u0005\u02ae\u0158\u0002\u0a47\u0a49",
    "\u0007\u0010\u0002\u0002\u0a48\u0a47\u0003\u0002\u0002\u0002\u0a48\u0a49",
    "\u0003\u0002\u0002\u0002\u0a49\u0a4b\u0003\u0002\u0002\u0002\u0a4a\u0a4c",
    "\u0007j\u0002\u0002\u0a4b\u0a4a\u0003\u0002\u0002\u0002\u0a4b\u0a4c",
    "\u0003\u0002\u0002\u0002\u0a4c\u0a4f\u0003\u0002\u0002\u0002\u0a4d\u0a4e",
    "\u0007\u00fe\u0002\u0002\u0a4e\u0a50\u0007\u0090\u0002\u0002\u0a4f\u0a4d",
    "\u0003\u0002\u0002\u0002\u0a4f\u0a50\u0003\u0002\u0002\u0002\u0a50\u0a53",
    "\u0003\u0002\u0002\u0002\u0a51\u0a52\u0007\u00fe\u0002\u0002\u0a52\u0a54",
    "\u0007\u00c3\u0002\u0002\u0a53\u0a51\u0003\u0002\u0002\u0002\u0a53\u0a54",
    "\u0003\u0002\u0002\u0002\u0a54\u0a67\u0003\u0002\u0002\u0002\u0a55\u0a56",
    "\u0007\u01f1\u0002\u0002\u0a56\u0a58\u0005\u02ae\u0158\u0002\u0a57\u0a59",
    "\u0007\u0010\u0002\u0002\u0a58\u0a57\u0003\u0002\u0002\u0002\u0a58\u0a59",
    "\u0003\u0002\u0002\u0002\u0a59\u0a5b\u0003\u0002\u0002\u0002\u0a5a\u0a5c",
    "\u0007j\u0002\u0002\u0a5b\u0a5a\u0003\u0002\u0002\u0002\u0a5b\u0a5c",
    "\u0003\u0002\u0002\u0002\u0a5c\u0a5f\u0003\u0002\u0002\u0002\u0a5d\u0a5e",
    "\u0007\u00fe\u0002\u0002\u0a5e\u0a60\u0007\u0090\u0002\u0002\u0a5f\u0a5d",
    "\u0003\u0002\u0002\u0002\u0a5f\u0a60\u0003\u0002\u0002\u0002\u0a60\u0a63",
    "\u0003\u0002\u0002\u0002\u0a61\u0a62\u0007\u00fe\u0002\u0002\u0a62\u0a64",
    "\u0007\u00c3\u0002\u0002\u0a63\u0a61\u0003\u0002\u0002\u0002\u0a63\u0a64",
    "\u0003\u0002\u0002\u0002\u0a64\u0a66\u0003\u0002\u0002\u0002\u0a65\u0a55",
    "\u0003\u0002\u0002\u0002\u0a66\u0a69\u0003\u0002\u0002\u0002\u0a67\u0a65",
    "\u0003\u0002\u0002\u0002\u0a67\u0a68\u0003\u0002\u0002\u0002\u0a68\u0a6a",
    "\u0003\u0002\u0002\u0002\u0a69\u0a67\u0003\u0002\u0002\u0002\u0a6a\u0a6b",
    "\u0007\u0158\u0002\u0002\u0a6b\u0a6c\u0005\u02ae\u0158\u0002\u0a6c\u013b",
    "\u0003\u0002\u0002\u0002\u0a6d\u0a6e\u0007V\u0002\u0002\u0a6e\u0a73",
    "\u0005\u02ae\u0158\u0002\u0a6f\u0a70\u0007\u01f1\u0002\u0002\u0a70\u0a72",
    "\u0005\u02ae\u0158\u0002\u0a71\u0a6f\u0003\u0002\u0002\u0002\u0a72\u0a75",
    "\u0003\u0002\u0002\u0002\u0a73\u0a71\u0003\u0002\u0002\u0002\u0a73\u0a74",
    "\u0003\u0002\u0002\u0002\u0a74\u0a76\u0003\u0002\u0002\u0002\u0a75\u0a73",
    "\u0003\u0002\u0002\u0002\u0a76\u0a77\u0007\u0158\u0002\u0002\u0a77\u0a78",
    "\u0005\u02ae\u0158\u0002\u0a78\u0a79\u0007\u0184\u0002\u0002\u0a79\u0a7a",
    "\u0005\u01ee\u00f8\u0002\u0a7a\u0a7b\u0007d\u0002\u0002\u0a7b\u0a7c",
    "\u0005\u01ee\u00f8\u0002\u0a7c\u013d\u0003\u0002\u0002\u0002\u0a7d\u0a7e",
    "\b\u00a0\u0001\u0002\u0a7e\u0a7f\u0007\u01eb\u0002\u0002\u0a7f\u0a80",
    "\u0005\u013e\u00a0\u0002\u0a80\u0a81\u0007\u01ec\u0002\u0002\u0a81\u0a84",
    "\u0003\u0002\u0002\u0002\u0a82\u0a84\u0005\u0142\u00a2\u0002\u0a83\u0a7d",
    "\u0003\u0002\u0002\u0002\u0a83\u0a82\u0003\u0002\u0002\u0002\u0a84\u0a8b",
    "\u0003\u0002\u0002\u0002\u0a85\u0a86\f\u0004\u0002\u0002\u0a86\u0a87",
    "\u0005\u0140\u00a1\u0002\u0a87\u0a88\u0005\u013e\u00a0\u0005\u0a88\u0a8a",
    "\u0003\u0002\u0002\u0002\u0a89\u0a85\u0003\u0002\u0002\u0002\u0a8a\u0a8d",
    "\u0003\u0002\u0002\u0002\u0a8b\u0a89\u0003\u0002\u0002\u0002\u0a8b\u0a8c",
    "\u0003\u0002\u0002\u0002\u0a8c\u013f\u0003\u0002\u0002\u0002\u0a8d\u0a8b",
    "\u0003\u0002\u0002\u0002\u0a8e\u0a90\u0007\u0190\u0002\u0002\u0a8f\u0a91",
    "\u0007\t\u0002\u0002\u0a90\u0a8f\u0003\u0002\u0002\u0002\u0a90\u0a91",
    "\u0003\u0002\u0002\u0002\u0a91\u0a95\u0003\u0002\u0002\u0002\u0a92\u0a95",
    "\u0007\u00b8\u0002\u0002\u0a93\u0a95\u0007\u00dd\u0002\u0002\u0a94\u0a8e",
    "\u0003\u0002\u0002\u0002\u0a94\u0a92\u0003\u0002\u0002\u0002\u0a94\u0a93",
    "\u0003\u0002\u0002\u0002\u0a95\u0141\u0003\u0002\u0002\u0002\u0a96\u0a98",
    "\u0007\u0150\u0002\u0002\u0a97\u0a99\t \u0002\u0002\u0a98\u0a97\u0003",
    "\u0002\u0002\u0002\u0a98\u0a99\u0003\u0002\u0002\u0002\u0a99\u0a9a\u0003",
    "\u0002\u0002\u0002\u0a9a\u0a9f\u0005\u0144\u00a3\u0002\u0a9b\u0a9c\u0007",
    "\u01f1\u0002\u0002\u0a9c\u0a9e\u0005\u0144\u00a3\u0002\u0a9d\u0a9b\u0003",
    "\u0002\u0002\u0002\u0a9e\u0aa1\u0003\u0002\u0002\u0002\u0a9f\u0a9d\u0003",
    "\u0002\u0002\u0002\u0a9f\u0aa0\u0003\u0002\u0002\u0002\u0aa0\u0aa3\u0003",
    "\u0002\u0002\u0002\u0aa1\u0a9f\u0003\u0002\u0002\u0002\u0aa2\u0aa4\u0005",
    "\u0272\u013a\u0002\u0aa3\u0aa2\u0003\u0002\u0002\u0002\u0aa3\u0aa4\u0003",
    "\u0002\u0002\u0002\u0aa4\u0aa5\u0003\u0002\u0002\u0002\u0aa5\u0aa7\u0005",
    "\u0146\u00a4\u0002\u0aa6\u0aa8\u0005\u026e\u0138\u0002\u0aa7\u0aa6\u0003",
    "\u0002\u0002\u0002\u0aa7\u0aa8\u0003\u0002\u0002\u0002\u0aa8\u0aaa\u0003",
    "\u0002\u0002\u0002\u0aa9\u0aab\u0005\u016c\u00b7\u0002\u0aaa\u0aa9\u0003",
    "\u0002\u0002\u0002\u0aaa\u0aab\u0003\u0002\u0002\u0002\u0aab\u0ab0\u0003",
    "\u0002\u0002\u0002\u0aac\u0aaf\u0005\u0170\u00b9\u0002\u0aad\u0aaf\u0005",
    "\u017a\u00be\u0002\u0aae\u0aac\u0003\u0002\u0002\u0002\u0aae\u0aad\u0003",
    "\u0002\u0002\u0002\u0aaf\u0ab2\u0003\u0002\u0002\u0002\u0ab0\u0aae\u0003",
    "\u0002\u0002\u0002\u0ab0\u0ab1\u0003\u0002\u0002\u0002\u0ab1\u0ab4\u0003",
    "\u0002\u0002\u0002\u0ab2\u0ab0\u0003\u0002\u0002\u0002\u0ab3\u0ab5\u0005",
    "\u017c\u00bf\u0002\u0ab4\u0ab3\u0003\u0002\u0002\u0002\u0ab4\u0ab5\u0003",
    "\u0002\u0002\u0002\u0ab5\u0abb\u0003\u0002\u0002\u0002\u0ab6\u0aba\u0005",
    "\u019e\u00d0\u0002\u0ab7\u0aba\u0005\u019a\u00ce\u0002\u0ab8\u0aba\u0005",
    "\u01a4\u00d3\u0002\u0ab9\u0ab6\u0003\u0002\u0002\u0002\u0ab9\u0ab7\u0003",
    "\u0002\u0002\u0002\u0ab9\u0ab8\u0003\u0002\u0002\u0002\u0aba\u0abd\u0003",
    "\u0002\u0002\u0002\u0abb\u0ab9\u0003\u0002\u0002\u0002\u0abb\u0abc\u0003",
    "\u0002\u0002\u0002\u0abc\u0143\u0003\u0002\u0002\u0002\u0abd\u0abb\u0003",
    "\u0002\u0002\u0002\u0abe\u0ac9\u0005\u02b4\u015b\u0002\u0abf\u0ac0\u0005",
    "\u02b2\u015a\u0002\u0ac0\u0ac1\u0007\u01e4\u0002\u0002\u0ac1\u0ac2\u0005",
    "\u02b4\u015b\u0002\u0ac2\u0ac9\u0003\u0002\u0002\u0002\u0ac3\u0ac9\u0005",
    "\u02b0\u0159\u0002\u0ac4\u0ac6\u0005\u01ee\u00f8\u0002\u0ac5\u0ac7\u0005",
    "\u0268\u0135\u0002\u0ac6\u0ac5\u0003\u0002\u0002\u0002\u0ac6\u0ac7\u0003",
    "\u0002\u0002\u0002\u0ac7\u0ac9\u0003\u0002\u0002\u0002\u0ac8\u0abe\u0003",
    "\u0002\u0002\u0002\u0ac8\u0abf\u0003\u0002\u0002\u0002\u0ac8\u0ac3\u0003",
    "\u0002\u0002\u0002\u0ac8\u0ac4\u0003\u0002\u0002\u0002\u0ac9\u0145\u0003",
    "\u0002\u0002\u0002\u0aca\u0acb\u0007\u0098\u0002\u0002\u0acb\u0acc\u0005",
    "\u0148\u00a5\u0002\u0acc\u0147\u0003\u0002\u0002\u0002\u0acd\u0ad2\u0005",
    "\u014a\u00a6\u0002\u0ace\u0acf\u0007\u01f1\u0002\u0002\u0acf\u0ad1\u0005",
    "\u014a\u00a6\u0002\u0ad0\u0ace\u0003\u0002\u0002\u0002\u0ad1\u0ad4\u0003",
    "\u0002\u0002\u0002\u0ad2\u0ad0\u0003\u0002\u0002\u0002\u0ad2\u0ad3\u0003",
    "\u0002\u0002\u0002\u0ad3\u0149\u0003\u0002\u0002\u0002\u0ad4\u0ad2\u0003",
    "\u0002\u0002\u0002\u0ad5\u0ad9\u0005\u014c\u00a7\u0002\u0ad6\u0ad8\u0005",
    "\u014e\u00a8\u0002\u0ad7\u0ad6\u0003\u0002\u0002\u0002\u0ad8\u0adb\u0003",
    "\u0002\u0002\u0002\u0ad9\u0ad7\u0003\u0002\u0002\u0002\u0ad9\u0ada\u0003",
    "\u0002\u0002\u0002\u0ada\u0ade\u0003\u0002\u0002\u0002\u0adb\u0ad9\u0003",
    "\u0002\u0002\u0002\u0adc\u0adf\u0005\u015a\u00ae\u0002\u0add\u0adf\u0005",
    "\u0166\u00b4\u0002\u0ade\u0adc\u0003\u0002\u0002\u0002\u0ade\u0add\u0003",
    "\u0002\u0002\u0002\u0ade\u0adf\u0003\u0002\u0002\u0002\u0adf\u014b\u0003",
    "\u0002\u0002\u0002\u0ae0\u0ae3\u0005\u01de\u00f0\u0002\u0ae1\u0ae4\u0005",
    "\u015a\u00ae\u0002\u0ae2\u0ae4\u0005\u0166\u00b4\u0002\u0ae3\u0ae1\u0003",
    "\u0002\u0002\u0002\u0ae3\u0ae2\u0003\u0002\u0002\u0002\u0ae3\u0ae4\u0003",
    "\u0002\u0002\u0002\u0ae4\u0afd\u0003\u0002\u0002\u0002\u0ae5\u0ae6\u0007",
    "\u01eb\u0002\u0002\u0ae6\u0aea\u0005\u014a\u00a6\u0002\u0ae7\u0ae9\u0005",
    "\u0140\u00a1\u0002\u0ae8\u0ae7\u0003\u0002\u0002\u0002\u0ae9\u0aec\u0003",
    "\u0002\u0002\u0002\u0aea\u0ae8\u0003\u0002\u0002\u0002\u0aea\u0aeb\u0003",
    "\u0002\u0002\u0002\u0aeb\u0aed\u0003\u0002\u0002\u0002\u0aec\u0aea\u0003",
    "\u0002\u0002\u0002\u0aed\u0af0\u0007\u01ec\u0002\u0002\u0aee\u0af1\u0005",
    "\u015a\u00ae\u0002\u0aef\u0af1\u0005\u0166\u00b4\u0002\u0af0\u0aee\u0003",
    "\u0002\u0002\u0002\u0af0\u0aef\u0003\u0002\u0002\u0002\u0af0\u0af1\u0003",
    "\u0002\u0002\u0002\u0af1\u0afd\u0003\u0002\u0002\u0002\u0af2\u0af3\u0007",
    "\u0108\u0002\u0002\u0af3\u0af4\u0007\u01eb\u0002\u0002\u0af4\u0af5\u0005",
    "\u01de\u00f0\u0002\u0af5\u0af6\u0007\u01ec\u0002\u0002\u0af6\u0afd\u0003",
    "\u0002\u0002\u0002\u0af7\u0afa\u0005\u01de\u00f0\u0002\u0af8\u0afb\u0005",
    "\u015a\u00ae\u0002\u0af9\u0afb\u0005\u0166\u00b4\u0002\u0afa\u0af8\u0003",
    "\u0002\u0002\u0002\u0afa\u0af9\u0003\u0002\u0002\u0002\u0afa\u0afb\u0003",
    "\u0002\u0002\u0002\u0afb\u0afd\u0003\u0002\u0002\u0002\u0afc\u0ae0\u0003",
    "\u0002\u0002\u0002\u0afc\u0ae5\u0003\u0002\u0002\u0002\u0afc\u0af2\u0003",
    "\u0002\u0002\u0002\u0afc\u0af7\u0003\u0002\u0002\u0002\u0afd\u0b01\u0003",
    "\u0002\u0002\u0002\u0afe\u0b00\u0005\u0158\u00ad\u0002\u0aff\u0afe\u0003",
    "\u0002\u0002\u0002\u0b00\u0b03\u0003\u0002\u0002\u0002\u0b01\u0aff\u0003",
    "\u0002\u0002\u0002\u0b01\u0b02\u0003\u0002\u0002\u0002\u0b02\u0b05\u0003",
    "\u0002\u0002\u0002\u0b03\u0b01\u0003\u0002\u0002\u0002\u0b04\u0b06\u0005",
    "\u026a\u0136\u0002\u0b05\u0b04\u0003\u0002\u0002\u0002\u0b05\u0b06\u0003",
    "\u0002\u0002\u0002\u0b06\u014d\u0003\u0002\u0002\u0002\u0b07\u0b09\u0005",
    "\u0156\u00ac\u0002\u0b08\u0b07\u0003\u0002\u0002\u0002\u0b08\u0b09\u0003",
    "\u0002\u0002\u0002\u0b09\u0b0b\u0003\u0002\u0002\u0002\u0b0a\u0b0c\t",
    "!\u0002\u0002\u0b0b\u0b0a\u0003\u0002\u0002\u0002\u0b0b\u0b0c\u0003",
    "\u0002\u0002\u0002\u0b0c\u0b0f\u0003\u0002\u0002\u0002\u0b0d\u0b10\u0007",
    "\u00b1\u0002\u0002\u0b0e\u0b10\u0005\u0154\u00ab\u0002\u0b0f\u0b0d\u0003",
    "\u0002\u0002\u0002\u0b0f\u0b0e\u0003\u0002\u0002\u0002\u0b0f\u0b10\u0003",
    "\u0002\u0002\u0002\u0b10\u0b11\u0003\u0002\u0002\u0002\u0b11\u0b12\u0007",
    "\u00c0\u0002\u0002\u0b12\u0b14\u0005\u014c\u00a7\u0002\u0b13\u0b15\u0005",
    "\u0156\u00ac\u0002\u0b14\u0b13\u0003\u0002\u0002\u0002\u0b14\u0b15\u0003",
    "\u0002\u0002\u0002\u0b15\u0b1a\u0003\u0002\u0002\u0002\u0b16\u0b19\u0005",
    "\u0150\u00a9\u0002\u0b17\u0b19\u0005\u0152\u00aa\u0002\u0b18\u0b16\u0003",
    "\u0002\u0002\u0002\u0b18\u0b17\u0003\u0002\u0002\u0002\u0b19\u0b1c\u0003",
    "\u0002\u0002\u0002\u0b1a\u0b18\u0003\u0002\u0002\u0002\u0b1a\u0b1b\u0003",
    "\u0002\u0002\u0002\u0b1b\u014f\u0003\u0002\u0002\u0002\u0b1c\u0b1a\u0003",
    "\u0002\u0002\u0002\u0b1d\u0b1e\u0007\u0107\u0002\u0002\u0b1e\u0b1f\u0005",
    "\u01ec\u00f7\u0002\u0b1f\u0151\u0003\u0002\u0002\u0002\u0b20\u0b21\u0007",
    "\u019a\u0002\u0002\u0b21\u0b22\u0007\u01eb\u0002\u0002\u0b22\u0b27\u0005",
    "\u02ae\u0158\u0002\u0b23\u0b24\u0007\u01f1\u0002\u0002\u0b24\u0b26\u0005",
    "\u02ae\u0158\u0002\u0b25\u0b23\u0003\u0002\u0002\u0002\u0b26\u0b29\u0003",
    "\u0002\u0002\u0002\u0b27\u0b25\u0003\u0002\u0002\u0002\u0b27\u0b28\u0003",
    "\u0002\u0002\u0002\u0b28\u0b2a\u0003\u0002\u0002\u0002\u0b29\u0b27\u0003",
    "\u0002\u0002\u0002\u0b2a\u0b2b\u0007\u01ec\u0002\u0002\u0b2b\u0153\u0003",
    "\u0002\u0002\u0002\u0b2c\u0b2e\t\"\u0002\u0002\u0b2d\u0b2f\u0007\u0111",
    "\u0002\u0002\u0b2e\u0b2d\u0003\u0002\u0002\u0002\u0b2e\u0b2f\u0003\u0002",
    "\u0002\u0002\u0b2f\u0155\u0003\u0002\u0002\u0002\u0b30\u0b31\u0007\u0118",
    "\u0002\u0002\u0b31\u0b3f\u0007(\u0002\u0002\u0b32\u0b33\u0007\u01eb",
    "\u0002\u0002\u0b33\u0b34\u0005\u013e\u00a0\u0002\u0b34\u0b35\u0007\u01ec",
    "\u0002\u0002\u0b35\u0b40\u0003\u0002\u0002\u0002\u0b36\u0b40\u0005\u01ea",
    "\u00f6\u0002\u0b37\u0b3c\u0005\u01ee\u00f8\u0002\u0b38\u0b39\u0007\u01f1",
    "\u0002\u0002\u0b39\u0b3b\u0005\u01ee\u00f8\u0002\u0b3a\u0b38\u0003\u0002",
    "\u0002\u0002\u0b3b\u0b3e\u0003\u0002\u0002\u0002\u0b3c\u0b3a\u0003\u0002",
    "\u0002\u0002\u0b3c\u0b3d\u0003\u0002\u0002\u0002\u0b3d\u0b40\u0003\u0002",
    "\u0002\u0002\u0b3e\u0b3c\u0003\u0002\u0002\u0002\u0b3f\u0b32\u0003\u0002",
    "\u0002\u0002\u0b3f\u0b36\u0003\u0002\u0002\u0002\u0b3f\u0b37\u0003\u0002",
    "\u0002\u0002\u0b40\u0157\u0003\u0002\u0002\u0002\u0b41\u0b42\u0007\u01a4",
    "\u0002\u0002\u0b42\u0b43\u0007\u001c\u0002\u0002\u0b43\u0b44\t#\u0002",
    "\u0002\u0b44\u0b4a\u0005\u01ee\u00f8\u0002\u0b45\u0b46\u0007\u000f\u0002",
    "\u0002\u0b46\u0b47\u0007\u0103\u0002\u0002\u0b47\u0b48\t$\u0002\u0002",
    "\u0b48\u0b4a\u0005\u01ee\u00f8\u0002\u0b49\u0b41\u0003\u0002\u0002\u0002",
    "\u0b49\u0b45\u0003\u0002\u0002\u0002\u0b4a\u0159\u0003\u0002\u0002\u0002",
    "\u0b4b\u0b4d\u0007\u011e\u0002\u0002\u0b4c\u0b4e\u0007\u01b0\u0002\u0002",
    "\u0b4d\u0b4c\u0003\u0002\u0002\u0002\u0b4d\u0b4e\u0003\u0002\u0002\u0002",
    "\u0b4e\u0b4f\u0003\u0002\u0002\u0002\u0b4f\u0b50\u0007\u01eb\u0002\u0002",
    "\u0b50\u0b55\u0005\u015c\u00af\u0002\u0b51\u0b52\u0007\u01f1\u0002\u0002",
    "\u0b52\u0b54\u0005\u015c\u00af\u0002\u0b53\u0b51\u0003\u0002\u0002\u0002",
    "\u0b54\u0b57\u0003\u0002\u0002\u0002\u0b55\u0b53\u0003\u0002\u0002\u0002",
    "\u0b55\u0b56\u0003\u0002\u0002\u0002\u0b56\u0b58\u0003\u0002\u0002\u0002",
    "\u0b57\u0b55\u0003\u0002\u0002\u0002\u0b58\u0b59\u0005\u015e\u00b0\u0002",
    "\u0b59\u0b5a\u0005\u0160\u00b1\u0002\u0b5a\u0b5b\u0007\u01ec\u0002\u0002",
    "\u0b5b\u015b\u0003\u0002\u0002\u0002\u0b5c\u0b5d\u0005\u028e\u0148\u0002",
    "\u0b5d\u0b5e\u0007\u01eb\u0002\u0002\u0b5e\u0b5f\u0005\u01ee\u00f8\u0002",
    "\u0b5f\u0b61\u0007\u01ec\u0002\u0002\u0b60\u0b62\u0005\u0268\u0135\u0002",
    "\u0b61\u0b60\u0003\u0002\u0002\u0002\u0b61\u0b62\u0003\u0002\u0002\u0002",
    "\u0b62\u015d\u0003\u0002\u0002\u0002\u0b63\u0b70\u0007\u0095\u0002\u0002",
    "\u0b64\u0b71\u0005\u02ae\u0158\u0002\u0b65\u0b66\u0007\u01eb\u0002\u0002",
    "\u0b66\u0b6b\u0005\u02ae\u0158\u0002\u0b67\u0b68\u0007\u01f1\u0002\u0002",
    "\u0b68\u0b6a\u0005\u02ae\u0158\u0002\u0b69\u0b67\u0003\u0002\u0002\u0002",
    "\u0b6a\u0b6d\u0003\u0002\u0002\u0002\u0b6b\u0b69\u0003\u0002\u0002\u0002",
    "\u0b6b\u0b6c\u0003\u0002\u0002\u0002\u0b6c\u0b6e\u0003\u0002\u0002\u0002",
    "\u0b6d\u0b6b\u0003\u0002\u0002\u0002\u0b6e\u0b6f\u0007\u01ec\u0002\u0002",
    "\u0b6f\u0b71\u0003\u0002\u0002\u0002\u0b70\u0b64\u0003\u0002\u0002\u0002",
    "\u0b70\u0b65\u0003\u0002\u0002\u0002\u0b71\u015f\u0003\u0002\u0002\u0002",
    "\u0b72\u0b73\u0007\u00a6\u0002\u0002\u0b73\u0b85\u0007\u01eb\u0002\u0002",
    "\u0b74\u0b86\u0005\u013e\u00a0\u0002\u0b75\u0b7a\u0007\r\u0002\u0002",
    "\u0b76\u0b77\u0007\u01f1\u0002\u0002\u0b77\u0b79\u0007\r\u0002\u0002",
    "\u0b78\u0b76\u0003\u0002\u0002\u0002\u0b79\u0b7c\u0003\u0002\u0002\u0002",
    "\u0b7a\u0b78\u0003\u0002\u0002\u0002\u0b7a\u0b7b\u0003\u0002\u0002\u0002",
    "\u0b7b\u0b86\u0003\u0002\u0002\u0002\u0b7c\u0b7a\u0003\u0002\u0002\u0002",
    "\u0b7d\u0b82\u0005\u0162\u00b2\u0002\u0b7e\u0b7f\u0007\u01f1\u0002\u0002",
    "\u0b7f\u0b81\u0005\u0162\u00b2\u0002\u0b80\u0b7e\u0003\u0002\u0002\u0002",
    "\u0b81\u0b84\u0003\u0002\u0002\u0002\u0b82\u0b80\u0003\u0002\u0002\u0002",
    "\u0b82\u0b83\u0003\u0002\u0002\u0002\u0b83\u0b86\u0003\u0002\u0002\u0002",
    "\u0b84\u0b82\u0003\u0002\u0002\u0002\u0b85\u0b74\u0003\u0002\u0002\u0002",
    "\u0b85\u0b75\u0003\u0002\u0002\u0002\u0b85\u0b7d\u0003\u0002\u0002\u0002",
    "\u0b86\u0b87\u0003\u0002\u0002\u0002\u0b87\u0b88\u0007\u01ec\u0002\u0002",
    "\u0b88\u0161\u0003\u0002\u0002\u0002\u0b89\u0b8b\u0005\u0164\u00b3\u0002",
    "\u0b8a\u0b8c\u0005\u0268\u0135\u0002\u0b8b\u0b8a\u0003\u0002\u0002\u0002",
    "\u0b8b\u0b8c\u0003\u0002\u0002\u0002\u0b8c\u0163\u0003\u0002\u0002\u0002",
    "\u0b8d\u0b90\u0005\u01ee\u00f8\u0002\u0b8e\u0b90\u0005\u01ea\u00f6\u0002",
    "\u0b8f\u0b8d\u0003\u0002\u0002\u0002\u0b8f\u0b8e\u0003\u0002\u0002\u0002",
    "\u0b90\u0165\u0003\u0002\u0002\u0002\u0b91\u0b94\u0007\u0193\u0002\u0002",
    "\u0b92\u0b93\t%\u0002\u0002\u0b93\u0b95\u0007\u00fe\u0002\u0002\u0b94",
    "\u0b92\u0003\u0002\u0002\u0002\u0b94\u0b95\u0003\u0002\u0002\u0002\u0b95",
    "\u0b96\u0003\u0002\u0002\u0002\u0b96\u0ba3\u0007\u01eb\u0002\u0002\u0b97",
    "\u0ba4\u0005\u02ae\u0158\u0002\u0b98\u0b99\u0007\u01eb\u0002\u0002\u0b99",
    "\u0b9e\u0005\u02ae\u0158\u0002\u0b9a\u0b9b\u0007\u01f1\u0002\u0002\u0b9b",
    "\u0b9d\u0005\u02ae\u0158\u0002\u0b9c\u0b9a\u0003\u0002\u0002\u0002\u0b9d",
    "\u0ba0\u0003\u0002\u0002\u0002\u0b9e\u0b9c\u0003\u0002\u0002\u0002\u0b9e",
    "\u0b9f\u0003\u0002\u0002\u0002\u0b9f\u0ba1\u0003\u0002\u0002\u0002\u0ba0",
    "\u0b9e\u0003\u0002\u0002\u0002\u0ba1\u0ba2\u0007\u01ec\u0002\u0002\u0ba2",
    "\u0ba4\u0003\u0002\u0002\u0002\u0ba3\u0b97\u0003\u0002\u0002\u0002\u0ba3",
    "\u0b98\u0003\u0002\u0002\u0002\u0ba4\u0ba5\u0003\u0002\u0002\u0002\u0ba5",
    "\u0ba6\u0005\u015e\u00b0\u0002\u0ba6\u0ba7\u0005\u0168\u00b5\u0002\u0ba7",
    "\u0ba8\u0007\u01ec\u0002\u0002\u0ba8\u0167\u0003\u0002\u0002\u0002\u0ba9",
    "\u0baa\u0007\u00a6\u0002\u0002\u0baa\u0bab\u0007\u01eb\u0002\u0002\u0bab",
    "\u0bb0\u0005\u016a\u00b6\u0002\u0bac\u0bad\u0007\u01f1\u0002\u0002\u0bad",
    "\u0baf\u0005\u016a\u00b6\u0002\u0bae\u0bac\u0003\u0002\u0002\u0002\u0baf",
    "\u0bb2\u0003\u0002\u0002\u0002\u0bb0\u0bae\u0003\u0002\u0002\u0002\u0bb0",
    "\u0bb1\u0003\u0002\u0002\u0002\u0bb1\u0bb3\u0003\u0002\u0002\u0002\u0bb2",
    "\u0bb0\u0003\u0002\u0002\u0002\u0bb3\u0bb4\u0007\u01ec\u0002\u0002\u0bb4",
    "\u0169\u0003\u0002\u0002\u0002\u0bb5\u0bc2\u0005\u02ae\u0158\u0002\u0bb6",
    "\u0bb7\u0007\u01eb\u0002\u0002\u0bb7\u0bbc\u0005\u02ae\u0158\u0002\u0bb8",
    "\u0bb9\u0007\u01f1\u0002\u0002\u0bb9\u0bbb\u0005\u02ae\u0158\u0002\u0bba",
    "\u0bb8\u0003\u0002\u0002\u0002\u0bbb\u0bbe\u0003\u0002\u0002\u0002\u0bbc",
    "\u0bba\u0003\u0002\u0002\u0002\u0bbc\u0bbd\u0003\u0002\u0002\u0002\u0bbd",
    "\u0bbf\u0003\u0002\u0002\u0002\u0bbe\u0bbc\u0003\u0002\u0002\u0002\u0bbf",
    "\u0bc0\u0007\u01ec\u0002\u0002\u0bc0\u0bc2\u0003\u0002\u0002\u0002\u0bc1",
    "\u0bb5\u0003\u0002\u0002\u0002\u0bc1\u0bb6\u0003\u0002\u0002\u0002\u0bc2",
    "\u0bd2\u0003\u0002\u0002\u0002\u0bc3\u0bd0\u0007\u000f\u0002\u0002\u0bc4",
    "\u0bd1\u0005\u02d0\u0169\u0002\u0bc5\u0bc6\u0007\u01eb\u0002\u0002\u0bc6",
    "\u0bcb\u0005\u02d0\u0169\u0002\u0bc7\u0bc8\u0007\u01f1\u0002\u0002\u0bc8",
    "\u0bca\u0005\u02d0\u0169\u0002\u0bc9\u0bc7\u0003\u0002\u0002\u0002\u0bca",
    "\u0bcd\u0003\u0002\u0002\u0002\u0bcb\u0bc9\u0003\u0002\u0002\u0002\u0bcb",
    "\u0bcc\u0003\u0002\u0002\u0002\u0bcc\u0bce\u0003\u0002\u0002\u0002\u0bcd",
    "\u0bcb\u0003\u0002\u0002\u0002\u0bce\u0bcf\u0007\u01ec\u0002\u0002\u0bcf",
    "\u0bd1\u0003\u0002\u0002\u0002\u0bd0\u0bc4\u0003\u0002\u0002\u0002\u0bd0",
    "\u0bc5\u0003\u0002\u0002\u0002\u0bd1\u0bd3\u0003\u0002\u0002\u0002\u0bd2",
    "\u0bc3\u0003\u0002\u0002\u0002\u0bd2\u0bd3\u0003\u0002\u0002\u0002\u0bd3",
    "\u016b\u0003\u0002\u0002\u0002\u0bd4\u0bd5\u0007A\u0002\u0002\u0bd5",
    "\u0bd7\u0007(\u0002\u0002\u0bd6\u0bd8\u0007\u00f4\u0002\u0002\u0bd7",
    "\u0bd6\u0003\u0002\u0002\u0002\u0bd7\u0bd8\u0003\u0002\u0002\u0002\u0bd8",
    "\u0bd9\u0003\u0002\u0002\u0002\u0bd9\u0bdb\u0005\u01ec\u00f7\u0002\u0bda",
    "\u0bdc\u0005\u016e\u00b8\u0002\u0bdb\u0bda\u0003\u0002\u0002\u0002\u0bdb",
    "\u0bdc\u0003\u0002\u0002\u0002\u0bdc\u0be6\u0003\u0002\u0002\u0002\u0bdd",
    "\u0bde\u0005\u016e\u00b8\u0002\u0bde\u0bdf\u0007A\u0002\u0002\u0bdf",
    "\u0be1\u0007(\u0002\u0002\u0be0\u0be2\u0007\u00f4\u0002\u0002\u0be1",
    "\u0be0\u0003\u0002\u0002\u0002\u0be1\u0be2\u0003\u0002\u0002\u0002\u0be2",
    "\u0be3\u0003\u0002\u0002\u0002\u0be3\u0be4\u0005\u01ec\u00f7\u0002\u0be4",
    "\u0be6\u0003\u0002\u0002\u0002\u0be5\u0bd4\u0003\u0002\u0002\u0002\u0be5",
    "\u0bdd\u0003\u0002\u0002\u0002\u0be6\u016d\u0003\u0002\u0002\u0002\u0be7",
    "\u0be8\u0007\u016b\u0002\u0002\u0be8\u0be9\u0007\u01ac\u0002\u0002\u0be9",
    "\u0bea\u0005\u01ec\u00f7\u0002\u0bea\u016f\u0003\u0002\u0002\u0002\u0beb",
    "\u0bec\u0007\u009d\u0002\u0002\u0bec\u0bed\u0007(\u0002\u0002\u0bed",
    "\u0bf2\u0005\u0172\u00ba\u0002\u0bee\u0bef\u0007\u01f1\u0002\u0002\u0bef",
    "\u0bf1\u0005\u0172\u00ba\u0002\u0bf0\u0bee\u0003\u0002\u0002\u0002\u0bf1",
    "\u0bf4\u0003\u0002\u0002\u0002\u0bf2\u0bf0\u0003\u0002\u0002\u0002\u0bf2",
    "\u0bf3\u0003\u0002\u0002\u0002\u0bf3\u0171\u0003\u0002\u0002\u0002\u0bf4",
    "\u0bf2\u0003\u0002\u0002\u0002\u0bf5\u0bf9\u0005\u0176\u00bc\u0002\u0bf6",
    "\u0bf9\u0005\u0174\u00bb\u0002\u0bf7\u0bf9\u0005\u01ee\u00f8\u0002\u0bf8",
    "\u0bf5\u0003\u0002\u0002\u0002\u0bf8\u0bf6\u0003\u0002\u0002\u0002\u0bf8",
    "\u0bf7\u0003\u0002\u0002\u0002\u0bf9\u0173\u0003\u0002\u0002\u0002\u0bfa",
    "\u0bfb\t&\u0002\u0002\u0bfb\u0bfc\u0007\u01eb\u0002\u0002\u0bfc\u0c01",
    "\u0005\u0178\u00bd\u0002\u0bfd\u0bfe\u0007\u01f1\u0002\u0002\u0bfe\u0c00",
    "\u0005\u0178\u00bd\u0002\u0bff\u0bfd\u0003\u0002\u0002\u0002\u0c00\u0c03",
    "\u0003\u0002\u0002\u0002\u0c01\u0bff\u0003\u0002\u0002\u0002\u0c01\u0c02",
    "\u0003\u0002\u0002\u0002\u0c02\u0c04\u0003\u0002\u0002\u0002\u0c03\u0c01",
    "\u0003\u0002\u0002\u0002\u0c04\u0c05\u0007\u01ec\u0002\u0002\u0c05\u0175",
    "\u0003\u0002\u0002\u0002\u0c06\u0c07\u0007\u009e\u0002\u0002\u0c07\u0c08",
    "\u0007\u0159\u0002\u0002\u0c08\u0c09\u0007\u01eb\u0002\u0002\u0c09\u0c0e",
    "\u0005\u0178\u00bd\u0002\u0c0a\u0c0b\u0007\u01f1\u0002\u0002\u0c0b\u0c0d",
    "\u0005\u0178\u00bd\u0002\u0c0c\u0c0a\u0003\u0002\u0002\u0002\u0c0d\u0c10",
    "\u0003\u0002\u0002\u0002\u0c0e\u0c0c\u0003\u0002\u0002\u0002\u0c0e\u0c0f",
    "\u0003\u0002\u0002\u0002\u0c0f\u0c11\u0003\u0002\u0002\u0002\u0c10\u0c0e",
    "\u0003\u0002\u0002\u0002\u0c11\u0c12\u0007\u01ec\u0002\u0002\u0c12\u0177",
    "\u0003\u0002\u0002\u0002\u0c13\u0c17\u0005\u0174\u00bb\u0002\u0c14\u0c17",
    "\u0005\u01ea\u00f6\u0002\u0c15\u0c17\u0005\u01ee\u00f8\u0002\u0c16\u0c13",
    "\u0003\u0002\u0002\u0002\u0c16\u0c14\u0003\u0002\u0002\u0002\u0c16\u0c15",
    "\u0003\u0002\u0002\u0002\u0c17\u0179\u0003\u0002\u0002\u0002\u0c18\u0c19",
    "\u0007\u00a0\u0002\u0002\u0c19\u0c1a\u0005\u01ec\u00f7\u0002\u0c1a\u017b",
    "\u0003\u0002\u0002\u0002\u0c1b\u0c1f\u0007\u00e2\u0002\u0002\u0c1c\u0c1e",
    "\u0005\u017e\u00c0\u0002\u0c1d\u0c1c\u0003\u0002\u0002\u0002\u0c1e\u0c21",
    "\u0003\u0002\u0002\u0002\u0c1f\u0c1d\u0003\u0002\u0002\u0002\u0c1f\u0c20",
    "\u0003\u0002\u0002\u0002\u0c20\u0c23\u0003\u0002\u0002\u0002\u0c21\u0c1f",
    "\u0003\u0002\u0002\u0002\u0c22\u0c24\u0005\u0180\u00c1\u0002\u0c23\u0c22",
    "\u0003\u0002\u0002\u0002\u0c23\u0c24\u0003\u0002\u0002\u0002\u0c24\u0c28",
    "\u0003\u0002\u0002\u0002\u0c25\u0c27\u0005\u0182\u00c2\u0002\u0c26\u0c25",
    "\u0003\u0002\u0002\u0002\u0c27\u0c2a\u0003\u0002\u0002\u0002\u0c28\u0c26",
    "\u0003\u0002\u0002\u0002\u0c28\u0c29\u0003\u0002\u0002\u0002\u0c29\u0c2b",
    "\u0003\u0002\u0002\u0002\u0c2a\u0c28\u0003\u0002\u0002\u0002\u0c2b\u0c2c",
    "\u0005\u0184\u00c3\u0002\u0c2c\u017d\u0003\u0002\u0002\u0002\u0c2d\u0c2e",
    "\t\'\u0002\u0002\u0c2e\u0c36\u0007\u00ea\u0002\u0002\u0c2f\u0c33\u0007",
    "\u0191\u0002\u0002\u0c30\u0c34\u0007l\u0002\u0002\u0c31\u0c32\u0007",
    "\u0161\u0002\u0002\u0c32\u0c34\u0007\u0130\u0002\u0002\u0c33\u0c30\u0003",
    "\u0002\u0002\u0002\u0c33\u0c31\u0003\u0002\u0002\u0002\u0c34\u0c36\u0003",
    "\u0002\u0002\u0002\u0c35\u0c2d\u0003\u0002\u0002\u0002\u0c35\u0c2f\u0003",
    "\u0002\u0002\u0002\u0c36\u017f\u0003\u0002\u0002\u0002\u0c37\u0c38\u0007",
    "\u013a\u0002\u0002\u0c38\u0c39\t(\u0002\u0002\u0c39\u0c3a\u0007\u0144",
    "\u0002\u0002\u0c3a\u0181\u0003\u0002\u0002\u0002\u0c3b\u0c3c\u0007\u0130",
    "\u0002\u0002\u0c3c\u0c3d\u0005\u028a\u0146\u0002\u0c3d\u0c3e\u0007\u0107",
    "\u0002\u0002\u0c3e\u0c3f\u0007\u01eb\u0002\u0002\u0c3f\u0c40\u0005\u013e",
    "\u00a0\u0002\u0c40\u0c41\u0007\u01ec\u0002\u0002\u0c41\u0c45\u0005\u0186",
    "\u00c4\u0002\u0c42\u0c44\u0005\u017e\u00c0\u0002\u0c43\u0c42\u0003\u0002",
    "\u0002\u0002\u0c44\u0c47\u0003\u0002\u0002\u0002\u0c45\u0c43\u0003\u0002",
    "\u0002\u0002\u0c45\u0c46\u0003\u0002\u0002\u0002\u0c46\u0183\u0003\u0002",
    "\u0002\u0002\u0c47\u0c45\u0003\u0002\u0002\u0002\u0c48\u0c49\u0007\u00d6",
    "\u0002\u0002\u0c49\u0c4b\u0005\u028c\u0147\u0002\u0c4a\u0c48\u0003\u0002",
    "\u0002\u0002\u0c4a\u0c4b\u0003\u0002\u0002\u0002\u0c4b\u0c4c\u0003\u0002",
    "\u0002\u0002\u0c4c\u0c50\u0005\u0186\u00c4\u0002\u0c4d\u0c4f\u0005\u017e",
    "\u00c0\u0002\u0c4e\u0c4d\u0003\u0002\u0002\u0002\u0c4f\u0c52\u0003\u0002",
    "\u0002\u0002\u0c50\u0c4e\u0003\u0002\u0002\u0002\u0c50\u0c51\u0003\u0002",
    "\u0002\u0002\u0c51\u0c53\u0003\u0002\u0002\u0002\u0c52\u0c50\u0003\u0002",
    "\u0002\u0002\u0c53\u0c54\u0005\u018e\u00c8\u0002\u0c54\u0185\u0003\u0002",
    "\u0002\u0002\u0c55\u0c57\u0005\u0188\u00c5\u0002\u0c56\u0c55\u0003\u0002",
    "\u0002\u0002\u0c56\u0c57\u0003\u0002\u0002\u0002\u0c57\u0c58\u0003\u0002",
    "\u0002\u0002\u0c58\u0c59\u0007l\u0002\u0002\u0c59\u0c5a\u0007(\u0002",
    "\u0002\u0c5a\u0c5b\u0005\u018a\u00c6\u0002\u0c5b\u0c5c\u0007\u00da\u0002",
    "\u0002\u0c5c\u0c5d\u0005\u018a\u00c6\u0002\u0c5d\u0187\u0003\u0002\u0002",
    "\u0002\u0c5e\u0c5f\u0007\u0118\u0002\u0002\u0c5f\u0c60\u0007(\u0002",
    "\u0002\u0c60\u0c61\u0005\u018a\u00c6\u0002\u0c61\u0189\u0003\u0002\u0002",
    "\u0002\u0c62\u0c63\u0007\u01eb\u0002\u0002\u0c63\u0c68\u0005\u018c\u00c7",
    "\u0002\u0c64\u0c65\u0007\u01f1\u0002\u0002\u0c65\u0c67\u0005\u018c\u00c7",
    "\u0002\u0c66\u0c64\u0003\u0002\u0002\u0002\u0c67\u0c6a\u0003\u0002\u0002",
    "\u0002\u0c68\u0c66\u0003\u0002\u0002\u0002\u0c68\u0c69\u0003\u0002\u0002",
    "\u0002\u0c69\u0c6b\u0003\u0002\u0002\u0002\u0c6a\u0c68\u0003\u0002\u0002",
    "\u0002\u0c6b\u0c6c\u0007\u01ec\u0002\u0002\u0c6c\u018b\u0003\u0002\u0002",
    "\u0002\u0c6d\u0c6f\u0005\u01ee\u00f8\u0002\u0c6e\u0c70\u0005\u026a\u0136",
    "\u0002\u0c6f\u0c6e\u0003\u0002\u0002\u0002\u0c6f\u0c70\u0003\u0002\u0002",
    "\u0002\u0c70\u018d\u0003\u0002\u0002\u0002\u0c71\u0c73\u0005\u0190\u00c9",
    "\u0002\u0c72\u0c71\u0003\u0002\u0002\u0002\u0c72\u0c73\u0003\u0002\u0002",
    "\u0002\u0c73\u0c74\u0003\u0002\u0002\u0002\u0c74\u0c75\u0007\u01eb\u0002",
    "\u0002\u0c75\u0c7a\u0005\u0192\u00ca\u0002\u0c76\u0c77\u0007\u01f1\u0002",
    "\u0002\u0c77\u0c79\u0005\u0192\u00ca\u0002\u0c78\u0c76\u0003\u0002\u0002",
    "\u0002\u0c79\u0c7c\u0003\u0002\u0002\u0002\u0c7a\u0c78\u0003\u0002\u0002",
    "\u0002\u0c7a\u0c7b\u0003\u0002\u0002\u0002\u0c7b\u0c7d\u0003\u0002\u0002",
    "\u0002\u0c7c\u0c7a\u0003\u0002\u0002\u0002\u0c7d\u0c7e\u0007\u01ec\u0002",
    "\u0002\u0c7e\u018f\u0003\u0002\u0002\u0002\u0c7f\u0c85\u0007\u0145\u0002",
    "\u0002\u0c80\u0c86\u0007\u0195\u0002\u0002\u0c81\u0c83\u0007\u0197\u0002",
    "\u0002\u0c82\u0c84\u0007\t\u0002\u0002\u0c83\u0c82\u0003\u0002\u0002",
    "\u0002\u0c83\u0c84\u0003\u0002\u0002\u0002\u0c84\u0c86\u0003\u0002\u0002",
    "\u0002\u0c85\u0c80\u0003\u0002\u0002\u0002\u0c85\u0c81\u0003\u0002\u0002",
    "\u0002\u0c85\u0c86\u0003\u0002\u0002\u0002\u0c86\u0c89\u0003\u0002\u0002",
    "\u0002\u0c87\u0c88\t)\u0002\u0002\u0c88\u0c8a\u0007\u010d\u0002\u0002",
    "\u0c89\u0c87\u0003\u0002\u0002\u0002\u0c89\u0c8a\u0003\u0002\u0002\u0002",
    "\u0c8a\u0c8c\u0003\u0002\u0002\u0002\u0c8b\u0c8d\u0005\u0196\u00cc\u0002",
    "\u0c8c\u0c8b\u0003\u0002\u0002\u0002\u0c8c\u0c8d\u0003\u0002\u0002\u0002",
    "\u0c8d\u0191\u0003\u0002\u0002\u0002\u0c8e\u0c94\u0007\u0195\u0002\u0002",
    "\u0c8f\u0c91\u0007\u0197\u0002\u0002\u0c90\u0c92\u0007\t\u0002\u0002",
    "\u0c91\u0c90\u0003\u0002\u0002\u0002\u0c91\u0c92\u0003\u0002\u0002\u0002",
    "\u0c92\u0c94\u0003\u0002\u0002\u0002\u0c93\u0c8e\u0003\u0002\u0002\u0002",
    "\u0c93\u0c8f\u0003\u0002\u0002\u0002\u0c93\u0c94\u0003\u0002\u0002\u0002",
    "\u0c94\u0c95\u0003\u0002\u0002\u0002\u0c95\u0c97\u0005\u0194\u00cb\u0002",
    "\u0c96\u0c98\u0005\u019a\u00ce\u0002\u0c97\u0c96\u0003\u0002\u0002\u0002",
    "\u0c97\u0c98\u0003\u0002\u0002\u0002\u0c98\u0c99\u0003\u0002\u0002\u0002",
    "\u0c99\u0c9a\u0007\u0202\u0002\u0002\u0c9a\u0c9b\u0005\u01ee\u00f8\u0002",
    "\u0c9b\u0193\u0003\u0002\u0002\u0002\u0c9c\u0c9d\u0005\u0206\u0104\u0002",
    "\u0c9d\u0195\u0003\u0002\u0002\u0002\u0c9e\u0c9f\u0007\u00be\u0002\u0002",
    "\u0c9f\u0ca0\u0007\u01eb\u0002\u0002\u0ca0\u0ca1\u0005\u01ee\u00f8\u0002",
    "\u0ca1\u0ca3\u0007\u01ec\u0002\u0002\u0ca2\u0ca4\u0005\u0198\u00cd\u0002",
    "\u0ca3\u0ca2\u0003\u0002\u0002\u0002\u0ca3\u0ca4\u0003\u0002\u0002\u0002",
    "\u0ca4\u0197\u0003\u0002\u0002\u0002\u0ca5\u0ca6\u0007\u0194\u0002\u0002",
    "\u0ca6\u0ca7\u0007\u01eb\u0002\u0002\u0ca7\u0ca8\u0005\u01ec\u00f7\u0002",
    "\u0ca8\u0ca9\u0007\u01ec\u0002\u0002\u0ca9\u0199\u0003\u0002\u0002\u0002",
    "\u0caa\u0cac\u0007\u010d\u0002\u0002\u0cab\u0cad\u0007\u015e\u0002\u0002",
    "\u0cac\u0cab\u0003\u0002\u0002\u0002\u0cac\u0cad\u0003\u0002\u0002\u0002",
    "\u0cad\u0cae\u0003\u0002\u0002\u0002\u0cae\u0caf\u0007(\u0002\u0002",
    "\u0caf\u0cb4\u0005\u019c\u00cf\u0002\u0cb0\u0cb1\u0007\u01f1\u0002\u0002",
    "\u0cb1\u0cb3\u0005\u019c\u00cf\u0002\u0cb2\u0cb0\u0003\u0002\u0002\u0002",
    "\u0cb3\u0cb6\u0003\u0002\u0002\u0002\u0cb4\u0cb2\u0003\u0002\u0002\u0002",
    "\u0cb4\u0cb5\u0003\u0002\u0002\u0002\u0cb5\u019b\u0003\u0002\u0002\u0002",
    "\u0cb6\u0cb4\u0003\u0002\u0002\u0002\u0cb7\u0cb9\u0005\u01ee\u00f8\u0002",
    "\u0cb8\u0cba\t*\u0002\u0002\u0cb9\u0cb8\u0003\u0002\u0002\u0002\u0cb9",
    "\u0cba\u0003\u0002\u0002\u0002\u0cba\u0cbd\u0003\u0002\u0002\u0002\u0cbb",
    "\u0cbc\u0007\u00fe\u0002\u0002\u0cbc\u0cbe\t+\u0002\u0002\u0cbd\u0cbb",
    "\u0003\u0002\u0002\u0002\u0cbd\u0cbe\u0003\u0002\u0002\u0002\u0cbe\u019d",
    "\u0003\u0002\u0002\u0002\u0cbf\u0cc0\u0007\u0095\u0002\u0002\u0cc0\u0cc2",
    "\u0007\u0195\u0002\u0002\u0cc1\u0cc3\u0005\u01a0\u00d1\u0002\u0cc2\u0cc1",
    "\u0003\u0002\u0002\u0002\u0cc2\u0cc3\u0003\u0002\u0002\u0002\u0cc3\u0cc5",
    "\u0003\u0002\u0002\u0002\u0cc4\u0cc6\u0005\u01a2\u00d2\u0002\u0cc5\u0cc4",
    "\u0003\u0002\u0002\u0002\u0cc5\u0cc6\u0003\u0002\u0002\u0002\u0cc6\u019f",
    "\u0003\u0002\u0002\u0002\u0cc7\u0cc8\u0007\u0103\u0002\u0002\u0cc8\u0ccd",
    "\u0005\u02ae\u0158\u0002\u0cc9\u0cca\u0007\u01f1\u0002\u0002\u0cca\u0ccc",
    "\u0005\u02ae\u0158\u0002\u0ccb\u0cc9\u0003\u0002\u0002\u0002\u0ccc\u0ccf",
    "\u0003\u0002\u0002\u0002\u0ccd\u0ccb\u0003\u0002\u0002\u0002\u0ccd\u0cce",
    "\u0003\u0002\u0002\u0002\u0cce\u01a1\u0003\u0002\u0002\u0002\u0ccf\u0ccd",
    "\u0003\u0002\u0002\u0002\u0cd0\u0cd1\u0007\u0163\u0002\u0002\u0cd1\u0cd6",
    "\u0007\u00d0\u0002\u0002\u0cd2\u0cd6\u0007\u00fc\u0002\u0002\u0cd3\u0cd4",
    "\u0007\u01a5\u0002\u0002\u0cd4\u0cd6\u0005\u01ee\u00f8\u0002\u0cd5\u0cd0",
    "\u0003\u0002\u0002\u0002\u0cd5\u0cd2\u0003\u0002\u0002\u0002\u0cd5\u0cd3",
    "\u0003\u0002\u0002\u0002\u0cd6\u01a3\u0003\u0002\u0002\u0002\u0cd7\u0cd8",
    "\u0007\u00cd\u0002\u0002\u0cd8\u0cd9\u0005\u01ee\u00f8\u0002\u0cd9\u01a5",
    "\u0003\u0002\u0002\u0002\u0cda\u0cdb\u0007\u0195\u0002\u0002\u0cdb\u0cdc",
    "\u0005\u01d4\u00eb\u0002\u0cdc\u0cde\u0005\u01a8\u00d5\u0002\u0cdd\u0cdf",
    "\u0005\u026e\u0138\u0002\u0cde\u0cdd\u0003\u0002\u0002\u0002\u0cde\u0cdf",
    "\u0003\u0002\u0002\u0002\u0cdf\u0ce1\u0003\u0002\u0002\u0002\u0ce0\u0ce2",
    "\u0005\u01d6\u00ec\u0002\u0ce1\u0ce0\u0003\u0002\u0002\u0002\u0ce1\u0ce2",
    "\u0003\u0002\u0002\u0002\u0ce2\u0ce4\u0003\u0002\u0002\u0002\u0ce3\u0ce5",
    "\u0005\u01d8\u00ed\u0002\u0ce4\u0ce3\u0003\u0002\u0002\u0002\u0ce4\u0ce5",
    "\u0003\u0002\u0002\u0002\u0ce5\u01a7\u0003\u0002\u0002\u0002\u0ce6\u0cf6",
    "\u0007\u0158\u0002\u0002\u0ce7\u0cec\u0005\u01aa\u00d6\u0002\u0ce8\u0ce9",
    "\u0007\u01f1\u0002\u0002\u0ce9\u0ceb\u0005\u01aa\u00d6\u0002\u0cea\u0ce8",
    "\u0003\u0002\u0002\u0002\u0ceb\u0cee\u0003\u0002\u0002\u0002\u0cec\u0cea",
    "\u0003\u0002\u0002\u0002\u0cec\u0ced\u0003\u0002\u0002\u0002\u0ced\u0cf7",
    "\u0003\u0002\u0002\u0002\u0cee\u0cec\u0003\u0002\u0002\u0002\u0cef\u0cf0",
    "\u0007\u019c\u0002\u0002\u0cf0\u0cf1\u0007\u01eb\u0002\u0002\u0cf1\u0cf2",
    "\u0005\u02d8\u016d\u0002\u0cf2\u0cf3\u0007\u01ec\u0002\u0002\u0cf3\u0cf4",
    "\u0007\u0202\u0002\u0002\u0cf4\u0cf5\u0005\u01ee\u00f8\u0002\u0cf5\u0cf7",
    "\u0003\u0002\u0002\u0002\u0cf6\u0ce7\u0003\u0002\u0002\u0002\u0cf6\u0cef",
    "\u0003\u0002\u0002\u0002\u0cf7\u01a9\u0003\u0002\u0002\u0002\u0cf8\u0cf9",
    "\u0005\u02ae\u0158\u0002\u0cf9\u0cfa\u0007\u0202\u0002\u0002\u0cfa\u0cfb",
    "\u0005\u01ee\u00f8\u0002\u0cfb\u0d0a\u0003\u0002\u0002\u0002\u0cfc\u0cfd",
    "\u0007\u01eb\u0002\u0002\u0cfd\u0d02\u0005\u02ae\u0158\u0002\u0cfe\u0cff",
    "\u0007\u01f1\u0002\u0002\u0cff\u0d01\u0005\u02ae\u0158\u0002\u0d00\u0cfe",
    "\u0003\u0002\u0002\u0002\u0d01\u0d04\u0003\u0002\u0002\u0002\u0d02\u0d00",
    "\u0003\u0002\u0002\u0002\u0d02\u0d03\u0003\u0002\u0002\u0002\u0d03\u0d05",
    "\u0003\u0002\u0002\u0002\u0d04\u0d02\u0003\u0002\u0002\u0002\u0d05\u0d06",
    "\u0007\u01ec\u0002\u0002\u0d06\u0d07\u0007\u0202\u0002\u0002\u0d07\u0d08",
    "\u0005\u013e\u00a0\u0002\u0d08\u0d0a\u0003\u0002\u0002\u0002\u0d09\u0cf8",
    "\u0003\u0002\u0002\u0002\u0d09\u0cfc\u0003\u0002\u0002\u0002\u0d0a\u01ab",
    "\u0003\u0002\u0002\u0002\u0d0b\u0d0d\u0007h\u0002\u0002\u0d0c\u0d0e",
    "\u0007\u0098\u0002\u0002\u0d0d\u0d0c\u0003\u0002\u0002\u0002\u0d0d\u0d0e",
    "\u0003\u0002\u0002\u0002\u0d0e\u0d0f\u0003\u0002\u0002\u0002\u0d0f\u0d11",
    "\u0005\u01d4\u00eb\u0002\u0d10\u0d12\u0005\u026e\u0138\u0002\u0d11\u0d10",
    "\u0003\u0002\u0002\u0002\u0d11\u0d12\u0003\u0002\u0002\u0002\u0d12\u0d14",
    "\u0003\u0002\u0002\u0002\u0d13\u0d15\u0005\u01d6\u00ec\u0002\u0d14\u0d13",
    "\u0003\u0002\u0002\u0002\u0d14\u0d15\u0003\u0002\u0002\u0002\u0d15\u0d17",
    "\u0003\u0002\u0002\u0002\u0d16\u0d18\u0005\u01d8\u00ed\u0002\u0d17\u0d16",
    "\u0003\u0002\u0002\u0002\u0d17\u0d18\u0003\u0002\u0002\u0002\u0d18\u01ad",
    "\u0003\u0002\u0002\u0002\u0d19\u0d1c\u0007\u00b3\u0002\u0002\u0d1a\u0d1d",
    "\u0005\u01b0\u00d9\u0002\u0d1b\u0d1d\u0005\u01b2\u00da\u0002\u0d1c\u0d1a",
    "\u0003\u0002\u0002\u0002\u0d1c\u0d1b\u0003\u0002\u0002\u0002\u0d1d\u01af",
    "\u0003\u0002\u0002\u0002\u0d1e\u0d24\u0005\u01bc\u00df\u0002\u0d1f\u0d21",
    "\u0005\u01be\u00e0\u0002\u0d20\u0d22\u0005\u01d6\u00ec\u0002\u0d21\u0d20",
    "\u0003\u0002\u0002\u0002\u0d21\u0d22\u0003\u0002\u0002\u0002\u0d22\u0d25",
    "\u0003\u0002\u0002\u0002\u0d23\u0d25\u0005\u0134\u009b\u0002\u0d24\u0d1f",
    "\u0003\u0002\u0002\u0002\u0d24\u0d23\u0003\u0002\u0002\u0002\u0d25\u0d27",
    "\u0003\u0002\u0002\u0002\u0d26\u0d28\u0005\u01d8\u00ed\u0002\u0d27\u0d26",
    "\u0003\u0002\u0002\u0002\u0d27\u0d28\u0003\u0002\u0002\u0002\u0d28\u01b1",
    "\u0003\u0002\u0002\u0002\u0d29\u0d2b\u0007\t\u0002\u0002\u0d2a\u0d2c",
    "\u0005\u01b4\u00db\u0002\u0d2b\u0d2a\u0003\u0002\u0002\u0002\u0d2c\u0d2d",
    "\u0003\u0002\u0002\u0002\u0d2d\u0d2b\u0003\u0002\u0002\u0002\u0d2d\u0d2e",
    "\u0003\u0002\u0002\u0002\u0d2e\u0d31\u0003\u0002\u0002\u0002\u0d2f\u0d31",
    "\u0005\u01b6\u00dc\u0002\u0d30\u0d29\u0003\u0002\u0002\u0002\u0d30\u0d2f",
    "\u0003\u0002\u0002\u0002\u0d31\u0d32\u0003\u0002\u0002\u0002\u0d32\u0d33",
    "\u0005\u0134\u009b\u0002\u0d33\u01b3\u0003\u0002\u0002\u0002\u0d34\u0d36",
    "\u0005\u01bc\u00df\u0002\u0d35\u0d37\u0005\u01be\u00e0\u0002\u0d36\u0d35",
    "\u0003\u0002\u0002\u0002\u0d36\u0d37\u0003\u0002\u0002\u0002\u0d37\u0d39",
    "\u0003\u0002\u0002\u0002\u0d38\u0d3a\u0005\u01d8\u00ed\u0002\u0d39\u0d38",
    "\u0003\u0002\u0002\u0002\u0d39\u0d3a\u0003\u0002\u0002\u0002\u0d3a\u01b5",
    "\u0003\u0002\u0002\u0002\u0d3b\u0d3d\t,\u0002\u0002\u0d3c\u0d3b\u0003",
    "\u0002\u0002\u0002\u0d3c\u0d3d\u0003\u0002\u0002\u0002\u0d3d\u0d3f\u0003",
    "\u0002\u0002\u0002\u0d3e\u0d40\u0005\u01b8\u00dd\u0002\u0d3f\u0d3e\u0003",
    "\u0002\u0002\u0002\u0d40\u0d41\u0003\u0002\u0002\u0002\u0d41\u0d3f\u0003",
    "\u0002\u0002\u0002\u0d41\u0d42\u0003\u0002\u0002\u0002\u0d42\u0d44\u0003",
    "\u0002\u0002\u0002\u0d43\u0d45\u0005\u01ba\u00de\u0002\u0d44\u0d43\u0003",
    "\u0002\u0002\u0002\u0d44\u0d45\u0003\u0002\u0002\u0002\u0d45\u01b7\u0003",
    "\u0002\u0002\u0002\u0d46\u0d47\u0007\u01a8\u0002\u0002\u0d47\u0d48\u0005",
    "\u01ec\u00f7\u0002\u0d48\u0d4a\u0007\u017a\u0002\u0002\u0d49\u0d4b\u0005",
    "\u01b4\u00db\u0002\u0d4a\u0d49\u0003\u0002\u0002\u0002\u0d4b\u0d4c\u0003",
    "\u0002\u0002\u0002\u0d4c\u0d4a\u0003\u0002\u0002\u0002\u0d4c\u0d4d\u0003",
    "\u0002\u0002\u0002\u0d4d\u01b9\u0003\u0002\u0002\u0002\u0d4e\u0d50\u0007",
    "v\u0002\u0002\u0d4f\u0d51\u0005\u01b4\u00db\u0002\u0d50\u0d4f\u0003",
    "\u0002\u0002\u0002\u0d51\u0d52\u0003\u0002\u0002\u0002\u0d52\u0d50\u0003",
    "\u0002\u0002\u0002\u0d52\u0d53\u0003\u0002\u0002\u0002\u0d53\u01bb\u0003",
    "\u0002\u0002\u0002\u0d54\u0d55\u0007\u00ba\u0002\u0002\u0d55\u0d61\u0005",
    "\u01d4\u00eb\u0002\u0d56\u0d57\u0007\u01eb\u0002\u0002\u0d57\u0d5c\u0005",
    "\u02ae\u0158\u0002\u0d58\u0d59\u0007\u01f1\u0002\u0002\u0d59\u0d5b\u0005",
    "\u02ae\u0158\u0002\u0d5a\u0d58\u0003\u0002\u0002\u0002\u0d5b\u0d5e\u0003",
    "\u0002\u0002\u0002\u0d5c\u0d5a\u0003\u0002\u0002\u0002\u0d5c\u0d5d\u0003",
    "\u0002\u0002\u0002\u0d5d\u0d5f\u0003\u0002\u0002\u0002\u0d5e\u0d5c\u0003",
    "\u0002\u0002\u0002\u0d5f\u0d60\u0007\u01ec\u0002\u0002\u0d60\u0d62\u0003",
    "\u0002\u0002\u0002\u0d61\u0d56\u0003\u0002\u0002\u0002\u0d61\u0d62\u0003",
    "\u0002\u0002\u0002\u0d62\u01bd\u0003\u0002\u0002\u0002\u0d63\u0d64\u0007",
    "\u019d\u0002\u0002\u0d64\u0d65\u0005\u01ea\u00f6\u0002\u0d65\u01bf\u0003",
    "\u0002\u0002\u0002\u0d66\u0d67\u0007\u00dc\u0002\u0002\u0d67\u0d68\u0007",
    "\u00ba\u0002\u0002\u0d68\u0d6a\u0005\u02b0\u0159\u0002\u0d69\u0d6b\u0005",
    "\u026a\u0136\u0002\u0d6a\u0d69\u0003\u0002\u0002\u0002\u0d6a\u0d6b\u0003",
    "\u0002\u0002\u0002\u0d6b\u0d6c\u0003\u0002\u0002\u0002\u0d6c\u0d6d\u0007",
    "\u019a\u0002\u0002\u0d6d\u0d6e\u0005\u01ca\u00e6\u0002\u0d6e\u0d6f\u0007",
    "\u0107\u0002\u0002\u0d6f\u0d70\u0007\u01eb\u0002\u0002\u0d70\u0d71\u0005",
    "\u01ec\u00f7\u0002\u0d71\u0d7a\u0007\u01ec\u0002\u0002\u0d72\u0d74\u0005",
    "\u01c2\u00e2\u0002\u0d73\u0d75\u0005\u01c8\u00e5\u0002\u0d74\u0d73\u0003",
    "\u0002\u0002\u0002\u0d74\u0d75\u0003\u0002\u0002\u0002\u0d75\u0d7b\u0003",
    "\u0002\u0002\u0002\u0d76\u0d78\u0005\u01c8\u00e5\u0002\u0d77\u0d79\u0005",
    "\u01c2\u00e2\u0002\u0d78\u0d77\u0003\u0002\u0002\u0002\u0d78\u0d79\u0003",
    "\u0002\u0002\u0002\u0d79\u0d7b\u0003\u0002\u0002\u0002\u0d7a\u0d72\u0003",
    "\u0002\u0002\u0002\u0d7a\u0d76\u0003\u0002\u0002\u0002\u0d7a\u0d7b\u0003",
    "\u0002\u0002\u0002\u0d7b\u0d7d\u0003\u0002\u0002\u0002\u0d7c\u0d7e\u0005",
    "\u01d8\u00ed\u0002\u0d7d\u0d7c\u0003\u0002\u0002\u0002\u0d7d\u0d7e\u0003",
    "\u0002\u0002\u0002\u0d7e\u01c1\u0003\u0002\u0002\u0002\u0d7f\u0d80\u0007",
    "\u01a8\u0002\u0002\u0d80\u0d81\u0007\u00d8\u0002\u0002\u0d81\u0d82\u0007",
    "\u017a\u0002\u0002\u0d82\u0d83\u0007\u0195\u0002\u0002\u0d83\u0d84\u0007",
    "\u0158\u0002\u0002\u0d84\u0d89\u0005\u01c4\u00e3\u0002\u0d85\u0d86\u0007",
    "\u01f1\u0002\u0002\u0d86\u0d88\u0005\u01c4\u00e3\u0002\u0d87\u0d85\u0003",
    "\u0002\u0002\u0002\u0d88\u0d8b\u0003\u0002\u0002\u0002\u0d89\u0d87\u0003",
    "\u0002\u0002\u0002\u0d89\u0d8a\u0003\u0002\u0002\u0002\u0d8a\u0d8d\u0003",
    "\u0002\u0002\u0002\u0d8b\u0d89\u0003\u0002\u0002\u0002\u0d8c\u0d8e\u0005",
    "\u026e\u0138\u0002\u0d8d\u0d8c\u0003\u0002\u0002\u0002\u0d8d\u0d8e\u0003",
    "\u0002\u0002\u0002\u0d8e\u0d90\u0003\u0002\u0002\u0002\u0d8f\u0d91\u0005",
    "\u01c6\u00e4\u0002\u0d90\u0d8f\u0003\u0002\u0002\u0002\u0d90\u0d91\u0003",
    "\u0002\u0002\u0002\u0d91\u01c3\u0003\u0002\u0002\u0002\u0d92\u0d93\u0005",
    "\u02ae\u0158\u0002\u0d93\u0d94\u0007\u0202\u0002\u0002\u0d94\u0d95\u0005",
    "\u01ee\u00f8\u0002\u0d95\u01c5\u0003\u0002\u0002\u0002\u0d96\u0d97\u0007",
    "h\u0002\u0002\u0d97\u0d98\u0005\u026e\u0138\u0002\u0d98\u01c7\u0003",
    "\u0002\u0002\u0002\u0d99\u0d9a\u0007\u01a8\u0002\u0002\u0d9a\u0d9b\u0007",
    "\u00fb\u0002\u0002\u0d9b\u0d9c\u0007\u00d8\u0002\u0002\u0d9c\u0d9d\u0007",
    "\u017a\u0002\u0002\u0d9d\u0da9\u0007\u00b3\u0002\u0002\u0d9e\u0d9f\u0007",
    "\u01eb\u0002\u0002\u0d9f\u0da4\u0005\u02ae\u0158\u0002\u0da0\u0da1\u0007",
    "\u01f1\u0002\u0002\u0da1\u0da3\u0005\u02ae\u0158\u0002\u0da2\u0da0\u0003",
    "\u0002\u0002\u0002\u0da3\u0da6\u0003\u0002\u0002\u0002\u0da4\u0da2\u0003",
    "\u0002\u0002\u0002\u0da4\u0da5\u0003\u0002\u0002\u0002\u0da5\u0da7\u0003",
    "\u0002\u0002\u0002\u0da6\u0da4\u0003\u0002\u0002\u0002\u0da7\u0da8\u0007",
    "\u01ec\u0002\u0002\u0da8\u0daa\u0003\u0002\u0002\u0002\u0da9\u0d9e\u0003",
    "\u0002\u0002\u0002\u0da9\u0daa\u0003\u0002\u0002\u0002\u0daa\u0dab\u0003",
    "\u0002\u0002\u0002\u0dab\u0dac\u0007\u019d\u0002\u0002\u0dac\u0dae\u0005",
    "\u01ea\u00f6\u0002\u0dad\u0daf\u0005\u026e\u0138\u0002\u0dae\u0dad\u0003",
    "\u0002\u0002\u0002\u0dae\u0daf\u0003\u0002\u0002\u0002\u0daf\u01c9\u0003",
    "\u0002\u0002\u0002\u0db0\u0db6\u0005\u02b0\u0159\u0002\u0db1\u0db2\u0007",
    "\u01eb\u0002\u0002\u0db2\u0db3\u0005\u0134\u009b\u0002\u0db3\u0db4\u0007",
    "\u01ec\u0002\u0002\u0db4\u0db6\u0003\u0002\u0002\u0002\u0db5\u0db0\u0003",
    "\u0002\u0002\u0002\u0db5\u0db1\u0003\u0002\u0002\u0002\u0db6\u0db8\u0003",
    "\u0002\u0002\u0002\u0db7\u0db9\u0005\u026a\u0136\u0002\u0db8\u0db7\u0003",
    "\u0002\u0002\u0002\u0db8\u0db9\u0003\u0002\u0002\u0002\u0db9\u01cb\u0003",
    "\u0002\u0002\u0002\u0dba\u0dbb\u0007\u00cf\u0002\u0002\u0dbb\u0dbc\u0007",
    "\u0178\u0002\u0002\u0dbc\u0dc1\u0005\u01d0\u00e9\u0002\u0dbd\u0dbe\u0007",
    "\u01f1\u0002\u0002\u0dbe\u0dc0\u0005\u01d0\u00e9\u0002\u0dbf\u0dbd\u0003",
    "\u0002\u0002\u0002\u0dc0\u0dc3\u0003\u0002\u0002\u0002\u0dc1\u0dbf\u0003",
    "\u0002\u0002\u0002\u0dc1\u0dc2\u0003\u0002\u0002\u0002\u0dc2\u0dc4\u0003",
    "\u0002\u0002\u0002\u0dc3\u0dc1\u0003\u0002\u0002\u0002\u0dc4\u0dc5\u0007",
    "\u00a6\u0002\u0002\u0dc5\u0dc6\u0005\u01d2\u00ea\u0002\u0dc6\u0dc8\u0007",
    "\u00e1\u0002\u0002\u0dc7\u0dc9\u0005\u01ce\u00e8\u0002\u0dc8\u0dc7\u0003",
    "\u0002\u0002\u0002\u0dc8\u0dc9\u0003\u0002\u0002\u0002\u0dc9\u01cd\u0003",
    "\u0002\u0002\u0002\u0dca\u0dcb\u0007\u01a5\u0002\u0002\u0dcb\u0dce\u0005",
    "\u01ee\u00f8\u0002\u0dcc\u0dce\u0007\u00fc\u0002\u0002\u0dcd\u0dca\u0003",
    "\u0002\u0002\u0002\u0dcd\u0dcc\u0003\u0002\u0002\u0002\u0dce\u01cf\u0003",
    "\u0002\u0002\u0002\u0dcf\u0dd1\u0005\u02b0\u0159\u0002\u0dd0\u0dd2\u0005",
    "\u0266\u0134\u0002\u0dd1\u0dd0\u0003\u0002\u0002\u0002\u0dd1\u0dd2\u0003",
    "\u0002\u0002\u0002\u0dd2\u01d1\u0003\u0002\u0002\u0002\u0dd3\u0dd4\u0007",
    "\u0142\u0002\u0002\u0dd4\u0de0\u0007\u015b\u0002\u0002\u0dd5\u0dd6\u0007",
    "\u0142\u0002\u0002\u0dd6\u0de0\u0007\u0085\u0002\u0002\u0dd7\u0dd9\u0007",
    "\u015b\u0002\u0002\u0dd8\u0dda\u0007\u0195\u0002\u0002\u0dd9\u0dd8\u0003",
    "\u0002\u0002\u0002\u0dd9\u0dda\u0003\u0002\u0002\u0002\u0dda\u0de0\u0003",
    "\u0002\u0002\u0002\u0ddb\u0ddc\u0007\u015b\u0002\u0002\u0ddc\u0ddd\u0007",
    "\u0142\u0002\u0002\u0ddd\u0de0\u0007\u0085\u0002\u0002\u0dde\u0de0\u0007",
    "\u0085\u0002\u0002\u0ddf\u0dd3\u0003\u0002\u0002\u0002\u0ddf\u0dd5\u0003",
    "\u0002\u0002\u0002\u0ddf\u0dd7\u0003\u0002\u0002\u0002\u0ddf\u0ddb\u0003",
    "\u0002\u0002\u0002\u0ddf\u0dde\u0003\u0002\u0002\u0002\u0de0\u01d3\u0003",
    "\u0002\u0002\u0002\u0de1\u0de8\u0005\u01de\u00f0\u0002\u0de2\u0de3\u0007",
    "\u0108\u0002\u0002\u0de3\u0de4\u0007\u01eb\u0002\u0002\u0de4\u0de5\u0005",
    "\u01de\u00f0\u0002\u0de5\u0de6\u0007\u01ec\u0002\u0002\u0de6\u0de8\u0003",
    "\u0002\u0002\u0002\u0de7\u0de1\u0003\u0002\u0002\u0002\u0de7\u0de2\u0003",
    "\u0002\u0002\u0002\u0de8\u0dea\u0003\u0002\u0002\u0002\u0de9\u0deb\u0005",
    "\u026a\u0136\u0002\u0dea\u0de9\u0003\u0002\u0002\u0002\u0dea\u0deb\u0003",
    "\u0002\u0002\u0002\u0deb\u01d5\u0003\u0002\u0002\u0002\u0dec\u0ded\t",
    "\u0019\u0002\u0002\u0ded\u0df2\u0005\u01ee\u00f8\u0002\u0dee\u0def\u0007",
    "\u01f1\u0002\u0002\u0def\u0df1\u0005\u01ee\u00f8\u0002\u0df0\u0dee\u0003",
    "\u0002\u0002\u0002\u0df1\u0df4\u0003\u0002\u0002\u0002\u0df2\u0df0\u0003",
    "\u0002\u0002\u0002\u0df2\u0df3\u0003\u0002\u0002\u0002\u0df3\u0df5\u0003",
    "\u0002\u0002\u0002\u0df4\u0df2\u0003\u0002\u0002\u0002\u0df5\u0df6\u0005",
    "\u0272\u013a\u0002\u0df6\u01d7\u0003\u0002\u0002\u0002\u0df7\u0df8\u0007",
    "\u00d1\u0002\u0002\u0df8\u0dfa\u0007~\u0002\u0002\u0df9\u0dfb\u0005",
    "\u01da\u00ee\u0002\u0dfa\u0df9\u0003\u0002\u0002\u0002\u0dfa\u0dfb\u0003",
    "\u0002\u0002\u0002\u0dfb\u0dfd\u0003\u0002\u0002\u0002\u0dfc\u0dfe\u0005",
    "\u01ee\u00f8\u0002\u0dfd\u0dfc\u0003\u0002\u0002\u0002\u0dfd\u0dfe\u0003",
    "\u0002\u0002\u0002\u0dfe\u0e00\u0003\u0002\u0002\u0002\u0dff\u0e01\u0005",
    "\u01dc\u00ef\u0002\u0e00\u0dff\u0003\u0002\u0002\u0002\u0e00\u0e01\u0003",
    "\u0002\u0002\u0002\u0e01\u01d9\u0003\u0002\u0002\u0002\u0e02\u0e03\u0007",
    "\u00ba\u0002\u0002\u0e03\u0e04\u0005\u02b0\u0159\u0002\u0e04\u01db\u0003",
    "\u0002\u0002\u0002\u0e05\u0e06\u0007\u0132\u0002\u0002\u0e06\u0e09\u0007",
    "\u00cd\u0002\u0002\u0e07\u0e0a\u0007\u0192\u0002\u0002\u0e08\u0e0a\u0005",
    "\u01ee\u00f8\u0002\u0e09\u0e07\u0003\u0002\u0002\u0002\u0e09\u0e08\u0003",
    "\u0002\u0002\u0002\u0e0a\u01dd\u0003\u0002\u0002\u0002\u0e0b\u0e18\u0005",
    "\u01e0\u00f1\u0002\u0e0c\u0e0d\u0007\u01eb\u0002\u0002\u0e0d\u0e0f\u0005",
    "\u0134\u009b\u0002\u0e0e\u0e10\u0005\u01e2\u00f2\u0002\u0e0f\u0e0e\u0003",
    "\u0002\u0002\u0002\u0e0f\u0e10\u0003\u0002\u0002\u0002\u0e10\u0e11\u0003",
    "\u0002\u0002\u0002\u0e11\u0e12\u0007\u01ec\u0002\u0002\u0e12\u0e18\u0003",
    "\u0002\u0002\u0002\u0e13\u0e15\u0005\u02b0\u0159\u0002\u0e14\u0e16\u0005",
    "\u01e4\u00f3\u0002\u0e15\u0e14\u0003\u0002\u0002\u0002\u0e15\u0e16\u0003",
    "\u0002\u0002\u0002\u0e16\u0e18\u0003\u0002\u0002\u0002\u0e17\u0e0b\u0003",
    "\u0002\u0002\u0002\u0e17\u0e0c\u0003\u0002\u0002\u0002\u0e17\u0e13\u0003",
    "\u0002\u0002\u0002\u0e18\u01df\u0003\u0002\u0002\u0002\u0e19\u0e26\t",
    "-\u0002\u0002\u0e1a\u0e1b\u0007\u01eb\u0002\u0002\u0e1b\u0e1c\u0005",
    "\u013e\u00a0\u0002\u0e1c\u0e1d\u0007\u01ec\u0002\u0002\u0e1d\u0e27\u0003",
    "\u0002\u0002\u0002\u0e1e\u0e1f\u0007\u01eb\u0002\u0002\u0e1f\u0e20\u0005",
    "\u01ee\u00f8\u0002\u0e20\u0e24\u0007\u01ec\u0002\u0002\u0e21\u0e22\u0007",
    "\u01eb\u0002\u0002\u0e22\u0e23\u0007\u01ef\u0002\u0002\u0e23\u0e25\u0007",
    "\u01ec\u0002\u0002\u0e24\u0e21\u0003\u0002\u0002\u0002\u0e24\u0e25\u0003",
    "\u0002\u0002\u0002\u0e25\u0e27\u0003\u0002\u0002\u0002\u0e26\u0e1a\u0003",
    "\u0002\u0002\u0002\u0e26\u0e1e\u0003\u0002\u0002\u0002\u0e27\u01e1\u0003",
    "\u0002\u0002\u0002\u0e28\u0e31\u0007\u01ac\u0002\u0002\u0e29\u0e2a\u0007",
    "\u012c\u0002\u0002\u0e2a\u0e32\u0007\u0108\u0002\u0002\u0e2b\u0e2c\u0007",
    "4\u0002\u0002\u0e2c\u0e2f\u0007\u010a\u0002\u0002\u0e2d\u0e2e\u0007",
    "D\u0002\u0002\u0e2e\u0e30\u0005\u0292\u014a\u0002\u0e2f\u0e2d\u0003",
    "\u0002\u0002\u0002\u0e2f\u0e30\u0003\u0002\u0002\u0002\u0e30\u0e32\u0003",
    "\u0002\u0002\u0002\u0e31\u0e29\u0003\u0002\u0002\u0002\u0e31\u0e2b\u0003",
    "\u0002\u0002\u0002\u0e32\u01e3\u0003\u0002\u0002\u0002\u0e33\u0e35\u0007",
    "\u0146\u0002\u0002\u0e34\u0e36\u0007\"\u0002\u0002\u0e35\u0e34\u0003",
    "\u0002\u0002\u0002\u0e35\u0e36\u0003\u0002\u0002\u0002\u0e36\u0e37\u0003",
    "\u0002\u0002\u0002\u0e37\u0e38\u0007\u01eb\u0002\u0002\u0e38\u0e3b\u0005",
    "\u01ee\u00f8\u0002\u0e39\u0e3a\u0007\u01f1\u0002\u0002\u0e3a\u0e3c\u0005",
    "\u01ee\u00f8\u0002\u0e3b\u0e39\u0003\u0002\u0002\u0002\u0e3b\u0e3c\u0003",
    "\u0002\u0002\u0002\u0e3c\u0e3d\u0003\u0002\u0002\u0002\u0e3d\u0e3f\u0007",
    "\u01ec\u0002\u0002\u0e3e\u0e40\u0005\u01e6\u00f4\u0002\u0e3f\u0e3e\u0003",
    "\u0002\u0002\u0002\u0e3f\u0e40\u0003\u0002\u0002\u0002\u0e40\u01e5\u0003",
    "\u0002\u0002\u0002\u0e41\u0e42\u0007\u014e\u0002\u0002\u0e42\u0e43\u0007",
    "\u01eb\u0002\u0002\u0e43\u0e44\u0005\u01ee\u00f8\u0002\u0e44\u0e45\u0007",
    "\u01ec\u0002\u0002\u0e45\u01e7\u0003\u0002\u0002\u0002\u0e46\u0e47\u0007",
    "T\u0002\u0002\u0e47\u0e48\u0007\u01eb\u0002\u0002\u0e48\u0e49\u0005",
    "\u013e\u00a0\u0002\u0e49\u0e4a\u0007\u01ec\u0002\u0002\u0e4a\u01e9\u0003",
    "\u0002\u0002\u0002\u0e4b\u0e4d\u0007\u01eb\u0002\u0002\u0e4c\u0e4e\u0005",
    "\u01ee\u00f8\u0002\u0e4d\u0e4c\u0003\u0002\u0002\u0002\u0e4d\u0e4e\u0003",
    "\u0002\u0002\u0002\u0e4e\u0e53\u0003\u0002\u0002\u0002\u0e4f\u0e50\u0007",
    "\u01f1\u0002\u0002\u0e50\u0e52\u0005\u01ee\u00f8\u0002\u0e51\u0e4f\u0003",
    "\u0002\u0002\u0002\u0e52\u0e55\u0003\u0002\u0002\u0002\u0e53\u0e51\u0003",
    "\u0002\u0002\u0002\u0e53\u0e54\u0003\u0002\u0002\u0002\u0e54\u0e56\u0003",
    "\u0002\u0002\u0002\u0e55\u0e53\u0003\u0002\u0002\u0002\u0e56\u0e57\u0007",
    "\u01ec\u0002\u0002\u0e57\u01eb\u0003\u0002\u0002\u0002\u0e58\u0e59\u0005",
    "\u01ee\u00f8\u0002\u0e59\u01ed\u0003\u0002\u0002\u0002\u0e5a\u0e5b\b",
    "\u00f8\u0001\u0002\u0e5b\u0e5c\u0007T\u0002\u0002\u0e5c\u0e65\u0005",
    "\u01f2\u00fa\u0002\u0e5d\u0e5e\u0007\u00fb\u0002\u0002\u0e5e\u0e65\u0005",
    "\u01ee\u00f8\u0007\u0e5f\u0e65\u0005\u0202\u0102\u0002\u0e60\u0e61\u0007",
    "\u01eb\u0002\u0002\u0e61\u0e62\u0005\u01ee\u00f8\u0002\u0e62\u0e63\u0007",
    "\u01ec\u0002\u0002\u0e63\u0e65\u0003\u0002\u0002\u0002\u0e64\u0e5a\u0003",
    "\u0002\u0002\u0002\u0e64\u0e5d\u0003\u0002\u0002\u0002\u0e64\u0e5f\u0003",
    "\u0002\u0002\u0002\u0e64\u0e60\u0003\u0002\u0002\u0002\u0e65\u0e94\u0003",
    "\u0002\u0002\u0002\u0e66\u0e68\f\f\u0002\u0002\u0e67\u0e69\u0007\u00fb",
    "\u0002\u0002\u0e68\u0e67\u0003\u0002\u0002\u0002\u0e68\u0e69\u0003\u0002",
    "\u0002\u0002\u0e69\u0e6a\u0003\u0002\u0002\u0002\u0e6a\u0e6b\u0007\u001c",
    "\u0002\u0002\u0e6b\u0e6c\u0005\u01ee\u00f8\u0002\u0e6c\u0e6d\u0007\f",
    "\u0002\u0002\u0e6d\u0e6e\u0005\u01ee\u00f8\r\u0e6e\u0e93\u0003\u0002",
    "\u0002\u0002\u0e6f\u0e70\f\n\u0002\u0002\u0e70\u0e71\u0005\u01f6\u00fc",
    "\u0002\u0e71\u0e72\u0005\u01ee\u00f8\u000b\u0e72\u0e93\u0003\u0002\u0002",
    "\u0002\u0e73\u0e74\f\u0006\u0002\u0002\u0e74\u0e75\u0007\f\u0002\u0002",
    "\u0e75\u0e93\u0005\u01ee\u00f8\u0007\u0e76\u0e77\f\u0005\u0002\u0002",
    "\u0e77\u0e78\u0007\u010b\u0002\u0002\u0e78\u0e93\u0005\u01ee\u00f8\u0006",
    "\u0e79\u0e7a\f\u000e\u0002\u0002\u0e7a\u0e7b\u0007\u00bc\u0002\u0002",
    "\u0e7b\u0e93\u0005\u01f0\u00f9\u0002\u0e7c\u0e7e\f\r\u0002\u0002\u0e7d",
    "\u0e7f\u0007\u00fb\u0002\u0002\u0e7e\u0e7d\u0003\u0002\u0002\u0002\u0e7e",
    "\u0e7f\u0003\u0002\u0002\u0002\u0e7f\u0e80\u0003\u0002\u0002\u0002\u0e80",
    "\u0e81\u0007\u00a6\u0002\u0002\u0e81\u0e93\u0005\u01fc\u00ff\u0002\u0e82",
    "\u0e84\f\u000b\u0002\u0002\u0e83\u0e85\u0007\u00fb\u0002\u0002\u0e84",
    "\u0e83\u0003\u0002\u0002\u0002\u0e84\u0e85\u0003\u0002\u0002\u0002\u0e85",
    "\u0e86\u0003\u0002\u0002\u0002\u0e86\u0e87\u0005\u01f8\u00fd\u0002\u0e87",
    "\u0e8a\u0005\u01ee\u00f8\u0002\u0e88\u0e89\u0007\u007f\u0002\u0002\u0e89",
    "\u0e8b\u0005\u01ee\u00f8\u0002\u0e8a\u0e88\u0003\u0002\u0002\u0002\u0e8a",
    "\u0e8b\u0003\u0002\u0002\u0002\u0e8b\u0e93\u0003\u0002\u0002\u0002\u0e8c",
    "\u0e8d\f\t\u0002\u0002\u0e8d\u0e8f\t.\u0002\u0002\u0e8e\u0e90\u0007",
    "\u0103\u0002\u0002\u0e8f\u0e8e\u0003\u0002\u0002\u0002\u0e8f\u0e90\u0003",
    "\u0002\u0002\u0002\u0e90\u0e91\u0003\u0002\u0002\u0002\u0e91\u0e93\u0005",
    "\u0202\u0102\u0002\u0e92\u0e66\u0003\u0002\u0002\u0002\u0e92\u0e6f\u0003",
    "\u0002\u0002\u0002\u0e92\u0e73\u0003\u0002\u0002\u0002\u0e92\u0e76\u0003",
    "\u0002\u0002\u0002\u0e92\u0e79\u0003\u0002\u0002\u0002\u0e92\u0e7c\u0003",
    "\u0002\u0002\u0002\u0e92\u0e82\u0003\u0002\u0002\u0002\u0e92\u0e8c\u0003",
    "\u0002\u0002\u0002\u0e93\u0e96\u0003\u0002\u0002\u0002\u0e94\u0e92\u0003",
    "\u0002\u0002\u0002\u0e94\u0e95\u0003\u0002\u0002\u0002\u0e95\u01ef\u0003",
    "\u0002\u0002\u0002\u0e96\u0e94\u0003\u0002\u0002\u0002\u0e97\u0e99\u0007",
    "\u00fb\u0002\u0002\u0e98\u0e97\u0003\u0002\u0002\u0002\u0e98\u0e99\u0003",
    "\u0002\u0002\u0002\u0e99\u0eb3\u0003\u0002\u0002\u0002\u0e9a\u0eb4\u0007",
    "\u00fd\u0002\u0002\u0e9b\u0eb4\u0007\u00e7\u0002\u0002\u0e9c\u0eb4\u0007",
    "\u0126\u0002\u0002\u0e9d\u0eb4\u0007\u00af\u0002\u0002\u0e9e\u0e9f\u0007",
    "\u0004\u0002\u0002\u0e9f\u0eb4\u0007\u0158\u0002\u0002\u0ea0\u0eb4\u0007",
    "x\u0002\u0002\u0ea1\u0ea3\u0007\u0103\u0002\u0002\u0ea2\u0ea4\u0007",
    "\u018d\u0002\u0002\u0ea3\u0ea2\u0003\u0002\u0002\u0002\u0ea3\u0ea4\u0003",
    "\u0002\u0002\u0002\u0ea4\u0ea5\u0003\u0002\u0002\u0002\u0ea5\u0ea7\u0007",
    "\u01eb\u0002\u0002\u0ea6\u0ea8\u0007\u0108\u0002\u0002\u0ea7\u0ea6\u0003",
    "\u0002\u0002\u0002\u0ea7\u0ea8\u0003\u0002\u0002\u0002\u0ea8\u0ea9\u0003",
    "\u0002\u0002\u0002\u0ea9\u0eae\u0005\u02c2\u0162\u0002\u0eaa\u0eab\u0007",
    "\u01f1\u0002\u0002\u0eab\u0ead\u0005\u02c2\u0162\u0002\u0eac\u0eaa\u0003",
    "\u0002\u0002\u0002\u0ead\u0eb0\u0003\u0002\u0002\u0002\u0eae\u0eac\u0003",
    "\u0002\u0002\u0002\u0eae\u0eaf\u0003\u0002\u0002\u0002\u0eaf\u0eb1\u0003",
    "\u0002\u0002\u0002\u0eb0\u0eae\u0003\u0002\u0002\u0002\u0eb1\u0eb2\u0007",
    "\u01ec\u0002\u0002\u0eb2\u0eb4\u0003\u0002\u0002\u0002\u0eb3\u0e9a\u0003",
    "\u0002\u0002\u0002\u0eb3\u0e9b\u0003\u0002\u0002\u0002\u0eb3\u0e9c\u0003",
    "\u0002\u0002\u0002\u0eb3\u0e9d\u0003\u0002\u0002\u0002\u0eb3\u0e9e\u0003",
    "\u0002\u0002\u0002\u0eb3\u0ea0\u0003\u0002\u0002\u0002\u0eb3\u0ea1\u0003",
    "\u0002\u0002\u0002\u0eb4\u01f1\u0003\u0002\u0002\u0002\u0eb5\u0eb6\u0007",
    "\u01eb\u0002\u0002\u0eb6\u0eb7\u0005\u013e\u00a0\u0002\u0eb7\u0eb8\u0007",
    "\u01ec\u0002\u0002\u0eb8\u01f3\u0003\u0002\u0002\u0002\u0eb9\u0eba\t",
    ".\u0002\u0002\u0eba\u01f5\u0003\u0002\u0002\u0002\u0ebb\u0ec2\u0007",
    "\u0202\u0002\u0002\u0ebc\u0ec2\u0005\u02dc\u016f\u0002\u0ebd\u0ec2\u0007",
    "\u01f9\u0002\u0002\u0ebe\u0ec2\u0007\u01ff\u0002\u0002\u0ebf\u0ec2\u0005",
    "\u02e0\u0171\u0002\u0ec0\u0ec2\u0005\u02de\u0170\u0002\u0ec1\u0ebb\u0003",
    "\u0002\u0002\u0002\u0ec1\u0ebc\u0003\u0002\u0002\u0002\u0ec1\u0ebd\u0003",
    "\u0002\u0002\u0002\u0ec1\u0ebe\u0003\u0002\u0002\u0002\u0ec1\u0ebf\u0003",
    "\u0002\u0002\u0002\u0ec1\u0ec0\u0003\u0002\u0002\u0002\u0ec2\u01f7\u0003",
    "\u0002\u0002\u0002\u0ec3\u0ec4\t/\u0002\u0002\u0ec4\u01f9\u0003\u0002",
    "\u0002\u0002\u0ec5\u0ec6\u0007\u007f\u0002\u0002\u0ec6\u0ec7\u0005\u0200",
    "\u0101\u0002\u0ec7\u01fb\u0003\u0002\u0002\u0002\u0ec8\u0ec9\u0007\u01eb",
    "\u0002\u0002\u0ec9\u0eca\u0005\u013e\u00a0\u0002\u0eca\u0ecb\u0007\u01ec",
    "\u0002\u0002\u0ecb\u0edb\u0003\u0002\u0002\u0002\u0ecc\u0ecd\u0007\u01eb",
    "\u0002\u0002\u0ecd\u0ed2\u0005\u0200\u0101\u0002\u0ece\u0ecf\u0007\u01f1",
    "\u0002\u0002\u0ecf\u0ed1\u0005\u0200\u0101\u0002\u0ed0\u0ece\u0003\u0002",
    "\u0002\u0002\u0ed1\u0ed4\u0003\u0002\u0002\u0002\u0ed2\u0ed0\u0003\u0002",
    "\u0002\u0002\u0ed2\u0ed3\u0003\u0002\u0002\u0002\u0ed3\u0ed5\u0003\u0002",
    "\u0002\u0002\u0ed4\u0ed2\u0003\u0002\u0002\u0002\u0ed5\u0ed6\u0007\u01ec",
    "\u0002\u0002\u0ed6\u0edb\u0003\u0002\u0002\u0002\u0ed7\u0edb\u0005\u02d0",
    "\u0169\u0002\u0ed8\u0edb\u0005\u02ca\u0166\u0002\u0ed9\u0edb\u0005\u02cc",
    "\u0167\u0002\u0eda\u0ec8\u0003\u0002\u0002\u0002\u0eda\u0ecc\u0003\u0002",
    "\u0002\u0002\u0eda\u0ed7\u0003\u0002\u0002\u0002\u0eda\u0ed8\u0003\u0002",
    "\u0002\u0002\u0eda\u0ed9\u0003\u0002\u0002\u0002\u0edb\u01fd\u0003\u0002",
    "\u0002\u0002\u0edc\u0edd\u0005\u0200\u0101\u0002\u0edd\u0ede\u0007\f",
    "\u0002\u0002\u0ede\u0edf\u0005\u0200\u0101\u0002\u0edf\u01ff\u0003\u0002",
    "\u0002\u0002\u0ee0\u0ee1\u0005\u0202\u0102\u0002\u0ee1\u0201\u0003\u0002",
    "\u0002\u0002\u0ee2\u0ee3\b\u0102\u0001\u0002\u0ee3\u0ee4\u0007\u01eb",
    "\u0002\u0002\u0ee4\u0ee5\u0005\u0202\u0102\u0002\u0ee5\u0ee6\u0007\u01ec",
    "\u0002\u0002\u0ee6\u0ee9\u0003\u0002\u0002\u0002\u0ee7\u0ee9\u0005\u0212",
    "\u010a\u0002\u0ee8\u0ee2\u0003\u0002\u0002\u0002\u0ee8\u0ee7\u0003\u0002",
    "\u0002\u0002\u0ee9\u0f00\u0003\u0002\u0002\u0002\u0eea\u0eeb\f\u0007",
    "\u0002\u0002\u0eeb\u0eec\t0\u0002\u0002\u0eec\u0eff\u0005\u0202\u0102",
    "\b\u0eed\u0eee\f\u0006\u0002\u0002\u0eee\u0eef\t1\u0002\u0002\u0eef",
    "\u0eff\u0005\u0202\u0102\u0007\u0ef0\u0ef1\f\u0005\u0002\u0002\u0ef1",
    "\u0ef2\u0007\u0200\u0002\u0002\u0ef2\u0eff\u0005\u0202\u0102\u0006\u0ef3",
    "\u0efc\f\b\u0002\u0002\u0ef4\u0ef9\u0007\u0012\u0002\u0002\u0ef5\u0efa",
    "\u0007\u00ce\u0002\u0002\u0ef6\u0ef7\u0007\u017b\u0002\u0002\u0ef7\u0ef8",
    "\u0007\u01c2\u0002\u0002\u0ef8\u0efa\u0005\u0202\u0102\u0002\u0ef9\u0ef5",
    "\u0003\u0002\u0002\u0002\u0ef9\u0ef6\u0003\u0002\u0002\u0002\u0efa\u0efd",
    "\u0003\u0002\u0002\u0002\u0efb\u0efd\u0005\u0204\u0103\u0002\u0efc\u0ef4",
    "\u0003\u0002\u0002\u0002\u0efc\u0efb\u0003\u0002\u0002\u0002\u0efd\u0eff",
    "\u0003\u0002\u0002\u0002\u0efe\u0eea\u0003\u0002\u0002\u0002\u0efe\u0eed",
    "\u0003\u0002\u0002\u0002\u0efe\u0ef0\u0003\u0002\u0002\u0002\u0efe\u0ef3",
    "\u0003\u0002\u0002\u0002\u0eff\u0f02\u0003\u0002\u0002\u0002\u0f00\u0efe",
    "\u0003\u0002\u0002\u0002\u0f00\u0f01\u0003\u0002\u0002\u0002\u0f01\u0203",
    "\u0003\u0002\u0002\u0002\u0f02\u0f00\u0003\u0002\u0002\u0002\u0f03\u0f08",
    "\u0007Z\u0002\u0002\u0f04\u0f05\u0007\u01eb\u0002\u0002\u0f05\u0f06",
    "\u0005\u0200\u0101\u0002\u0f06\u0f07\u0007\u01ec\u0002\u0002\u0f07\u0f09",
    "\u0003\u0002\u0002\u0002\u0f08\u0f04\u0003\u0002\u0002\u0002\u0f08\u0f09",
    "\u0003\u0002\u0002\u0002\u0f09\u0f0a\u0003\u0002\u0002\u0002\u0f0a\u0f0b",
    "\u0007\u0184\u0002\u0002\u0f0b\u0f10\u0007\u014d\u0002\u0002\u0f0c\u0f0d",
    "\u0007\u01eb\u0002\u0002\u0f0d\u0f0e\u0005\u0200\u0101\u0002\u0f0e\u0f0f",
    "\u0007\u01ec\u0002\u0002\u0f0f\u0f11\u0003\u0002\u0002\u0002\u0f10\u0f0c",
    "\u0003\u0002\u0002\u0002\u0f10\u0f11\u0003\u0002\u0002\u0002\u0f11\u0f1c",
    "\u0003\u0002\u0002\u0002\u0f12\u0f17\u0007\u01bf\u0002\u0002\u0f13\u0f14",
    "\u0007\u01eb\u0002\u0002\u0f14\u0f15\u0005\u0200\u0101\u0002\u0f15\u0f16",
    "\u0007\u01ec\u0002\u0002\u0f16\u0f18\u0003\u0002\u0002\u0002\u0f17\u0f13",
    "\u0003\u0002\u0002\u0002\u0f17\u0f18\u0003\u0002\u0002\u0002\u0f18\u0f19",
    "\u0003\u0002\u0002\u0002\u0f19\u0f1a\u0007\u0184\u0002\u0002\u0f1a\u0f1c",
    "\u0007\u00e4\u0002\u0002\u0f1b\u0f03\u0003\u0002\u0002\u0002\u0f1b\u0f12",
    "\u0003\u0002\u0002\u0002\u0f1c\u0205\u0003\u0002\u0002\u0002\u0f1d\u0f1e",
    "\u0005\u0212\u010a\u0002\u0f1e\u0f1f\u0007\u0203\u0002\u0002\u0f1f\u0f20",
    "\u0005\u0208\u0105\u0002\u0f20\u0f21\u0007\u0204\u0002\u0002\u0f21\u0207",
    "\u0003\u0002\u0002\u0002\u0f22\u0f25\u0007\r\u0002\u0002\u0f23\u0f25",
    "\u0005\u01ee\u00f8\u0002\u0f24\u0f22\u0003\u0002\u0002\u0002\u0f24\u0f23",
    "\u0003\u0002\u0002\u0002\u0f25\u0f2d\u0003\u0002\u0002\u0002\u0f26\u0f29",
    "\u0007\u01f1\u0002\u0002\u0f27\u0f2a\u0007\r\u0002\u0002\u0f28\u0f2a",
    "\u0005\u01ee\u00f8\u0002\u0f29\u0f27\u0003\u0002\u0002\u0002\u0f29\u0f28",
    "\u0003\u0002\u0002\u0002\u0f2a\u0f2c\u0003\u0002\u0002\u0002\u0f2b\u0f26",
    "\u0003\u0002\u0002\u0002\u0f2c\u0f2f\u0003\u0002\u0002\u0002\u0f2d\u0f2b",
    "\u0003\u0002\u0002\u0002\u0f2d\u0f2e\u0003\u0002\u0002\u0002\u0f2e\u0f3a",
    "\u0003\u0002\u0002\u0002\u0f2f\u0f2d\u0003\u0002\u0002\u0002\u0f30\u0f35",
    "\u0005\u020a\u0106\u0002\u0f31\u0f32\u0007\u01f1\u0002\u0002\u0f32\u0f34",
    "\u0005\u020a\u0106\u0002\u0f33\u0f31\u0003\u0002\u0002\u0002\u0f34\u0f37",
    "\u0003\u0002\u0002\u0002\u0f35\u0f33\u0003\u0002\u0002\u0002\u0f35\u0f36",
    "\u0003\u0002\u0002\u0002\u0f36\u0f3a\u0003\u0002\u0002\u0002\u0f37\u0f35",
    "\u0003\u0002\u0002\u0002\u0f38\u0f3a\u0005\u0210\u0109\u0002\u0f39\u0f24",
    "\u0003\u0002\u0002\u0002\u0f39\u0f30\u0003\u0002\u0002\u0002\u0f39\u0f38",
    "\u0003\u0002\u0002\u0002\u0f3a\u0209\u0003\u0002\u0002\u0002\u0f3b\u0f3c",
    "\u0007\u0095\u0002\u0002\u0f3c\u0f49\u0005\u02ae\u0158\u0002\u0f3d\u0f3e",
    "\u0007\u00a6\u0002\u0002\u0f3e\u0f4a\u0005\u01ea\u00f6\u0002\u0f3f\u0f41",
    "\u0005\u020c\u0107\u0002\u0f40\u0f3f\u0003\u0002\u0002\u0002\u0f40\u0f41",
    "\u0003\u0002\u0002\u0002\u0f41\u0f42\u0003\u0002\u0002\u0002\u0f42\u0f43",
    "\u0007\u0098\u0002\u0002\u0f43\u0f44\u0005\u01ee\u00f8\u0002\u0f44\u0f45",
    "\u0007\u0184\u0002\u0002\u0f45\u0f46\u0005\u01ee\u00f8\u0002\u0f46\u0f47",
    "\u0005\u020e\u0108\u0002\u0f47\u0f48\u0005\u01ee\u00f8\u0002\u0f48\u0f4a",
    "\u0003\u0002\u0002\u0002\u0f49\u0f3d\u0003\u0002\u0002\u0002\u0f49\u0f40",
    "\u0003\u0002\u0002\u0002\u0f4a\u020b\u0003\u0002\u0002\u0002\u0f4b\u0f4c",
    "\u0007\u00c9\u0002\u0002\u0f4c\u0f4d\u0005\u01ee\u00f8\u0002\u0f4d\u020d",
    "\u0003\u0002\u0002\u0002\u0f4e\u0f4f\t2\u0002\u0002\u0f4f\u020f\u0003",
    "\u0002\u0002\u0002\u0f50\u0f51\u0007\u0095\u0002\u0002\u0f51\u0f52\u0007",
    "\u01eb\u0002\u0002\u0f52\u0f57\u0005\u02ae\u0158\u0002\u0f53\u0f54\u0007",
    "\u01f1\u0002\u0002\u0f54\u0f56\u0005\u02ae\u0158\u0002\u0f55\u0f53\u0003",
    "\u0002\u0002\u0002\u0f56\u0f59\u0003\u0002\u0002\u0002\u0f57\u0f55\u0003",
    "\u0002\u0002\u0002\u0f57\u0f58\u0003\u0002\u0002\u0002\u0f58\u0f5a\u0003",
    "\u0002\u0002\u0002\u0f59\u0f57\u0003\u0002\u0002\u0002\u0f5a\u0f5b\u0007",
    "\u01ec\u0002\u0002\u0f5b\u0f5c\u0007\u00a6\u0002\u0002\u0f5c\u0f69\u0007",
    "\u01eb\u0002\u0002\u0f5d\u0f6a\u0005\u013e\u00a0\u0002\u0f5e\u0f5f\u0007",
    "\u01eb\u0002\u0002\u0f5f\u0f64\u0005\u01ea\u00f6\u0002\u0f60\u0f61\u0007",
    "\u01f1\u0002\u0002\u0f61\u0f63\u0005\u01ea\u00f6\u0002\u0f62\u0f60\u0003",
    "\u0002\u0002\u0002\u0f63\u0f66\u0003\u0002\u0002\u0002\u0f64\u0f62\u0003",
    "\u0002\u0002\u0002\u0f64\u0f65\u0003\u0002\u0002\u0002\u0f65\u0f67\u0003",
    "\u0002\u0002\u0002\u0f66\u0f64\u0003\u0002\u0002\u0002\u0f67\u0f68\u0007",
    "\u01ec\u0002\u0002\u0f68\u0f6a\u0003\u0002\u0002\u0002\u0f69\u0f5d\u0003",
    "\u0002\u0002\u0002\u0f69\u0f5e\u0003\u0002\u0002\u0002\u0f6a\u0f6b\u0003",
    "\u0002\u0002\u0002\u0f6b\u0f6c\u0007\u01ec\u0002\u0002\u0f6c\u0211\u0003",
    "\u0002\u0002\u0002\u0f6d\u0f6e\b\u010a\u0001\u0002\u0f6e\u0f6f\t1\u0002",
    "\u0002\u0f6f\u0f7f\u0005\u0212\u010a\f\u0f70\u0f71\u0007\u0127\u0002",
    "\u0002\u0f71\u0f7f\u0005\u0212\u010a\u000b\u0f72\u0f73\u0007B\u0002",
    "\u0002\u0f73\u0f7f\u0005\u0212\u010a\n\u0f74\u0f75\u0007\u00ef\u0002",
    "\u0002\u0f75\u0f7f\u0005\u0212\u010a\t\u0f76\u0f77\u0007o\u0002\u0002",
    "\u0f77\u0f7f\u0005\u0212\u010a\b\u0f78\u0f79\u0007\t\u0002\u0002\u0f79",
    "\u0f7f\u0005\u0212\u010a\u0007\u0f7a\u0f7f\u0005\u0214\u010b\u0002\u0f7b",
    "\u0f7f\u0005\u0226\u0114\u0002\u0f7c\u0f7f\u0005\u0228\u0115\u0002\u0f7d",
    "\u0f7f\u0005\u0220\u0111\u0002\u0f7e\u0f6d\u0003\u0002\u0002\u0002\u0f7e",
    "\u0f70\u0003\u0002\u0002\u0002\u0f7e\u0f72\u0003\u0002\u0002\u0002\u0f7e",
    "\u0f74\u0003\u0002\u0002\u0002\u0f7e\u0f76\u0003\u0002\u0002\u0002\u0f7e",
    "\u0f78\u0003\u0002\u0002\u0002\u0f7e\u0f7a\u0003\u0002\u0002\u0002\u0f7e",
    "\u0f7b\u0003\u0002\u0002\u0002\u0f7e\u0f7c\u0003\u0002\u0002\u0002\u0f7e",
    "\u0f7d\u0003\u0002\u0002\u0002\u0f7f\u0f87\u0003\u0002\u0002\u0002\u0f80",
    "\u0f81\f\r\u0002\u0002\u0f81\u0f82\u0007\u0203\u0002\u0002\u0f82\u0f83",
    "\u0005\u0208\u0105\u0002\u0f83\u0f84\u0007\u0204\u0002\u0002\u0f84\u0f86",
    "\u0003\u0002\u0002\u0002\u0f85\u0f80\u0003\u0002\u0002\u0002\u0f86\u0f89",
    "\u0003\u0002\u0002\u0002\u0f87\u0f85\u0003\u0002\u0002\u0002\u0f87\u0f88",
    "\u0003\u0002\u0002\u0002\u0f88\u0213\u0003\u0002\u0002\u0002\u0f89\u0f87",
    "\u0003\u0002\u0002\u0002\u0f8a\u0f8d\u0005\u021a\u010e\u0002\u0f8b\u0f8d",
    "\u0005\u0216\u010c\u0002\u0f8c\u0f8a\u0003\u0002\u0002\u0002\u0f8c\u0f8b",
    "\u0003\u0002\u0002\u0002\u0f8d\u0215\u0003\u0002\u0002\u0002\u0f8e\u0f90",
    "\u0005\u0294\u014b\u0002\u0f8f\u0f8e\u0003\u0002\u0002\u0002\u0f8f\u0f90",
    "\u0003\u0002\u0002\u0002\u0f90\u0f91\u0003\u0002\u0002\u0002\u0f91\u0f92",
    "\u0007/\u0002\u0002\u0f92\u0f94\u0005\u0220\u0111\u0002\u0f93\u0f95",
    "\u0005\u0218\u010d\u0002\u0f94\u0f93\u0003\u0002\u0002\u0002\u0f95\u0f96",
    "\u0003\u0002\u0002\u0002\u0f96\u0f94\u0003\u0002\u0002\u0002\u0f96\u0f97",
    "\u0003\u0002\u0002\u0002\u0f97\u0f99\u0003\u0002\u0002\u0002\u0f98\u0f9a",
    "\u0005\u021e\u0110\u0002\u0f99\u0f98\u0003\u0002\u0002\u0002\u0f99\u0f9a",
    "\u0003\u0002\u0002\u0002\u0f9a\u0f9b\u0003\u0002\u0002\u0002\u0f9b\u0f9d",
    "\u0007{\u0002\u0002\u0f9c\u0f9e\u0007/\u0002\u0002\u0f9d\u0f9c\u0003",
    "\u0002\u0002\u0002\u0f9d\u0f9e\u0003\u0002\u0002\u0002\u0f9e\u0fa0\u0003",
    "\u0002\u0002\u0002\u0f9f\u0fa1\u0005\u0294\u014b\u0002\u0fa0\u0f9f\u0003",
    "\u0002\u0002\u0002\u0fa0\u0fa1\u0003\u0002\u0002\u0002\u0fa1\u0217\u0003",
    "\u0002\u0002\u0002\u0fa2\u0fa3\u0007\u01a8\u0002\u0002\u0fa3\u0fa4\u0005",
    "\u01ee\u00f8\u0002\u0fa4\u0fa7\u0007\u017a\u0002\u0002\u0fa5\u0fa8\u0005",
    "\u00e0q\u0002\u0fa6\u0fa8\u0005\u01ee\u00f8\u0002\u0fa7\u0fa5\u0003",
    "\u0002\u0002\u0002\u0fa7\u0fa6\u0003\u0002\u0002\u0002\u0fa8\u0219\u0003",
    "\u0002\u0002\u0002\u0fa9\u0fab\u0005\u0294\u014b\u0002\u0faa\u0fa9\u0003",
    "\u0002\u0002\u0002\u0faa\u0fab\u0003\u0002\u0002\u0002\u0fab\u0fac\u0003",
    "\u0002\u0002\u0002\u0fac\u0fae\u0007/\u0002\u0002\u0fad\u0faf\u0005",
    "\u021c\u010f\u0002\u0fae\u0fad\u0003\u0002\u0002\u0002\u0faf\u0fb0\u0003",
    "\u0002\u0002\u0002\u0fb0\u0fae\u0003\u0002\u0002\u0002\u0fb0\u0fb1\u0003",
    "\u0002\u0002\u0002\u0fb1\u0fb3\u0003\u0002\u0002\u0002\u0fb2\u0fb4\u0005",
    "\u021e\u0110\u0002\u0fb3\u0fb2\u0003\u0002\u0002\u0002\u0fb3\u0fb4\u0003",
    "\u0002\u0002\u0002\u0fb4\u0fb5\u0003\u0002\u0002\u0002\u0fb5\u0fb7\u0007",
    "{\u0002\u0002\u0fb6\u0fb8\u0007/\u0002\u0002\u0fb7\u0fb6\u0003\u0002",
    "\u0002\u0002\u0fb7\u0fb8\u0003\u0002\u0002\u0002\u0fb8\u0fba\u0003\u0002",
    "\u0002\u0002\u0fb9\u0fbb\u0005\u0294\u014b\u0002\u0fba\u0fb9\u0003\u0002",
    "\u0002\u0002\u0fba\u0fbb\u0003\u0002\u0002\u0002\u0fbb\u021b\u0003\u0002",
    "\u0002\u0002\u0fbc\u0fbd\u0007\u01a8\u0002\u0002\u0fbd\u0fbe\u0005\u01ee",
    "\u00f8\u0002\u0fbe\u0fc1\u0007\u017a\u0002\u0002\u0fbf\u0fc2\u0005\u00e0",
    "q\u0002\u0fc0\u0fc2\u0005\u01ee\u00f8\u0002\u0fc1\u0fbf\u0003\u0002",
    "\u0002\u0002\u0fc1\u0fc0\u0003\u0002\u0002\u0002\u0fc2\u021d\u0003\u0002",
    "\u0002\u0002\u0fc3\u0fc6\u0007v\u0002\u0002\u0fc4\u0fc7\u0005\u00e0",
    "q\u0002\u0fc5\u0fc7\u0005\u01ee\u00f8\u0002\u0fc6\u0fc4\u0003\u0002",
    "\u0002\u0002\u0fc6\u0fc5\u0003\u0002\u0002\u0002\u0fc7\u021f\u0003\u0002",
    "\u0002\u0002\u0fc8\u0fc9\u0005\u02ce\u0168\u0002\u0fc9\u0fca\u0005\u02e4",
    "\u0173\u0002\u0fca\u0fda\u0003\u0002\u0002\u0002\u0fcb\u0fda\u0005\u02ca",
    "\u0166\u0002\u0fcc\u0fda\u0005\u02d0\u0169\u0002\u0fcd\u0fda\u0005\u02cc",
    "\u0167\u0002\u0fce\u0fcf\u0007\u01eb\u0002\u0002\u0fcf\u0fd0\u0005\u0220",
    "\u0111\u0002\u0fd0\u0fd1\u0007\u01ec\u0002\u0002\u0fd1\u0fda\u0003\u0002",
    "\u0002\u0002\u0fd2\u0fd3\u0007\u01eb\u0002\u0002\u0fd3\u0fd4\u0005\u013e",
    "\u00a0\u0002\u0fd4\u0fd5\u0007\u01ec\u0002\u0002\u0fd5\u0fd8\u0003\u0002",
    "\u0002\u0002\u0fd6\u0fd8\u0005\u01ea\u00f6\u0002\u0fd7\u0fd2\u0003\u0002",
    "\u0002\u0002\u0fd7\u0fd6\u0003\u0002\u0002\u0002\u0fd8\u0fda\u0003\u0002",
    "\u0002\u0002\u0fd9\u0fc8\u0003\u0002\u0002\u0002\u0fd9\u0fcb\u0003\u0002",
    "\u0002\u0002\u0fd9\u0fcc\u0003\u0002\u0002\u0002\u0fd9\u0fcd\u0003\u0002",
    "\u0002\u0002\u0fd9\u0fce\u0003\u0002\u0002\u0002\u0fd9\u0fd7\u0003\u0002",
    "\u0002\u0002\u0fda\u0221\u0003\u0002\u0002\u0002\u0fdb\u0fdd\u0005\u01ee",
    "\u00f8\u0002\u0fdc\u0fde\u0005\u0224\u0113\u0002\u0fdd\u0fdc\u0003\u0002",
    "\u0002\u0002\u0fdd\u0fde\u0003\u0002\u0002\u0002\u0fde\u0223\u0003\u0002",
    "\u0002\u0002\u0fdf\u0fe0\u0007\u01f1\u0002\u0002\u0fe0\u0fe5\u0005\u01ee",
    "\u00f8\u0002\u0fe1\u0fe2\u0007\u01f1\u0002\u0002\u0fe2\u0fe4\u0005\u01ee",
    "\u00f8\u0002\u0fe3\u0fe1\u0003\u0002\u0002\u0002\u0fe4\u0fe7\u0003\u0002",
    "\u0002\u0002\u0fe5\u0fe3\u0003\u0002\u0002\u0002\u0fe5\u0fe6\u0003\u0002",
    "\u0002\u0002\u0fe6\u0225\u0003\u0002\u0002\u0002\u0fe7\u0fe5\u0003\u0002",
    "\u0002\u0002\u0fe8\u0ff1\t3\u0002\u0002\u0fe9\u0fea\u0007\u01eb\u0002",
    "\u0002\u0fea\u0feb\u0005\u013e\u00a0\u0002\u0feb\u0fec\u0007\u01ec\u0002",
    "\u0002\u0fec\u0ff2\u0003\u0002\u0002\u0002\u0fed\u0fee\u0007\u01eb\u0002",
    "\u0002\u0fee\u0fef\u0005\u01ee\u00f8\u0002\u0fef\u0ff0\u0007\u01ec\u0002",
    "\u0002\u0ff0\u0ff2\u0003\u0002\u0002\u0002\u0ff1\u0fe9\u0003\u0002\u0002",
    "\u0002\u0ff1\u0fed\u0003\u0002\u0002\u0002\u0ff2\u0227\u0003\u0002\u0002",
    "\u0002\u0ff3\u111d\u0005\u022a\u0116\u0002\u0ff4\u0ff5\u0005\u02e6\u0174",
    "\u0002\u0ff5\u0ff7\u0005\u02bc\u015f\u0002\u0ff6\u0ff8\u0005\u023a\u011e",
    "\u0002\u0ff7\u0ff6\u0003\u0002\u0002\u0002\u0ff7\u0ff8\u0003\u0002\u0002",
    "\u0002\u0ff8\u111d\u0003\u0002\u0002\u0002\u0ff9\u0ffa\t4\u0002\u0002",
    "\u0ffa\u1001\u0007\u01eb\u0002\u0002\u0ffb\u0ffc\u0007\u00e5\u0002\u0002",
    "\u0ffc\u0ffd\u0007\u01eb\u0002\u0002\u0ffd\u0ffe\u0005\u013e\u00a0\u0002",
    "\u0ffe\u0fff\u0007\u01ec\u0002\u0002\u0fff\u1002\u0003\u0002\u0002\u0002",
    "\u1000\u1002\u0005\u0200\u0101\u0002\u1001\u0ffb\u0003\u0002\u0002\u0002",
    "\u1001\u1000\u0003\u0002\u0002\u0002\u1002\u1003\u0003\u0002\u0002\u0002",
    "\u1003\u1004\u0007\u000f\u0002\u0002\u1004\u1005\u0005\u02c2\u0162\u0002",
    "\u1005\u1006\u0007\u01ec\u0002\u0002\u1006\u111d\u0003\u0002\u0002\u0002",
    "\u1007\u1008\u00075\u0002\u0002\u1008\u1009\u0007\u01eb\u0002\u0002",
    "\u1009\u100a\u0005\u0200\u0101\u0002\u100a\u100b\u0007\u019a\u0002\u0002",
    "\u100b\u100c\u0007\u00ec\u0002\u0002\u100c\u100d\u0007\u01ec\u0002\u0002",
    "\u100d\u111d\u0003\u0002\u0002\u0002\u100e\u100f\u00079\u0002\u0002",
    "\u100f\u1011\u0007\u01eb\u0002\u0002\u1010\u1012\t5\u0002\u0002\u1011",
    "\u1010\u0003\u0002\u0002\u0002\u1011\u1012\u0003\u0002\u0002\u0002\u1012",
    "\u1013\u0003\u0002\u0002\u0002\u1013\u1015\u0005\u0200\u0101\u0002\u1014",
    "\u1016\u0005\u023e\u0120\u0002\u1015\u1014\u0003\u0002\u0002\u0002\u1015",
    "\u1016\u0003\u0002\u0002\u0002\u1016\u1017\u0003\u0002\u0002\u0002\u1017",
    "\u1018\u0007\u01ec\u0002\u0002\u1018\u111d\u0003\u0002\u0002\u0002\u1019",
    "\u101a\u0005\u022e\u0118\u0002\u101a\u101c\u0005\u02b8\u015d\u0002\u101b",
    "\u101d\u0005\u0240\u0121\u0002\u101c\u101b\u0003\u0002\u0002\u0002\u101d",
    "\u101e\u0003\u0002\u0002\u0002\u101e\u101c\u0003\u0002\u0002\u0002\u101e",
    "\u101f\u0003\u0002\u0002\u0002\u101f\u111d\u0003\u0002\u0002\u0002\u1020",
    "\u1021\u0007b\u0002\u0002\u1021\u1022\u0007\u01eb\u0002\u0002\u1022",
    "\u1024\u0005\u0200\u0101\u0002\u1023\u1025\t6\u0002\u0002\u1024\u1023",
    "\u0003\u0002\u0002\u0002\u1024\u1025\u0003\u0002\u0002\u0002\u1025\u1026",
    "\u0003\u0002\u0002\u0002\u1026\u1027\u0007\u01ec\u0002\u0002\u1027\u111d",
    "\u0003\u0002\u0002\u0002\u1028\u1029\u0007\u008b\u0002\u0002\u1029\u102a",
    "\u0007\u01eb\u0002\u0002\u102a\u102b\u0005\u02e6\u0174\u0002\u102b\u102c",
    "\u0007\u0098\u0002\u0002\u102c\u102d\u0005\u0200\u0101\u0002\u102d\u102e",
    "\u0007\u01ec\u0002\u0002\u102e\u111d\u0003\u0002\u0002\u0002\u102f\u1030",
    "\t7\u0002\u0002\u1030\u1032\u0005\u02ba\u015e\u0002\u1031\u1033\u0005",
    "\u02be\u0160\u0002\u1032\u1031\u0003\u0002\u0002\u0002\u1032\u1033\u0003",
    "\u0002\u0002\u0002\u1033\u1034\u0003\u0002\u0002\u0002\u1034\u1035\u0005",
    "\u0232\u011a\u0002\u1035\u111d\u0003\u0002\u0002\u0002\u1036\u1037\u0005",
    "\u0230\u0119\u0002\u1037\u1038\u0007\u01eb\u0002\u0002\u1038\u103d\u0005",
    "\u01ee\u00f8\u0002\u1039\u103a\u0007\u01f1\u0002\u0002\u103a\u103c\u0005",
    "\u01ee\u00f8\u0002\u103b\u1039\u0003\u0002\u0002\u0002\u103c\u103f\u0003",
    "\u0002\u0002\u0002\u103d\u103b\u0003\u0002\u0002\u0002\u103d\u103e\u0003",
    "\u0002\u0002\u0002\u103e\u1041\u0003\u0002\u0002\u0002\u103f\u103d\u0003",
    "\u0002\u0002\u0002\u1040\u1042\u0005\u0242\u0122\u0002\u1041\u1040\u0003",
    "\u0002\u0002\u0002\u1041\u1042\u0003\u0002\u0002\u0002\u1042\u1044\u0003",
    "\u0002\u0002\u0002\u1043\u1045\u0005\u023a\u011e\u0002\u1044\u1043\u0003",
    "\u0002\u0002\u0002\u1044\u1045\u0003\u0002\u0002\u0002\u1045\u1046\u0003",
    "\u0002\u0002\u0002\u1046\u1047\u0007\u01ec\u0002\u0002\u1047\u111d\u0003",
    "\u0002\u0002\u0002\u1048\u1049\u0007\u0187\u0002\u0002\u1049\u104a\u0007",
    "\u01eb\u0002\u0002\u104a\u104d\u0005\u01ee\u00f8\u0002\u104b\u104c\u0007",
    "\u019a\u0002\u0002\u104c\u104e\t8\u0002\u0002\u104d\u104b\u0003\u0002",
    "\u0002\u0002\u104d\u104e\u0003\u0002\u0002\u0002\u104e\u1053\u0003\u0002",
    "\u0002\u0002\u104f\u1050\u0007\u01f1\u0002\u0002\u1050\u1052\u0005\u01ee",
    "\u00f8\u0002\u1051\u104f\u0003\u0002\u0002\u0002\u1052\u1055\u0003\u0002",
    "\u0002\u0002\u1053\u1051\u0003\u0002\u0002\u0002\u1053\u1054\u0003\u0002",
    "\u0002\u0002\u1054\u1056\u0003\u0002\u0002\u0002\u1055\u1053\u0003\u0002",
    "\u0002\u0002\u1056\u1057\u0007\u01ec\u0002\u0002\u1057\u111d\u0003\u0002",
    "\u0002\u0002\u1058\u1059\u0007\u0188\u0002\u0002\u1059\u105a\u0007\u01eb",
    "\u0002\u0002\u105a\u105b\u0005\u01ee\u00f8\u0002\u105b\u105d\u0007\u000f",
    "\u0002\u0002\u105c\u105e\u0007\u012f\u0002\u0002\u105d\u105c\u0003\u0002",
    "\u0002\u0002\u105d\u105e\u0003\u0002\u0002\u0002\u105e\u105f\u0003\u0002",
    "\u0002\u0002\u105f\u1060\u0005\u02c2\u0162\u0002\u1060\u1061\u0007\u01ec",
    "\u0002\u0002\u1061\u111d\u0003\u0002\u0002\u0002\u1062\u1063\u0007\u018a",
    "\u0002\u0002\u1063\u106b\u0007\u01eb\u0002\u0002\u1064\u1066\t9\u0002",
    "\u0002\u1065\u1064\u0003\u0002\u0002\u0002\u1065\u1066\u0003\u0002\u0002",
    "\u0002\u1066\u1068\u0003\u0002\u0002\u0002\u1067\u1069\u0005\u02d6\u016c",
    "\u0002\u1068\u1067\u0003\u0002\u0002\u0002\u1068\u1069\u0003\u0002\u0002",
    "\u0002\u1069\u106a\u0003\u0002\u0002\u0002\u106a\u106c\u0007\u0098\u0002",
    "\u0002\u106b\u1065\u0003\u0002\u0002\u0002\u106b\u106c\u0003\u0002\u0002",
    "\u0002\u106c\u106d\u0003\u0002\u0002\u0002\u106d\u106e\u0005\u0200\u0101",
    "\u0002\u106e\u106f\u0007\u01ec\u0002\u0002\u106f\u111d\u0003\u0002\u0002",
    "\u0002\u1070\u1071\u0007\u01b1\u0002\u0002\u1071\u1072\u0007\u01eb\u0002",
    "\u0002\u1072\u1074\u0005\u01ee\u00f8\u0002\u1073\u1075\u0005\u019a\u00ce",
    "\u0002\u1074\u1073\u0003\u0002\u0002\u0002\u1074\u1075\u0003\u0002\u0002",
    "\u0002\u1075\u1076\u0003\u0002\u0002\u0002\u1076\u1079\u0007\u01ec\u0002",
    "\u0002\u1077\u1078\u0007\u01e4\u0002\u0002\u1078\u107a\u0005\u02cc\u0167",
    "\u0002\u1079\u1077\u0003\u0002\u0002\u0002\u1079\u107a\u0003\u0002\u0002",
    "\u0002\u107a\u111d\u0003\u0002\u0002\u0002\u107b\u107c\t:\u0002\u0002",
    "\u107c\u107d\u0007\u01eb\u0002\u0002\u107d\u1082\u0005\u024e\u0128\u0002",
    "\u107e\u107f\u0007\u01f1\u0002\u0002\u107f\u1081\u0005\u024e\u0128\u0002",
    "\u1080\u107e\u0003\u0002\u0002\u0002\u1081\u1084\u0003\u0002\u0002\u0002",
    "\u1082\u1080\u0003\u0002\u0002\u0002\u1082\u1083\u0003\u0002\u0002\u0002",
    "\u1083\u1085\u0003\u0002\u0002\u0002\u1084\u1082\u0003\u0002\u0002\u0002",
    "\u1085\u1088\u0007\u01ec\u0002\u0002\u1086\u1087\u0007\u01e4\u0002\u0002",
    "\u1087\u1089\u0005\u02cc\u0167\u0002\u1088\u1086\u0003\u0002\u0002\u0002",
    "\u1088\u1089\u0003\u0002\u0002\u0002\u1089\u111d\u0003\u0002\u0002\u0002",
    "\u108a\u108b\u0007\u01b5\u0002\u0002\u108b\u108d\u0007\u01eb\u0002\u0002",
    "\u108c\u108e\t;\u0002\u0002\u108d\u108c\u0003\u0002\u0002\u0002\u108d",
    "\u108e\u0003\u0002\u0002\u0002\u108e\u1090\u0003\u0002\u0002\u0002\u108f",
    "\u1091\t<\u0002\u0002\u1090\u108f\u0003\u0002\u0002\u0002\u1090\u1091",
    "\u0003\u0002\u0002\u0002\u1091\u1092\u0003\u0002\u0002\u0002\u1092\u1095",
    "\u0005\u01ee\u00f8\u0002\u1093\u1094\u0007\u01f1\u0002\u0002\u1094\u1096",
    "\u0005\u0246\u0124\u0002\u1095\u1093\u0003\u0002\u0002\u0002\u1095\u1096",
    "\u0003\u0002\u0002\u0002\u1096\u109e\u0003\u0002\u0002\u0002\u1097\u1098",
    "\u0007\u01f1\u0002\u0002\u1098\u109a\u0005\u01ee\u00f8\u0002\u1099\u109b",
    "\u0005\u0268\u0135\u0002\u109a\u1099\u0003\u0002\u0002\u0002\u109a\u109b",
    "\u0003\u0002\u0002\u0002\u109b\u109d\u0003\u0002\u0002\u0002\u109c\u1097",
    "\u0003\u0002\u0002\u0002\u109d\u10a0\u0003\u0002\u0002\u0002\u109e\u109c",
    "\u0003\u0002\u0002\u0002\u109e\u109f\u0003\u0002\u0002\u0002\u109f\u10a1",
    "\u0003\u0002\u0002\u0002\u10a0\u109e\u0003\u0002\u0002\u0002\u10a1\u10a4",
    "\u0007\u01ec\u0002\u0002\u10a2\u10a3\u0007\u01e4\u0002\u0002\u10a3\u10a5",
    "\u0005\u02cc\u0167\u0002\u10a4\u10a2\u0003\u0002\u0002\u0002\u10a4\u10a5",
    "\u0003\u0002\u0002\u0002\u10a5\u111d\u0003\u0002\u0002\u0002\u10a6\u10a7",
    "\u0007\u01b6\u0002\u0002\u10a7\u10a8\u0007\u01eb\u0002\u0002\u10a8\u10aa",
    "\u0005\u01ee\u00f8\u0002\u10a9\u10ab\u0005\u0244\u0123\u0002\u10aa\u10a9",
    "\u0003\u0002\u0002\u0002\u10aa\u10ab\u0003\u0002\u0002\u0002\u10ab\u10ac",
    "\u0003\u0002\u0002\u0002\u10ac\u10ad\u0007\u01ec\u0002\u0002\u10ad\u111d",
    "\u0003\u0002\u0002\u0002\u10ae\u10af\u0007\u01b9\u0002\u0002\u10af\u10b0",
    "\u0007\u01eb\u0002\u0002\u10b0\u10b1\t=\u0002\u0002\u10b1\u10b3\u0005",
    "\u0200\u0101\u0002\u10b2\u10b4\u0007\u01a7\u0002\u0002\u10b3\u10b2\u0003",
    "\u0002\u0002\u0002\u10b3\u10b4\u0003\u0002\u0002\u0002\u10b4\u10b5\u0003",
    "\u0002\u0002\u0002\u10b5\u10b8\u0007\u01ec\u0002\u0002\u10b6\u10b7\u0007",
    "\u01e4\u0002\u0002\u10b7\u10b9\u0005\u02cc\u0167\u0002\u10b8\u10b6\u0003",
    "\u0002\u0002\u0002\u10b8\u10b9\u0003\u0002\u0002\u0002\u10b9\u111d\u0003",
    "\u0002\u0002\u0002\u10ba\u10bb\u0007\u01ba\u0002\u0002\u10bb\u10c0\u0007",
    "\u01eb\u0002\u0002\u10bc\u10bd\u0007\u00e6\u0002\u0002\u10bd\u10c1\u0005",
    "\u02d8\u016d\u0002\u10be\u10bf\u0007\u0080\u0002\u0002\u10bf\u10c1\u0005",
    "\u0200\u0101\u0002\u10c0\u10bc\u0003\u0002\u0002\u0002\u10c0\u10be\u0003",
    "\u0002\u0002\u0002\u10c1\u10c4\u0003\u0002\u0002\u0002\u10c2\u10c3\u0007",
    "\u01f1\u0002\u0002\u10c3\u10c5\u0005\u0200\u0101\u0002\u10c4\u10c2\u0003",
    "\u0002\u0002\u0002\u10c4\u10c5\u0003\u0002\u0002\u0002\u10c5\u10c6\u0003",
    "\u0002\u0002\u0002\u10c6\u10c9\u0007\u01ec\u0002\u0002\u10c7\u10c8\u0007",
    "\u01e4\u0002\u0002\u10c8\u10ca\u0005\u02cc\u0167\u0002\u10c9\u10c7\u0003",
    "\u0002\u0002\u0002\u10c9\u10ca\u0003\u0002\u0002\u0002\u10ca\u111d\u0003",
    "\u0002\u0002\u0002\u10cb\u10cc\u0007\u01bb\u0002\u0002\u10cc\u10cd\u0007",
    "\u01eb\u0002\u0002\u10cd\u10cf\u0005\u0200\u0101\u0002\u10ce\u10d0\u0005",
    "\u0244\u0123\u0002\u10cf\u10ce\u0003\u0002\u0002\u0002\u10cf\u10d0\u0003",
    "\u0002\u0002\u0002\u10d0\u10d1\u0003\u0002\u0002\u0002\u10d1\u10d2\u0007",
    "\u013b\u0002\u0002\u10d2\u10d6\u0007G\u0002\u0002\u10d3\u10d4\u0007",
    "\u00fd\u0002\u0002\u10d4\u10d5\u0007\u0107\u0002\u0002\u10d5\u10d7\u0007",
    "x\u0002\u0002\u10d6\u10d3\u0003\u0002\u0002\u0002\u10d6\u10d7\u0003",
    "\u0002\u0002\u0002\u10d7\u10d8\u0003\u0002\u0002\u0002\u10d8\u10db\u0007",
    "\u01ec\u0002\u0002\u10d9\u10da\u0007\u01e4\u0002\u0002\u10da\u10dc\u0005",
    "\u02cc\u0167\u0002\u10db\u10d9\u0003\u0002\u0002\u0002\u10db\u10dc\u0003",
    "\u0002\u0002\u0002\u10dc\u111d\u0003\u0002\u0002\u0002\u10dd\u10de\u0007",
    "\u01bc\u0002\u0002\u10de\u10df\u0007\u01eb\u0002\u0002\u10df\u10e2\u0005",
    "\u0200\u0101\u0002\u10e0\u10e1\u0007\u01f1\u0002\u0002\u10e1\u10e3\u0005",
    "\u0250\u0129\u0002\u10e2\u10e0\u0003\u0002\u0002\u0002\u10e2\u10e3\u0003",
    "\u0002\u0002\u0002\u10e3\u10e6\u0003\u0002\u0002\u0002\u10e4\u10e5\u0007",
    "\u01f1\u0002\u0002\u10e5\u10e7\u0005\u0252\u012a\u0002\u10e6\u10e4\u0003",
    "\u0002\u0002\u0002\u10e6\u10e7\u0003\u0002\u0002\u0002\u10e7\u10e8\u0003",
    "\u0002\u0002\u0002\u10e8\u10eb\u0007\u01ec\u0002\u0002\u10e9\u10ea\u0007",
    "\u01e4\u0002\u0002\u10ea\u10ec\u0005\u02cc\u0167\u0002\u10eb\u10e9\u0003",
    "\u0002\u0002\u0002\u10eb\u10ec\u0003\u0002\u0002\u0002\u10ec\u111d\u0003",
    "\u0002\u0002\u0002\u10ed\u10ee\u0007\u01bd\u0002\u0002\u10ee\u10ef\u0007",
    "\u01eb\u0002\u0002\u10ef\u10f0\t=\u0002\u0002\u10f0\u10f3\u0005\u0200",
    "\u0101\u0002\u10f1\u10f2\u0007\u000f\u0002\u0002\u10f2\u10f4\u0005\u02c2",
    "\u0162\u0002\u10f3\u10f1\u0003\u0002\u0002\u0002\u10f3\u10f4\u0003\u0002",
    "\u0002\u0002\u10f4\u10f6\u0003\u0002\u0002\u0002\u10f5\u10f7\u0005\u0254",
    "\u012b\u0002\u10f6\u10f5\u0003\u0002\u0002\u0002\u10f6\u10f7\u0003\u0002",
    "\u0002\u0002\u10f7\u10f9\u0003\u0002\u0002\u0002\u10f8\u10fa\u0005\u0256",
    "\u012c\u0002\u10f9\u10f8\u0003\u0002\u0002\u0002\u10f9\u10fa\u0003\u0002",
    "\u0002\u0002\u10fa\u10fc\u0003\u0002\u0002\u0002\u10fb\u10fd\u0005\u0258",
    "\u012d\u0002\u10fc\u10fb\u0003\u0002\u0002\u0002\u10fc\u10fd\u0003\u0002",
    "\u0002\u0002\u10fd\u1100\u0003\u0002\u0002\u0002\u10fe\u10ff\t>\u0002",
    "\u0002\u10ff\u1101\u0007e\u0002\u0002\u1100\u10fe\u0003\u0002\u0002",
    "\u0002\u1100\u1101\u0003\u0002\u0002\u0002\u1101\u1102\u0003\u0002\u0002",
    "\u0002\u1102\u1105\u0007\u01ec\u0002\u0002\u1103\u1104\u0007\u01e4\u0002",
    "\u0002\u1104\u1106\u0005\u02cc\u0167\u0002\u1105\u1103\u0003\u0002\u0002",
    "\u0002\u1105\u1106\u0003\u0002\u0002\u0002\u1106\u111d\u0003\u0002\u0002",
    "\u0002\u1107\u1108\u0007\u01be\u0002\u0002\u1108\u110a\u0007\u01eb\u0002",
    "\u0002\u1109\u110b\u0005\u0248\u0125\u0002\u110a\u1109\u0003\u0002\u0002",
    "\u0002\u110a\u110b\u0003\u0002\u0002\u0002\u110b\u110c\u0003\u0002\u0002",
    "\u0002\u110c\u110e\u0005\u0200\u0101\u0002\u110d\u110f\u0005\u0244\u0123",
    "\u0002\u110e\u110d\u0003\u0002\u0002\u0002\u110e\u110f\u0003\u0002\u0002",
    "\u0002\u110f\u1115\u0003\u0002\u0002\u0002\u1110\u1111\u0007:\u0002",
    "\u0002\u1111\u1112\u0005\u024a\u0126\u0002\u1112\u1113\u0007\u01f1\u0002",
    "\u0002\u1113\u1114\u0005\u024a\u0126\u0002\u1114\u1116\u0003\u0002\u0002",
    "\u0002\u1115\u1110\u0003\u0002\u0002\u0002\u1115\u1116\u0003\u0002\u0002",
    "\u0002\u1116\u1117\u0003\u0002\u0002\u0002\u1117\u111a\u0007\u01ec\u0002",
    "\u0002\u1118\u1119\u0007\u01e4\u0002\u0002\u1119\u111b\u0005\u02cc\u0167",
    "\u0002\u111a\u1118\u0003\u0002\u0002\u0002\u111a\u111b\u0003\u0002\u0002",
    "\u0002\u111b\u111d\u0003\u0002\u0002\u0002\u111c\u0ff3\u0003\u0002\u0002",
    "\u0002\u111c\u0ff4\u0003\u0002\u0002\u0002\u111c\u0ff9\u0003\u0002\u0002",
    "\u0002\u111c\u1007\u0003\u0002\u0002\u0002\u111c\u100e\u0003\u0002\u0002",
    "\u0002\u111c\u1019\u0003\u0002\u0002\u0002\u111c\u1020\u0003\u0002\u0002",
    "\u0002\u111c\u1028\u0003\u0002\u0002\u0002\u111c\u102f\u0003\u0002\u0002",
    "\u0002\u111c\u1036\u0003\u0002\u0002\u0002\u111c\u1048\u0003\u0002\u0002",
    "\u0002\u111c\u1058\u0003\u0002\u0002\u0002\u111c\u1062\u0003\u0002\u0002",
    "\u0002\u111c\u1070\u0003\u0002\u0002\u0002\u111c\u107b\u0003\u0002\u0002",
    "\u0002\u111c\u108a\u0003\u0002\u0002\u0002\u111c\u10a6\u0003\u0002\u0002",
    "\u0002\u111c\u10ae\u0003\u0002\u0002\u0002\u111c\u10ba\u0003\u0002\u0002",
    "\u0002\u111c\u10cb\u0003\u0002\u0002\u0002\u111c\u10dd\u0003\u0002\u0002",
    "\u0002\u111c\u10ed\u0003\u0002\u0002\u0002\u111c\u1107\u0003\u0002\u0002",
    "\u0002\u111d\u0229\u0003\u0002\u0002\u0002\u111e\u111f\u0005\u022c\u0117",
    "\u0002\u111f\u1121\u0005\u02ba\u015e\u0002\u1120\u1122\u0005\u0232\u011a",
    "\u0002\u1121\u1120\u0003\u0002\u0002\u0002\u1121\u1122\u0003\u0002\u0002",
    "\u0002\u1122\u1131\u0003\u0002\u0002\u0002\u1123\u1124\u0007N\u0002",
    "\u0002\u1124\u112a\u0007\u01eb\u0002\u0002\u1125\u112b\u0007\u01ee\u0002",
    "\u0002\u1126\u1128\t \u0002\u0002\u1127\u1126\u0003\u0002\u0002\u0002",
    "\u1127\u1128\u0003\u0002\u0002\u0002\u1128\u1129\u0003\u0002\u0002\u0002",
    "\u1129\u112b\u0005\u0200\u0101\u0002\u112a\u1125\u0003\u0002\u0002\u0002",
    "\u112a\u1127\u0003\u0002\u0002\u0002\u112b\u112c\u0003\u0002\u0002\u0002",
    "\u112c\u112e\u0007\u01ec\u0002\u0002\u112d\u112f\u0005\u0232\u011a\u0002",
    "\u112e\u112d\u0003\u0002\u0002\u0002\u112e\u112f\u0003\u0002\u0002\u0002",
    "\u112f\u1131\u0003\u0002\u0002\u0002\u1130\u111e\u0003\u0002\u0002\u0002",
    "\u1130\u1123\u0003\u0002\u0002\u0002\u1131\u022b\u0003\u0002\u0002\u0002",
    "\u1132\u1133\t?\u0002\u0002\u1133\u022d\u0003\u0002\u0002\u0002\u1134",
    "\u1135\t@\u0002\u0002\u1135\u022f\u0003\u0002\u0002\u0002\u1136\u1137",
    "\tA\u0002\u0002\u1137\u0231\u0003\u0002\u0002\u0002\u1138\u1139\u0007",
    "\u0112\u0002\u0002\u1139\u113b\u0007\u01eb\u0002\u0002\u113a\u113c\u0005",
    "\u0156\u00ac\u0002\u113b\u113a\u0003\u0002\u0002\u0002\u113b\u113c\u0003",
    "\u0002\u0002\u0002\u113c\u1141\u0003\u0002\u0002\u0002\u113d\u113f\u0005",
    "\u019a\u00ce\u0002\u113e\u1140\u0005\u0234\u011b\u0002\u113f\u113e\u0003",
    "\u0002\u0002\u0002\u113f\u1140\u0003\u0002\u0002\u0002\u1140\u1142\u0003",
    "\u0002\u0002\u0002\u1141\u113d\u0003\u0002\u0002\u0002\u1141\u1142\u0003",
    "\u0002\u0002\u0002\u1142\u1143\u0003\u0002\u0002\u0002\u1143\u1144\u0007",
    "\u01ec\u0002\u0002\u1144\u0233\u0003\u0002\u0002\u0002\u1145\u114c\u0005",
    "\u0236\u011c\u0002\u1146\u1147\u0007\u001c\u0002\u0002\u1147\u1148\u0005",
    "\u0238\u011d\u0002\u1148\u1149\u0007\f\u0002\u0002\u1149\u114a\u0005",
    "\u0238\u011d\u0002\u114a\u114d\u0003\u0002\u0002\u0002\u114b\u114d\u0005",
    "\u0238\u011d\u0002\u114c\u1146\u0003\u0002\u0002\u0002\u114c\u114b\u0003",
    "\u0002\u0002\u0002\u114d\u0235\u0003\u0002\u0002\u0002\u114e\u114f\t",
    "B\u0002\u0002\u114f\u0237\u0003\u0002\u0002\u0002\u1150\u1151\u0007",
    "\u018e\u0002\u0002\u1151\u1158\u0007\u0124\u0002\u0002\u1152\u1153\u0007",
    "R\u0002\u0002\u1153\u1158\u0007\u0142\u0002\u0002\u1154\u1155\u0005",
    "\u0200\u0101\u0002\u1155\u1156\tC\u0002\u0002\u1156\u1158\u0003\u0002",
    "\u0002\u0002\u1157\u1150\u0003\u0002\u0002\u0002\u1157\u1152\u0003\u0002",
    "\u0002\u0002\u1157\u1154\u0003\u0002\u0002\u0002\u1158\u0239\u0003\u0002",
    "\u0002\u0002\u1159\u1163\u0007\u019a\u0002\u0002\u115a\u1164\u0007\u01ee",
    "\u0002\u0002\u115b\u1160\u0005\u023c\u011f\u0002\u115c\u115d\u0007\u01f1",
    "\u0002\u0002\u115d\u115f\u0005\u023c\u011f\u0002\u115e\u115c\u0003\u0002",
    "\u0002\u0002\u115f\u1162\u0003\u0002\u0002\u0002\u1160\u115e\u0003\u0002",
    "\u0002\u0002\u1160\u1161\u0003\u0002\u0002\u0002\u1161\u1164\u0003\u0002",
    "\u0002\u0002\u1162\u1160\u0003\u0002\u0002\u0002\u1163\u115a\u0003\u0002",
    "\u0002\u0002\u1163\u115b\u0003\u0002\u0002\u0002\u1164\u023b\u0003\u0002",
    "\u0002\u0002\u1165\u1167\u0007\u00a6\u0002\u0002\u1166\u1168\u0007\u0110",
    "\u0002\u0002\u1167\u1166\u0003\u0002\u0002\u0002\u1167\u1168\u0003\u0002",
    "\u0002\u0002\u1168\u116b\u0003\u0002\u0002\u0002\u1169\u116b\u0007\u0110",
    "\u0002\u0002\u116a\u1165\u0003\u0002\u0002\u0002\u116a\u1169\u0003\u0002",
    "\u0002\u0002\u116a\u116b\u0003\u0002\u0002\u0002\u116b\u116c\u0003\u0002",
    "\u0002\u0002\u116c\u116e\u0005\u0144\u00a3\u0002\u116d\u116f\u0005\u0268",
    "\u0135\u0002\u116e\u116d\u0003\u0002\u0002\u0002\u116e\u116f\u0003\u0002",
    "\u0002\u0002\u116f\u023d\u0003\u0002\u0002\u0002\u1170\u1171\u0007\u010d",
    "\u0002\u0002\u1171\u1172\u0007(\u0002\u0002\u1172\u1173\u0005\u0200",
    "\u0101\u0002\u1173\u023f\u0003\u0002\u0002\u0002\u1174\u1175\u0007\u01ad",
    "\u0002\u0002\u1175\u1176\u0007\u009d\u0002\u0002\u1176\u1177\u0007\u01eb",
    "\u0002\u0002\u1177\u1178\u0005\u019a\u00ce\u0002\u1178\u1179\u0007\u01ec",
    "\u0002\u0002\u1179\u117c\u0003\u0002\u0002\u0002\u117a\u117c\u0005\u0232",
    "\u011a\u0002\u117b\u1174\u0003\u0002\u0002\u0002\u117b\u117a\u0003\u0002",
    "\u0002\u0002\u117c\u0241\u0003\u0002\u0002\u0002\u117d\u118f\u0007M",
    "\u0002\u0002\u117e\u1180\u0007\u00e2\u0002\u0002\u117f\u1181\u0007\u0016",
    "\u0002\u0002\u1180\u117f\u0003\u0002\u0002\u0002\u1180\u1181\u0003\u0002",
    "\u0002\u0002\u1181\u1190\u0003\u0002\u0002\u0002\u1182\u1183\u0007\u01eb",
    "\u0002\u0002\u1183\u1188\u0005\u0276\u013c\u0002\u1184\u1185\u0007\u01f1",
    "\u0002\u0002\u1185\u1187\u0005\u0276\u013c\u0002\u1186\u1184\u0003\u0002",
    "\u0002\u0002\u1187\u118a\u0003\u0002\u0002\u0002\u1188\u1186\u0003\u0002",
    "\u0002\u0002\u1188\u1189\u0003\u0002\u0002\u0002\u1189\u118b\u0003\u0002",
    "\u0002\u0002\u118a\u1188\u0003\u0002\u0002\u0002\u118b\u118c\u0007\u01ec",
    "\u0002\u0002\u118c\u118d\u0007\u019d\u0002\u0002\u118d\u118e\u0005\u01ea",
    "\u00f6\u0002\u118e\u1190\u0003\u0002\u0002\u0002\u118f\u117e\u0003\u0002",
    "\u0002\u0002\u118f\u1182\u0003\u0002\u0002\u0002\u1190\u0243\u0003\u0002",
    "\u0002\u0002\u1191\u1194\u0007\u0119\u0002\u0002\u1192\u1193\u0007(",
    "\u0002\u0002\u1193\u1195\u0007\u019c\u0002\u0002\u1194\u1192\u0003\u0002",
    "\u0002\u0002\u1194\u1195\u0003\u0002\u0002\u0002\u1195\u1196\u0003\u0002",
    "\u0002\u0002\u1196\u1198\u0005\u01ee\u00f8\u0002\u1197\u1199\u0005\u0268",
    "\u0135\u0002\u1198\u1197\u0003\u0002\u0002\u0002\u1198\u1199\u0003\u0002",
    "\u0002\u0002\u1199\u119a\u0003\u0002\u0002\u0002\u119a\u119b\u0007\u01f1",
    "\u0002\u0002\u119b\u119d\u0005\u01ee\u00f8\u0002\u119c\u119e\u0005\u0268",
    "\u0135\u0002\u119d\u119c\u0003\u0002\u0002\u0002\u119d\u119e\u0003\u0002",
    "\u0002\u0002\u119e\u0245\u0003\u0002\u0002\u0002\u119f\u11a0\u0007\u01b2",
    "\u0002\u0002\u11a0\u11a2\u0007\u01eb\u0002\u0002\u11a1\u11a3\t;\u0002",
    "\u0002\u11a2\u11a1\u0003\u0002\u0002\u0002\u11a2\u11a3\u0003\u0002\u0002",
    "\u0002\u11a3\u11a5\u0003\u0002\u0002\u0002\u11a4\u11a6\tD\u0002\u0002",
    "\u11a5\u11a4\u0003\u0002\u0002\u0002\u11a5\u11a6\u0003\u0002\u0002\u0002",
    "\u11a6\u11a7\u0003\u0002\u0002\u0002\u11a7\u11ac\u0005\u024e\u0128\u0002",
    "\u11a8\u11a9\u0007\u01f1\u0002\u0002\u11a9\u11ab\u0005\u024e\u0128\u0002",
    "\u11aa\u11a8\u0003\u0002\u0002\u0002\u11ab\u11ae\u0003\u0002\u0002\u0002",
    "\u11ac\u11aa\u0003\u0002\u0002\u0002\u11ac\u11ad\u0003\u0002\u0002\u0002",
    "\u11ad\u11af\u0003\u0002\u0002\u0002\u11ae\u11ac\u0003\u0002\u0002\u0002",
    "\u11af\u11b0\u0007\u01ec\u0002\u0002\u11b0\u0247\u0003\u0002\u0002\u0002",
    "\u11b1\u11b2\u0007\u01b8\u0002\u0002\u11b2\u11b6\u0007\u01eb\u0002\u0002",
    "\u11b3\u11b4\u0005\u0200\u0101\u0002\u11b4\u11b5\u0005\u0268\u0135\u0002",
    "\u11b5\u11b7\u0003\u0002\u0002\u0002\u11b6\u11b3\u0003\u0002\u0002\u0002",
    "\u11b6\u11b7\u0003\u0002\u0002\u0002\u11b7\u11be\u0003\u0002\u0002\u0002",
    "\u11b8\u11b9\u0007\u01f1\u0002\u0002\u11b9\u11ba\u0005\u0200\u0101\u0002",
    "\u11ba\u11bb\u0005\u0268\u0135\u0002\u11bb\u11bd\u0003\u0002\u0002\u0002",
    "\u11bc\u11b8\u0003\u0002\u0002\u0002\u11bd\u11c0\u0003\u0002\u0002\u0002",
    "\u11be\u11bc\u0003\u0002\u0002\u0002\u11be\u11bf\u0003\u0002\u0002\u0002",
    "\u11bf\u11c2\u0003\u0002\u0002\u0002\u11c0\u11be\u0003\u0002\u0002\u0002",
    "\u11c1\u11c3\u0005\u024c\u0127\u0002\u11c2\u11c1\u0003\u0002\u0002\u0002",
    "\u11c2\u11c3\u0003\u0002\u0002\u0002\u11c3\u11c4\u0003\u0002\u0002\u0002",
    "\u11c4\u11c5\u0007\u01ec\u0002\u0002\u11c5\u0249\u0003\u0002\u0002\u0002",
    "\u11c6\u11d1\u0005\u0274\u013b\u0002\u11c7\u11c8\u0007\u0095\u0002\u0002",
    "\u11c8\u11d2\u0007\u010e\u0002\u0002\u11c9\u11cc\u0005\u02c2\u0162\u0002",
    "\u11ca\u11cb\u0007\u011a\u0002\u0002\u11cb\u11cd\u0005\u0200\u0101\u0002",
    "\u11cc\u11ca\u0003\u0002\u0002\u0002\u11cc\u11cd\u0003\u0002\u0002\u0002",
    "\u11cd\u11cf\u0003\u0002\u0002\u0002\u11ce\u11d0\u0005\u024c\u0127\u0002",
    "\u11cf\u11ce\u0003\u0002\u0002\u0002\u11cf\u11d0\u0003\u0002\u0002\u0002",
    "\u11d0\u11d2\u0003\u0002\u0002\u0002\u11d1\u11c7\u0003\u0002\u0002\u0002",
    "\u11d1\u11c9\u0003\u0002\u0002\u0002\u11d2\u024b\u0003\u0002\u0002\u0002",
    "\u11d3\u11d4\u0007d\u0002\u0002\u11d4\u11d5\u0005\u0200\u0101\u0002",
    "\u11d5\u024d\u0003\u0002\u0002\u0002\u11d6\u11dd\u0005\u01ee\u00f8\u0002",
    "\u11d7\u11db\u0007\u000f\u0002\u0002\u11d8\u11dc\u0005\u02da\u016e\u0002",
    "\u11d9\u11da\u0007\u0080\u0002\u0002\u11da\u11dc\u0005\u0200\u0101\u0002",
    "\u11db\u11d8\u0003\u0002\u0002\u0002\u11db\u11d9\u0003\u0002\u0002\u0002",
    "\u11dc\u11de\u0003\u0002\u0002\u0002\u11dd\u11d7\u0003\u0002\u0002\u0002",
    "\u11dd\u11de\u0003\u0002\u0002\u0002\u11de\u024f\u0003\u0002\u0002\u0002",
    "\u11df\u11e3\u0007\u01a3\u0002\u0002\u11e0\u11e1\u0007\u00f0\u0002\u0002",
    "\u11e1\u11e4\u0007\u019c\u0002\u0002\u11e2\u11e4\u0005\u01ee\u00f8\u0002",
    "\u11e3\u11e0\u0003\u0002\u0002\u0002\u11e3\u11e2\u0003\u0002\u0002\u0002",
    "\u11e4\u0251\u0003\u0002\u0002\u0002\u11e5\u11eb\u0007\u016a\u0002\u0002",
    "\u11e6\u11ec\u0007\u01c0\u0002\u0002\u11e7\u11e9\u0007\u00f0\u0002\u0002",
    "\u11e8\u11ea\u0007\u019c\u0002\u0002\u11e9\u11e8\u0003\u0002\u0002\u0002",
    "\u11e9\u11ea\u0003\u0002\u0002\u0002\u11ea\u11ec\u0003\u0002\u0002\u0002",
    "\u11eb\u11e6\u0003\u0002\u0002\u0002\u11eb\u11e7\u0003\u0002\u0002\u0002",
    "\u11ec\u0253\u0003\u0002\u0002\u0002\u11ed\u11ee\u0007z\u0002\u0002",
    "\u11ee\u11ef\u0005\u0200\u0101\u0002\u11ef\u0255\u0003\u0002\u0002\u0002",
    "\u11f0\u11f1\u0007\u01a3\u0002\u0002\u11f1\u11f2\u0005\u0200\u0101\u0002",
    "\u11f2\u0257\u0003\u0002\u0002\u0002\u11f3\u11f4\u0007\u00f0\u0002\u0002",
    "\u11f4\u11fc\u0007\u00aa\u0002\u0002\u11f5\u11f9\u0007\u00aa\u0002\u0002",
    "\u11f6\u11f7\u0007\u0162\u0002\u0002\u11f7\u11f8\u0007\u0202\u0002\u0002",
    "\u11f8\u11fa\u0005\u0200\u0101\u0002\u11f9\u11f6\u0003\u0002\u0002\u0002",
    "\u11f9\u11fa\u0003\u0002\u0002\u0002\u11fa\u11fc\u0003\u0002\u0002\u0002",
    "\u11fb\u11f3\u0003\u0002\u0002\u0002\u11fb\u11f5\u0003\u0002\u0002\u0002",
    "\u11fc\u0259\u0003\u0002\u0002\u0002\u11fd\u1204\u0007\u01f2\u0002\u0002",
    "\u11fe\u1204\u0005\u025c\u012f\u0002\u11ff\u1204\u0005\u0260\u0131\u0002",
    "\u1200\u1204\u0005\u0262\u0132\u0002\u1201\u1204\u0005\u025e\u0130\u0002",
    "\u1202\u1204\u0005\u0264\u0133\u0002\u1203\u11fd\u0003\u0002\u0002\u0002",
    "\u1203\u11fe\u0003\u0002\u0002\u0002\u1203\u11ff\u0003\u0002\u0002\u0002",
    "\u1203\u1200\u0003\u0002\u0002\u0002\u1203\u1201\u0003\u0002\u0002\u0002",
    "\u1203\u1202\u0003\u0002\u0002\u0002\u1204\u025b\u0003\u0002\u0002\u0002",
    "\u1205\u1206\u0007\u01a9\u0002\u0002\u1206\u120c\tE\u0002\u0002\u1207",
    "\u1208\u0007\u0088\u0002\u0002\u1208\u1209\tF\u0002\u0002\u1209\u120d",
    "\tG\u0002\u0002\u120a\u120b\u0007I\u0002\u0002\u120b\u120d\tH\u0002",
    "\u0002\u120c\u1207\u0003\u0002\u0002\u0002\u120c\u120a\u0003\u0002\u0002",
    "\u0002\u120d\u025d\u0003\u0002\u0002\u0002\u120e\u120f\u0007\u0158\u0002",
    "\u0002\u120f\u1215\u0005\u02e6\u0174\u0002\u1210\u1216\u0007\u01e7\u0002",
    "\u0002\u1211\u1216\u0007\u0107\u0002\u0002\u1212\u1216\u0007\u0104\u0002",
    "\u0002\u1213\u1216\u0005\u02d2\u016a\u0002\u1214\u1216\u0005\u02e6\u0174",
    "\u0002\u1215\u1210\u0003\u0002\u0002\u0002\u1215\u1211\u0003\u0002\u0002",
    "\u0002\u1215\u1212\u0003\u0002\u0002\u0002\u1215\u1213\u0003\u0002\u0002",
    "\u0002\u1215\u1214\u0003\u0002\u0002\u0002\u1216\u025f\u0003\u0002\u0002",
    "\u0002\u1217\u1218\u0007\u0088\u0002\u0002\u1218\u0261\u0003\u0002\u0002",
    "\u0002\u1219\u121a\u0007\u0209\u0002\u0002\u121a\u0263\u0003\u0002\u0002",
    "\u0002\u121b\u121c\u0007\u015c\u0002\u0002\u121c\u1220\u0007}\u0002",
    "\u0002\u121d\u121e\u0007\u015c\u0002\u0002\u121e\u1220\u0007~\u0002",
    "\u0002\u121f\u121b\u0003\u0002\u0002\u0002\u121f\u121d\u0003\u0002\u0002",
    "\u0002\u1220\u0265\u0003\u0002\u0002\u0002\u1221\u1223\tI\u0002\u0002",
    "\u1222\u1224\u0007\u0095\u0002\u0002\u1223\u1222\u0003\u0002\u0002\u0002",
    "\u1223\u1224\u0003\u0002\u0002\u0002\u1224\u1225\u0003\u0002\u0002\u0002",
    "\u1225\u1226\u0005\u01ea\u00f6\u0002\u1226\u0267\u0003\u0002\u0002\u0002",
    "\u1227\u1229\u0007\u000f\u0002\u0002\u1228\u1227\u0003\u0002\u0002\u0002",
    "\u1228\u1229\u0003\u0002\u0002\u0002\u1229\u122c\u0003\u0002\u0002\u0002",
    "\u122a\u122d\u0005\u02d8\u016d\u0002\u122b\u122d\u0005\u026c\u0137\u0002",
    "\u122c\u122a\u0003\u0002\u0002\u0002\u122c\u122b\u0003\u0002\u0002\u0002",
    "\u122d\u1230\u0003\u0002\u0002\u0002\u122e\u1230\u0007\u000f\u0002\u0002",
    "\u122f\u1228\u0003\u0002\u0002\u0002\u122f\u122e\u0003\u0002\u0002\u0002",
    "\u1230\u0269\u0003\u0002\u0002\u0002\u1231\u1234\u0005\u02d8\u016d\u0002",
    "\u1232\u1234\u0005\u026c\u0137\u0002\u1233\u1231\u0003\u0002\u0002\u0002",
    "\u1233\u1232\u0003\u0002\u0002\u0002\u1234\u026b\u0003\u0002\u0002\u0002",
    "\u1235\u1236\u0005\u02d6\u016c\u0002\u1236\u026d\u0003\u0002\u0002\u0002",
    "\u1237\u123a\u0007\u01aa\u0002\u0002\u1238\u123b\u0005\u0270\u0139\u0002",
    "\u1239\u123b\u0005\u01ee\u00f8\u0002\u123a\u1238\u0003\u0002\u0002\u0002",
    "\u123a\u1239\u0003\u0002\u0002\u0002\u123b\u026f\u0003\u0002\u0002\u0002",
    "\u123c\u123d\u0007R\u0002\u0002\u123d\u123e\u0007\u0103\u0002\u0002",
    "\u123e\u123f\u0005\u02a6\u0154\u0002\u123f\u0271\u0003\u0002\u0002\u0002",
    "\u1240\u1241\u0007\u00ba\u0002\u0002\u1241\u1246\u0005\u02a2\u0152\u0002",
    "\u1242\u1243\u0007\u01f1\u0002\u0002\u1243\u1245\u0005\u02a2\u0152\u0002",
    "\u1244\u1242\u0003\u0002\u0002\u0002\u1245\u1248\u0003\u0002\u0002\u0002",
    "\u1246\u1244\u0003\u0002\u0002\u0002\u1246\u1247\u0003\u0002\u0002\u0002",
    "\u1247\u1255\u0003\u0002\u0002\u0002\u1248\u1246\u0003\u0002\u0002\u0002",
    "\u1249\u124a\u0007\'\u0002\u0002\u124a\u124b\u00079\u0002\u0002\u124b",
    "\u124c\u0007\u00ba\u0002\u0002\u124c\u1251\u0005\u02a2\u0152\u0002\u124d",
    "\u124e\u0007\u01f1\u0002\u0002\u124e\u1250\u0005\u02a2\u0152\u0002\u124f",
    "\u124d\u0003\u0002\u0002\u0002\u1250\u1253\u0003\u0002\u0002\u0002\u1251",
    "\u124f\u0003\u0002\u0002\u0002\u1251\u1252\u0003\u0002\u0002\u0002\u1252",
    "\u1255\u0003\u0002\u0002\u0002\u1253\u1251\u0003\u0002\u0002\u0002\u1254",
    "\u1240\u0003\u0002\u0002\u0002\u1254\u1249\u0003\u0002\u0002\u0002\u1255",
    "\u0273\u0003\u0002\u0002\u0002\u1256\u1259\u0005\u02d8\u016d\u0002\u1257",
    "\u1259\u0005\u02d6\u016c\u0002\u1258\u1256\u0003\u0002\u0002\u0002\u1258",
    "\u1257\u0003\u0002\u0002\u0002\u1259\u0275\u0003\u0002\u0002\u0002\u125a",
    "\u125b\u0005\u02d8\u016d\u0002\u125b\u0277\u0003\u0002\u0002\u0002\u125c",
    "\u125d\u0005\u02d8\u016d\u0002\u125d\u0279\u0003\u0002\u0002\u0002\u125e",
    "\u125f\u0005\u02d8\u016d\u0002\u125f\u027b\u0003\u0002\u0002\u0002\u1260",
    "\u1261\u0005\u02d8\u016d\u0002\u1261\u027d\u0003\u0002\u0002\u0002\u1262",
    "\u1263\u0005\u02d8\u016d\u0002\u1263\u027f\u0003\u0002\u0002\u0002\u1264",
    "\u1265\u0005\u02d8\u016d\u0002\u1265\u0281\u0003\u0002\u0002\u0002\u1266",
    "\u126b\u0005\u02d8\u016d\u0002\u1267\u1268\u0007\u01e4\u0002\u0002\u1268",
    "\u126a\u0005\u02da\u016e\u0002\u1269\u1267\u0003\u0002\u0002\u0002\u126a",
    "\u126d\u0003\u0002\u0002\u0002\u126b\u1269\u0003\u0002\u0002\u0002\u126b",
    "\u126c\u0003\u0002\u0002\u0002\u126c\u1270\u0003\u0002\u0002\u0002\u126d",
    "\u126b\u0003\u0002\u0002\u0002\u126e\u126f\u0007\u01f3\u0002\u0002\u126f",
    "\u1271\u0005\u02ac\u0157\u0002\u1270\u126e\u0003\u0002\u0002\u0002\u1270",
    "\u1271\u0003\u0002\u0002\u0002\u1271\u0283\u0003\u0002\u0002\u0002\u1272",
    "\u1273\u0005\u02d8\u016d\u0002\u1273\u0285\u0003\u0002\u0002\u0002\u1274",
    "\u1277\u0005\u02d8\u016d\u0002\u1275\u1276\u0007\u01e4\u0002\u0002\u1276",
    "\u1278\u0005\u02da\u016e\u0002\u1277\u1275\u0003\u0002\u0002\u0002\u1277",
    "\u1278\u0003\u0002\u0002\u0002\u1278\u0287\u0003\u0002\u0002\u0002\u1279",
    "\u127a\u0005\u02d8\u016d\u0002\u127a\u0289\u0003\u0002\u0002\u0002\u127b",
    "\u127c\u0005\u02d8\u016d\u0002\u127c\u028b\u0003\u0002\u0002\u0002\u127d",
    "\u127e\u0005\u02d8\u016d\u0002\u127e\u028d\u0003\u0002\u0002\u0002\u127f",
    "\u1284\u0005\u02d8\u016d\u0002\u1280\u1281\u0007\u01e4\u0002\u0002\u1281",
    "\u1283\u0005\u02da\u016e\u0002\u1282\u1280\u0003\u0002\u0002\u0002\u1283",
    "\u1286\u0003\u0002\u0002\u0002\u1284\u1282\u0003\u0002\u0002\u0002\u1284",
    "\u1285\u0003\u0002\u0002\u0002\u1285\u028f\u0003\u0002\u0002\u0002\u1286",
    "\u1284\u0003\u0002\u0002\u0002\u1287\u1288\u0005\u02d8\u016d\u0002\u1288",
    "\u0291\u0003\u0002\u0002\u0002\u1289\u128e\u0005\u02d8\u016d\u0002\u128a",
    "\u128b\u0007\u01e4\u0002\u0002\u128b\u128d\u0005\u02da\u016e\u0002\u128c",
    "\u128a\u0003\u0002\u0002\u0002\u128d\u1290\u0003\u0002\u0002\u0002\u128e",
    "\u128c\u0003\u0002\u0002\u0002\u128e\u128f\u0003\u0002\u0002\u0002\u128f",
    "\u1293\u0003\u0002\u0002\u0002\u1290\u128e\u0003\u0002\u0002\u0002\u1291",
    "\u1292\u0007\u01f3\u0002\u0002\u1292\u1294\u0005\u02ac\u0157\u0002\u1293",
    "\u1291\u0003\u0002\u0002\u0002\u1293\u1294\u0003\u0002\u0002\u0002\u1294",
    "\u0293\u0003\u0002\u0002\u0002\u1295\u1296\u0005\u02da\u016e\u0002\u1296",
    "\u0295\u0003\u0002\u0002\u0002\u1297\u129c\u0005\u02da\u016e\u0002\u1298",
    "\u1299\u0007\u01e4\u0002\u0002\u1299\u129b\u0005\u02da\u016e\u0002\u129a",
    "\u1298\u0003\u0002\u0002\u0002\u129b\u129e\u0003\u0002\u0002\u0002\u129c",
    "\u129a\u0003\u0002\u0002\u0002\u129c\u129d\u0003\u0002\u0002\u0002\u129d",
    "\u0297\u0003\u0002\u0002\u0002\u129e\u129c\u0003\u0002\u0002\u0002\u129f",
    "\u12a4\u0005\u02da\u016e\u0002\u12a0\u12a1\u0007\u01e4\u0002\u0002\u12a1",
    "\u12a3\u0005\u02da\u016e\u0002\u12a2\u12a0\u0003\u0002\u0002\u0002\u12a3",
    "\u12a6\u0003\u0002\u0002\u0002\u12a4\u12a2\u0003\u0002\u0002\u0002\u12a4",
    "\u12a5\u0003\u0002\u0002\u0002\u12a5\u0299\u0003\u0002\u0002\u0002\u12a6",
    "\u12a4\u0003\u0002\u0002\u0002\u12a7\u12ac\u0005\u02d8\u016d\u0002\u12a8",
    "\u12a9\u0007\u01e4\u0002\u0002\u12a9\u12ab\u0005\u02da\u016e\u0002\u12aa",
    "\u12a8\u0003\u0002\u0002\u0002\u12ab\u12ae\u0003\u0002\u0002\u0002\u12ac",
    "\u12aa\u0003\u0002\u0002\u0002\u12ac\u12ad\u0003\u0002\u0002\u0002\u12ad",
    "\u029b\u0003\u0002\u0002\u0002\u12ae\u12ac\u0003\u0002\u0002\u0002\u12af",
    "\u12b2\u0005\u02d8\u016d\u0002\u12b0\u12b1\u0007\u01e4\u0002\u0002\u12b1",
    "\u12b3\u0005\u02da\u016e\u0002\u12b2\u12b0\u0003\u0002\u0002\u0002\u12b2",
    "\u12b3\u0003\u0002\u0002\u0002\u12b3\u029d\u0003\u0002\u0002\u0002\u12b4",
    "\u12b7\u0005\u02d8\u016d\u0002\u12b5\u12b6\u0007\u01e4\u0002\u0002\u12b6",
    "\u12b8\u0005\u02da\u016e\u0002\u12b7\u12b5\u0003\u0002\u0002\u0002\u12b7",
    "\u12b8\u0003\u0002\u0002\u0002\u12b8\u029f\u0003\u0002\u0002\u0002\u12b9",
    "\u12bc\u0005\u02d8\u016d\u0002\u12ba\u12bb\u0007\u01e4\u0002\u0002\u12bb",
    "\u12bd\u0005\u02da\u016e\u0002\u12bc\u12ba\u0003\u0002\u0002\u0002\u12bc",
    "\u12bd\u0003\u0002\u0002\u0002\u12bd\u02a1\u0003\u0002\u0002\u0002\u12be",
    "\u12c1\u0005\u02b2\u015a\u0002\u12bf\u12c1\u0005\u02ca\u0166\u0002\u12c0",
    "\u12be\u0003\u0002\u0002\u0002\u12c0\u12bf\u0003\u0002\u0002\u0002\u12c1",
    "\u02a3\u0003\u0002\u0002\u0002\u12c2\u12c3\u0005\u02d8\u016d\u0002\u12c3",
    "\u02a5\u0003\u0002\u0002\u0002\u12c4\u12c7\u0005\u02d8\u016d\u0002\u12c5",
    "\u12c7\u0005\u02ca\u0166\u0002\u12c6\u12c4\u0003\u0002\u0002\u0002\u12c6",
    "\u12c5\u0003\u0002\u0002\u0002\u12c7\u02a7\u0003\u0002\u0002\u0002\u12c8",
    "\u12cb\u0005\u02d8\u016d\u0002\u12c9\u12cb\u0005\u02ca\u0166\u0002\u12ca",
    "\u12c8\u0003\u0002\u0002\u0002\u12ca\u12c9\u0003\u0002\u0002\u0002\u12cb",
    "\u02a9\u0003\u0002\u0002\u0002\u12cc\u12cf\u0005\u02d8\u016d\u0002\u12cd",
    "\u12ce\u0007\u01e4\u0002\u0002\u12ce\u12d0\u0005\u02da\u016e\u0002\u12cf",
    "\u12cd\u0003\u0002\u0002\u0002\u12cf\u12d0\u0003\u0002\u0002\u0002\u12d0",
    "\u02ab\u0003\u0002\u0002\u0002\u12d1\u12d2\u0005\u02d8\u016d\u0002\u12d2",
    "\u02ad\u0003\u0002\u0002\u0002\u12d3\u12d8\u0005\u02d8\u016d\u0002\u12d4",
    "\u12d5\u0007\u01e4\u0002\u0002\u12d5\u12d7\u0005\u02da\u016e\u0002\u12d6",
    "\u12d4\u0003\u0002\u0002\u0002\u12d7\u12da\u0003\u0002\u0002\u0002\u12d8",
    "\u12d6\u0003\u0002\u0002\u0002\u12d8\u12d9\u0003\u0002\u0002\u0002\u12d9",
    "\u02af\u0003\u0002\u0002\u0002\u12da\u12d8\u0003\u0002\u0002\u0002\u12db",
    "\u12df\u0005\u02b2\u015a\u0002\u12dc\u12dd\u0007\u01f3\u0002\u0002\u12dd",
    "\u12e0\u0005\u02ac\u0157\u0002\u12de\u12e0\u0005\u0266\u0134\u0002\u12df",
    "\u12dc\u0003\u0002\u0002\u0002\u12df\u12de\u0003\u0002\u0002\u0002\u12df",
    "\u12e0\u0003\u0002\u0002\u0002\u12e0\u02b1\u0003\u0002\u0002\u0002\u12e1",
    "\u12e6\u0005\u02da\u016e\u0002\u12e2\u12e3\u0007\u01e4\u0002\u0002\u12e3",
    "\u12e5\u0005\u02da\u016e\u0002\u12e4\u12e2\u0003\u0002\u0002\u0002\u12e5",
    "\u12e8\u0003\u0002\u0002\u0002\u12e6\u12e4\u0003\u0002\u0002\u0002\u12e6",
    "\u12e7\u0003\u0002\u0002\u0002\u12e7\u02b3\u0003\u0002\u0002\u0002\u12e8",
    "\u12e6\u0003\u0002\u0002\u0002\u12e9\u12ea\u0007\u01ee\u0002\u0002\u12ea",
    "\u02b5\u0003\u0002\u0002\u0002\u12eb\u12ec\u0007\u00c1\u0002\u0002\u12ec",
    "\u12ed\u0007\u01eb\u0002\u0002\u12ed\u12ee\u0007\u01ca\u0002\u0002\u12ee",
    "\u12ef\t+\u0002\u0002\u12ef\u12f0\u0005\u019a\u00ce\u0002\u12f0\u12f2",
    "\u0007\u01ec\u0002\u0002\u12f1\u12f3\u0005\u0232\u011a\u0002\u12f2\u12f1",
    "\u0003\u0002\u0002\u0002\u12f2\u12f3\u0003\u0002\u0002\u0002\u12f3\u02b7",
    "\u0003\u0002\u0002\u0002\u12f4\u12f6\u0007\u01eb\u0002\u0002\u12f5\u12f7",
    "\u0005\u02c0\u0161\u0002\u12f6\u12f5\u0003\u0002\u0002\u0002\u12f6\u12f7",
    "\u0003\u0002\u0002\u0002\u12f7\u12fc\u0003\u0002\u0002\u0002\u12f8\u12f9",
    "\u0007\u01f1\u0002\u0002\u12f9\u12fb\u0005\u02c0\u0161\u0002\u12fa\u12f8",
    "\u0003\u0002\u0002\u0002\u12fb\u12fe\u0003\u0002\u0002\u0002\u12fc\u12fa",
    "\u0003\u0002\u0002\u0002\u12fc\u12fd\u0003\u0002\u0002\u0002\u12fd\u12ff",
    "\u0003\u0002\u0002\u0002\u12fe\u12fc\u0003\u0002\u0002\u0002\u12ff\u1301",
    "\u0007\u01ec\u0002\u0002\u1300\u1302\u0005\u02b6\u015c\u0002\u1301\u1300",
    "\u0003\u0002\u0002\u0002\u1301\u1302\u0003\u0002\u0002\u0002\u1302\u02b9",
    "\u0003\u0002\u0002\u0002\u1303\u1308\u0007\u01eb\u0002\u0002\u1304\u1306",
    "\u0005\u02c0\u0161\u0002\u1305\u1307\u0005\u02be\u0160\u0002\u1306\u1305",
    "\u0003\u0002\u0002\u0002\u1306\u1307\u0003\u0002\u0002\u0002\u1307\u1309",
    "\u0003\u0002\u0002\u0002\u1308\u1304\u0003\u0002\u0002\u0002\u1308\u1309",
    "\u0003\u0002\u0002\u0002\u1309\u1311\u0003\u0002\u0002\u0002\u130a\u130b",
    "\u0007\u01f1\u0002\u0002\u130b\u130d\u0005\u02c0\u0161\u0002\u130c\u130e",
    "\u0005\u02be\u0160\u0002\u130d\u130c\u0003\u0002\u0002\u0002\u130d\u130e",
    "\u0003\u0002\u0002\u0002\u130e\u1310\u0003\u0002\u0002\u0002\u130f\u130a",
    "\u0003\u0002\u0002\u0002\u1310\u1313\u0003\u0002\u0002\u0002\u1311\u130f",
    "\u0003\u0002\u0002\u0002\u1311\u1312\u0003\u0002\u0002\u0002\u1312\u1314",
    "\u0003\u0002\u0002\u0002\u1313\u1311\u0003\u0002\u0002\u0002\u1314\u1316",
    "\u0007\u01ec\u0002\u0002\u1315\u1317\u0005\u02b6\u015c\u0002\u1316\u1315",
    "\u0003\u0002\u0002\u0002\u1316\u1317\u0003\u0002\u0002\u0002\u1317\u02bb",
    "\u0003\u0002\u0002\u0002\u1318\u1319\u0007\u01eb\u0002\u0002\u1319\u1326",
    "\u0005\u02ae\u0158\u0002\u131a\u131d\u0007\u01f1\u0002\u0002\u131b\u131e",
    "\u0005\u02d2\u016a\u0002\u131c\u131e\u0007\u00fd\u0002\u0002\u131d\u131b",
    "\u0003\u0002\u0002\u0002\u131d\u131c\u0003\u0002\u0002\u0002\u131e\u1324",
    "\u0003\u0002\u0002\u0002\u131f\u1322\u0007\u01f1\u0002\u0002\u1320\u1323",
    "\u0005\u02d2\u016a\u0002\u1321\u1323\u0007\u00fd\u0002\u0002\u1322\u1320",
    "\u0003\u0002\u0002\u0002\u1322\u1321\u0003\u0002\u0002\u0002\u1323\u1325",
    "\u0003\u0002\u0002\u0002\u1324\u131f\u0003\u0002\u0002\u0002\u1324\u1325",
    "\u0003\u0002\u0002\u0002\u1325\u1327\u0003\u0002\u0002\u0002\u1326\u131a",
    "\u0003\u0002\u0002\u0002\u1326\u1327\u0003\u0002\u0002\u0002\u1327\u1328",
    "\u0003\u0002\u0002\u0002\u1328\u133c\u0007\u019a\u0002\u0002\u1329\u132a",
    "\u0005\u02b0\u0159\u0002\u132a\u132b\u0007\u01e4\u0002\u0002\u132b\u132c",
    "\u0007\u01ee\u0002\u0002\u132c\u133d\u0003\u0002\u0002\u0002\u132d\u133d",
    "\u0007\u01ee\u0002\u0002\u132e\u1330\u0005\u01ee\u00f8\u0002\u132f\u1331",
    "\u0005\u0268\u0135\u0002\u1330\u132f\u0003\u0002\u0002\u0002\u1330\u1331",
    "\u0003\u0002\u0002\u0002\u1331\u1339\u0003\u0002\u0002\u0002\u1332\u1333",
    "\u0007\u01f1\u0002\u0002\u1333\u1335\u0005\u01ee\u00f8\u0002\u1334\u1336",
    "\u0005\u0268\u0135\u0002\u1335\u1334\u0003\u0002\u0002\u0002\u1335\u1336",
    "\u0003\u0002\u0002\u0002\u1336\u1338\u0003\u0002\u0002\u0002\u1337\u1332",
    "\u0003\u0002\u0002\u0002\u1338\u133b\u0003\u0002\u0002\u0002\u1339\u1337",
    "\u0003\u0002\u0002\u0002\u1339\u133a\u0003\u0002\u0002\u0002\u133a\u133d",
    "\u0003\u0002\u0002\u0002\u133b\u1339\u0003\u0002\u0002\u0002\u133c\u1329",
    "\u0003\u0002\u0002\u0002\u133c\u132d\u0003\u0002\u0002\u0002\u133c\u132e",
    "\u0003\u0002\u0002\u0002\u133d\u133e\u0003\u0002\u0002\u0002\u133e\u1340",
    "\u0007\u01ec\u0002\u0002\u133f\u1341\u0005\u02b6\u015c\u0002\u1340\u133f",
    "\u0003\u0002\u0002\u0002\u1340\u1341\u0003\u0002\u0002\u0002\u1341\u02bd",
    "\u0003\u0002\u0002\u0002\u1342\u1343\tJ\u0002\u0002\u1343\u1344\u0007",
    "\u00fe\u0002\u0002\u1344\u02bf\u0003\u0002\u0002\u0002\u1345\u1346\u0005",
    "\u02d8\u016d\u0002\u1346\u1347\u0007\u0202\u0002\u0002\u1347\u1348\u0007",
    "\u01ff\u0002\u0002\u1348\u134a\u0003\u0002\u0002\u0002\u1349\u1345\u0003",
    "\u0002\u0002\u0002\u1349\u134a\u0003\u0002\u0002\u0002\u134a\u134b\u0003",
    "\u0002\u0002\u0002\u134b\u134c\u0005\u01ee\u00f8\u0002\u134c\u02c1\u0003",
    "\u0002\u0002\u0002\u134d\u1356\u0005\u02c4\u0163\u0002\u134e\u1350\u0007",
    "\u012f\u0002\u0002\u134f\u134e\u0003\u0002\u0002\u0002\u134f\u1350\u0003",
    "\u0002\u0002\u0002\u1350\u1351\u0003\u0002\u0002\u0002\u1351\u1353\u0005",
    "\u0296\u014c\u0002\u1352\u1354\t\u0017\u0002\u0002\u1353\u1352\u0003",
    "\u0002\u0002\u0002\u1353\u1354\u0003\u0002\u0002\u0002\u1354\u1356\u0003",
    "\u0002\u0002\u0002\u1355\u134d\u0003\u0002\u0002\u0002\u1355\u134f\u0003",
    "\u0002\u0002\u0002\u1356\u02c3\u0003\u0002\u0002\u0002\u1357\u1359\u0005",
    "\u02c8\u0165\u0002\u1358\u135a\u0005\u02c6\u0164\u0002\u1359\u1358\u0003",
    "\u0002\u0002\u0002\u1359\u135a\u0003\u0002\u0002\u0002\u135a\u1361\u0003",
    "\u0002\u0002\u0002\u135b\u135d\u0007\u01ac\u0002\u0002\u135c\u135e\u0007",
    "\u00ce\u0002\u0002\u135d\u135c\u0003\u0002\u0002\u0002\u135d\u135e\u0003",
    "\u0002\u0002\u0002\u135e\u135f\u0003\u0002\u0002\u0002\u135f\u1360\u0007",
    "\u017b\u0002\u0002\u1360\u1362\u0007\u01c2\u0002\u0002\u1361\u135b\u0003",
    "\u0002\u0002\u0002\u1361\u1362\u0003\u0002\u0002\u0002\u1362\u1374\u0003",
    "\u0002\u0002\u0002\u1363\u1364\u0007\u00b9\u0002\u0002\u1364\u1369\t",
    "K\u0002\u0002\u1365\u1366\u0007\u01eb\u0002\u0002\u1366\u1367\u0005",
    "\u01ee\u00f8\u0002\u1367\u1368\u0007\u01ec\u0002\u0002\u1368\u136a\u0003",
    "\u0002\u0002\u0002\u1369\u1365\u0003\u0002\u0002\u0002\u1369\u136a\u0003",
    "\u0002\u0002\u0002\u136a\u136b\u0003\u0002\u0002\u0002\u136b\u136c\u0007",
    "\u0184\u0002\u0002\u136c\u1371\tL\u0002\u0002\u136d\u136e\u0007\u01eb",
    "\u0002\u0002\u136e\u136f\u0005\u01ee\u00f8\u0002\u136f\u1370\u0007\u01ec",
    "\u0002\u0002\u1370\u1372\u0003\u0002\u0002\u0002\u1371\u136d\u0003\u0002",
    "\u0002\u0002\u1371\u1372\u0003\u0002\u0002\u0002\u1372\u1374\u0003\u0002",
    "\u0002\u0002\u1373\u1357\u0003\u0002\u0002\u0002\u1373\u1363\u0003\u0002",
    "\u0002\u0002\u1374\u02c5\u0003\u0002\u0002\u0002\u1375\u1376\u0007\u01eb",
    "\u0002\u0002\u1376\u1379\u0005\u02d2\u016a\u0002\u1377\u1378\u0007\u01f1",
    "\u0002\u0002\u1378\u137a\u0005\u02d2\u016a\u0002\u1379\u1377\u0003\u0002",
    "\u0002\u0002\u1379\u137a\u0003\u0002\u0002\u0002\u137a\u137c\u0003\u0002",
    "\u0002\u0002\u137b\u137d\tM\u0002\u0002\u137c\u137b\u0003\u0002\u0002",
    "\u0002\u137c\u137d\u0003\u0002\u0002\u0002\u137d\u137e\u0003\u0002\u0002",
    "\u0002\u137e\u137f\u0007\u01ec\u0002\u0002\u137f\u02c7\u0003\u0002\u0002",
    "\u0002\u1380\u13bd\u0007 \u0002\u0002\u1381\u13bd\u0007\u0120\u0002",
    "\u0002\u1382\u13bd\u0007\u00e8\u0002\u0002\u1383\u13bd\u0007\u001f\u0002",
    "\u0002\u1384\u13bd\u0007\u001e\u0002\u0002\u1385\u13bd\u0007\u00e9\u0002",
    "\u0002\u1386\u13bd\u0007\u0121\u0002\u0002\u1387\u13bd\u0007\u0122\u0002",
    "\u0002\u1388\u13bd\u0007\u015f\u0002\u0002\u1389\u13bd\u0007\u0160\u0002",
    "\u0002\u138a\u13bd\u0007\u0101\u0002\u0002\u138b\u13bd\u0007_\u0002",
    "\u0002\u138c\u13bd\u0007\u00b7\u0002\u0002\u138d\u13bd\u0007\u00b6\u0002",
    "\u0002\u138e\u13bd\u0007\u0100\u0002\u0002\u138f\u13bd\u0007\u0164\u0002",
    "\u0002\u1390\u13bd\u0007\u00ff\u0002\u0002\u1391\u13bd\u0007`\u0002",
    "\u0002\u1392\u1394\u0007q\u0002\u0002\u1393\u1395\u0007\u0125\u0002",
    "\u0002\u1394\u1393\u0003\u0002\u0002\u0002\u1394\u1395\u0003\u0002\u0002",
    "\u0002\u1395\u13bd\u0003\u0002\u0002\u0002\u1396\u13bd\u0007\u0092\u0002",
    "\u0002\u1397\u13bd\u0007\u012d\u0002\u0002\u1398\u13bd\u0007\u00eb\u0002",
    "\u0002\u1399\u139b\u0007\u00d4\u0002\u0002\u139a\u139c\u0007\u012b\u0002",
    "\u0002\u139b\u139a\u0003\u0002\u0002\u0002\u139b\u139c\u0003\u0002\u0002",
    "\u0002\u139c\u13bd\u0003\u0002\u0002\u0002\u139d\u13bd\u00071\u0002",
    "\u0002\u139e\u13bd\u00073\u0002\u0002\u139f\u13bd\u0007\u019f\u0002",
    "\u0002\u13a0\u13bd\u0007\u019e\u0002\u0002\u13a1\u13bd\u0007\u0171\u0002",
    "\u0002\u13a2\u13bd\u0007\u012b\u0002\u0002\u13a3\u13bd\u0007$\u0002",
    "\u0002\u13a4\u13bd\u0007Y\u0002\u0002\u13a5\u13bd\u0007\u0143\u0002",
    "\u0002\u13a6\u13bd\u0007\u0198\u0002\u0002\u13a7\u13bd\u0007\u01bf\u0002",
    "\u0002\u13a8\u13bd\u0007\u00e4\u0002\u0002\u13a9\u13bd\u0007Z\u0002",
    "\u0002\u13aa\u13bd\u0007\u00a2\u0002\u0002\u13ab\u13bd\u0007\u00de\u0002",
    "\u0002\u13ac\u13bd\u0007\u014d\u0002\u0002\u13ad\u13bd\u0007\u0181\u0002",
    "\u0002\u13ae\u13bd\u0007\u0182\u0002\u0002\u13af\u13bd\u0007\u0183\u0002",
    "\u0002\u13b0\u13bd\u0007\u0180\u0002\u0002\u13b1\u13bd\u0007\u017c\u0002",
    "\u0002\u13b2\u13bd\u0007\u017f\u0002\u0002\u13b3\u13bd\u0007\u017e\u0002",
    "\u0002\u13b4\u13bd\u0007\u017d\u0002\u0002\u13b5\u13bd\u0007\u01c1\u0002",
    "\u0002\u13b6\u13bd\u0007s\u0002\u0002\u13b7\u13bd\u0007\u001d\u0002",
    "\u0002\u13b8\u13bd\u0007!\u0002\u0002\u13b9\u13bd\u00076\u0002\u0002",
    "\u13ba\u13bd\u0007\u00ed\u0002\u0002\u13bb\u13bd\u0007\u00e0\u0002\u0002",
    "\u13bc\u1380\u0003\u0002\u0002\u0002\u13bc\u1381\u0003\u0002\u0002\u0002",
    "\u13bc\u1382\u0003\u0002\u0002\u0002\u13bc\u1383\u0003\u0002\u0002\u0002",
    "\u13bc\u1384\u0003\u0002\u0002\u0002\u13bc\u1385\u0003\u0002\u0002\u0002",
    "\u13bc\u1386\u0003\u0002\u0002\u0002\u13bc\u1387\u0003\u0002\u0002\u0002",
    "\u13bc\u1388\u0003\u0002\u0002\u0002\u13bc\u1389\u0003\u0002\u0002\u0002",
    "\u13bc\u138a\u0003\u0002\u0002\u0002\u13bc\u138b\u0003\u0002\u0002\u0002",
    "\u13bc\u138c\u0003\u0002\u0002\u0002\u13bc\u138d\u0003\u0002\u0002\u0002",
    "\u13bc\u138e\u0003\u0002\u0002\u0002\u13bc\u138f\u0003\u0002\u0002\u0002",
    "\u13bc\u1390\u0003\u0002\u0002\u0002\u13bc\u1391\u0003\u0002\u0002\u0002",
    "\u13bc\u1392\u0003\u0002\u0002\u0002\u13bc\u1396\u0003\u0002\u0002\u0002",
    "\u13bc\u1397\u0003\u0002\u0002\u0002\u13bc\u1398\u0003\u0002\u0002\u0002",
    "\u13bc\u1399\u0003\u0002\u0002\u0002\u13bc\u139d\u0003\u0002\u0002\u0002",
    "\u13bc\u139e\u0003\u0002\u0002\u0002\u13bc\u139f\u0003\u0002\u0002\u0002",
    "\u13bc\u13a0\u0003\u0002\u0002\u0002\u13bc\u13a1\u0003\u0002\u0002\u0002",
    "\u13bc\u13a2\u0003\u0002\u0002\u0002\u13bc\u13a3\u0003\u0002\u0002\u0002",
    "\u13bc\u13a4\u0003\u0002\u0002\u0002\u13bc\u13a5\u0003\u0002\u0002\u0002",
    "\u13bc\u13a6\u0003\u0002\u0002\u0002\u13bc\u13a7\u0003\u0002\u0002\u0002",
    "\u13bc\u13a8\u0003\u0002\u0002\u0002\u13bc\u13a9\u0003\u0002\u0002\u0002",
    "\u13bc\u13aa\u0003\u0002\u0002\u0002\u13bc\u13ab\u0003\u0002\u0002\u0002",
    "\u13bc\u13ac\u0003\u0002\u0002\u0002\u13bc\u13ad\u0003\u0002\u0002\u0002",
    "\u13bc\u13ae\u0003\u0002\u0002\u0002\u13bc\u13af\u0003\u0002\u0002\u0002",
    "\u13bc\u13b0\u0003\u0002\u0002\u0002\u13bc\u13b1\u0003\u0002\u0002\u0002",
    "\u13bc\u13b2\u0003\u0002\u0002\u0002\u13bc\u13b3\u0003\u0002\u0002\u0002",
    "\u13bc\u13b4\u0003\u0002\u0002\u0002\u13bc\u13b5\u0003\u0002\u0002\u0002",
    "\u13bc\u13b6\u0003\u0002\u0002\u0002\u13bc\u13b7\u0003\u0002\u0002\u0002",
    "\u13bc\u13b8\u0003\u0002\u0002\u0002\u13bc\u13b9\u0003\u0002\u0002\u0002",
    "\u13bc\u13ba\u0003\u0002\u0002\u0002\u13bc\u13bb\u0003\u0002\u0002\u0002",
    "\u13bd\u02c9\u0003\u0002\u0002\u0002\u13be\u13c2\u0007\u01f5\u0002\u0002",
    "\u13bf\u13c0\u0007\u01f6\u0002\u0002\u13c0\u13c2\u0007\u01e5\u0002\u0002",
    "\u13c1\u13be\u0003\u0002\u0002\u0002\u13c1\u13bf\u0003\u0002\u0002\u0002",
    "\u13c2\u13cb\u0003\u0002\u0002\u0002\u13c3\u13c5\u0007\u00ad\u0002\u0002",
    "\u13c4\u13c3\u0003\u0002\u0002\u0002\u13c4\u13c5\u0003\u0002\u0002\u0002",
    "\u13c5\u13c9\u0003\u0002\u0002\u0002\u13c6\u13ca\u0007\u01f5\u0002\u0002",
    "\u13c7\u13c8\u0007\u01f6\u0002\u0002\u13c8\u13ca\u0007\u01e5\u0002\u0002",
    "\u13c9\u13c6\u0003\u0002\u0002\u0002\u13c9\u13c7\u0003\u0002\u0002\u0002",
    "\u13ca\u13cc\u0003\u0002\u0002\u0002\u13cb\u13c4\u0003\u0002\u0002\u0002",
    "\u13cb\u13cc\u0003\u0002\u0002\u0002\u13cc\u13d1\u0003\u0002\u0002\u0002",
    "\u13cd\u13ce\u0007\u01e4\u0002\u0002\u13ce\u13d0\u0005\u02cc\u0167\u0002",
    "\u13cf\u13cd\u0003\u0002\u0002\u0002\u13d0\u13d3\u0003\u0002\u0002\u0002",
    "\u13d1\u13cf\u0003\u0002\u0002\u0002\u13d1\u13d2\u0003\u0002\u0002\u0002",
    "\u13d2\u02cb\u0003\u0002\u0002\u0002\u13d3\u13d1\u0003\u0002\u0002\u0002",
    "\u13d4\u13d5\u0005\u02b2\u015a\u0002\u13d5\u13d6\u0005\u02b8\u015d\u0002",
    "\u13d6\u13d9\u0003\u0002\u0002\u0002\u13d7\u13d9\u0005\u02b2\u015a\u0002",
    "\u13d8\u13d4\u0003\u0002\u0002\u0002\u13d8\u13d7\u0003\u0002\u0002\u0002",
    "\u13d9\u02cd\u0003\u0002\u0002\u0002\u13da\u13db\u0005\u02b2\u015a\u0002",
    "\u13db\u02cf\u0003\u0002\u0002\u0002\u13dc\u13df\u0007\u017c\u0002\u0002",
    "\u13dd\u13e0\u0005\u02d6\u016c\u0002\u13de\u13e0\u0005\u02ca\u0166\u0002",
    "\u13df\u13dd\u0003\u0002\u0002\u0002\u13df\u13de\u0003\u0002\u0002\u0002",
    "\u13e0\u13e5\u0003\u0002\u0002\u0002\u13e1\u13e2\u0007\u0012\u0002\u0002",
    "\u13e2\u13e3\u0007\u017b\u0002\u0002\u13e3\u13e4\u0007\u01c2\u0002\u0002",
    "\u13e4\u13e6\u0005\u02d6\u016c\u0002\u13e5\u13e1\u0003\u0002\u0002\u0002",
    "\u13e5\u13e6\u0003\u0002\u0002\u0002\u13e6\u141b\u0003\u0002\u0002\u0002",
    "\u13e7\u13eb\u0007\u00b9\u0002\u0002\u13e8\u13ec\u0005\u02d6\u016c\u0002",
    "\u13e9\u13ec\u0005\u02ca\u0166\u0002\u13ea\u13ec\u0005\u02cc\u0167\u0002",
    "\u13eb\u13e8\u0003\u0002\u0002\u0002\u13eb\u13e9\u0003\u0002\u0002\u0002",
    "\u13eb\u13ea\u0003\u0002\u0002\u0002\u13ec\u13ed\u0003\u0002\u0002\u0002",
    "\u13ed\u13fb\tN\u0002\u0002\u13ee\u13f1\u0007\u01eb\u0002\u0002\u13ef",
    "\u13f2\u0007\u01e5\u0002\u0002\u13f0\u13f2\u0005\u02ca\u0166\u0002\u13f1",
    "\u13ef\u0003\u0002\u0002\u0002\u13f1\u13f0\u0003\u0002\u0002\u0002\u13f2",
    "\u13f8\u0003\u0002\u0002\u0002\u13f3\u13f6\u0007\u01f1\u0002\u0002\u13f4",
    "\u13f7\u0007\u01e5\u0002\u0002\u13f5\u13f7\u0005\u02ca\u0166\u0002\u13f6",
    "\u13f4\u0003\u0002\u0002\u0002\u13f6\u13f5\u0003\u0002\u0002\u0002\u13f7",
    "\u13f9\u0003\u0002\u0002\u0002\u13f8\u13f3\u0003\u0002\u0002\u0002\u13f8",
    "\u13f9\u0003\u0002\u0002\u0002\u13f9\u13fa\u0003\u0002\u0002\u0002\u13fa",
    "\u13fc\u0007\u01ec\u0002\u0002\u13fb\u13ee\u0003\u0002\u0002\u0002\u13fb",
    "\u13fc\u0003\u0002\u0002\u0002\u13fc\u140c\u0003\u0002\u0002\u0002\u13fd",
    "\u140a\u0007\u0184\u0002\u0002\u13fe\u140b\u0007Z\u0002\u0002\u13ff",
    "\u140b\u0007\u00a2\u0002\u0002\u1400\u140b\u0007\u00de\u0002\u0002\u1401",
    "\u1408\u0007\u014d\u0002\u0002\u1402\u1405\u0007\u01eb\u0002\u0002\u1403",
    "\u1406\u0007\u01e5\u0002\u0002\u1404\u1406\u0005\u02ca\u0166\u0002\u1405",
    "\u1403\u0003\u0002\u0002\u0002\u1405\u1404\u0003\u0002\u0002\u0002\u1406",
    "\u1407\u0003\u0002\u0002\u0002\u1407\u1409\u0007\u01ec\u0002\u0002\u1408",
    "\u1402\u0003\u0002\u0002\u0002\u1408\u1409\u0003\u0002\u0002\u0002\u1409",
    "\u140b\u0003\u0002\u0002\u0002\u140a\u13fe\u0003\u0002\u0002\u0002\u140a",
    "\u13ff\u0003\u0002\u0002\u0002\u140a\u1400\u0003\u0002\u0002\u0002\u140a",
    "\u1401\u0003\u0002\u0002\u0002\u140b\u140d\u0003\u0002\u0002\u0002\u140c",
    "\u13fd\u0003\u0002\u0002\u0002\u140c\u140d\u0003\u0002\u0002\u0002\u140d",
    "\u141b\u0003\u0002\u0002\u0002\u140e\u141b\u0005\u02d2\u016a\u0002\u140f",
    "\u1410\u0007Y\u0002\u0002\u1410\u141b\u0005\u02d6\u016c\u0002\u1411",
    "\u141b\u0005\u02d6\u016c\u0002\u1412\u141b\u0007\u00fd\u0002\u0002\u1413",
    "\u141b\u0007\u018b\u0002\u0002\u1414\u141b\u0007\u008d\u0002\u0002\u1415",
    "\u141b\u0007\\\u0002\u0002\u1416\u141b\u0007\u0157\u0002\u0002\u1417",
    "\u141b\u0007\u00df\u0002\u0002\u1418\u141b\u0007\u00d9\u0002\u0002\u1419",
    "\u141b\u0007d\u0002\u0002\u141a\u13dc\u0003\u0002\u0002\u0002\u141a",
    "\u13e7\u0003\u0002\u0002\u0002\u141a\u140e\u0003\u0002\u0002\u0002\u141a",
    "\u140f\u0003\u0002\u0002\u0002\u141a\u1411\u0003\u0002\u0002\u0002\u141a",
    "\u1412\u0003\u0002\u0002\u0002\u141a\u1413\u0003\u0002\u0002\u0002\u141a",
    "\u1414\u0003\u0002\u0002\u0002\u141a\u1415\u0003\u0002\u0002\u0002\u141a",
    "\u1416\u0003\u0002\u0002\u0002\u141a\u1417\u0003\u0002\u0002\u0002\u141a",
    "\u1418\u0003\u0002\u0002\u0002\u141a\u1419\u0003\u0002\u0002\u0002\u141b",
    "\u02d1\u0003\u0002\u0002\u0002\u141c\u141d\tO\u0002\u0002\u141d\u02d3",
    "\u0003\u0002\u0002\u0002\u141e\u141f\u0007\u01f0\u0002\u0002\u141f\u1420",
    "\u0005\u02d2\u016a\u0002\u1420\u02d5\u0003\u0002\u0002\u0002\u1421\u1422",
    "\tP\u0002\u0002\u1422\u02d7\u0003\u0002\u0002\u0002\u1423\u1424\u0005",
    "\u02b2\u015a\u0002\u1424\u02d9\u0003\u0002\u0002\u0002\u1425\u1428\u0005",
    "\u02e6\u0174\u0002\u1426\u1428\u0007\u01e8\u0002\u0002\u1427\u1425\u0003",
    "\u0002\u0002\u0002\u1427\u1426\u0003\u0002\u0002\u0002\u1428\u02db\u0003",
    "\u0002\u0002\u0002\u1429\u1431\u0007\u01fb\u0002\u0002\u142a\u142b\u0007",
    "\u01f9\u0002\u0002\u142b\u1431\u0007\u01ff\u0002\u0002\u142c\u142d\u0007",
    "\u01fe\u0002\u0002\u142d\u1431\u0007\u0202\u0002\u0002\u142e\u142f\u0007",
    "\u01fc\u0002\u0002\u142f\u1431\u0007\u0202\u0002\u0002\u1430\u1429\u0003",
    "\u0002\u0002\u0002\u1430\u142a\u0003\u0002\u0002\u0002\u1430\u142c\u0003",
    "\u0002\u0002\u0002\u1430\u142e\u0003\u0002\u0002\u0002\u1431\u02dd\u0003",
    "\u0002\u0002\u0002\u1432\u1436\u0007\u01fa\u0002\u0002\u1433\u1434\u0007",
    "\u01ff\u0002\u0002\u1434\u1436\u0007\u0202\u0002\u0002\u1435\u1432\u0003",
    "\u0002\u0002\u0002\u1435\u1433\u0003\u0002\u0002\u0002\u1436\u02df\u0003",
    "\u0002\u0002\u0002\u1437\u143b\u0007\u01f8\u0002\u0002\u1438\u1439\u0007",
    "\u01f9\u0002\u0002\u1439\u143b\u0007\u0202\u0002\u0002\u143a\u1437\u0003",
    "\u0002\u0002\u0002\u143a\u1438\u0003\u0002\u0002\u0002\u143b\u02e1\u0003",
    "\u0002\u0002\u0002\u143c\u1440\u0007\u0200\u0002\u0002\u143d\u143e\u0007",
    "\u0201\u0002\u0002\u143e\u1440\u0007\u0201\u0002\u0002\u143f\u143c\u0003",
    "\u0002\u0002\u0002\u143f\u143d\u0003\u0002\u0002\u0002\u1440\u02e3\u0003",
    "\u0002\u0002\u0002\u1441\u1442\u0007\u01eb\u0002\u0002\u1442\u1443\u0007",
    "\u01ef\u0002\u0002\u1443\u1444\u0007\u01ec\u0002\u0002\u1444\u02e5\u0003",
    "\u0002\u0002\u0002\u1445\u1446\tQ\u0002\u0002\u1446\u02e7\u0003\u0002",
    "\u0002\u0002\u02a9\u02eb\u02f0\u02f7\u0301\u0303\u0307\u031c\u0327\u032c",
    "\u0331\u0336\u0338\u0342\u0347\u034f\u0351\u0355\u0359\u035e\u0363\u0368",
    "\u036c\u037a\u037f\u0382\u0388\u0391\u039f\u03a7\u03b0\u03b3\u03b8\u03bd",
    "\u03c2\u03c7\u03cf\u03d6\u03d8\u03dc\u03e2\u03e7\u03f2\u03fc\u0401\u040d",
    "\u0412\u0417\u041a\u0428\u0433\u0438\u043d\u0442\u0444\u044e\u0453\u0456",
    "\u045a\u045f\u0465\u0474\u0479\u047e\u0480\u0485\u048c\u048f\u0492\u0495",
    "\u049f\u04ab\u04af\u04b2\u04bb\u04c3\u04cb\u04ce\u04d5\u04d9\u04e0\u04e6",
    "\u050f\u052b\u0532\u0537\u0542\u0545\u0550\u0558\u055c\u0566\u0569\u056d",
    "\u0570\u0575\u057a\u057e\u0588\u0592\u0598\u05a3\u05a8\u05ac\u05b4\u05bc",
    "\u05c1\u05c4\u05c6\u05c9\u05d2\u05d7\u05dc\u05df\u05e2\u05e6\u05e9\u05f1",
    "\u05f6\u05fb\u0602\u060c\u061c\u0622\u062c\u0636\u063d\u0642\u0648\u0652",
    "\u0657\u065e\u0663\u0669\u066c\u066f\u0680\u0685\u068e\u0693\u0699\u069c",
    "\u06a3\u06a6\u06ad\u06b2\u06b6\u06bb\u06c0\u06ca\u06d0\u06da\u06df\u06e6",
    "\u06ec\u06f0\u06f3\u06f6\u0707\u070c\u0714\u0722\u0729\u0738\u073f\u0741",
    "\u0754\u0764\u076d\u0772\u0776\u0779\u0783\u078f\u0795\u079d\u07a1\u07a4",
    "\u07b2\u07b6\u07bb\u07be\u07cb\u07cf\u07db\u07e0\u07e4\u07e8\u07ee\u07f1",
    "\u07f4\u080f\u0815\u0819\u081f\u082b\u0834\u0836\u083c\u0840\u0843\u084c",
    "\u0857\u085b\u085e\u0862\u086a\u0873\u087c\u087e\u088c\u08a0\u08a4\u08ab",
    "\u08af\u08b3\u08b7\u08c3\u08c7\u08d5\u08db\u08e2\u08e7\u08f1\u08f7\u08f9",
    "\u0902\u090c\u0911\u0920\u0924\u0927\u092b\u0933\u0935\u0939\u0941\u0948",
    "\u094d\u094f\u0954\u0959\u0961\u0968\u096c\u096f\u097b\u0981\u0989\u0993",
    "\u099e\u09a1\u09a8\u09ab\u09b2\u09bd\u09c3\u09c7\u09d1\u09d4\u09da\u09e5",
    "\u09e7\u09e9\u09ec\u09f0\u09f3\u09f7\u09fb\u0a00\u0a0b\u0a0f\u0a17\u0a1a",
    "\u0a24\u0a2e\u0a33\u0a39\u0a3d\u0a40\u0a48\u0a4b\u0a4f\u0a53\u0a58\u0a5b",
    "\u0a5f\u0a63\u0a67\u0a73\u0a83\u0a8b\u0a90\u0a94\u0a98\u0a9f\u0aa3\u0aa7",
    "\u0aaa\u0aae\u0ab0\u0ab4\u0ab9\u0abb\u0ac6\u0ac8\u0ad2\u0ad9\u0ade\u0ae3",
    "\u0aea\u0af0\u0afa\u0afc\u0b01\u0b05\u0b08\u0b0b\u0b0f\u0b14\u0b18\u0b1a",
    "\u0b27\u0b2e\u0b3c\u0b3f\u0b49\u0b4d\u0b55\u0b61\u0b6b\u0b70\u0b7a\u0b82",
    "\u0b85\u0b8b\u0b8f\u0b94\u0b9e\u0ba3\u0bb0\u0bbc\u0bc1\u0bcb\u0bd0\u0bd2",
    "\u0bd7\u0bdb\u0be1\u0be5\u0bf2\u0bf8\u0c01\u0c0e\u0c16\u0c1f\u0c23\u0c28",
    "\u0c33\u0c35\u0c45\u0c4a\u0c50\u0c56\u0c68\u0c6f\u0c72\u0c7a\u0c83\u0c85",
    "\u0c89\u0c8c\u0c91\u0c93\u0c97\u0ca3\u0cac\u0cb4\u0cb9\u0cbd\u0cc2\u0cc5",
    "\u0ccd\u0cd5\u0cde\u0ce1\u0ce4\u0cec\u0cf6\u0d02\u0d09\u0d0d\u0d11\u0d14",
    "\u0d17\u0d1c\u0d21\u0d24\u0d27\u0d2d\u0d30\u0d36\u0d39\u0d3c\u0d41\u0d44",
    "\u0d4c\u0d52\u0d5c\u0d61\u0d6a\u0d74\u0d78\u0d7a\u0d7d\u0d89\u0d8d\u0d90",
    "\u0da4\u0da9\u0dae\u0db5\u0db8\u0dc1\u0dc8\u0dcd\u0dd1\u0dd9\u0ddf\u0de7",
    "\u0dea\u0df2\u0dfa\u0dfd\u0e00\u0e09\u0e0f\u0e15\u0e17\u0e24\u0e26\u0e2f",
    "\u0e31\u0e35\u0e3b\u0e3f\u0e4d\u0e53\u0e64\u0e68\u0e7e\u0e84\u0e8a\u0e8f",
    "\u0e92\u0e94\u0e98\u0ea3\u0ea7\u0eae\u0eb3\u0ec1\u0ed2\u0eda\u0ee8\u0ef9",
    "\u0efc\u0efe\u0f00\u0f08\u0f10\u0f17\u0f1b\u0f24\u0f29\u0f2d\u0f35\u0f39",
    "\u0f40\u0f49\u0f57\u0f64\u0f69\u0f7e\u0f87\u0f8c\u0f8f\u0f96\u0f99\u0f9d",
    "\u0fa0\u0fa7\u0faa\u0fb0\u0fb3\u0fb7\u0fba\u0fc1\u0fc6\u0fd7\u0fd9\u0fdd",
    "\u0fe5\u0ff1\u0ff7\u1001\u1011\u1015\u101e\u1024\u1032\u103d\u1041\u1044",
    "\u104d\u1053\u105d\u1065\u1068\u106b\u1074\u1079\u1082\u1088\u108d\u1090",
    "\u1095\u109a\u109e\u10a4\u10aa\u10b3\u10b8\u10c0\u10c4\u10c9\u10cf\u10d6",
    "\u10db\u10e2\u10e6\u10eb\u10f3\u10f6\u10f9\u10fc\u1100\u1105\u110a\u110e",
    "\u1115\u111a\u111c\u1121\u1127\u112a\u112e\u1130\u113b\u113f\u1141\u114c",
    "\u1157\u1160\u1163\u1167\u116a\u116e\u117b\u1180\u1188\u118f\u1194\u1198",
    "\u119d\u11a2\u11a5\u11ac\u11b6\u11be\u11c2\u11cc\u11cf\u11d1\u11db\u11dd",
    "\u11e3\u11e9\u11eb\u11f9\u11fb\u1203\u120c\u1215\u121f\u1223\u1228\u122c",
    "\u122f\u1233\u123a\u1246\u1251\u1254\u1258\u126b\u1270\u1277\u1284\u128e",
    "\u1293\u129c\u12a4\u12ac\u12b2\u12b7\u12bc\u12c0\u12c6\u12ca\u12cf\u12d8",
    "\u12df\u12e6\u12f2\u12f6\u12fc\u1301\u1306\u1308\u130d\u1311\u1316\u131d",
    "\u1322\u1324\u1326\u1330\u1335\u1339\u133c\u1340\u1349\u134f\u1353\u1355",
    "\u1359\u135d\u1361\u1369\u1371\u1373\u1379\u137c\u1394\u139b\u13bc\u13c1",
    "\u13c4\u13c9\u13cb\u13d1\u13d8\u13df\u13e5\u13eb\u13f1\u13f6\u13f8\u13fb",
    "\u1405\u1408\u140a\u140c\u141a\u1427\u1430\u1435\u143a\u143f"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'..'", null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, "'.'", null, null, null, 
                     null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", 
                     "'-'", "','", "'/'", "'@'", "':='", null, "':'", "';'", 
                     "'<='", "'<'", "'>='", null, "'^'", "'~'", "'!'", "'>'", 
                     "'||'", "'|'", "'='", "'['", "']'", "'_'", null, null, 
                     null, null, null, "'@!'" ];

var symbolicNames = [ null, null, "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", 
                      "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", 
                      "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", 
                      "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
                      "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", 
                      "BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", 
                      "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", "BY", 
                      "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", 
                      "CASCADE", "CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", 
                      "CHECK", "CHR", "CLOB", "CLOSE", "CLUSTER", "COLLECT", 
                      "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
                      "COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", 
                      "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
                      "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
                      "CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
                      "CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
                      "DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", 
                      "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", 
                      "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
                      "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
                      "ENCODING", "END", "ENTITYESCAPING", "ERR", "ERRORS", 
                      "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
                      "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", 
                      "EXIT", "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", 
                      "FALSE", "FETCH", "FINAL", "FIRST", "FIRST_VALUE", 
                      "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", 
                      "FORCE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", 
                      "GROUP", "GROUPING", "HASH", "HAVING", "HIDE", "HOUR", 
                      "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", 
                      "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", 
                      "INDICES", "INFINITE", "INLINE", "INNER", "INOUT", 
                      "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", 
                      "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
                      "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", 
                      "LAST", "LAST_VALUE", "LEADING", "LEFT", "LEVEL", 
                      "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", 
                      "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", 
                      "LONG", "LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", 
                      "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", 
                      "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
                      "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
                      "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEW", 
                      "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
                      "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", 
                      "NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", 
                      "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", "OLD", 
                      "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", "ORDER", 
                      "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
                      "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", 
                      "PARTITION", "PASSING", "PATH", "PERCENT_ROWTYPE", 
                      "PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", "PLS_INTEGER", 
                      "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", 
                      "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", 
                      "RAW", "READ", "REAL", "RECORD", "REF", "REFERENCE", 
                      "REFERENCING", "REJECT", "RELIES_ON", "RENAME", "REPLACE", 
                      "RESPECT", "RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", 
                      "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", 
                      "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", 
                      "RULES", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", 
                      "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", 
                      "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
                      "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
                      "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
                      "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
                      "SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", 
                      "SOME", "SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", 
                      "START", "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", 
                      "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", 
                      "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", 
                      "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
                      "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
                      "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", 
                      "TRANSLATE", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
                      "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", 
                      "UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", 
                      "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", "VARYING", 
                      "VERSION", "VERSIONS", "WAIT", "WARNING", "WELLFORMED", 
                      "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", 
                      "WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", 
                      "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
                      "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", 
                      "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", 
                      "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
                      "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", 
                      "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", 
                      "REGR_", "STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
                      "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", 
                      "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
                      "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
                      "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "REGULAR_ID", "ZV" ];

var ruleNames =  [ "swallow_to_semi", "compilation_unit", "sql_script", 
                   "unit_statement", "drop_function", "alter_function", 
                   "create_function_body", "parallel_enable_clause", "partition_by_clause", 
                   "result_cache_clause", "relies_on_part", "streaming_clause", 
                   "drop_package", "alter_package", "create_package", "package_body", 
                   "package_spec", "package_obj_spec", "procedure_spec", 
                   "function_spec", "package_obj_body", "drop_procedure", 
                   "alter_procedure", "create_procedure_body", "drop_trigger", 
                   "alter_trigger", "create_trigger", "trigger_follows_clause", 
                   "trigger_when_clause", "simple_dml_trigger", "for_each_row", 
                   "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
                   "routine_clause", "compound_trigger_block", "timing_point_section", 
                   "non_dml_event", "dml_event_clause", "dml_event_element", 
                   "dml_event_nested_clause", "referencing_clause", "referencing_element", 
                   "drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
                   "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
                   "attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "drop_sequence", "alter_sequence", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "invoker_rights_clause", "compiler_parameters_clause", 
                   "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
                   "c_parameters_clause", "parameter", "default_value_part", 
                   "declare_spec", "variable_declaration", "subtype_declaration", 
                   "cursor_declaration", "parameter_spec", "exception_declaration", 
                   "pragma_declaration", "record_declaration", "record_type_dec", 
                   "field_spec", "record_var_dec", "table_declaration", 
                   "table_type_dec", "table_indexed_by_part", "varray_type_def", 
                   "table_var_dec", "seq_of_statements", "label_declaration", 
                   "statement", "assignment_statement", "continue_statement", 
                   "exit_statement", "goto_statement", "if_statement", "elsif_part", 
                   "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "body", "exception_handler", "trigger_block", 
                   "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
                   "data_manipulation_language_statements", "cursor_manipulation_statements", 
                   "close_statement", "open_statement", "fetch_statement", 
                   "open_for_statement", "transaction_control_statements", 
                   "set_transaction_command", "set_constraint_command", 
                   "commit_statement", "write_clause", "rollback_statement", 
                   "savepoint_statement", "explain_statement", "select_statement", 
                   "subquery_factoring_clause", "factoring_element", "search_clause", 
                   "cycle_clause", "subquery", "subquery_operation_part", 
                   "query_block", "selected_element", "from_clause", "table_ref_list", 
                   "table_ref", "table_ref_aux", "join_clause", "join_on_part", 
                   "join_using_part", "outer_join_type", "query_partition_clause", 
                   "flashback_query_clause", "pivot_clause", "pivot_element", 
                   "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
                   "pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", 
                   "unpivot_in_elements", "hierarchical_query_clause", "start_part", 
                   "group_by_clause", "group_by_elements", "rollup_cube_clause", 
                   "grouping_sets_clause", "grouping_sets_elements", "having_clause", 
                   "model_clause", "cell_reference_options", "return_rows_clause", 
                   "reference_model", "main_model", "model_column_clauses", 
                   "model_column_partition_part", "model_column_list", "model_column", 
                   "model_rules_clause", "model_rules_part", "model_rules_element", 
                   "cell_assignment", "model_iterate_clause", "until_part", 
                   "order_by_clause", "order_by_elements", "for_update_clause", 
                   "for_update_of_part", "for_update_options", "limit_clause", 
                   "update_statement", "update_set_clause", "column_based_update_set_clause", 
                   "delete_statement", "insert_statement", "single_table_insert", 
                   "multi_table_insert", "multi_table_element", "conditional_insert_clause", 
                   "conditional_insert_when_part", "conditional_insert_else_part", 
                   "insert_into_clause", "values_clause", "merge_statement", 
                   "merge_update_clause", "merge_element", "merge_update_delete_part", 
                   "merge_insert_clause", "selected_tableview", "lock_table_statement", 
                   "wait_nowait_part", "lock_table_element", "lock_mode", 
                   "general_table_ref", "static_returning_clause", "error_logging_clause", 
                   "error_logging_into_part", "error_logging_reject_part", 
                   "dml_table_expression_clause", "table_collection_expression", 
                   "subquery_restriction_clause", "sample_clause", "seed_part", 
                   "cursor_expression", "expression_list", "condition", 
                   "expression", "is_part", "cursor_part", "multiset_type", 
                   "relational_operator", "like_type", "like_escape_part", 
                   "in_elements", "between_elements", "concatenation", "binary_expression", 
                   "interval_expression", "model_expression", "model_expression_element", 
                   "single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
                   "multi_column_for_loop", "unary_expression", "case_statement", 
                   "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
                   "searched_case_when_part", "case_else_part", "atom", 
                   "expression_or_vector", "vector_expr", "quantified_expression", 
                   "standard_function", "aggregate_windowed_function", "over_clause_keyword", 
                   "within_or_over_clause_keyword", "standard_prediction_function_keyword", 
                   "over_clause", "windowing_clause", "windowing_type", 
                   "windowing_elements", "using_clause", "using_element", 
                   "collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
                   "xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
                   "xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "exit_command", "prompt_command", 
                   "show_errors_command", "partition_extension_clause", 
                   "column_alias", "table_alias", "alias_quoted_string", 
                   "where_clause", "current_of_clause", "into_clause", "xml_column_name", 
                   "cost_class_name", "attribute_name", "savepoint_name", 
                   "rollback_segment_name", "table_var_name", "schema_name", 
                   "routine_name", "package_name", "implementation_type_name", 
                   "parameter_name", "reference_model_name", "main_model_name", 
                   "aggregate_function_name", "query_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "function_name", "procedure_name", "trigger_name", "variable_name", 
                   "index_name", "cursor_name", "record_name", "collection_name", 
                   "link_name", "column_name", "tableview_name", "dot_id", 
                   "star", "keep_clause", "function_argument", "function_argument_analytic", 
                   "function_argument_modeling", "respect_or_ignore_nulls", 
                   "argument", "type_spec", "datatype", "precision_part", 
                   "native_datatype_element", "bind_variable", "general_element", 
                   "table_element", "constant", "numeric", "numeric_negative", 
                   "quoted_string", "r_id", "id_expression", "not_equal_op", 
                   "greater_than_or_equals_op", "less_than_or_equals_op", 
                   "concatenation_op", "outer_join_sign", "regular_id" ];

function plsqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

plsqlParser.prototype = Object.create(antlr4.Parser.prototype);
plsqlParser.prototype.constructor = plsqlParser;

Object.defineProperty(plsqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

plsqlParser.EOF = antlr4.Token.EOF;
plsqlParser.T__0 = 1;
plsqlParser.A_LETTER = 2;
plsqlParser.ADD = 3;
plsqlParser.AFTER = 4;
plsqlParser.AGENT = 5;
plsqlParser.AGGREGATE = 6;
plsqlParser.ALL = 7;
plsqlParser.ALTER = 8;
plsqlParser.ANALYZE = 9;
plsqlParser.AND = 10;
plsqlParser.ANY = 11;
plsqlParser.ARRAY = 12;
plsqlParser.AS = 13;
plsqlParser.ASC = 14;
plsqlParser.ASSOCIATE = 15;
plsqlParser.AT = 16;
plsqlParser.ATTRIBUTE = 17;
plsqlParser.AUDIT = 18;
plsqlParser.AUTHID = 19;
plsqlParser.AUTO = 20;
plsqlParser.AUTOMATIC = 21;
plsqlParser.AUTONOMOUS_TRANSACTION = 22;
plsqlParser.BATCH = 23;
plsqlParser.BEFORE = 24;
plsqlParser.BEGIN = 25;
plsqlParser.BETWEEN = 26;
plsqlParser.BFILE = 27;
plsqlParser.BINARY_DOUBLE = 28;
plsqlParser.BINARY_FLOAT = 29;
plsqlParser.BINARY_INTEGER = 30;
plsqlParser.BLOB = 31;
plsqlParser.BLOCK = 32;
plsqlParser.BODY = 33;
plsqlParser.BOOLEAN = 34;
plsqlParser.BOTH = 35;
plsqlParser.BREADTH = 36;
plsqlParser.BULK = 37;
plsqlParser.BY = 38;
plsqlParser.BYTE = 39;
plsqlParser.C_LETTER = 40;
plsqlParser.CACHE = 41;
plsqlParser.CALL = 42;
plsqlParser.CANONICAL = 43;
plsqlParser.CASCADE = 44;
plsqlParser.CASE = 45;
plsqlParser.CAST = 46;
plsqlParser.CHAR = 47;
plsqlParser.CHAR_CS = 48;
plsqlParser.CHARACTER = 49;
plsqlParser.CHECK = 50;
plsqlParser.CHR = 51;
plsqlParser.CLOB = 52;
plsqlParser.CLOSE = 53;
plsqlParser.CLUSTER = 54;
plsqlParser.COLLECT = 55;
plsqlParser.COLUMNS = 56;
plsqlParser.COMMENT = 57;
plsqlParser.COMMIT = 58;
plsqlParser.COMMITTED = 59;
plsqlParser.COMPATIBILITY = 60;
plsqlParser.COMPILE = 61;
plsqlParser.COMPOUND = 62;
plsqlParser.CONNECT = 63;
plsqlParser.CONNECT_BY_ROOT = 64;
plsqlParser.CONSTANT = 65;
plsqlParser.CONSTRAINT = 66;
plsqlParser.CONSTRAINTS = 67;
plsqlParser.CONSTRUCTOR = 68;
plsqlParser.CONTENT = 69;
plsqlParser.CONTEXT = 70;
plsqlParser.CONTINUE = 71;
plsqlParser.CONVERT = 72;
plsqlParser.CORRUPT_XID = 73;
plsqlParser.CORRUPT_XID_ALL = 74;
plsqlParser.COST = 75;
plsqlParser.COUNT = 76;
plsqlParser.CREATE = 77;
plsqlParser.CROSS = 78;
plsqlParser.CUBE = 79;
plsqlParser.CURRENT = 80;
plsqlParser.CURRENT_USER = 81;
plsqlParser.CURSOR = 82;
plsqlParser.CUSTOMDATUM = 83;
plsqlParser.CYCLE = 84;
plsqlParser.DATA = 85;
plsqlParser.DATABASE = 86;
plsqlParser.DATE = 87;
plsqlParser.DAY = 88;
plsqlParser.DB_ROLE_CHANGE = 89;
plsqlParser.DBTIMEZONE = 90;
plsqlParser.DDL = 91;
plsqlParser.DEBUG = 92;
plsqlParser.DEC = 93;
plsqlParser.DECIMAL = 94;
plsqlParser.DECLARE = 95;
plsqlParser.DECOMPOSE = 96;
plsqlParser.DECREMENT = 97;
plsqlParser.DEFAULT = 98;
plsqlParser.DEFAULTS = 99;
plsqlParser.DEFERRED = 100;
plsqlParser.DEFINER = 101;
plsqlParser.DELETE = 102;
plsqlParser.DEPTH = 103;
plsqlParser.DESC = 104;
plsqlParser.DETERMINISTIC = 105;
plsqlParser.DIMENSION = 106;
plsqlParser.DISABLE = 107;
plsqlParser.DISASSOCIATE = 108;
plsqlParser.DISTINCT = 109;
plsqlParser.DOCUMENT = 110;
plsqlParser.DOUBLE = 111;
plsqlParser.DROP = 112;
plsqlParser.DSINTERVAL_UNCONSTRAINED = 113;
plsqlParser.EACH = 114;
plsqlParser.ELEMENT = 115;
plsqlParser.ELSE = 116;
plsqlParser.ELSIF = 117;
plsqlParser.EMPTY = 118;
plsqlParser.ENABLE = 119;
plsqlParser.ENCODING = 120;
plsqlParser.END = 121;
plsqlParser.ENTITYESCAPING = 122;
plsqlParser.ERR = 123;
plsqlParser.ERRORS = 124;
plsqlParser.ESCAPE = 125;
plsqlParser.EVALNAME = 126;
plsqlParser.EXCEPTION = 127;
plsqlParser.EXCEPTION_INIT = 128;
plsqlParser.EXCEPTIONS = 129;
plsqlParser.EXCLUDE = 130;
plsqlParser.EXCLUSIVE = 131;
plsqlParser.EXECUTE = 132;
plsqlParser.EXISTS = 133;
plsqlParser.EXIT = 134;
plsqlParser.EXPLAIN = 135;
plsqlParser.EXTERNAL = 136;
plsqlParser.EXTRACT = 137;
plsqlParser.FAILURE = 138;
plsqlParser.FALSE = 139;
plsqlParser.FETCH = 140;
plsqlParser.FINAL = 141;
plsqlParser.FIRST = 142;
plsqlParser.FIRST_VALUE = 143;
plsqlParser.FLOAT = 144;
plsqlParser.FOLLOWING = 145;
plsqlParser.FOLLOWS = 146;
plsqlParser.FOR = 147;
plsqlParser.FORALL = 148;
plsqlParser.FORCE = 149;
plsqlParser.FROM = 150;
plsqlParser.FULL = 151;
plsqlParser.FUNCTION = 152;
plsqlParser.GOTO = 153;
plsqlParser.GRANT = 154;
plsqlParser.GROUP = 155;
plsqlParser.GROUPING = 156;
plsqlParser.HASH = 157;
plsqlParser.HAVING = 158;
plsqlParser.HIDE = 159;
plsqlParser.HOUR = 160;
plsqlParser.IF = 161;
plsqlParser.IGNORE = 162;
plsqlParser.IMMEDIATE = 163;
plsqlParser.IN = 164;
plsqlParser.INCLUDE = 165;
plsqlParser.INCLUDING = 166;
plsqlParser.INCREMENT = 167;
plsqlParser.INDENT = 168;
plsqlParser.INDEX = 169;
plsqlParser.INDEXED = 170;
plsqlParser.INDICATOR = 171;
plsqlParser.INDICES = 172;
plsqlParser.INFINITE = 173;
plsqlParser.INLINE = 174;
plsqlParser.INNER = 175;
plsqlParser.INOUT = 176;
plsqlParser.INSERT = 177;
plsqlParser.INSTANTIABLE = 178;
plsqlParser.INSTEAD = 179;
plsqlParser.INT = 180;
plsqlParser.INTEGER = 181;
plsqlParser.INTERSECT = 182;
plsqlParser.INTERVAL = 183;
plsqlParser.INTO = 184;
plsqlParser.INVALIDATE = 185;
plsqlParser.IS = 186;
plsqlParser.ISOLATION = 187;
plsqlParser.ITERATE = 188;
plsqlParser.JAVA = 189;
plsqlParser.JOIN = 190;
plsqlParser.KEEP = 191;
plsqlParser.LANGUAGE = 192;
plsqlParser.LAST = 193;
plsqlParser.LAST_VALUE = 194;
plsqlParser.LEADING = 195;
plsqlParser.LEFT = 196;
plsqlParser.LEVEL = 197;
plsqlParser.LIBRARY = 198;
plsqlParser.LIKE = 199;
plsqlParser.LIKE2 = 200;
plsqlParser.LIKE4 = 201;
plsqlParser.LIKEC = 202;
plsqlParser.LIMIT = 203;
plsqlParser.LOCAL = 204;
plsqlParser.LOCK = 205;
plsqlParser.LOCKED = 206;
plsqlParser.LOG = 207;
plsqlParser.LOGOFF = 208;
plsqlParser.LOGON = 209;
plsqlParser.LONG = 210;
plsqlParser.LOOP = 211;
plsqlParser.MAIN = 212;
plsqlParser.MAP = 213;
plsqlParser.MATCHED = 214;
plsqlParser.MAXVALUE = 215;
plsqlParser.MEASURES = 216;
plsqlParser.MEMBER = 217;
plsqlParser.MERGE = 218;
plsqlParser.MINUS = 219;
plsqlParser.MINUTE = 220;
plsqlParser.MINVALUE = 221;
plsqlParser.MLSLABEL = 222;
plsqlParser.MODE = 223;
plsqlParser.MODEL = 224;
plsqlParser.MODIFY = 225;
plsqlParser.MONTH = 226;
plsqlParser.MULTISET = 227;
plsqlParser.NAME = 228;
plsqlParser.NAN = 229;
plsqlParser.NATURAL = 230;
plsqlParser.NATURALN = 231;
plsqlParser.NAV = 232;
plsqlParser.NCHAR = 233;
plsqlParser.NCHAR_CS = 234;
plsqlParser.NCLOB = 235;
plsqlParser.NESTED = 236;
plsqlParser.NEW = 237;
plsqlParser.NO = 238;
plsqlParser.NOAUDIT = 239;
plsqlParser.NOCACHE = 240;
plsqlParser.NOCOPY = 241;
plsqlParser.NOCYCLE = 242;
plsqlParser.NOENTITYESCAPING = 243;
plsqlParser.NOMAXVALUE = 244;
plsqlParser.NOMINVALUE = 245;
plsqlParser.NONE = 246;
plsqlParser.NOORDER = 247;
plsqlParser.NOSCHEMACHECK = 248;
plsqlParser.NOT = 249;
plsqlParser.NOWAIT = 250;
plsqlParser.NULL = 251;
plsqlParser.NULLS = 252;
plsqlParser.NUMBER = 253;
plsqlParser.NUMERIC = 254;
plsqlParser.NVARCHAR2 = 255;
plsqlParser.OBJECT = 256;
plsqlParser.OF = 257;
plsqlParser.OFF = 258;
plsqlParser.OID = 259;
plsqlParser.OLD = 260;
plsqlParser.ON = 261;
plsqlParser.ONLY = 262;
plsqlParser.OPEN = 263;
plsqlParser.OPTION = 264;
plsqlParser.OR = 265;
plsqlParser.ORADATA = 266;
plsqlParser.ORDER = 267;
plsqlParser.ORDINALITY = 268;
plsqlParser.OSERROR = 269;
plsqlParser.OUT = 270;
plsqlParser.OUTER = 271;
plsqlParser.OVER = 272;
plsqlParser.OVERRIDING = 273;
plsqlParser.PACKAGE = 274;
plsqlParser.PARALLEL_ENABLE = 275;
plsqlParser.PARAMETERS = 276;
plsqlParser.PARENT = 277;
plsqlParser.PARTITION = 278;
plsqlParser.PASSING = 279;
plsqlParser.PATH = 280;
plsqlParser.PERCENT_ROWTYPE = 281;
plsqlParser.PERCENT_TYPE = 282;
plsqlParser.PIPELINED = 283;
plsqlParser.PIVOT = 284;
plsqlParser.PLAN = 285;
plsqlParser.PLS_INTEGER = 286;
plsqlParser.POSITIVE = 287;
plsqlParser.POSITIVEN = 288;
plsqlParser.PRAGMA = 289;
plsqlParser.PRECEDING = 290;
plsqlParser.PRECISION = 291;
plsqlParser.PRESENT = 292;
plsqlParser.PRIOR = 293;
plsqlParser.PROCEDURE = 294;
plsqlParser.RAISE = 295;
plsqlParser.RANGE = 296;
plsqlParser.RAW = 297;
plsqlParser.READ = 298;
plsqlParser.REAL = 299;
plsqlParser.RECORD = 300;
plsqlParser.REF = 301;
plsqlParser.REFERENCE = 302;
plsqlParser.REFERENCING = 303;
plsqlParser.REJECT = 304;
plsqlParser.RELIES_ON = 305;
plsqlParser.RENAME = 306;
plsqlParser.REPLACE = 307;
plsqlParser.RESPECT = 308;
plsqlParser.RESTRICT_REFERENCES = 309;
plsqlParser.RESULT = 310;
plsqlParser.RESULT_CACHE = 311;
plsqlParser.RETURN = 312;
plsqlParser.RETURNING = 313;
plsqlParser.REUSE = 314;
plsqlParser.REVERSE = 315;
plsqlParser.REVOKE = 316;
plsqlParser.RIGHT = 317;
plsqlParser.ROLLBACK = 318;
plsqlParser.ROLLUP = 319;
plsqlParser.ROW = 320;
plsqlParser.ROWID = 321;
plsqlParser.ROWS = 322;
plsqlParser.RULES = 323;
plsqlParser.SAMPLE = 324;
plsqlParser.SAVE = 325;
plsqlParser.SAVEPOINT = 326;
plsqlParser.SCHEMA = 327;
plsqlParser.SCHEMACHECK = 328;
plsqlParser.SCN = 329;
plsqlParser.SEARCH = 330;
plsqlParser.SECOND = 331;
plsqlParser.SEED = 332;
plsqlParser.SEGMENT = 333;
plsqlParser.SELECT = 334;
plsqlParser.SELF = 335;
plsqlParser.SEQUENCE = 336;
plsqlParser.SEQUENTIAL = 337;
plsqlParser.SERIALIZABLE = 338;
plsqlParser.SERIALLY_REUSABLE = 339;
plsqlParser.SERVERERROR = 340;
plsqlParser.SESSIONTIMEZONE = 341;
plsqlParser.SET = 342;
plsqlParser.SETS = 343;
plsqlParser.SETTINGS = 344;
plsqlParser.SHARE = 345;
plsqlParser.SHOW = 346;
plsqlParser.SHUTDOWN = 347;
plsqlParser.SIBLINGS = 348;
plsqlParser.SIGNTYPE = 349;
plsqlParser.SIMPLE_INTEGER = 350;
plsqlParser.SINGLE = 351;
plsqlParser.SIZE = 352;
plsqlParser.SKIP_ = 353;
plsqlParser.SMALLINT = 354;
plsqlParser.SNAPSHOT = 355;
plsqlParser.SOME = 356;
plsqlParser.SPECIFICATION = 357;
plsqlParser.SQLDATA = 358;
plsqlParser.SQLERROR = 359;
plsqlParser.STANDALONE = 360;
plsqlParser.START = 361;
plsqlParser.STARTUP = 362;
plsqlParser.STATEMENT = 363;
plsqlParser.STATEMENT_ID = 364;
plsqlParser.STATIC = 365;
plsqlParser.STATISTICS = 366;
plsqlParser.STRING = 367;
plsqlParser.SUBMULTISET = 368;
plsqlParser.SUBPARTITION = 369;
plsqlParser.SUBSTITUTABLE = 370;
plsqlParser.SUBTYPE = 371;
plsqlParser.SUCCESS = 372;
plsqlParser.SUSPEND = 373;
plsqlParser.TABLE = 374;
plsqlParser.THE = 375;
plsqlParser.THEN = 376;
plsqlParser.TIME = 377;
plsqlParser.TIMESTAMP = 378;
plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED = 379;
plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED = 380;
plsqlParser.TIMESTAMP_UNCONSTRAINED = 381;
plsqlParser.TIMEZONE_ABBR = 382;
plsqlParser.TIMEZONE_HOUR = 383;
plsqlParser.TIMEZONE_MINUTE = 384;
plsqlParser.TIMEZONE_REGION = 385;
plsqlParser.TO = 386;
plsqlParser.TRAILING = 387;
plsqlParser.TRANSACTION = 388;
plsqlParser.TRANSLATE = 389;
plsqlParser.TREAT = 390;
plsqlParser.TRIGGER = 391;
plsqlParser.TRIM = 392;
plsqlParser.TRUE = 393;
plsqlParser.TRUNCATE = 394;
plsqlParser.TYPE = 395;
plsqlParser.UNBOUNDED = 396;
plsqlParser.UNDER = 397;
plsqlParser.UNION = 398;
plsqlParser.UNIQUE = 399;
plsqlParser.UNLIMITED = 400;
plsqlParser.UNPIVOT = 401;
plsqlParser.UNTIL = 402;
plsqlParser.UPDATE = 403;
plsqlParser.UPDATED = 404;
plsqlParser.UPSERT = 405;
plsqlParser.UROWID = 406;
plsqlParser.USE = 407;
plsqlParser.USING = 408;
plsqlParser.VALIDATE = 409;
plsqlParser.VALUE = 410;
plsqlParser.VALUES = 411;
plsqlParser.VARCHAR = 412;
plsqlParser.VARCHAR2 = 413;
plsqlParser.VARIABLE = 414;
plsqlParser.VARRAY = 415;
plsqlParser.VARYING = 416;
plsqlParser.VERSION = 417;
plsqlParser.VERSIONS = 418;
plsqlParser.WAIT = 419;
plsqlParser.WARNING = 420;
plsqlParser.WELLFORMED = 421;
plsqlParser.WHEN = 422;
plsqlParser.WHENEVER = 423;
plsqlParser.WHERE = 424;
plsqlParser.WHILE = 425;
plsqlParser.WITH = 426;
plsqlParser.WITHIN = 427;
plsqlParser.WORK = 428;
plsqlParser.WRITE = 429;
plsqlParser.XML = 430;
plsqlParser.XMLAGG = 431;
plsqlParser.XMLATTRIBUTES = 432;
plsqlParser.XMLCAST = 433;
plsqlParser.XMLCOLATTVAL = 434;
plsqlParser.XMLELEMENT = 435;
plsqlParser.XMLEXISTS = 436;
plsqlParser.XMLFOREST = 437;
plsqlParser.XMLNAMESPACES = 438;
plsqlParser.XMLPARSE = 439;
plsqlParser.XMLPI = 440;
plsqlParser.XMLQUERY = 441;
plsqlParser.XMLROOT = 442;
plsqlParser.XMLSERIALIZE = 443;
plsqlParser.XMLTABLE = 444;
plsqlParser.YEAR = 445;
plsqlParser.YES = 446;
plsqlParser.YMINTERVAL_UNCONSTRAINED = 447;
plsqlParser.ZONE = 448;
plsqlParser.PREDICTION = 449;
plsqlParser.PREDICTION_BOUNDS = 450;
plsqlParser.PREDICTION_COST = 451;
plsqlParser.PREDICTION_DETAILS = 452;
plsqlParser.PREDICTION_PROBABILITY = 453;
plsqlParser.PREDICTION_SET = 454;
plsqlParser.CUME_DIST = 455;
plsqlParser.DENSE_RANK = 456;
plsqlParser.LISTAGG = 457;
plsqlParser.PERCENT_RANK = 458;
plsqlParser.PERCENTILE_CONT = 459;
plsqlParser.PERCENTILE_DISC = 460;
plsqlParser.RANK = 461;
plsqlParser.AVG = 462;
plsqlParser.CORR = 463;
plsqlParser.LAG = 464;
plsqlParser.LEAD = 465;
plsqlParser.MAX = 466;
plsqlParser.MEDIAN = 467;
plsqlParser.MIN = 468;
plsqlParser.NTILE = 469;
plsqlParser.RATIO_TO_REPORT = 470;
plsqlParser.ROW_NUMBER = 471;
plsqlParser.SUM = 472;
plsqlParser.VARIANCE = 473;
plsqlParser.REGR_ = 474;
plsqlParser.STDDEV = 475;
plsqlParser.VAR_ = 476;
plsqlParser.COVAR_ = 477;
plsqlParser.NATIONAL_CHAR_STRING_LIT = 478;
plsqlParser.BIT_STRING_LIT = 479;
plsqlParser.HEX_STRING_LIT = 480;
plsqlParser.DOUBLE_PERIOD = 481;
plsqlParser.PERIOD = 482;
plsqlParser.UNSIGNED_INTEGER = 483;
plsqlParser.APPROXIMATE_NUM_LIT = 484;
plsqlParser.CHAR_STRING = 485;
plsqlParser.DELIMITED_ID = 486;
plsqlParser.PERCENT = 487;
plsqlParser.AMPERSAND = 488;
plsqlParser.LEFT_PAREN = 489;
plsqlParser.RIGHT_PAREN = 490;
plsqlParser.DOUBLE_ASTERISK = 491;
plsqlParser.ASTERISK = 492;
plsqlParser.PLUS_SIGN = 493;
plsqlParser.MINUS_SIGN = 494;
plsqlParser.COMMA = 495;
plsqlParser.SOLIDUS = 496;
plsqlParser.AT_SIGN = 497;
plsqlParser.ASSIGN_OP = 498;
plsqlParser.BINDVAR = 499;
plsqlParser.COLON = 500;
plsqlParser.SEMICOLON = 501;
plsqlParser.LESS_THAN_OR_EQUALS_OP = 502;
plsqlParser.LESS_THAN_OP = 503;
plsqlParser.GREATER_THAN_OR_EQUALS_OP = 504;
plsqlParser.NOT_EQUAL_OP = 505;
plsqlParser.CARRET_OPERATOR_PART = 506;
plsqlParser.TILDE_OPERATOR_PART = 507;
plsqlParser.EXCLAMATION_OPERATOR_PART = 508;
plsqlParser.GREATER_THAN_OP = 509;
plsqlParser.CONCATENATION_OP = 510;
plsqlParser.VERTICAL_BAR = 511;
plsqlParser.EQUALS_OP = 512;
plsqlParser.LEFT_BRACKET = 513;
plsqlParser.RIGHT_BRACKET = 514;
plsqlParser.INTRODUCER = 515;
plsqlParser.SPACES = 516;
plsqlParser.SINGLE_LINE_COMMENT = 517;
plsqlParser.MULTI_LINE_COMMENT = 518;
plsqlParser.PROMPT = 519;
plsqlParser.REGULAR_ID = 520;
plsqlParser.ZV = 521;

plsqlParser.RULE_swallow_to_semi = 0;
plsqlParser.RULE_compilation_unit = 1;
plsqlParser.RULE_sql_script = 2;
plsqlParser.RULE_unit_statement = 3;
plsqlParser.RULE_drop_function = 4;
plsqlParser.RULE_alter_function = 5;
plsqlParser.RULE_create_function_body = 6;
plsqlParser.RULE_parallel_enable_clause = 7;
plsqlParser.RULE_partition_by_clause = 8;
plsqlParser.RULE_result_cache_clause = 9;
plsqlParser.RULE_relies_on_part = 10;
plsqlParser.RULE_streaming_clause = 11;
plsqlParser.RULE_drop_package = 12;
plsqlParser.RULE_alter_package = 13;
plsqlParser.RULE_create_package = 14;
plsqlParser.RULE_package_body = 15;
plsqlParser.RULE_package_spec = 16;
plsqlParser.RULE_package_obj_spec = 17;
plsqlParser.RULE_procedure_spec = 18;
plsqlParser.RULE_function_spec = 19;
plsqlParser.RULE_package_obj_body = 20;
plsqlParser.RULE_drop_procedure = 21;
plsqlParser.RULE_alter_procedure = 22;
plsqlParser.RULE_create_procedure_body = 23;
plsqlParser.RULE_drop_trigger = 24;
plsqlParser.RULE_alter_trigger = 25;
plsqlParser.RULE_create_trigger = 26;
plsqlParser.RULE_trigger_follows_clause = 27;
plsqlParser.RULE_trigger_when_clause = 28;
plsqlParser.RULE_simple_dml_trigger = 29;
plsqlParser.RULE_for_each_row = 30;
plsqlParser.RULE_compound_dml_trigger = 31;
plsqlParser.RULE_non_dml_trigger = 32;
plsqlParser.RULE_trigger_body = 33;
plsqlParser.RULE_routine_clause = 34;
plsqlParser.RULE_compound_trigger_block = 35;
plsqlParser.RULE_timing_point_section = 36;
plsqlParser.RULE_non_dml_event = 37;
plsqlParser.RULE_dml_event_clause = 38;
plsqlParser.RULE_dml_event_element = 39;
plsqlParser.RULE_dml_event_nested_clause = 40;
plsqlParser.RULE_referencing_clause = 41;
plsqlParser.RULE_referencing_element = 42;
plsqlParser.RULE_drop_type = 43;
plsqlParser.RULE_alter_type = 44;
plsqlParser.RULE_compile_type_clause = 45;
plsqlParser.RULE_replace_type_clause = 46;
plsqlParser.RULE_alter_method_spec = 47;
plsqlParser.RULE_alter_method_element = 48;
plsqlParser.RULE_alter_attribute_definition = 49;
plsqlParser.RULE_attribute_definition = 50;
plsqlParser.RULE_alter_collection_clauses = 51;
plsqlParser.RULE_dependent_handling_clause = 52;
plsqlParser.RULE_dependent_exceptions_part = 53;
plsqlParser.RULE_create_type = 54;
plsqlParser.RULE_type_definition = 55;
plsqlParser.RULE_object_type_def = 56;
plsqlParser.RULE_object_as_part = 57;
plsqlParser.RULE_object_under_part = 58;
plsqlParser.RULE_nested_table_type_def = 59;
plsqlParser.RULE_sqlj_object_type = 60;
plsqlParser.RULE_type_body = 61;
plsqlParser.RULE_type_body_elements = 62;
plsqlParser.RULE_map_order_func_declaration = 63;
plsqlParser.RULE_subprog_decl_in_type = 64;
plsqlParser.RULE_proc_decl_in_type = 65;
plsqlParser.RULE_func_decl_in_type = 66;
plsqlParser.RULE_constructor_declaration = 67;
plsqlParser.RULE_modifier_clause = 68;
plsqlParser.RULE_object_member_spec = 69;
plsqlParser.RULE_sqlj_object_type_attr = 70;
plsqlParser.RULE_element_spec = 71;
plsqlParser.RULE_element_spec_options = 72;
plsqlParser.RULE_subprogram_spec = 73;
plsqlParser.RULE_type_procedure_spec = 74;
plsqlParser.RULE_type_function_spec = 75;
plsqlParser.RULE_constructor_spec = 76;
plsqlParser.RULE_map_order_function_spec = 77;
plsqlParser.RULE_pragma_clause = 78;
plsqlParser.RULE_pragma_elements = 79;
plsqlParser.RULE_type_elements_parameter = 80;
plsqlParser.RULE_drop_sequence = 81;
plsqlParser.RULE_alter_sequence = 82;
plsqlParser.RULE_create_sequence = 83;
plsqlParser.RULE_sequence_spec = 84;
plsqlParser.RULE_sequence_start_clause = 85;
plsqlParser.RULE_invoker_rights_clause = 86;
plsqlParser.RULE_compiler_parameters_clause = 87;
plsqlParser.RULE_call_spec = 88;
plsqlParser.RULE_java_spec = 89;
plsqlParser.RULE_c_spec = 90;
plsqlParser.RULE_c_agent_in_clause = 91;
plsqlParser.RULE_c_parameters_clause = 92;
plsqlParser.RULE_parameter = 93;
plsqlParser.RULE_default_value_part = 94;
plsqlParser.RULE_declare_spec = 95;
plsqlParser.RULE_variable_declaration = 96;
plsqlParser.RULE_subtype_declaration = 97;
plsqlParser.RULE_cursor_declaration = 98;
plsqlParser.RULE_parameter_spec = 99;
plsqlParser.RULE_exception_declaration = 100;
plsqlParser.RULE_pragma_declaration = 101;
plsqlParser.RULE_record_declaration = 102;
plsqlParser.RULE_record_type_dec = 103;
plsqlParser.RULE_field_spec = 104;
plsqlParser.RULE_record_var_dec = 105;
plsqlParser.RULE_table_declaration = 106;
plsqlParser.RULE_table_type_dec = 107;
plsqlParser.RULE_table_indexed_by_part = 108;
plsqlParser.RULE_varray_type_def = 109;
plsqlParser.RULE_table_var_dec = 110;
plsqlParser.RULE_seq_of_statements = 111;
plsqlParser.RULE_label_declaration = 112;
plsqlParser.RULE_statement = 113;
plsqlParser.RULE_assignment_statement = 114;
plsqlParser.RULE_continue_statement = 115;
plsqlParser.RULE_exit_statement = 116;
plsqlParser.RULE_goto_statement = 117;
plsqlParser.RULE_if_statement = 118;
plsqlParser.RULE_elsif_part = 119;
plsqlParser.RULE_else_part = 120;
plsqlParser.RULE_loop_statement = 121;
plsqlParser.RULE_cursor_loop_param = 122;
plsqlParser.RULE_forall_statement = 123;
plsqlParser.RULE_bounds_clause = 124;
plsqlParser.RULE_between_bound = 125;
plsqlParser.RULE_lower_bound = 126;
plsqlParser.RULE_upper_bound = 127;
plsqlParser.RULE_null_statement = 128;
plsqlParser.RULE_raise_statement = 129;
plsqlParser.RULE_return_statement = 130;
plsqlParser.RULE_function_call = 131;
plsqlParser.RULE_body = 132;
plsqlParser.RULE_exception_handler = 133;
plsqlParser.RULE_trigger_block = 134;
plsqlParser.RULE_block = 135;
plsqlParser.RULE_sql_statement = 136;
plsqlParser.RULE_execute_immediate = 137;
plsqlParser.RULE_dynamic_returning_clause = 138;
plsqlParser.RULE_data_manipulation_language_statements = 139;
plsqlParser.RULE_cursor_manipulation_statements = 140;
plsqlParser.RULE_close_statement = 141;
plsqlParser.RULE_open_statement = 142;
plsqlParser.RULE_fetch_statement = 143;
plsqlParser.RULE_open_for_statement = 144;
plsqlParser.RULE_transaction_control_statements = 145;
plsqlParser.RULE_set_transaction_command = 146;
plsqlParser.RULE_set_constraint_command = 147;
plsqlParser.RULE_commit_statement = 148;
plsqlParser.RULE_write_clause = 149;
plsqlParser.RULE_rollback_statement = 150;
plsqlParser.RULE_savepoint_statement = 151;
plsqlParser.RULE_explain_statement = 152;
plsqlParser.RULE_select_statement = 153;
plsqlParser.RULE_subquery_factoring_clause = 154;
plsqlParser.RULE_factoring_element = 155;
plsqlParser.RULE_search_clause = 156;
plsqlParser.RULE_cycle_clause = 157;
plsqlParser.RULE_subquery = 158;
plsqlParser.RULE_subquery_operation_part = 159;
plsqlParser.RULE_query_block = 160;
plsqlParser.RULE_selected_element = 161;
plsqlParser.RULE_from_clause = 162;
plsqlParser.RULE_table_ref_list = 163;
plsqlParser.RULE_table_ref = 164;
plsqlParser.RULE_table_ref_aux = 165;
plsqlParser.RULE_join_clause = 166;
plsqlParser.RULE_join_on_part = 167;
plsqlParser.RULE_join_using_part = 168;
plsqlParser.RULE_outer_join_type = 169;
plsqlParser.RULE_query_partition_clause = 170;
plsqlParser.RULE_flashback_query_clause = 171;
plsqlParser.RULE_pivot_clause = 172;
plsqlParser.RULE_pivot_element = 173;
plsqlParser.RULE_pivot_for_clause = 174;
plsqlParser.RULE_pivot_in_clause = 175;
plsqlParser.RULE_pivot_in_clause_element = 176;
plsqlParser.RULE_pivot_in_clause_elements = 177;
plsqlParser.RULE_unpivot_clause = 178;
plsqlParser.RULE_unpivot_in_clause = 179;
plsqlParser.RULE_unpivot_in_elements = 180;
plsqlParser.RULE_hierarchical_query_clause = 181;
plsqlParser.RULE_start_part = 182;
plsqlParser.RULE_group_by_clause = 183;
plsqlParser.RULE_group_by_elements = 184;
plsqlParser.RULE_rollup_cube_clause = 185;
plsqlParser.RULE_grouping_sets_clause = 186;
plsqlParser.RULE_grouping_sets_elements = 187;
plsqlParser.RULE_having_clause = 188;
plsqlParser.RULE_model_clause = 189;
plsqlParser.RULE_cell_reference_options = 190;
plsqlParser.RULE_return_rows_clause = 191;
plsqlParser.RULE_reference_model = 192;
plsqlParser.RULE_main_model = 193;
plsqlParser.RULE_model_column_clauses = 194;
plsqlParser.RULE_model_column_partition_part = 195;
plsqlParser.RULE_model_column_list = 196;
plsqlParser.RULE_model_column = 197;
plsqlParser.RULE_model_rules_clause = 198;
plsqlParser.RULE_model_rules_part = 199;
plsqlParser.RULE_model_rules_element = 200;
plsqlParser.RULE_cell_assignment = 201;
plsqlParser.RULE_model_iterate_clause = 202;
plsqlParser.RULE_until_part = 203;
plsqlParser.RULE_order_by_clause = 204;
plsqlParser.RULE_order_by_elements = 205;
plsqlParser.RULE_for_update_clause = 206;
plsqlParser.RULE_for_update_of_part = 207;
plsqlParser.RULE_for_update_options = 208;
plsqlParser.RULE_limit_clause = 209;
plsqlParser.RULE_update_statement = 210;
plsqlParser.RULE_update_set_clause = 211;
plsqlParser.RULE_column_based_update_set_clause = 212;
plsqlParser.RULE_delete_statement = 213;
plsqlParser.RULE_insert_statement = 214;
plsqlParser.RULE_single_table_insert = 215;
plsqlParser.RULE_multi_table_insert = 216;
plsqlParser.RULE_multi_table_element = 217;
plsqlParser.RULE_conditional_insert_clause = 218;
plsqlParser.RULE_conditional_insert_when_part = 219;
plsqlParser.RULE_conditional_insert_else_part = 220;
plsqlParser.RULE_insert_into_clause = 221;
plsqlParser.RULE_values_clause = 222;
plsqlParser.RULE_merge_statement = 223;
plsqlParser.RULE_merge_update_clause = 224;
plsqlParser.RULE_merge_element = 225;
plsqlParser.RULE_merge_update_delete_part = 226;
plsqlParser.RULE_merge_insert_clause = 227;
plsqlParser.RULE_selected_tableview = 228;
plsqlParser.RULE_lock_table_statement = 229;
plsqlParser.RULE_wait_nowait_part = 230;
plsqlParser.RULE_lock_table_element = 231;
plsqlParser.RULE_lock_mode = 232;
plsqlParser.RULE_general_table_ref = 233;
plsqlParser.RULE_static_returning_clause = 234;
plsqlParser.RULE_error_logging_clause = 235;
plsqlParser.RULE_error_logging_into_part = 236;
plsqlParser.RULE_error_logging_reject_part = 237;
plsqlParser.RULE_dml_table_expression_clause = 238;
plsqlParser.RULE_table_collection_expression = 239;
plsqlParser.RULE_subquery_restriction_clause = 240;
plsqlParser.RULE_sample_clause = 241;
plsqlParser.RULE_seed_part = 242;
plsqlParser.RULE_cursor_expression = 243;
plsqlParser.RULE_expression_list = 244;
plsqlParser.RULE_condition = 245;
plsqlParser.RULE_expression = 246;
plsqlParser.RULE_is_part = 247;
plsqlParser.RULE_cursor_part = 248;
plsqlParser.RULE_multiset_type = 249;
plsqlParser.RULE_relational_operator = 250;
plsqlParser.RULE_like_type = 251;
plsqlParser.RULE_like_escape_part = 252;
plsqlParser.RULE_in_elements = 253;
plsqlParser.RULE_between_elements = 254;
plsqlParser.RULE_concatenation = 255;
plsqlParser.RULE_binary_expression = 256;
plsqlParser.RULE_interval_expression = 257;
plsqlParser.RULE_model_expression = 258;
plsqlParser.RULE_model_expression_element = 259;
plsqlParser.RULE_single_column_for_loop = 260;
plsqlParser.RULE_for_like_part = 261;
plsqlParser.RULE_for_increment_decrement_type = 262;
plsqlParser.RULE_multi_column_for_loop = 263;
plsqlParser.RULE_unary_expression = 264;
plsqlParser.RULE_case_statement = 265;
plsqlParser.RULE_simple_case_statement = 266;
plsqlParser.RULE_simple_case_when_part = 267;
plsqlParser.RULE_searched_case_statement = 268;
plsqlParser.RULE_searched_case_when_part = 269;
plsqlParser.RULE_case_else_part = 270;
plsqlParser.RULE_atom = 271;
plsqlParser.RULE_expression_or_vector = 272;
plsqlParser.RULE_vector_expr = 273;
plsqlParser.RULE_quantified_expression = 274;
plsqlParser.RULE_standard_function = 275;
plsqlParser.RULE_aggregate_windowed_function = 276;
plsqlParser.RULE_over_clause_keyword = 277;
plsqlParser.RULE_within_or_over_clause_keyword = 278;
plsqlParser.RULE_standard_prediction_function_keyword = 279;
plsqlParser.RULE_over_clause = 280;
plsqlParser.RULE_windowing_clause = 281;
plsqlParser.RULE_windowing_type = 282;
plsqlParser.RULE_windowing_elements = 283;
plsqlParser.RULE_using_clause = 284;
plsqlParser.RULE_using_element = 285;
plsqlParser.RULE_collect_order_by_part = 286;
plsqlParser.RULE_within_or_over_part = 287;
plsqlParser.RULE_cost_matrix_clause = 288;
plsqlParser.RULE_xml_passing_clause = 289;
plsqlParser.RULE_xml_attributes_clause = 290;
plsqlParser.RULE_xml_namespaces_clause = 291;
plsqlParser.RULE_xml_table_column = 292;
plsqlParser.RULE_xml_general_default_part = 293;
plsqlParser.RULE_xml_multiuse_expression_element = 294;
plsqlParser.RULE_xmlroot_param_version_part = 295;
plsqlParser.RULE_xmlroot_param_standalone_part = 296;
plsqlParser.RULE_xmlserialize_param_enconding_part = 297;
plsqlParser.RULE_xmlserialize_param_version_part = 298;
plsqlParser.RULE_xmlserialize_param_ident_part = 299;
plsqlParser.RULE_sql_plus_command = 300;
plsqlParser.RULE_whenever_command = 301;
plsqlParser.RULE_set_command = 302;
plsqlParser.RULE_exit_command = 303;
plsqlParser.RULE_prompt_command = 304;
plsqlParser.RULE_show_errors_command = 305;
plsqlParser.RULE_partition_extension_clause = 306;
plsqlParser.RULE_column_alias = 307;
plsqlParser.RULE_table_alias = 308;
plsqlParser.RULE_alias_quoted_string = 309;
plsqlParser.RULE_where_clause = 310;
plsqlParser.RULE_current_of_clause = 311;
plsqlParser.RULE_into_clause = 312;
plsqlParser.RULE_xml_column_name = 313;
plsqlParser.RULE_cost_class_name = 314;
plsqlParser.RULE_attribute_name = 315;
plsqlParser.RULE_savepoint_name = 316;
plsqlParser.RULE_rollback_segment_name = 317;
plsqlParser.RULE_table_var_name = 318;
plsqlParser.RULE_schema_name = 319;
plsqlParser.RULE_routine_name = 320;
plsqlParser.RULE_package_name = 321;
plsqlParser.RULE_implementation_type_name = 322;
plsqlParser.RULE_parameter_name = 323;
plsqlParser.RULE_reference_model_name = 324;
plsqlParser.RULE_main_model_name = 325;
plsqlParser.RULE_aggregate_function_name = 326;
plsqlParser.RULE_query_name = 327;
plsqlParser.RULE_constraint_name = 328;
plsqlParser.RULE_label_name = 329;
plsqlParser.RULE_type_name = 330;
plsqlParser.RULE_sequence_name = 331;
plsqlParser.RULE_exception_name = 332;
plsqlParser.RULE_function_name = 333;
plsqlParser.RULE_procedure_name = 334;
plsqlParser.RULE_trigger_name = 335;
plsqlParser.RULE_variable_name = 336;
plsqlParser.RULE_index_name = 337;
plsqlParser.RULE_cursor_name = 338;
plsqlParser.RULE_record_name = 339;
plsqlParser.RULE_collection_name = 340;
plsqlParser.RULE_link_name = 341;
plsqlParser.RULE_column_name = 342;
plsqlParser.RULE_tableview_name = 343;
plsqlParser.RULE_dot_id = 344;
plsqlParser.RULE_star = 345;
plsqlParser.RULE_keep_clause = 346;
plsqlParser.RULE_function_argument = 347;
plsqlParser.RULE_function_argument_analytic = 348;
plsqlParser.RULE_function_argument_modeling = 349;
plsqlParser.RULE_respect_or_ignore_nulls = 350;
plsqlParser.RULE_argument = 351;
plsqlParser.RULE_type_spec = 352;
plsqlParser.RULE_datatype = 353;
plsqlParser.RULE_precision_part = 354;
plsqlParser.RULE_native_datatype_element = 355;
plsqlParser.RULE_bind_variable = 356;
plsqlParser.RULE_general_element = 357;
plsqlParser.RULE_table_element = 358;
plsqlParser.RULE_constant = 359;
plsqlParser.RULE_numeric = 360;
plsqlParser.RULE_numeric_negative = 361;
plsqlParser.RULE_quoted_string = 362;
plsqlParser.RULE_r_id = 363;
plsqlParser.RULE_id_expression = 364;
plsqlParser.RULE_not_equal_op = 365;
plsqlParser.RULE_greater_than_or_equals_op = 366;
plsqlParser.RULE_less_than_or_equals_op = 367;
plsqlParser.RULE_concatenation_op = 368;
plsqlParser.RULE_outer_join_sign = 369;
plsqlParser.RULE_regular_id = 370;

function Swallow_to_semiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_swallow_to_semi;
    return this;
}

Swallow_to_semiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Swallow_to_semiContext.prototype.constructor = Swallow_to_semiContext;


Swallow_to_semiContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSwallow_to_semi(this);
	}
};

Swallow_to_semiContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSwallow_to_semi(this);
	}
};




plsqlParser.Swallow_to_semiContext = Swallow_to_semiContext;

plsqlParser.prototype.swallow_to_semi = function() {

    var localctx = new Swallow_to_semiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, plsqlParser.RULE_swallow_to_semi);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 743; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 742;
            _la = this._input.LA(1);
            if(_la<=0 || _la===plsqlParser.SEMICOLON) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 745; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << plsqlParser.T__0) | (1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ALTER) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.AND) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASC) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BEGIN) | (1 << plsqlParser.BETWEEN) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (plsqlParser.BLOCK - 32)) | (1 << (plsqlParser.BODY - 32)) | (1 << (plsqlParser.BOOLEAN - 32)) | (1 << (plsqlParser.BOTH - 32)) | (1 << (plsqlParser.BREADTH - 32)) | (1 << (plsqlParser.BULK - 32)) | (1 << (plsqlParser.BY - 32)) | (1 << (plsqlParser.BYTE - 32)) | (1 << (plsqlParser.C_LETTER - 32)) | (1 << (plsqlParser.CACHE - 32)) | (1 << (plsqlParser.CALL - 32)) | (1 << (plsqlParser.CANONICAL - 32)) | (1 << (plsqlParser.CASCADE - 32)) | (1 << (plsqlParser.CASE - 32)) | (1 << (plsqlParser.CAST - 32)) | (1 << (plsqlParser.CHAR - 32)) | (1 << (plsqlParser.CHAR_CS - 32)) | (1 << (plsqlParser.CHARACTER - 32)) | (1 << (plsqlParser.CHECK - 32)) | (1 << (plsqlParser.CHR - 32)) | (1 << (plsqlParser.CLOB - 32)) | (1 << (plsqlParser.CLOSE - 32)) | (1 << (plsqlParser.CLUSTER - 32)) | (1 << (plsqlParser.COLLECT - 32)) | (1 << (plsqlParser.COLUMNS - 32)) | (1 << (plsqlParser.COMMENT - 32)) | (1 << (plsqlParser.COMMIT - 32)) | (1 << (plsqlParser.COMMITTED - 32)) | (1 << (plsqlParser.COMPATIBILITY - 32)) | (1 << (plsqlParser.COMPILE - 32)) | (1 << (plsqlParser.COMPOUND - 32)) | (1 << (plsqlParser.CONNECT - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECLARE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (plsqlParser.DECOMPOSE - 96)) | (1 << (plsqlParser.DECREMENT - 96)) | (1 << (plsqlParser.DEFAULT - 96)) | (1 << (plsqlParser.DEFAULTS - 96)) | (1 << (plsqlParser.DEFERRED - 96)) | (1 << (plsqlParser.DEFINER - 96)) | (1 << (plsqlParser.DELETE - 96)) | (1 << (plsqlParser.DEPTH - 96)) | (1 << (plsqlParser.DESC - 96)) | (1 << (plsqlParser.DETERMINISTIC - 96)) | (1 << (plsqlParser.DIMENSION - 96)) | (1 << (plsqlParser.DISABLE - 96)) | (1 << (plsqlParser.DISASSOCIATE - 96)) | (1 << (plsqlParser.DISTINCT - 96)) | (1 << (plsqlParser.DOCUMENT - 96)) | (1 << (plsqlParser.DOUBLE - 96)) | (1 << (plsqlParser.DROP - 96)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (plsqlParser.EACH - 96)) | (1 << (plsqlParser.ELEMENT - 96)) | (1 << (plsqlParser.ELSE - 96)) | (1 << (plsqlParser.ELSIF - 96)) | (1 << (plsqlParser.EMPTY - 96)) | (1 << (plsqlParser.ENABLE - 96)) | (1 << (plsqlParser.ENCODING - 96)) | (1 << (plsqlParser.END - 96)) | (1 << (plsqlParser.ENTITYESCAPING - 96)) | (1 << (plsqlParser.ERR - 96)) | (1 << (plsqlParser.ERRORS - 96)) | (1 << (plsqlParser.ESCAPE - 96)) | (1 << (plsqlParser.EVALNAME - 96)) | (1 << (plsqlParser.EXCEPTION - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXCLUSIVE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FETCH - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FOR - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FROM - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GOTO - 128)) | (1 << (plsqlParser.GRANT - 128)) | (1 << (plsqlParser.GROUP - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HAVING - 128)) | (1 << (plsqlParser.HIDE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (plsqlParser.HOUR - 160)) | (1 << (plsqlParser.IF - 160)) | (1 << (plsqlParser.IGNORE - 160)) | (1 << (plsqlParser.IMMEDIATE - 160)) | (1 << (plsqlParser.IN - 160)) | (1 << (plsqlParser.INCLUDE - 160)) | (1 << (plsqlParser.INCLUDING - 160)) | (1 << (plsqlParser.INCREMENT - 160)) | (1 << (plsqlParser.INDENT - 160)) | (1 << (plsqlParser.INDEX - 160)) | (1 << (plsqlParser.INDEXED - 160)) | (1 << (plsqlParser.INDICATOR - 160)) | (1 << (plsqlParser.INDICES - 160)) | (1 << (plsqlParser.INFINITE - 160)) | (1 << (plsqlParser.INLINE - 160)) | (1 << (plsqlParser.INNER - 160)) | (1 << (plsqlParser.INOUT - 160)) | (1 << (plsqlParser.INSERT - 160)) | (1 << (plsqlParser.INSTANTIABLE - 160)) | (1 << (plsqlParser.INSTEAD - 160)) | (1 << (plsqlParser.INT - 160)) | (1 << (plsqlParser.INTEGER - 160)) | (1 << (plsqlParser.INTERSECT - 160)) | (1 << (plsqlParser.INTERVAL - 160)) | (1 << (plsqlParser.INTO - 160)) | (1 << (plsqlParser.INVALIDATE - 160)) | (1 << (plsqlParser.IS - 160)) | (1 << (plsqlParser.ISOLATION - 160)) | (1 << (plsqlParser.ITERATE - 160)) | (1 << (plsqlParser.JAVA - 160)) | (1 << (plsqlParser.JOIN - 160)) | (1 << (plsqlParser.KEEP - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCK - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUS - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)) | (1 << (plsqlParser.MODE - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (plsqlParser.MODEL - 224)) | (1 << (plsqlParser.MODIFY - 224)) | (1 << (plsqlParser.MONTH - 224)) | (1 << (plsqlParser.MULTISET - 224)) | (1 << (plsqlParser.NAME - 224)) | (1 << (plsqlParser.NAN - 224)) | (1 << (plsqlParser.NATURAL - 224)) | (1 << (plsqlParser.NATURALN - 224)) | (1 << (plsqlParser.NAV - 224)) | (1 << (plsqlParser.NCHAR - 224)) | (1 << (plsqlParser.NCHAR_CS - 224)) | (1 << (plsqlParser.NCLOB - 224)) | (1 << (plsqlParser.NESTED - 224)) | (1 << (plsqlParser.NEW - 224)) | (1 << (plsqlParser.NO - 224)) | (1 << (plsqlParser.NOAUDIT - 224)) | (1 << (plsqlParser.NOCACHE - 224)) | (1 << (plsqlParser.NOCOPY - 224)) | (1 << (plsqlParser.NOCYCLE - 224)) | (1 << (plsqlParser.NOENTITYESCAPING - 224)) | (1 << (plsqlParser.NOMAXVALUE - 224)) | (1 << (plsqlParser.NOMINVALUE - 224)) | (1 << (plsqlParser.NONE - 224)) | (1 << (plsqlParser.NOORDER - 224)) | (1 << (plsqlParser.NOSCHEMACHECK - 224)) | (1 << (plsqlParser.NOT - 224)) | (1 << (plsqlParser.NOWAIT - 224)) | (1 << (plsqlParser.NULL - 224)) | (1 << (plsqlParser.NULLS - 224)) | (1 << (plsqlParser.NUMBER - 224)) | (1 << (plsqlParser.NUMERIC - 224)) | (1 << (plsqlParser.NVARCHAR2 - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OF - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ON - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.OPTION - 256)) | (1 << (plsqlParser.OR - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDER - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PERCENT_ROWTYPE - 256)) | (1 << (plsqlParser.PERCENT_TYPE - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PIVOT - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (plsqlParser.POSITIVEN - 288)) | (1 << (plsqlParser.PRAGMA - 288)) | (1 << (plsqlParser.PRECEDING - 288)) | (1 << (plsqlParser.PRECISION - 288)) | (1 << (plsqlParser.PRESENT - 288)) | (1 << (plsqlParser.PRIOR - 288)) | (1 << (plsqlParser.PROCEDURE - 288)) | (1 << (plsqlParser.RAISE - 288)) | (1 << (plsqlParser.RANGE - 288)) | (1 << (plsqlParser.RAW - 288)) | (1 << (plsqlParser.READ - 288)) | (1 << (plsqlParser.REAL - 288)) | (1 << (plsqlParser.RECORD - 288)) | (1 << (plsqlParser.REF - 288)) | (1 << (plsqlParser.REFERENCE - 288)) | (1 << (plsqlParser.REFERENCING - 288)) | (1 << (plsqlParser.REJECT - 288)) | (1 << (plsqlParser.RELIES_ON - 288)) | (1 << (plsqlParser.RENAME - 288)) | (1 << (plsqlParser.REPLACE - 288)) | (1 << (plsqlParser.RESPECT - 288)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 288)) | (1 << (plsqlParser.RESULT - 288)) | (1 << (plsqlParser.RESULT_CACHE - 288)) | (1 << (plsqlParser.RETURN - 288)) | (1 << (plsqlParser.RETURNING - 288)) | (1 << (plsqlParser.REUSE - 288)) | (1 << (plsqlParser.REVERSE - 288)) | (1 << (plsqlParser.REVOKE - 288)) | (1 << (plsqlParser.RIGHT - 288)) | (1 << (plsqlParser.ROLLBACK - 288)) | (1 << (plsqlParser.ROLLUP - 288)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SEARCH - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELECT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENCE - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHARE - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (plsqlParser.SIZE - 352)) | (1 << (plsqlParser.SKIP_ - 352)) | (1 << (plsqlParser.SMALLINT - 352)) | (1 << (plsqlParser.SNAPSHOT - 352)) | (1 << (plsqlParser.SOME - 352)) | (1 << (plsqlParser.SPECIFICATION - 352)) | (1 << (plsqlParser.SQLDATA - 352)) | (1 << (plsqlParser.SQLERROR - 352)) | (1 << (plsqlParser.STANDALONE - 352)) | (1 << (plsqlParser.START - 352)) | (1 << (plsqlParser.STARTUP - 352)) | (1 << (plsqlParser.STATEMENT - 352)) | (1 << (plsqlParser.STATEMENT_ID - 352)) | (1 << (plsqlParser.STATIC - 352)) | (1 << (plsqlParser.STATISTICS - 352)) | (1 << (plsqlParser.STRING - 352)) | (1 << (plsqlParser.SUBMULTISET - 352)) | (1 << (plsqlParser.SUBPARTITION - 352)) | (1 << (plsqlParser.SUBSTITUTABLE - 352)) | (1 << (plsqlParser.SUBTYPE - 352)) | (1 << (plsqlParser.SUCCESS - 352)) | (1 << (plsqlParser.SUSPEND - 352)) | (1 << (plsqlParser.TABLE - 352)) | (1 << (plsqlParser.THE - 352)) | (1 << (plsqlParser.THEN - 352)) | (1 << (plsqlParser.TIME - 352)) | (1 << (plsqlParser.TIMESTAMP - 352)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 352)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 352)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 352)) | (1 << (plsqlParser.TIMEZONE_ABBR - 352)) | (1 << (plsqlParser.TIMEZONE_HOUR - 352)))) !== 0) || ((((_la - 384)) & ~0x1f) == 0 && ((1 << (_la - 384)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 384)) | (1 << (plsqlParser.TIMEZONE_REGION - 384)) | (1 << (plsqlParser.TO - 384)) | (1 << (plsqlParser.TRAILING - 384)) | (1 << (plsqlParser.TRANSACTION - 384)) | (1 << (plsqlParser.TRANSLATE - 384)) | (1 << (plsqlParser.TREAT - 384)) | (1 << (plsqlParser.TRIGGER - 384)) | (1 << (plsqlParser.TRIM - 384)) | (1 << (plsqlParser.TRUE - 384)) | (1 << (plsqlParser.TRUNCATE - 384)) | (1 << (plsqlParser.TYPE - 384)) | (1 << (plsqlParser.UNBOUNDED - 384)) | (1 << (plsqlParser.UNDER - 384)) | (1 << (plsqlParser.UNION - 384)) | (1 << (plsqlParser.UNIQUE - 384)) | (1 << (plsqlParser.UNLIMITED - 384)) | (1 << (plsqlParser.UNPIVOT - 384)) | (1 << (plsqlParser.UNTIL - 384)) | (1 << (plsqlParser.UPDATE - 384)) | (1 << (plsqlParser.UPDATED - 384)) | (1 << (plsqlParser.UPSERT - 384)) | (1 << (plsqlParser.UROWID - 384)) | (1 << (plsqlParser.USE - 384)) | (1 << (plsqlParser.USING - 384)) | (1 << (plsqlParser.VALIDATE - 384)) | (1 << (plsqlParser.VALUE - 384)) | (1 << (plsqlParser.VALUES - 384)) | (1 << (plsqlParser.VARCHAR - 384)) | (1 << (plsqlParser.VARCHAR2 - 384)) | (1 << (plsqlParser.VARIABLE - 384)) | (1 << (plsqlParser.VARRAY - 384)))) !== 0) || ((((_la - 416)) & ~0x1f) == 0 && ((1 << (_la - 416)) & ((1 << (plsqlParser.VARYING - 416)) | (1 << (plsqlParser.VERSION - 416)) | (1 << (plsqlParser.VERSIONS - 416)) | (1 << (plsqlParser.WAIT - 416)) | (1 << (plsqlParser.WARNING - 416)) | (1 << (plsqlParser.WELLFORMED - 416)) | (1 << (plsqlParser.WHEN - 416)) | (1 << (plsqlParser.WHENEVER - 416)) | (1 << (plsqlParser.WHERE - 416)) | (1 << (plsqlParser.WHILE - 416)) | (1 << (plsqlParser.WITH - 416)) | (1 << (plsqlParser.WITHIN - 416)) | (1 << (plsqlParser.WORK - 416)) | (1 << (plsqlParser.WRITE - 416)) | (1 << (plsqlParser.XML - 416)) | (1 << (plsqlParser.XMLAGG - 416)) | (1 << (plsqlParser.XMLATTRIBUTES - 416)) | (1 << (plsqlParser.XMLCAST - 416)) | (1 << (plsqlParser.XMLCOLATTVAL - 416)) | (1 << (plsqlParser.XMLELEMENT - 416)) | (1 << (plsqlParser.XMLEXISTS - 416)) | (1 << (plsqlParser.XMLFOREST - 416)) | (1 << (plsqlParser.XMLNAMESPACES - 416)) | (1 << (plsqlParser.XMLPARSE - 416)) | (1 << (plsqlParser.XMLPI - 416)) | (1 << (plsqlParser.XMLQUERY - 416)) | (1 << (plsqlParser.XMLROOT - 416)) | (1 << (plsqlParser.XMLSERIALIZE - 416)) | (1 << (plsqlParser.XMLTABLE - 416)) | (1 << (plsqlParser.YEAR - 416)) | (1 << (plsqlParser.YES - 416)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 416)))) !== 0) || ((((_la - 448)) & ~0x1f) == 0 && ((1 << (_la - 448)) & ((1 << (plsqlParser.ZONE - 448)) | (1 << (plsqlParser.PREDICTION - 448)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 448)) | (1 << (plsqlParser.PREDICTION_COST - 448)) | (1 << (plsqlParser.PREDICTION_DETAILS - 448)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (plsqlParser.PREDICTION_SET - 448)) | (1 << (plsqlParser.CUME_DIST - 448)) | (1 << (plsqlParser.DENSE_RANK - 448)) | (1 << (plsqlParser.LISTAGG - 448)) | (1 << (plsqlParser.PERCENT_RANK - 448)) | (1 << (plsqlParser.PERCENTILE_CONT - 448)) | (1 << (plsqlParser.PERCENTILE_DISC - 448)) | (1 << (plsqlParser.RANK - 448)) | (1 << (plsqlParser.AVG - 448)) | (1 << (plsqlParser.CORR - 448)) | (1 << (plsqlParser.LAG - 448)) | (1 << (plsqlParser.LEAD - 448)) | (1 << (plsqlParser.MAX - 448)) | (1 << (plsqlParser.MEDIAN - 448)) | (1 << (plsqlParser.MIN - 448)) | (1 << (plsqlParser.NTILE - 448)) | (1 << (plsqlParser.RATIO_TO_REPORT - 448)) | (1 << (plsqlParser.ROW_NUMBER - 448)) | (1 << (plsqlParser.SUM - 448)) | (1 << (plsqlParser.VARIANCE - 448)) | (1 << (plsqlParser.REGR_ - 448)) | (1 << (plsqlParser.STDDEV - 448)) | (1 << (plsqlParser.VAR_ - 448)) | (1 << (plsqlParser.COVAR_ - 448)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (plsqlParser.BIT_STRING_LIT - 448)))) !== 0) || ((((_la - 480)) & ~0x1f) == 0 && ((1 << (_la - 480)) & ((1 << (plsqlParser.HEX_STRING_LIT - 480)) | (1 << (plsqlParser.DOUBLE_PERIOD - 480)) | (1 << (plsqlParser.PERIOD - 480)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 480)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 480)) | (1 << (plsqlParser.CHAR_STRING - 480)) | (1 << (plsqlParser.DELIMITED_ID - 480)) | (1 << (plsqlParser.PERCENT - 480)) | (1 << (plsqlParser.AMPERSAND - 480)) | (1 << (plsqlParser.LEFT_PAREN - 480)) | (1 << (plsqlParser.RIGHT_PAREN - 480)) | (1 << (plsqlParser.DOUBLE_ASTERISK - 480)) | (1 << (plsqlParser.ASTERISK - 480)) | (1 << (plsqlParser.PLUS_SIGN - 480)) | (1 << (plsqlParser.MINUS_SIGN - 480)) | (1 << (plsqlParser.COMMA - 480)) | (1 << (plsqlParser.SOLIDUS - 480)) | (1 << (plsqlParser.AT_SIGN - 480)) | (1 << (plsqlParser.ASSIGN_OP - 480)) | (1 << (plsqlParser.BINDVAR - 480)) | (1 << (plsqlParser.COLON - 480)) | (1 << (plsqlParser.LESS_THAN_OR_EQUALS_OP - 480)) | (1 << (plsqlParser.LESS_THAN_OP - 480)) | (1 << (plsqlParser.GREATER_THAN_OR_EQUALS_OP - 480)) | (1 << (plsqlParser.NOT_EQUAL_OP - 480)) | (1 << (plsqlParser.CARRET_OPERATOR_PART - 480)) | (1 << (plsqlParser.TILDE_OPERATOR_PART - 480)) | (1 << (plsqlParser.EXCLAMATION_OPERATOR_PART - 480)) | (1 << (plsqlParser.GREATER_THAN_OP - 480)) | (1 << (plsqlParser.CONCATENATION_OP - 480)) | (1 << (plsqlParser.VERTICAL_BAR - 480)))) !== 0) || ((((_la - 512)) & ~0x1f) == 0 && ((1 << (_la - 512)) & ((1 << (plsqlParser.EQUALS_OP - 512)) | (1 << (plsqlParser.LEFT_BRACKET - 512)) | (1 << (plsqlParser.RIGHT_BRACKET - 512)) | (1 << (plsqlParser.INTRODUCER - 512)) | (1 << (plsqlParser.SPACES - 512)) | (1 << (plsqlParser.SINGLE_LINE_COMMENT - 512)) | (1 << (plsqlParser.MULTI_LINE_COMMENT - 512)) | (1 << (plsqlParser.PROMPT - 512)) | (1 << (plsqlParser.REGULAR_ID - 512)) | (1 << (plsqlParser.ZV - 512)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compilation_unitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_compilation_unit;
    return this;
}

Compilation_unitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_unitContext.prototype.constructor = Compilation_unitContext;

Compilation_unitContext.prototype.EOF = function() {
    return this.getToken(plsqlParser.EOF, 0);
};

Compilation_unitContext.prototype.unit_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unit_statementContext);
    } else {
        return this.getTypedRuleContext(Unit_statementContext,i);
    }
};

Compilation_unitContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCompilation_unit(this);
	}
};

Compilation_unitContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCompilation_unit(this);
	}
};




plsqlParser.Compilation_unitContext = Compilation_unitContext;

plsqlParser.prototype.compilation_unit = function() {

    var localctx = new Compilation_unitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, plsqlParser.RULE_compilation_unit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 750;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.ALTER || _la===plsqlParser.CREATE || _la===plsqlParser.DELETE || _la===plsqlParser.DROP || _la===plsqlParser.EXPLAIN || _la===plsqlParser.FUNCTION || _la===plsqlParser.INSERT || _la===plsqlParser.LOCK || _la===plsqlParser.MERGE || _la===plsqlParser.PROCEDURE || _la===plsqlParser.SELECT || _la===plsqlParser.UPDATE || _la===plsqlParser.WITH || _la===plsqlParser.LEFT_PAREN) {
            this.state = 747;
            this.unit_statement();
            this.state = 752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 753;
        this.match(plsqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_scriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sql_script;
    return this;
}

Sql_scriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_scriptContext.prototype.constructor = Sql_scriptContext;

Sql_scriptContext.prototype.EOF = function() {
    return this.getToken(plsqlParser.EOF, 0);
};

Sql_scriptContext.prototype.unit_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unit_statementContext);
    } else {
        return this.getTypedRuleContext(Unit_statementContext,i);
    }
};

Sql_scriptContext.prototype.sql_plus_command = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_plus_commandContext);
    } else {
        return this.getTypedRuleContext(Sql_plus_commandContext,i);
    }
};

Sql_scriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSql_script(this);
	}
};

Sql_scriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSql_script(this);
	}
};




plsqlParser.Sql_scriptContext = Sql_scriptContext;

plsqlParser.prototype.sql_script = function() {

    var localctx = new Sql_scriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, plsqlParser.RULE_sql_script);
    var _la = 0; // Token type
    try {
        this.state = 773;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 757;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.ALTER:
            case plsqlParser.CREATE:
            case plsqlParser.DELETE:
            case plsqlParser.DROP:
            case plsqlParser.EXPLAIN:
            case plsqlParser.FUNCTION:
            case plsqlParser.INSERT:
            case plsqlParser.LOCK:
            case plsqlParser.MERGE:
            case plsqlParser.PROCEDURE:
            case plsqlParser.SELECT:
            case plsqlParser.UPDATE:
            case plsqlParser.WITH:
            case plsqlParser.LEFT_PAREN:
                this.state = 755;
                this.unit_statement();
                break;
            case plsqlParser.EXIT:
            case plsqlParser.SET:
            case plsqlParser.SHOW:
            case plsqlParser.WHENEVER:
            case plsqlParser.SOLIDUS:
            case plsqlParser.PROMPT:
                this.state = 756;
                this.sql_plus_command();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 759;
            this.match(plsqlParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 769;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.ALTER || _la===plsqlParser.CREATE || _la===plsqlParser.DELETE || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (plsqlParser.DROP - 112)) | (1 << (plsqlParser.EXIT - 112)) | (1 << (plsqlParser.EXPLAIN - 112)))) !== 0) || _la===plsqlParser.FUNCTION || _la===plsqlParser.INSERT || _la===plsqlParser.LOCK || _la===plsqlParser.MERGE || _la===plsqlParser.PROCEDURE || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (plsqlParser.SELECT - 334)) | (1 << (plsqlParser.SET - 334)) | (1 << (plsqlParser.SHOW - 334)))) !== 0) || ((((_la - 403)) & ~0x1f) == 0 && ((1 << (_la - 403)) & ((1 << (plsqlParser.UPDATE - 403)) | (1 << (plsqlParser.WHENEVER - 403)) | (1 << (plsqlParser.WITH - 403)))) !== 0) || ((((_la - 489)) & ~0x1f) == 0 && ((1 << (_la - 489)) & ((1 << (plsqlParser.LEFT_PAREN - 489)) | (1 << (plsqlParser.SOLIDUS - 489)) | (1 << (plsqlParser.PROMPT - 489)))) !== 0)) {
                this.state = 767;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case plsqlParser.ALTER:
                case plsqlParser.CREATE:
                case plsqlParser.DELETE:
                case plsqlParser.DROP:
                case plsqlParser.EXPLAIN:
                case plsqlParser.FUNCTION:
                case plsqlParser.INSERT:
                case plsqlParser.LOCK:
                case plsqlParser.MERGE:
                case plsqlParser.PROCEDURE:
                case plsqlParser.SELECT:
                case plsqlParser.UPDATE:
                case plsqlParser.WITH:
                case plsqlParser.LEFT_PAREN:
                    this.state = 761;
                    this.unit_statement();
                    this.state = 762;
                    this.match(plsqlParser.SEMICOLON);
                    break;
                case plsqlParser.EXIT:
                case plsqlParser.SET:
                case plsqlParser.SHOW:
                case plsqlParser.WHENEVER:
                case plsqlParser.SOLIDUS:
                case plsqlParser.PROMPT:
                    this.state = 764;
                    this.sql_plus_command();
                    this.state = 765;
                    this.match(plsqlParser.SEMICOLON);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 771;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 772;
            this.match(plsqlParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_unit_statement;
    return this;
}

Unit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unit_statementContext.prototype.constructor = Unit_statementContext;

Unit_statementContext.prototype.alter_function = function() {
    return this.getTypedRuleContext(Alter_functionContext,0);
};

Unit_statementContext.prototype.alter_package = function() {
    return this.getTypedRuleContext(Alter_packageContext,0);
};

Unit_statementContext.prototype.alter_procedure = function() {
    return this.getTypedRuleContext(Alter_procedureContext,0);
};

Unit_statementContext.prototype.alter_sequence = function() {
    return this.getTypedRuleContext(Alter_sequenceContext,0);
};

Unit_statementContext.prototype.alter_trigger = function() {
    return this.getTypedRuleContext(Alter_triggerContext,0);
};

Unit_statementContext.prototype.alter_type = function() {
    return this.getTypedRuleContext(Alter_typeContext,0);
};

Unit_statementContext.prototype.create_function_body = function() {
    return this.getTypedRuleContext(Create_function_bodyContext,0);
};

Unit_statementContext.prototype.create_procedure_body = function() {
    return this.getTypedRuleContext(Create_procedure_bodyContext,0);
};

Unit_statementContext.prototype.create_package = function() {
    return this.getTypedRuleContext(Create_packageContext,0);
};

Unit_statementContext.prototype.create_sequence = function() {
    return this.getTypedRuleContext(Create_sequenceContext,0);
};

Unit_statementContext.prototype.create_trigger = function() {
    return this.getTypedRuleContext(Create_triggerContext,0);
};

Unit_statementContext.prototype.create_type = function() {
    return this.getTypedRuleContext(Create_typeContext,0);
};

Unit_statementContext.prototype.drop_function = function() {
    return this.getTypedRuleContext(Drop_functionContext,0);
};

Unit_statementContext.prototype.drop_package = function() {
    return this.getTypedRuleContext(Drop_packageContext,0);
};

Unit_statementContext.prototype.drop_procedure = function() {
    return this.getTypedRuleContext(Drop_procedureContext,0);
};

Unit_statementContext.prototype.drop_sequence = function() {
    return this.getTypedRuleContext(Drop_sequenceContext,0);
};

Unit_statementContext.prototype.drop_trigger = function() {
    return this.getTypedRuleContext(Drop_triggerContext,0);
};

Unit_statementContext.prototype.drop_type = function() {
    return this.getTypedRuleContext(Drop_typeContext,0);
};

Unit_statementContext.prototype.data_manipulation_language_statements = function() {
    return this.getTypedRuleContext(Data_manipulation_language_statementsContext,0);
};

Unit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUnit_statement(this);
	}
};

Unit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUnit_statement(this);
	}
};




plsqlParser.Unit_statementContext = Unit_statementContext;

plsqlParser.prototype.unit_statement = function() {

    var localctx = new Unit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, plsqlParser.RULE_unit_statement);
    try {
        this.state = 794;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 775;
            this.alter_function();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 776;
            this.alter_package();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 777;
            this.alter_procedure();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 778;
            this.alter_sequence();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 779;
            this.alter_trigger();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 780;
            this.alter_type();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 781;
            this.create_function_body();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 782;
            this.create_procedure_body();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 783;
            this.create_package();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 784;
            this.create_sequence();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 785;
            this.create_trigger();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 786;
            this.create_type();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 787;
            this.drop_function();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 788;
            this.drop_package();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 789;
            this.drop_procedure();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 790;
            this.drop_sequence();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 791;
            this.drop_trigger();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 792;
            this.drop_type();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 793;
            this.data_manipulation_language_statements();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_drop_function;
    return this;
}

Drop_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_functionContext.prototype.constructor = Drop_functionContext;

Drop_functionContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Drop_functionContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Drop_functionContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Drop_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDrop_function(this);
	}
};

Drop_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDrop_function(this);
	}
};




plsqlParser.Drop_functionContext = Drop_functionContext;

plsqlParser.prototype.drop_function = function() {

    var localctx = new Drop_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, plsqlParser.RULE_drop_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 796;
        this.match(plsqlParser.DROP);
        this.state = 797;
        this.match(plsqlParser.FUNCTION);
        this.state = 798;
        this.function_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_function;
    return this;
}

Alter_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_functionContext.prototype.constructor = Alter_functionContext;

Alter_functionContext.prototype.ALTER = function() {
    return this.getToken(plsqlParser.ALTER, 0);
};

Alter_functionContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Alter_functionContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Alter_functionContext.prototype.COMPILE = function() {
    return this.getToken(plsqlParser.COMPILE, 0);
};

Alter_functionContext.prototype.DEBUG = function() {
    return this.getToken(plsqlParser.DEBUG, 0);
};

Alter_functionContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_functionContext.prototype.REUSE = function() {
    return this.getToken(plsqlParser.REUSE, 0);
};

Alter_functionContext.prototype.SETTINGS = function() {
    return this.getToken(plsqlParser.SETTINGS, 0);
};

Alter_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_function(this);
	}
};

Alter_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_function(this);
	}
};




plsqlParser.Alter_functionContext = Alter_functionContext;

plsqlParser.prototype.alter_function = function() {

    var localctx = new Alter_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, plsqlParser.RULE_alter_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 800;
        this.match(plsqlParser.ALTER);
        this.state = 801;
        this.match(plsqlParser.FUNCTION);
        this.state = 802;
        this.function_name();
        this.state = 803;
        this.match(plsqlParser.COMPILE);
        this.state = 805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        if(la_===1) {
            this.state = 804;
            this.match(plsqlParser.DEBUG);

        }
        this.state = 810;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 807;
                this.compiler_parameters_clause(); 
            }
            this.state = 812;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
        }

        this.state = 815;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.REUSE) {
            this.state = 813;
            this.match(plsqlParser.REUSE);
            this.state = 814;
            this.match(plsqlParser.SETTINGS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_function_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_create_function_body;
    return this;
}

Create_function_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_function_bodyContext.prototype.constructor = Create_function_bodyContext;

Create_function_bodyContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Create_function_bodyContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Create_function_bodyContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Create_function_bodyContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Create_function_bodyContext.prototype.USING = function() {
    return this.getToken(plsqlParser.USING, 0);
};

Create_function_bodyContext.prototype.implementation_type_name = function() {
    return this.getTypedRuleContext(Implementation_type_nameContext,0);
};

Create_function_bodyContext.prototype.CREATE = function() {
    return this.getToken(plsqlParser.CREATE, 0);
};

Create_function_bodyContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Create_function_bodyContext.prototype.invoker_rights_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Invoker_rights_clauseContext);
    } else {
        return this.getTypedRuleContext(Invoker_rights_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.parallel_enable_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parallel_enable_clauseContext);
    } else {
        return this.getTypedRuleContext(Parallel_enable_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.result_cache_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Result_cache_clauseContext);
    } else {
        return this.getTypedRuleContext(Result_cache_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.DETERMINISTIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.DETERMINISTIC);
    } else {
        return this.getToken(plsqlParser.DETERMINISTIC, i);
    }
};


Create_function_bodyContext.prototype.PIPELINED = function() {
    return this.getToken(plsqlParser.PIPELINED, 0);
};

Create_function_bodyContext.prototype.AGGREGATE = function() {
    return this.getToken(plsqlParser.AGGREGATE, 0);
};

Create_function_bodyContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Create_function_bodyContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Create_function_bodyContext.prototype.OR = function() {
    return this.getToken(plsqlParser.OR, 0);
};

Create_function_bodyContext.prototype.REPLACE = function() {
    return this.getToken(plsqlParser.REPLACE, 0);
};

Create_function_bodyContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Create_function_bodyContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Create_function_bodyContext.prototype.DECLARE = function() {
    return this.getToken(plsqlParser.DECLARE, 0);
};

Create_function_bodyContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Create_function_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCreate_function_body(this);
	}
};

Create_function_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCreate_function_body(this);
	}
};




plsqlParser.Create_function_bodyContext = Create_function_bodyContext;

plsqlParser.prototype.create_function_body = function() {

    var localctx = new Create_function_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, plsqlParser.RULE_create_function_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.CREATE) {
            this.state = 817;
            this.match(plsqlParser.CREATE);
            this.state = 820;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.OR) {
                this.state = 818;
                this.match(plsqlParser.OR);
                this.state = 819;
                this.match(plsqlParser.REPLACE);
            }

        }

        this.state = 824;
        this.match(plsqlParser.FUNCTION);
        this.state = 825;
        this.function_name();
        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 826;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 827;
            this.parameter();
            this.state = 832;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 828;
                this.match(plsqlParser.COMMA);
                this.state = 829;
                this.parameter();
                this.state = 834;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 835;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 839;
        this.match(plsqlParser.RETURN);
        this.state = 840;
        this.type_spec();
        this.state = 847;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.AUTHID || _la===plsqlParser.DETERMINISTIC || _la===plsqlParser.PARALLEL_ENABLE || _la===plsqlParser.RESULT_CACHE) {
            this.state = 845;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.AUTHID:
                this.state = 841;
                this.invoker_rights_clause();
                break;
            case plsqlParser.PARALLEL_ENABLE:
                this.state = 842;
                this.parallel_enable_clause();
                break;
            case plsqlParser.RESULT_CACHE:
                this.state = 843;
                this.result_cache_clause();
                break;
            case plsqlParser.DETERMINISTIC:
                this.state = 844;
                this.match(plsqlParser.DETERMINISTIC);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 870;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.state = 851;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.PIPELINED) {
                this.state = 850;
                this.match(plsqlParser.PIPELINED);
            }

            this.state = 853;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 865;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            switch(la_) {
            case 1:
                this.state = 855;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===plsqlParser.DECLARE) {
                    this.state = 854;
                    this.match(plsqlParser.DECLARE);
                }

                this.state = 860;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0)) {
                    this.state = 857;
                    this.declare_spec();
                    this.state = 862;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 863;
                this.body();
                break;

            case 2:
                this.state = 864;
                this.call_spec();
                break;

            }
            break;

        case 2:
            this.state = 867;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.AGGREGATE || _la===plsqlParser.PIPELINED)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 868;
            this.match(plsqlParser.USING);
            this.state = 869;
            this.implementation_type_name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parallel_enable_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_parallel_enable_clause;
    return this;
}

Parallel_enable_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parallel_enable_clauseContext.prototype.constructor = Parallel_enable_clauseContext;

Parallel_enable_clauseContext.prototype.PARALLEL_ENABLE = function() {
    return this.getToken(plsqlParser.PARALLEL_ENABLE, 0);
};

Parallel_enable_clauseContext.prototype.partition_by_clause = function() {
    return this.getTypedRuleContext(Partition_by_clauseContext,0);
};

Parallel_enable_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterParallel_enable_clause(this);
	}
};

Parallel_enable_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitParallel_enable_clause(this);
	}
};




plsqlParser.Parallel_enable_clauseContext = Parallel_enable_clauseContext;

plsqlParser.prototype.parallel_enable_clause = function() {

    var localctx = new Parallel_enable_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, plsqlParser.RULE_parallel_enable_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 872;
        this.match(plsqlParser.PARALLEL_ENABLE);
        this.state = 874;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 873;
            this.partition_by_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partition_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_partition_by_clause;
    return this;
}

Partition_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partition_by_clauseContext.prototype.constructor = Partition_by_clauseContext;

Partition_by_clauseContext.prototype.PARTITION = function() {
    return this.getToken(plsqlParser.PARTITION, 0);
};

Partition_by_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Partition_by_clauseContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Partition_by_clauseContext.prototype.ANY = function() {
    return this.getToken(plsqlParser.ANY, 0);
};

Partition_by_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Partition_by_clauseContext.prototype.HASH = function() {
    return this.getToken(plsqlParser.HASH, 0);
};

Partition_by_clauseContext.prototype.RANGE = function() {
    return this.getToken(plsqlParser.RANGE, 0);
};

Partition_by_clauseContext.prototype.streaming_clause = function() {
    return this.getTypedRuleContext(Streaming_clauseContext,0);
};

Partition_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPartition_by_clause(this);
	}
};

Partition_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPartition_by_clause(this);
	}
};




plsqlParser.Partition_by_clauseContext = Partition_by_clauseContext;

plsqlParser.prototype.partition_by_clause = function() {

    var localctx = new Partition_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, plsqlParser.RULE_partition_by_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 877;
        this.match(plsqlParser.PARTITION);
        this.state = 878;
        this.expression(0);
        this.state = 879;
        this.match(plsqlParser.BY);
        this.state = 893;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.ANY:
            this.state = 880;
            this.match(plsqlParser.ANY);
            break;
        case plsqlParser.HASH:
        case plsqlParser.RANGE:
            this.state = 881;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.HASH || _la===plsqlParser.RANGE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 882;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 883;
            this.column_name();
            this.state = 888;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 884;
                this.match(plsqlParser.COMMA);
                this.state = 885;
                this.column_name();
                this.state = 890;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 891;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 896;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.CLUSTER || _la===plsqlParser.ORDER) {
            this.state = 895;
            this.streaming_clause();
        }

        this.state = 898;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Result_cache_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_result_cache_clause;
    return this;
}

Result_cache_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Result_cache_clauseContext.prototype.constructor = Result_cache_clauseContext;

Result_cache_clauseContext.prototype.RESULT_CACHE = function() {
    return this.getToken(plsqlParser.RESULT_CACHE, 0);
};

Result_cache_clauseContext.prototype.relies_on_part = function() {
    return this.getTypedRuleContext(Relies_on_partContext,0);
};

Result_cache_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterResult_cache_clause(this);
	}
};

Result_cache_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitResult_cache_clause(this);
	}
};




plsqlParser.Result_cache_clauseContext = Result_cache_clauseContext;

plsqlParser.prototype.result_cache_clause = function() {

    var localctx = new Result_cache_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, plsqlParser.RULE_result_cache_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 900;
        this.match(plsqlParser.RESULT_CACHE);
        this.state = 902;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.RELIES_ON) {
            this.state = 901;
            this.relies_on_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relies_on_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_relies_on_part;
    return this;
}

Relies_on_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relies_on_partContext.prototype.constructor = Relies_on_partContext;

Relies_on_partContext.prototype.RELIES_ON = function() {
    return this.getToken(plsqlParser.RELIES_ON, 0);
};

Relies_on_partContext.prototype.tableview_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tableview_nameContext);
    } else {
        return this.getTypedRuleContext(Tableview_nameContext,i);
    }
};

Relies_on_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRelies_on_part(this);
	}
};

Relies_on_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRelies_on_part(this);
	}
};




plsqlParser.Relies_on_partContext = Relies_on_partContext;

plsqlParser.prototype.relies_on_part = function() {

    var localctx = new Relies_on_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, plsqlParser.RULE_relies_on_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 904;
        this.match(plsqlParser.RELIES_ON);
        this.state = 905;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 906;
        this.tableview_name();
        this.state = 911;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 907;
            this.match(plsqlParser.COMMA);
            this.state = 908;
            this.tableview_name();
            this.state = 913;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 914;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Streaming_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_streaming_clause;
    return this;
}

Streaming_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Streaming_clauseContext.prototype.constructor = Streaming_clauseContext;

Streaming_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Streaming_clauseContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Streaming_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Streaming_clauseContext.prototype.ORDER = function() {
    return this.getToken(plsqlParser.ORDER, 0);
};

Streaming_clauseContext.prototype.CLUSTER = function() {
    return this.getToken(plsqlParser.CLUSTER, 0);
};

Streaming_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterStreaming_clause(this);
	}
};

Streaming_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitStreaming_clause(this);
	}
};




plsqlParser.Streaming_clauseContext = Streaming_clauseContext;

plsqlParser.prototype.streaming_clause = function() {

    var localctx = new Streaming_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, plsqlParser.RULE_streaming_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.CLUSTER || _la===plsqlParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 917;
        this.expression(0);
        this.state = 918;
        this.match(plsqlParser.BY);
        this.state = 919;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 920;
        this.column_name();
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 921;
            this.match(plsqlParser.COMMA);
            this.state = 922;
            this.column_name();
            this.state = 927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 928;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_drop_package;
    return this;
}

Drop_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_packageContext.prototype.constructor = Drop_packageContext;

Drop_packageContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Drop_packageContext.prototype.PACKAGE = function() {
    return this.getToken(plsqlParser.PACKAGE, 0);
};

Drop_packageContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

Drop_packageContext.prototype.BODY = function() {
    return this.getToken(plsqlParser.BODY, 0);
};

Drop_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDrop_package(this);
	}
};

Drop_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDrop_package(this);
	}
};




plsqlParser.Drop_packageContext = Drop_packageContext;

plsqlParser.prototype.drop_package = function() {

    var localctx = new Drop_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, plsqlParser.RULE_drop_package);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 930;
        this.match(plsqlParser.DROP);
        this.state = 931;
        this.match(plsqlParser.PACKAGE);
        this.state = 933;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 932;
            this.match(plsqlParser.BODY);

        }
        this.state = 935;
        this.package_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_package;
    return this;
}

Alter_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_packageContext.prototype.constructor = Alter_packageContext;

Alter_packageContext.prototype.ALTER = function() {
    return this.getToken(plsqlParser.ALTER, 0);
};

Alter_packageContext.prototype.PACKAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.PACKAGE);
    } else {
        return this.getToken(plsqlParser.PACKAGE, i);
    }
};


Alter_packageContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

Alter_packageContext.prototype.COMPILE = function() {
    return this.getToken(plsqlParser.COMPILE, 0);
};

Alter_packageContext.prototype.DEBUG = function() {
    return this.getToken(plsqlParser.DEBUG, 0);
};

Alter_packageContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_packageContext.prototype.REUSE = function() {
    return this.getToken(plsqlParser.REUSE, 0);
};

Alter_packageContext.prototype.SETTINGS = function() {
    return this.getToken(plsqlParser.SETTINGS, 0);
};

Alter_packageContext.prototype.BODY = function() {
    return this.getToken(plsqlParser.BODY, 0);
};

Alter_packageContext.prototype.SPECIFICATION = function() {
    return this.getToken(plsqlParser.SPECIFICATION, 0);
};

Alter_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_package(this);
	}
};

Alter_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_package(this);
	}
};




plsqlParser.Alter_packageContext = Alter_packageContext;

plsqlParser.prototype.alter_package = function() {

    var localctx = new Alter_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, plsqlParser.RULE_alter_package);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        this.match(plsqlParser.ALTER);
        this.state = 938;
        this.match(plsqlParser.PACKAGE);
        this.state = 939;
        this.package_name();
        this.state = 940;
        this.match(plsqlParser.COMPILE);
        this.state = 942;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        if(la_===1) {
            this.state = 941;
            this.match(plsqlParser.DEBUG);

        }
        this.state = 945;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 944;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.BODY || _la===plsqlParser.PACKAGE || _la===plsqlParser.SPECIFICATION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 950;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 947;
                this.compiler_parameters_clause(); 
            }
            this.state = 952;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

        this.state = 955;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.REUSE) {
            this.state = 953;
            this.match(plsqlParser.REUSE);
            this.state = 954;
            this.match(plsqlParser.SETTINGS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_create_package;
    return this;
}

Create_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_packageContext.prototype.constructor = Create_packageContext;

Create_packageContext.prototype.CREATE = function() {
    return this.getToken(plsqlParser.CREATE, 0);
};

Create_packageContext.prototype.PACKAGE = function() {
    return this.getToken(plsqlParser.PACKAGE, 0);
};

Create_packageContext.prototype.OR = function() {
    return this.getToken(plsqlParser.OR, 0);
};

Create_packageContext.prototype.REPLACE = function() {
    return this.getToken(plsqlParser.REPLACE, 0);
};

Create_packageContext.prototype.package_spec = function() {
    return this.getTypedRuleContext(Package_specContext,0);
};

Create_packageContext.prototype.package_body = function() {
    return this.getTypedRuleContext(Package_bodyContext,0);
};

Create_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCreate_package(this);
	}
};

Create_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCreate_package(this);
	}
};




plsqlParser.Create_packageContext = Create_packageContext;

plsqlParser.prototype.create_package = function() {

    var localctx = new Create_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, plsqlParser.RULE_create_package);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 957;
        this.match(plsqlParser.CREATE);
        this.state = 960;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.OR) {
            this.state = 958;
            this.match(plsqlParser.OR);
            this.state = 959;
            this.match(plsqlParser.REPLACE);
        }

        this.state = 962;
        this.match(plsqlParser.PACKAGE);
        this.state = 965;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        if(la_===1) {
            this.state = 963;
            this.package_spec();

        } else if(la_===2) {
            this.state = 964;
            this.package_body();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_package_body;
    return this;
}

Package_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_bodyContext.prototype.constructor = Package_bodyContext;

Package_bodyContext.prototype.BODY = function() {
    return this.getToken(plsqlParser.BODY, 0);
};

Package_bodyContext.prototype.package_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_nameContext);
    } else {
        return this.getTypedRuleContext(Package_nameContext,i);
    }
};

Package_bodyContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Package_bodyContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Package_bodyContext.prototype.BEGIN = function() {
    return this.getToken(plsqlParser.BEGIN, 0);
};

Package_bodyContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Package_bodyContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

Package_bodyContext.prototype.package_obj_body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_obj_bodyContext);
    } else {
        return this.getTypedRuleContext(Package_obj_bodyContext,i);
    }
};

Package_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPackage_body(this);
	}
};

Package_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPackage_body(this);
	}
};




plsqlParser.Package_bodyContext = Package_bodyContext;

plsqlParser.prototype.package_body = function() {

    var localctx = new Package_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, plsqlParser.RULE_package_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.match(plsqlParser.BODY);
        this.state = 968;
        this.package_name();
        this.state = 969;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 973;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0)) {
            this.state = 970;
            this.package_obj_body();
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 982;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.BEGIN:
            this.state = 976;
            this.match(plsqlParser.BEGIN);
            this.state = 977;
            this.seq_of_statements();
            break;
        case plsqlParser.END:
            this.state = 978;
            this.match(plsqlParser.END);
            this.state = 980;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
            if(la_===1) {
                this.state = 979;
                this.package_name();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_package_spec;
    return this;
}

Package_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_specContext.prototype.constructor = Package_specContext;

Package_specContext.prototype.package_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_nameContext);
    } else {
        return this.getTypedRuleContext(Package_nameContext,i);
    }
};

Package_specContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

Package_specContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Package_specContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Package_specContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Package_specContext.prototype.package_obj_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_obj_specContext);
    } else {
        return this.getTypedRuleContext(Package_obj_specContext,i);
    }
};

Package_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPackage_spec(this);
	}
};

Package_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPackage_spec(this);
	}
};




plsqlParser.Package_specContext = Package_specContext;

plsqlParser.prototype.package_spec = function() {

    var localctx = new Package_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, plsqlParser.RULE_package_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.package_name();
        this.state = 986;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AUTHID) {
            this.state = 985;
            this.invoker_rights_clause();
        }

        this.state = 988;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 992;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0)) {
            this.state = 989;
            this.package_obj_spec();
            this.state = 994;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 995;
        this.match(plsqlParser.END);
        this.state = 997;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 996;
            this.package_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_obj_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_package_obj_spec;
    return this;
}

Package_obj_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_obj_specContext.prototype.constructor = Package_obj_specContext;

Package_obj_specContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Package_obj_specContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Package_obj_specContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Package_obj_specContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Package_obj_specContext.prototype.pragma_declaration = function() {
    return this.getTypedRuleContext(Pragma_declarationContext,0);
};

Package_obj_specContext.prototype.record_declaration = function() {
    return this.getTypedRuleContext(Record_declarationContext,0);
};

Package_obj_specContext.prototype.table_declaration = function() {
    return this.getTypedRuleContext(Table_declarationContext,0);
};

Package_obj_specContext.prototype.procedure_spec = function() {
    return this.getTypedRuleContext(Procedure_specContext,0);
};

Package_obj_specContext.prototype.function_spec = function() {
    return this.getTypedRuleContext(Function_specContext,0);
};

Package_obj_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPackage_obj_spec(this);
	}
};

Package_obj_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPackage_obj_spec(this);
	}
};




plsqlParser.Package_obj_specContext = Package_obj_specContext;

plsqlParser.prototype.package_obj_spec = function() {

    var localctx = new Package_obj_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, plsqlParser.RULE_package_obj_spec);
    try {
        this.state = 1008;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 999;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1000;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1001;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1002;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1003;
            this.pragma_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1004;
            this.record_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1005;
            this.table_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1006;
            this.procedure_spec();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1007;
            this.function_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_procedure_spec;
    return this;
}

Procedure_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_specContext.prototype.constructor = Procedure_specContext;

Procedure_specContext.prototype.PROCEDURE = function() {
    return this.getToken(plsqlParser.PROCEDURE, 0);
};

Procedure_specContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Procedure_specContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Procedure_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterProcedure_spec(this);
	}
};

Procedure_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitProcedure_spec(this);
	}
};




plsqlParser.Procedure_specContext = Procedure_specContext;

plsqlParser.prototype.procedure_spec = function() {

    var localctx = new Procedure_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, plsqlParser.RULE_procedure_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1010;
        this.match(plsqlParser.PROCEDURE);
        this.state = 1011;
        this.procedure_name();
        this.state = 1023;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 1012;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 1013;
            this.parameter();
            this.state = 1018;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1014;
                this.match(plsqlParser.COMMA);
                this.state = 1015;
                this.parameter();
                this.state = 1020;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1021;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 1025;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_function_spec;
    return this;
}

Function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_specContext.prototype.constructor = Function_specContext;

Function_specContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Function_specContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Function_specContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Function_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Function_specContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Function_specContext.prototype.DETERMINISTIC = function() {
    return this.getToken(plsqlParser.DETERMINISTIC, 0);
};

Function_specContext.prototype.RESULT_CACHE = function() {
    return this.getToken(plsqlParser.RESULT_CACHE, 0);
};

Function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFunction_spec(this);
	}
};

Function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFunction_spec(this);
	}
};




plsqlParser.Function_specContext = Function_specContext;

plsqlParser.prototype.function_spec = function() {

    var localctx = new Function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, plsqlParser.RULE_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1027;
        this.match(plsqlParser.FUNCTION);
        this.state = 1028;
        this.function_name();
        this.state = 1040;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 1029;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 1030;
            this.parameter();
            this.state = 1035;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1031;
                this.match(plsqlParser.COMMA);
                this.state = 1032;
                this.parameter();
                this.state = 1037;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1038;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 1042;
        this.match(plsqlParser.RETURN);
        this.state = 1043;
        this.type_spec();
        this.state = 1045;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.DETERMINISTIC) {
            this.state = 1044;
            this.match(plsqlParser.DETERMINISTIC);
        }

        this.state = 1048;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.RESULT_CACHE) {
            this.state = 1047;
            this.match(plsqlParser.RESULT_CACHE);
        }

        this.state = 1050;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_obj_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_package_obj_body;
    return this;
}

Package_obj_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_obj_bodyContext.prototype.constructor = Package_obj_bodyContext;

Package_obj_bodyContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Package_obj_bodyContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Package_obj_bodyContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Package_obj_bodyContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Package_obj_bodyContext.prototype.record_declaration = function() {
    return this.getTypedRuleContext(Record_declarationContext,0);
};

Package_obj_bodyContext.prototype.table_declaration = function() {
    return this.getTypedRuleContext(Table_declarationContext,0);
};

Package_obj_bodyContext.prototype.create_procedure_body = function() {
    return this.getTypedRuleContext(Create_procedure_bodyContext,0);
};

Package_obj_bodyContext.prototype.create_function_body = function() {
    return this.getTypedRuleContext(Create_function_bodyContext,0);
};

Package_obj_bodyContext.prototype.procedure_spec = function() {
    return this.getTypedRuleContext(Procedure_specContext,0);
};

Package_obj_bodyContext.prototype.function_spec = function() {
    return this.getTypedRuleContext(Function_specContext,0);
};

Package_obj_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPackage_obj_body(this);
	}
};

Package_obj_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPackage_obj_body(this);
	}
};




plsqlParser.Package_obj_bodyContext = Package_obj_bodyContext;

plsqlParser.prototype.package_obj_body = function() {

    var localctx = new Package_obj_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, plsqlParser.RULE_package_obj_body);
    try {
        this.state = 1062;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1052;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1053;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1054;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1055;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1056;
            this.record_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1057;
            this.table_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1058;
            this.create_procedure_body();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1059;
            this.create_function_body();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1060;
            this.procedure_spec();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1061;
            this.function_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_procedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_drop_procedure;
    return this;
}

Drop_procedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_procedureContext.prototype.constructor = Drop_procedureContext;

Drop_procedureContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Drop_procedureContext.prototype.PROCEDURE = function() {
    return this.getToken(plsqlParser.PROCEDURE, 0);
};

Drop_procedureContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Drop_procedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDrop_procedure(this);
	}
};

Drop_procedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDrop_procedure(this);
	}
};




plsqlParser.Drop_procedureContext = Drop_procedureContext;

plsqlParser.prototype.drop_procedure = function() {

    var localctx = new Drop_procedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, plsqlParser.RULE_drop_procedure);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        this.match(plsqlParser.DROP);
        this.state = 1065;
        this.match(plsqlParser.PROCEDURE);
        this.state = 1066;
        this.procedure_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_procedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_procedure;
    return this;
}

Alter_procedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_procedureContext.prototype.constructor = Alter_procedureContext;

Alter_procedureContext.prototype.ALTER = function() {
    return this.getToken(plsqlParser.ALTER, 0);
};

Alter_procedureContext.prototype.PROCEDURE = function() {
    return this.getToken(plsqlParser.PROCEDURE, 0);
};

Alter_procedureContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Alter_procedureContext.prototype.COMPILE = function() {
    return this.getToken(plsqlParser.COMPILE, 0);
};

Alter_procedureContext.prototype.DEBUG = function() {
    return this.getToken(plsqlParser.DEBUG, 0);
};

Alter_procedureContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_procedureContext.prototype.REUSE = function() {
    return this.getToken(plsqlParser.REUSE, 0);
};

Alter_procedureContext.prototype.SETTINGS = function() {
    return this.getToken(plsqlParser.SETTINGS, 0);
};

Alter_procedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_procedure(this);
	}
};

Alter_procedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_procedure(this);
	}
};




plsqlParser.Alter_procedureContext = Alter_procedureContext;

plsqlParser.prototype.alter_procedure = function() {

    var localctx = new Alter_procedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, plsqlParser.RULE_alter_procedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1068;
        this.match(plsqlParser.ALTER);
        this.state = 1069;
        this.match(plsqlParser.PROCEDURE);
        this.state = 1070;
        this.procedure_name();
        this.state = 1071;
        this.match(plsqlParser.COMPILE);
        this.state = 1073;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        if(la_===1) {
            this.state = 1072;
            this.match(plsqlParser.DEBUG);

        }
        this.state = 1078;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1075;
                this.compiler_parameters_clause(); 
            }
            this.state = 1080;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
        }

        this.state = 1083;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.REUSE) {
            this.state = 1081;
            this.match(plsqlParser.REUSE);
            this.state = 1082;
            this.match(plsqlParser.SETTINGS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_procedure_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_create_procedure_body;
    return this;
}

Create_procedure_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_procedure_bodyContext.prototype.constructor = Create_procedure_bodyContext;

Create_procedure_bodyContext.prototype.PROCEDURE = function() {
    return this.getToken(plsqlParser.PROCEDURE, 0);
};

Create_procedure_bodyContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Create_procedure_bodyContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Create_procedure_bodyContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Create_procedure_bodyContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Create_procedure_bodyContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Create_procedure_bodyContext.prototype.EXTERNAL = function() {
    return this.getToken(plsqlParser.EXTERNAL, 0);
};

Create_procedure_bodyContext.prototype.CREATE = function() {
    return this.getToken(plsqlParser.CREATE, 0);
};

Create_procedure_bodyContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Create_procedure_bodyContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Create_procedure_bodyContext.prototype.DECLARE = function() {
    return this.getToken(plsqlParser.DECLARE, 0);
};

Create_procedure_bodyContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Create_procedure_bodyContext.prototype.OR = function() {
    return this.getToken(plsqlParser.OR, 0);
};

Create_procedure_bodyContext.prototype.REPLACE = function() {
    return this.getToken(plsqlParser.REPLACE, 0);
};

Create_procedure_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCreate_procedure_body(this);
	}
};

Create_procedure_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCreate_procedure_body(this);
	}
};




plsqlParser.Create_procedure_bodyContext = Create_procedure_bodyContext;

plsqlParser.prototype.create_procedure_body = function() {

    var localctx = new Create_procedure_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, plsqlParser.RULE_create_procedure_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1090;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.CREATE) {
            this.state = 1085;
            this.match(plsqlParser.CREATE);
            this.state = 1088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.OR) {
                this.state = 1086;
                this.match(plsqlParser.OR);
                this.state = 1087;
                this.match(plsqlParser.REPLACE);
            }

        }

        this.state = 1092;
        this.match(plsqlParser.PROCEDURE);
        this.state = 1093;
        this.procedure_name();
        this.state = 1105;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 1094;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 1095;
            this.parameter();
            this.state = 1100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1096;
                this.match(plsqlParser.COMMA);
                this.state = 1097;
                this.parameter();
                this.state = 1102;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1103;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 1108;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AUTHID) {
            this.state = 1107;
            this.invoker_rights_clause();
        }

        this.state = 1110;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1123;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.DECLARE) {
                this.state = 1111;
                this.match(plsqlParser.DECLARE);
            }

            this.state = 1117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0)) {
                this.state = 1114;
                this.declare_spec();
                this.state = 1119;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1120;
            this.body();
            break;

        case 2:
            this.state = 1121;
            this.call_spec();
            break;

        case 3:
            this.state = 1122;
            this.match(plsqlParser.EXTERNAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_drop_trigger;
    return this;
}

Drop_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_triggerContext.prototype.constructor = Drop_triggerContext;

Drop_triggerContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Drop_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(plsqlParser.TRIGGER, 0);
};

Drop_triggerContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Drop_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDrop_trigger(this);
	}
};

Drop_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDrop_trigger(this);
	}
};




plsqlParser.Drop_triggerContext = Drop_triggerContext;

plsqlParser.prototype.drop_trigger = function() {

    var localctx = new Drop_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, plsqlParser.RULE_drop_trigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1125;
        this.match(plsqlParser.DROP);
        this.state = 1126;
        this.match(plsqlParser.TRIGGER);
        this.state = 1127;
        this.trigger_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_trigger;
    this.tn1 = null; // Trigger_nameContext
    this.tn2 = null; // Trigger_nameContext
    return this;
}

Alter_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_triggerContext.prototype.constructor = Alter_triggerContext;

Alter_triggerContext.prototype.ALTER = function() {
    return this.getToken(plsqlParser.ALTER, 0);
};

Alter_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(plsqlParser.TRIGGER, 0);
};

Alter_triggerContext.prototype.trigger_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Trigger_nameContext);
    } else {
        return this.getTypedRuleContext(Trigger_nameContext,i);
    }
};

Alter_triggerContext.prototype.RENAME = function() {
    return this.getToken(plsqlParser.RENAME, 0);
};

Alter_triggerContext.prototype.TO = function() {
    return this.getToken(plsqlParser.TO, 0);
};

Alter_triggerContext.prototype.COMPILE = function() {
    return this.getToken(plsqlParser.COMPILE, 0);
};

Alter_triggerContext.prototype.ENABLE = function() {
    return this.getToken(plsqlParser.ENABLE, 0);
};

Alter_triggerContext.prototype.DISABLE = function() {
    return this.getToken(plsqlParser.DISABLE, 0);
};

Alter_triggerContext.prototype.DEBUG = function() {
    return this.getToken(plsqlParser.DEBUG, 0);
};

Alter_triggerContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_triggerContext.prototype.REUSE = function() {
    return this.getToken(plsqlParser.REUSE, 0);
};

Alter_triggerContext.prototype.SETTINGS = function() {
    return this.getToken(plsqlParser.SETTINGS, 0);
};

Alter_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_trigger(this);
	}
};

Alter_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_trigger(this);
	}
};




plsqlParser.Alter_triggerContext = Alter_triggerContext;

plsqlParser.prototype.alter_trigger = function() {

    var localctx = new Alter_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, plsqlParser.RULE_alter_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1129;
        this.match(plsqlParser.ALTER);
        this.state = 1130;
        this.match(plsqlParser.TRIGGER);
        this.state = 1131;
        localctx.tn1 = this.trigger_name();
        this.state = 1150;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.DISABLE:
        case plsqlParser.ENABLE:
            this.state = 1132;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.DISABLE || _la===plsqlParser.ENABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case plsqlParser.RENAME:
            this.state = 1133;
            this.match(plsqlParser.RENAME);
            this.state = 1134;
            this.match(plsqlParser.TO);
            this.state = 1135;
            localctx.tn2 = this.trigger_name();
            break;
        case plsqlParser.COMPILE:
            this.state = 1136;
            this.match(plsqlParser.COMPILE);
            this.state = 1138;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
            if(la_===1) {
                this.state = 1137;
                this.match(plsqlParser.DEBUG);

            }
            this.state = 1143;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1140;
                    this.compiler_parameters_clause(); 
                }
                this.state = 1145;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
            }

            this.state = 1148;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.REUSE) {
                this.state = 1146;
                this.match(plsqlParser.REUSE);
                this.state = 1147;
                this.match(plsqlParser.SETTINGS);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_create_trigger;
    return this;
}

Create_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_triggerContext.prototype.constructor = Create_triggerContext;

Create_triggerContext.prototype.CREATE = function() {
    return this.getToken(plsqlParser.CREATE, 0);
};

Create_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(plsqlParser.TRIGGER, 0);
};

Create_triggerContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Create_triggerContext.prototype.trigger_body = function() {
    return this.getTypedRuleContext(Trigger_bodyContext,0);
};

Create_triggerContext.prototype.simple_dml_trigger = function() {
    return this.getTypedRuleContext(Simple_dml_triggerContext,0);
};

Create_triggerContext.prototype.compound_dml_trigger = function() {
    return this.getTypedRuleContext(Compound_dml_triggerContext,0);
};

Create_triggerContext.prototype.non_dml_trigger = function() {
    return this.getTypedRuleContext(Non_dml_triggerContext,0);
};

Create_triggerContext.prototype.OR = function() {
    return this.getToken(plsqlParser.OR, 0);
};

Create_triggerContext.prototype.REPLACE = function() {
    return this.getToken(plsqlParser.REPLACE, 0);
};

Create_triggerContext.prototype.trigger_follows_clause = function() {
    return this.getTypedRuleContext(Trigger_follows_clauseContext,0);
};

Create_triggerContext.prototype.trigger_when_clause = function() {
    return this.getTypedRuleContext(Trigger_when_clauseContext,0);
};

Create_triggerContext.prototype.ENABLE = function() {
    return this.getToken(plsqlParser.ENABLE, 0);
};

Create_triggerContext.prototype.DISABLE = function() {
    return this.getToken(plsqlParser.DISABLE, 0);
};

Create_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCreate_trigger(this);
	}
};

Create_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCreate_trigger(this);
	}
};




plsqlParser.Create_triggerContext = Create_triggerContext;

plsqlParser.prototype.create_trigger = function() {

    var localctx = new Create_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, plsqlParser.RULE_create_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1152;
        this.match(plsqlParser.CREATE);
        this.state = 1155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.OR) {
            this.state = 1153;
            this.match(plsqlParser.OR);
            this.state = 1154;
            this.match(plsqlParser.REPLACE);
        }

        this.state = 1157;
        this.match(plsqlParser.TRIGGER);
        this.state = 1158;
        this.trigger_name();
        this.state = 1162;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1159;
            this.simple_dml_trigger();
            break;

        case 2:
            this.state = 1160;
            this.compound_dml_trigger();
            break;

        case 3:
            this.state = 1161;
            this.non_dml_trigger();
            break;

        }
        this.state = 1165;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 1164;
            this.trigger_follows_clause();

        }
        this.state = 1168;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 1167;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.DISABLE || _la===plsqlParser.ENABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1171;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WHEN) {
            this.state = 1170;
            this.trigger_when_clause();
        }

        this.state = 1173;
        this.trigger_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_follows_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_trigger_follows_clause;
    return this;
}

Trigger_follows_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_follows_clauseContext.prototype.constructor = Trigger_follows_clauseContext;

Trigger_follows_clauseContext.prototype.FOLLOWS = function() {
    return this.getToken(plsqlParser.FOLLOWS, 0);
};

Trigger_follows_clauseContext.prototype.trigger_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Trigger_nameContext);
    } else {
        return this.getTypedRuleContext(Trigger_nameContext,i);
    }
};

Trigger_follows_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTrigger_follows_clause(this);
	}
};

Trigger_follows_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTrigger_follows_clause(this);
	}
};




plsqlParser.Trigger_follows_clauseContext = Trigger_follows_clauseContext;

plsqlParser.prototype.trigger_follows_clause = function() {

    var localctx = new Trigger_follows_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, plsqlParser.RULE_trigger_follows_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1175;
        this.match(plsqlParser.FOLLOWS);
        this.state = 1176;
        this.trigger_name();
        this.state = 1181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 1177;
            this.match(plsqlParser.COMMA);
            this.state = 1178;
            this.trigger_name();
            this.state = 1183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_when_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_trigger_when_clause;
    return this;
}

Trigger_when_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_when_clauseContext.prototype.constructor = Trigger_when_clauseContext;

Trigger_when_clauseContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Trigger_when_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Trigger_when_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTrigger_when_clause(this);
	}
};

Trigger_when_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTrigger_when_clause(this);
	}
};




plsqlParser.Trigger_when_clauseContext = Trigger_when_clauseContext;

plsqlParser.prototype.trigger_when_clause = function() {

    var localctx = new Trigger_when_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, plsqlParser.RULE_trigger_when_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1184;
        this.match(plsqlParser.WHEN);
        this.state = 1185;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 1186;
        this.condition();
        this.state = 1187;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_simple_dml_trigger;
    return this;
}

Simple_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_dml_triggerContext.prototype.constructor = Simple_dml_triggerContext;

Simple_dml_triggerContext.prototype.dml_event_clause = function() {
    return this.getTypedRuleContext(Dml_event_clauseContext,0);
};

Simple_dml_triggerContext.prototype.BEFORE = function() {
    return this.getToken(plsqlParser.BEFORE, 0);
};

Simple_dml_triggerContext.prototype.AFTER = function() {
    return this.getToken(plsqlParser.AFTER, 0);
};

Simple_dml_triggerContext.prototype.INSTEAD = function() {
    return this.getToken(plsqlParser.INSTEAD, 0);
};

Simple_dml_triggerContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Simple_dml_triggerContext.prototype.referencing_clause = function() {
    return this.getTypedRuleContext(Referencing_clauseContext,0);
};

Simple_dml_triggerContext.prototype.for_each_row = function() {
    return this.getTypedRuleContext(For_each_rowContext,0);
};

Simple_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSimple_dml_trigger(this);
	}
};

Simple_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSimple_dml_trigger(this);
	}
};




plsqlParser.Simple_dml_triggerContext = Simple_dml_triggerContext;

plsqlParser.prototype.simple_dml_trigger = function() {

    var localctx = new Simple_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, plsqlParser.RULE_simple_dml_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1193;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.BEFORE:
            this.state = 1189;
            this.match(plsqlParser.BEFORE);
            break;
        case plsqlParser.AFTER:
            this.state = 1190;
            this.match(plsqlParser.AFTER);
            break;
        case plsqlParser.INSTEAD:
            this.state = 1191;
            this.match(plsqlParser.INSTEAD);
            this.state = 1192;
            this.match(plsqlParser.OF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1195;
        this.dml_event_clause();
        this.state = 1197;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        if(la_===1) {
            this.state = 1196;
            this.referencing_clause();

        }
        this.state = 1200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.FOR) {
            this.state = 1199;
            this.for_each_row();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_each_rowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_for_each_row;
    return this;
}

For_each_rowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_rowContext.prototype.constructor = For_each_rowContext;

For_each_rowContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

For_each_rowContext.prototype.EACH = function() {
    return this.getToken(plsqlParser.EACH, 0);
};

For_each_rowContext.prototype.ROW = function() {
    return this.getToken(plsqlParser.ROW, 0);
};

For_each_rowContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFor_each_row(this);
	}
};

For_each_rowContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFor_each_row(this);
	}
};




plsqlParser.For_each_rowContext = For_each_rowContext;

plsqlParser.prototype.for_each_row = function() {

    var localctx = new For_each_rowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, plsqlParser.RULE_for_each_row);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1202;
        this.match(plsqlParser.FOR);
        this.state = 1203;
        this.match(plsqlParser.EACH);
        this.state = 1204;
        this.match(plsqlParser.ROW);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_compound_dml_trigger;
    return this;
}

Compound_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_dml_triggerContext.prototype.constructor = Compound_dml_triggerContext;

Compound_dml_triggerContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Compound_dml_triggerContext.prototype.dml_event_clause = function() {
    return this.getTypedRuleContext(Dml_event_clauseContext,0);
};

Compound_dml_triggerContext.prototype.referencing_clause = function() {
    return this.getTypedRuleContext(Referencing_clauseContext,0);
};

Compound_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCompound_dml_trigger(this);
	}
};

Compound_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCompound_dml_trigger(this);
	}
};




plsqlParser.Compound_dml_triggerContext = Compound_dml_triggerContext;

plsqlParser.prototype.compound_dml_trigger = function() {

    var localctx = new Compound_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, plsqlParser.RULE_compound_dml_trigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1206;
        this.match(plsqlParser.FOR);
        this.state = 1207;
        this.dml_event_clause();
        this.state = 1209;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 1208;
            this.referencing_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_non_dml_trigger;
    return this;
}

Non_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_dml_triggerContext.prototype.constructor = Non_dml_triggerContext;

Non_dml_triggerContext.prototype.non_dml_event = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Non_dml_eventContext);
    } else {
        return this.getTypedRuleContext(Non_dml_eventContext,i);
    }
};

Non_dml_triggerContext.prototype.ON = function() {
    return this.getToken(plsqlParser.ON, 0);
};

Non_dml_triggerContext.prototype.BEFORE = function() {
    return this.getToken(plsqlParser.BEFORE, 0);
};

Non_dml_triggerContext.prototype.AFTER = function() {
    return this.getToken(plsqlParser.AFTER, 0);
};

Non_dml_triggerContext.prototype.DATABASE = function() {
    return this.getToken(plsqlParser.DATABASE, 0);
};

Non_dml_triggerContext.prototype.SCHEMA = function() {
    return this.getToken(plsqlParser.SCHEMA, 0);
};

Non_dml_triggerContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.OR);
    } else {
        return this.getToken(plsqlParser.OR, i);
    }
};


Non_dml_triggerContext.prototype.schema_name = function() {
    return this.getTypedRuleContext(Schema_nameContext,0);
};

Non_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNon_dml_trigger(this);
	}
};

Non_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNon_dml_trigger(this);
	}
};




plsqlParser.Non_dml_triggerContext = Non_dml_triggerContext;

plsqlParser.prototype.non_dml_trigger = function() {

    var localctx = new Non_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, plsqlParser.RULE_non_dml_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1211;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AFTER || _la===plsqlParser.BEFORE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1212;
        this.non_dml_event();
        this.state = 1217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.OR) {
            this.state = 1213;
            this.match(plsqlParser.OR);
            this.state = 1214;
            this.non_dml_event();
            this.state = 1219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1220;
        this.match(plsqlParser.ON);
        this.state = 1228;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1221;
            this.match(plsqlParser.DATABASE);
            break;

        case 2:
            this.state = 1225;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
            if(la_===1) {
                this.state = 1222;
                this.schema_name();
                this.state = 1223;
                this.match(plsqlParser.PERIOD);

            }
            this.state = 1227;
            this.match(plsqlParser.SCHEMA);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_trigger_body;
    return this;
}

Trigger_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_bodyContext.prototype.constructor = Trigger_bodyContext;

Trigger_bodyContext.prototype.COMPOUND = function() {
    return this.getToken(plsqlParser.COMPOUND, 0);
};

Trigger_bodyContext.prototype.TRIGGER = function() {
    return this.getToken(plsqlParser.TRIGGER, 0);
};

Trigger_bodyContext.prototype.CALL = function() {
    return this.getToken(plsqlParser.CALL, 0);
};

Trigger_bodyContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Trigger_bodyContext.prototype.trigger_block = function() {
    return this.getTypedRuleContext(Trigger_blockContext,0);
};

Trigger_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTrigger_body(this);
	}
};

Trigger_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTrigger_body(this);
	}
};




plsqlParser.Trigger_bodyContext = Trigger_bodyContext;

plsqlParser.prototype.trigger_body = function() {

    var localctx = new Trigger_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, plsqlParser.RULE_trigger_body);
    try {
        this.state = 1235;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1230;
            this.match(plsqlParser.COMPOUND);
            this.state = 1231;
            this.match(plsqlParser.TRIGGER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1232;
            this.match(plsqlParser.CALL);
            this.state = 1233;
            this.r_id();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1234;
            this.trigger_block();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Routine_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_routine_clause;
    return this;
}

Routine_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Routine_clauseContext.prototype.constructor = Routine_clauseContext;

Routine_clauseContext.prototype.routine_name = function() {
    return this.getTypedRuleContext(Routine_nameContext,0);
};

Routine_clauseContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

Routine_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRoutine_clause(this);
	}
};

Routine_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRoutine_clause(this);
	}
};




plsqlParser.Routine_clauseContext = Routine_clauseContext;

plsqlParser.prototype.routine_clause = function() {

    var localctx = new Routine_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, plsqlParser.RULE_routine_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        this.routine_name();
        this.state = 1239;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 1238;
            this.function_argument();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_trigger_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_compound_trigger_block;
    return this;
}

Compound_trigger_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_trigger_blockContext.prototype.constructor = Compound_trigger_blockContext;

Compound_trigger_blockContext.prototype.COMPOUND = function() {
    return this.getToken(plsqlParser.COMPOUND, 0);
};

Compound_trigger_blockContext.prototype.TRIGGER = function() {
    return this.getToken(plsqlParser.TRIGGER, 0);
};

Compound_trigger_blockContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

Compound_trigger_blockContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Compound_trigger_blockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Compound_trigger_blockContext.prototype.timing_point_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Timing_point_sectionContext);
    } else {
        return this.getTypedRuleContext(Timing_point_sectionContext,i);
    }
};

Compound_trigger_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCompound_trigger_block(this);
	}
};

Compound_trigger_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCompound_trigger_block(this);
	}
};




plsqlParser.Compound_trigger_blockContext = Compound_trigger_blockContext;

plsqlParser.prototype.compound_trigger_block = function() {

    var localctx = new Compound_trigger_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, plsqlParser.RULE_compound_trigger_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1241;
        this.match(plsqlParser.COMPOUND);
        this.state = 1242;
        this.match(plsqlParser.TRIGGER);
        this.state = 1246;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1243;
                this.declare_spec(); 
            }
            this.state = 1248;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

        this.state = 1250; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1249;
            this.timing_point_section();
            this.state = 1252; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.AFTER || _la===plsqlParser.BEFORE);
        this.state = 1254;
        this.match(plsqlParser.END);
        this.state = 1255;
        this.trigger_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Timing_point_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_timing_point_section;
    this.bk = null; // Token
    this.ak = null; // Token
    return this;
}

Timing_point_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timing_point_sectionContext.prototype.constructor = Timing_point_sectionContext;

Timing_point_sectionContext.prototype.STATEMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.STATEMENT);
    } else {
        return this.getToken(plsqlParser.STATEMENT, i);
    }
};


Timing_point_sectionContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Timing_point_sectionContext.prototype.trigger_block = function() {
    return this.getTypedRuleContext(Trigger_blockContext,0);
};

Timing_point_sectionContext.prototype.BEFORE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.BEFORE);
    } else {
        return this.getToken(plsqlParser.BEFORE, i);
    }
};


Timing_point_sectionContext.prototype.EACH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.EACH);
    } else {
        return this.getToken(plsqlParser.EACH, i);
    }
};


Timing_point_sectionContext.prototype.ROW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.ROW);
    } else {
        return this.getToken(plsqlParser.ROW, i);
    }
};


Timing_point_sectionContext.prototype.AFTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.AFTER);
    } else {
        return this.getToken(plsqlParser.AFTER, i);
    }
};


Timing_point_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTiming_point_section(this);
	}
};

Timing_point_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTiming_point_section(this);
	}
};




plsqlParser.Timing_point_sectionContext = Timing_point_sectionContext;

plsqlParser.prototype.timing_point_section = function() {

    var localctx = new Timing_point_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, plsqlParser.RULE_timing_point_section);
    try {
        this.state = 1293;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1257;
            localctx.bk = this.match(plsqlParser.BEFORE);
            this.state = 1258;
            this.match(plsqlParser.STATEMENT);
            this.state = 1259;
            this.match(plsqlParser.IS);
            this.state = 1260;
            this.trigger_block();
            this.state = 1261;
            this.match(plsqlParser.BEFORE);
            this.state = 1262;
            this.match(plsqlParser.STATEMENT);
            this.state = 1263;
            this.match(plsqlParser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1265;
            localctx.bk = this.match(plsqlParser.BEFORE);
            this.state = 1266;
            this.match(plsqlParser.EACH);
            this.state = 1267;
            this.match(plsqlParser.ROW);
            this.state = 1268;
            this.match(plsqlParser.IS);
            this.state = 1269;
            this.trigger_block();
            this.state = 1270;
            this.match(plsqlParser.BEFORE);
            this.state = 1271;
            this.match(plsqlParser.EACH);
            this.state = 1272;
            this.match(plsqlParser.ROW);
            this.state = 1273;
            this.match(plsqlParser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1275;
            localctx.ak = this.match(plsqlParser.AFTER);
            this.state = 1276;
            this.match(plsqlParser.STATEMENT);
            this.state = 1277;
            this.match(plsqlParser.IS);
            this.state = 1278;
            this.trigger_block();
            this.state = 1279;
            this.match(plsqlParser.AFTER);
            this.state = 1280;
            this.match(plsqlParser.STATEMENT);
            this.state = 1281;
            this.match(plsqlParser.SEMICOLON);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1283;
            localctx.ak = this.match(plsqlParser.AFTER);
            this.state = 1284;
            this.match(plsqlParser.EACH);
            this.state = 1285;
            this.match(plsqlParser.ROW);
            this.state = 1286;
            this.match(plsqlParser.IS);
            this.state = 1287;
            this.trigger_block();
            this.state = 1288;
            this.match(plsqlParser.AFTER);
            this.state = 1289;
            this.match(plsqlParser.EACH);
            this.state = 1290;
            this.match(plsqlParser.ROW);
            this.state = 1291;
            this.match(plsqlParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_dml_eventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_non_dml_event;
    return this;
}

Non_dml_eventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_dml_eventContext.prototype.constructor = Non_dml_eventContext;

Non_dml_eventContext.prototype.ALTER = function() {
    return this.getToken(plsqlParser.ALTER, 0);
};

Non_dml_eventContext.prototype.ANALYZE = function() {
    return this.getToken(plsqlParser.ANALYZE, 0);
};

Non_dml_eventContext.prototype.ASSOCIATE = function() {
    return this.getToken(plsqlParser.ASSOCIATE, 0);
};

Non_dml_eventContext.prototype.STATISTICS = function() {
    return this.getToken(plsqlParser.STATISTICS, 0);
};

Non_dml_eventContext.prototype.AUDIT = function() {
    return this.getToken(plsqlParser.AUDIT, 0);
};

Non_dml_eventContext.prototype.COMMENT = function() {
    return this.getToken(plsqlParser.COMMENT, 0);
};

Non_dml_eventContext.prototype.CREATE = function() {
    return this.getToken(plsqlParser.CREATE, 0);
};

Non_dml_eventContext.prototype.DISASSOCIATE = function() {
    return this.getToken(plsqlParser.DISASSOCIATE, 0);
};

Non_dml_eventContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Non_dml_eventContext.prototype.GRANT = function() {
    return this.getToken(plsqlParser.GRANT, 0);
};

Non_dml_eventContext.prototype.NOAUDIT = function() {
    return this.getToken(plsqlParser.NOAUDIT, 0);
};

Non_dml_eventContext.prototype.RENAME = function() {
    return this.getToken(plsqlParser.RENAME, 0);
};

Non_dml_eventContext.prototype.REVOKE = function() {
    return this.getToken(plsqlParser.REVOKE, 0);
};

Non_dml_eventContext.prototype.TRUNCATE = function() {
    return this.getToken(plsqlParser.TRUNCATE, 0);
};

Non_dml_eventContext.prototype.DDL = function() {
    return this.getToken(plsqlParser.DDL, 0);
};

Non_dml_eventContext.prototype.STARTUP = function() {
    return this.getToken(plsqlParser.STARTUP, 0);
};

Non_dml_eventContext.prototype.SHUTDOWN = function() {
    return this.getToken(plsqlParser.SHUTDOWN, 0);
};

Non_dml_eventContext.prototype.DB_ROLE_CHANGE = function() {
    return this.getToken(plsqlParser.DB_ROLE_CHANGE, 0);
};

Non_dml_eventContext.prototype.LOGON = function() {
    return this.getToken(plsqlParser.LOGON, 0);
};

Non_dml_eventContext.prototype.LOGOFF = function() {
    return this.getToken(plsqlParser.LOGOFF, 0);
};

Non_dml_eventContext.prototype.SERVERERROR = function() {
    return this.getToken(plsqlParser.SERVERERROR, 0);
};

Non_dml_eventContext.prototype.SUSPEND = function() {
    return this.getToken(plsqlParser.SUSPEND, 0);
};

Non_dml_eventContext.prototype.DATABASE = function() {
    return this.getToken(plsqlParser.DATABASE, 0);
};

Non_dml_eventContext.prototype.SCHEMA = function() {
    return this.getToken(plsqlParser.SCHEMA, 0);
};

Non_dml_eventContext.prototype.FOLLOWS = function() {
    return this.getToken(plsqlParser.FOLLOWS, 0);
};

Non_dml_eventContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNon_dml_event(this);
	}
};

Non_dml_eventContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNon_dml_event(this);
	}
};




plsqlParser.Non_dml_eventContext = Non_dml_eventContext;

plsqlParser.prototype.non_dml_event = function() {

    var localctx = new Non_dml_eventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, plsqlParser.RULE_non_dml_event);
    try {
        this.state = 1321;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.ALTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1295;
            this.match(plsqlParser.ALTER);
            break;
        case plsqlParser.ANALYZE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1296;
            this.match(plsqlParser.ANALYZE);
            break;
        case plsqlParser.ASSOCIATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1297;
            this.match(plsqlParser.ASSOCIATE);
            this.state = 1298;
            this.match(plsqlParser.STATISTICS);
            break;
        case plsqlParser.AUDIT:
            this.enterOuterAlt(localctx, 4);
            this.state = 1299;
            this.match(plsqlParser.AUDIT);
            break;
        case plsqlParser.COMMENT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1300;
            this.match(plsqlParser.COMMENT);
            break;
        case plsqlParser.CREATE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1301;
            this.match(plsqlParser.CREATE);
            break;
        case plsqlParser.DISASSOCIATE:
            this.enterOuterAlt(localctx, 7);
            this.state = 1302;
            this.match(plsqlParser.DISASSOCIATE);
            this.state = 1303;
            this.match(plsqlParser.STATISTICS);
            break;
        case plsqlParser.DROP:
            this.enterOuterAlt(localctx, 8);
            this.state = 1304;
            this.match(plsqlParser.DROP);
            break;
        case plsqlParser.GRANT:
            this.enterOuterAlt(localctx, 9);
            this.state = 1305;
            this.match(plsqlParser.GRANT);
            break;
        case plsqlParser.NOAUDIT:
            this.enterOuterAlt(localctx, 10);
            this.state = 1306;
            this.match(plsqlParser.NOAUDIT);
            break;
        case plsqlParser.RENAME:
            this.enterOuterAlt(localctx, 11);
            this.state = 1307;
            this.match(plsqlParser.RENAME);
            break;
        case plsqlParser.REVOKE:
            this.enterOuterAlt(localctx, 12);
            this.state = 1308;
            this.match(plsqlParser.REVOKE);
            break;
        case plsqlParser.TRUNCATE:
            this.enterOuterAlt(localctx, 13);
            this.state = 1309;
            this.match(plsqlParser.TRUNCATE);
            break;
        case plsqlParser.DDL:
            this.enterOuterAlt(localctx, 14);
            this.state = 1310;
            this.match(plsqlParser.DDL);
            break;
        case plsqlParser.STARTUP:
            this.enterOuterAlt(localctx, 15);
            this.state = 1311;
            this.match(plsqlParser.STARTUP);
            break;
        case plsqlParser.SHUTDOWN:
            this.enterOuterAlt(localctx, 16);
            this.state = 1312;
            this.match(plsqlParser.SHUTDOWN);
            break;
        case plsqlParser.DB_ROLE_CHANGE:
            this.enterOuterAlt(localctx, 17);
            this.state = 1313;
            this.match(plsqlParser.DB_ROLE_CHANGE);
            break;
        case plsqlParser.LOGON:
            this.enterOuterAlt(localctx, 18);
            this.state = 1314;
            this.match(plsqlParser.LOGON);
            break;
        case plsqlParser.LOGOFF:
            this.enterOuterAlt(localctx, 19);
            this.state = 1315;
            this.match(plsqlParser.LOGOFF);
            break;
        case plsqlParser.SERVERERROR:
            this.enterOuterAlt(localctx, 20);
            this.state = 1316;
            this.match(plsqlParser.SERVERERROR);
            break;
        case plsqlParser.SUSPEND:
            this.enterOuterAlt(localctx, 21);
            this.state = 1317;
            this.match(plsqlParser.SUSPEND);
            break;
        case plsqlParser.DATABASE:
            this.enterOuterAlt(localctx, 22);
            this.state = 1318;
            this.match(plsqlParser.DATABASE);
            break;
        case plsqlParser.SCHEMA:
            this.enterOuterAlt(localctx, 23);
            this.state = 1319;
            this.match(plsqlParser.SCHEMA);
            break;
        case plsqlParser.FOLLOWS:
            this.enterOuterAlt(localctx, 24);
            this.state = 1320;
            this.match(plsqlParser.FOLLOWS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_dml_event_clause;
    return this;
}

Dml_event_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_clauseContext.prototype.constructor = Dml_event_clauseContext;

Dml_event_clauseContext.prototype.dml_event_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dml_event_elementContext);
    } else {
        return this.getTypedRuleContext(Dml_event_elementContext,i);
    }
};

Dml_event_clauseContext.prototype.ON = function() {
    return this.getToken(plsqlParser.ON, 0);
};

Dml_event_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_event_clauseContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.OR);
    } else {
        return this.getToken(plsqlParser.OR, i);
    }
};


Dml_event_clauseContext.prototype.dml_event_nested_clause = function() {
    return this.getTypedRuleContext(Dml_event_nested_clauseContext,0);
};

Dml_event_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDml_event_clause(this);
	}
};

Dml_event_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDml_event_clause(this);
	}
};




plsqlParser.Dml_event_clauseContext = Dml_event_clauseContext;

plsqlParser.prototype.dml_event_clause = function() {

    var localctx = new Dml_event_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, plsqlParser.RULE_dml_event_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1323;
        this.dml_event_element();
        this.state = 1328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.OR) {
            this.state = 1324;
            this.match(plsqlParser.OR);
            this.state = 1325;
            this.dml_event_element();
            this.state = 1330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1331;
        this.match(plsqlParser.ON);
        this.state = 1333;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 1332;
            this.dml_event_nested_clause();

        }
        this.state = 1335;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_dml_event_element;
    return this;
}

Dml_event_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_elementContext.prototype.constructor = Dml_event_elementContext;

Dml_event_elementContext.prototype.DELETE = function() {
    return this.getToken(plsqlParser.DELETE, 0);
};

Dml_event_elementContext.prototype.INSERT = function() {
    return this.getToken(plsqlParser.INSERT, 0);
};

Dml_event_elementContext.prototype.UPDATE = function() {
    return this.getToken(plsqlParser.UPDATE, 0);
};

Dml_event_elementContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Dml_event_elementContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Dml_event_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDml_event_element(this);
	}
};

Dml_event_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDml_event_element(this);
	}
};




plsqlParser.Dml_event_elementContext = Dml_event_elementContext;

plsqlParser.prototype.dml_event_element = function() {

    var localctx = new Dml_event_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, plsqlParser.RULE_dml_event_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1337;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.DELETE || _la===plsqlParser.INSERT || _la===plsqlParser.UPDATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.OF) {
            this.state = 1338;
            this.match(plsqlParser.OF);
            this.state = 1339;
            this.column_name();
            this.state = 1344;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1340;
                this.match(plsqlParser.COMMA);
                this.state = 1341;
                this.column_name();
                this.state = 1346;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_nested_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_dml_event_nested_clause;
    return this;
}

Dml_event_nested_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_nested_clauseContext.prototype.constructor = Dml_event_nested_clauseContext;

Dml_event_nested_clauseContext.prototype.NESTED = function() {
    return this.getToken(plsqlParser.NESTED, 0);
};

Dml_event_nested_clauseContext.prototype.TABLE = function() {
    return this.getToken(plsqlParser.TABLE, 0);
};

Dml_event_nested_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_event_nested_clauseContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Dml_event_nested_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDml_event_nested_clause(this);
	}
};

Dml_event_nested_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDml_event_nested_clause(this);
	}
};




plsqlParser.Dml_event_nested_clauseContext = Dml_event_nested_clauseContext;

plsqlParser.prototype.dml_event_nested_clause = function() {

    var localctx = new Dml_event_nested_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, plsqlParser.RULE_dml_event_nested_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1349;
        this.match(plsqlParser.NESTED);
        this.state = 1350;
        this.match(plsqlParser.TABLE);
        this.state = 1351;
        this.tableview_name();
        this.state = 1352;
        this.match(plsqlParser.OF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Referencing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_referencing_clause;
    return this;
}

Referencing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Referencing_clauseContext.prototype.constructor = Referencing_clauseContext;

Referencing_clauseContext.prototype.REFERENCING = function() {
    return this.getToken(plsqlParser.REFERENCING, 0);
};

Referencing_clauseContext.prototype.referencing_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Referencing_elementContext);
    } else {
        return this.getTypedRuleContext(Referencing_elementContext,i);
    }
};

Referencing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterReferencing_clause(this);
	}
};

Referencing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitReferencing_clause(this);
	}
};




plsqlParser.Referencing_clauseContext = Referencing_clauseContext;

plsqlParser.prototype.referencing_clause = function() {

    var localctx = new Referencing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, plsqlParser.RULE_referencing_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1354;
        this.match(plsqlParser.REFERENCING);
        this.state = 1356; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1355;
        		this.referencing_element();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1358; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,87, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Referencing_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_referencing_element;
    return this;
}

Referencing_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Referencing_elementContext.prototype.constructor = Referencing_elementContext;

Referencing_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Referencing_elementContext.prototype.NEW = function() {
    return this.getToken(plsqlParser.NEW, 0);
};

Referencing_elementContext.prototype.OLD = function() {
    return this.getToken(plsqlParser.OLD, 0);
};

Referencing_elementContext.prototype.PARENT = function() {
    return this.getToken(plsqlParser.PARENT, 0);
};

Referencing_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterReferencing_element(this);
	}
};

Referencing_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitReferencing_element(this);
	}
};




plsqlParser.Referencing_elementContext = Referencing_elementContext;

plsqlParser.prototype.referencing_element = function() {

    var localctx = new Referencing_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, plsqlParser.RULE_referencing_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1360;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.NEW || _la===plsqlParser.OLD || _la===plsqlParser.PARENT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1361;
        this.column_alias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_drop_type;
    return this;
}

Drop_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_typeContext.prototype.constructor = Drop_typeContext;

Drop_typeContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Drop_typeContext.prototype.TYPE = function() {
    return this.getToken(plsqlParser.TYPE, 0);
};

Drop_typeContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Drop_typeContext.prototype.BODY = function() {
    return this.getToken(plsqlParser.BODY, 0);
};

Drop_typeContext.prototype.FORCE = function() {
    return this.getToken(plsqlParser.FORCE, 0);
};

Drop_typeContext.prototype.VALIDATE = function() {
    return this.getToken(plsqlParser.VALIDATE, 0);
};

Drop_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDrop_type(this);
	}
};

Drop_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDrop_type(this);
	}
};




plsqlParser.Drop_typeContext = Drop_typeContext;

plsqlParser.prototype.drop_type = function() {

    var localctx = new Drop_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, plsqlParser.RULE_drop_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1363;
        this.match(plsqlParser.DROP);
        this.state = 1364;
        this.match(plsqlParser.TYPE);
        this.state = 1366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 1365;
            this.match(plsqlParser.BODY);

        }
        this.state = 1368;
        this.type_name();
        this.state = 1370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.FORCE || _la===plsqlParser.VALIDATE) {
            this.state = 1369;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.FORCE || _la===plsqlParser.VALIDATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_type;
    return this;
}

Alter_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_typeContext.prototype.constructor = Alter_typeContext;

Alter_typeContext.prototype.ALTER = function() {
    return this.getToken(plsqlParser.ALTER, 0);
};

Alter_typeContext.prototype.TYPE = function() {
    return this.getToken(plsqlParser.TYPE, 0);
};

Alter_typeContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Alter_typeContext.prototype.compile_type_clause = function() {
    return this.getTypedRuleContext(Compile_type_clauseContext,0);
};

Alter_typeContext.prototype.replace_type_clause = function() {
    return this.getTypedRuleContext(Replace_type_clauseContext,0);
};

Alter_typeContext.prototype.alter_method_spec = function() {
    return this.getTypedRuleContext(Alter_method_specContext,0);
};

Alter_typeContext.prototype.alter_collection_clauses = function() {
    return this.getTypedRuleContext(Alter_collection_clausesContext,0);
};

Alter_typeContext.prototype.modifier_clause = function() {
    return this.getTypedRuleContext(Modifier_clauseContext,0);
};

Alter_typeContext.prototype.dependent_handling_clause = function() {
    return this.getTypedRuleContext(Dependent_handling_clauseContext,0);
};

Alter_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_type(this);
	}
};

Alter_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_type(this);
	}
};




plsqlParser.Alter_typeContext = Alter_typeContext;

plsqlParser.prototype.alter_type = function() {

    var localctx = new Alter_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, plsqlParser.RULE_alter_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1372;
        this.match(plsqlParser.ALTER);
        this.state = 1373;
        this.match(plsqlParser.TYPE);
        this.state = 1374;
        this.type_name();
        this.state = 1380;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.COMPILE:
            this.state = 1375;
            this.compile_type_clause();
            break;
        case plsqlParser.REPLACE:
            this.state = 1376;
            this.replace_type_clause();
            break;
        case plsqlParser.ADD:
        case plsqlParser.DROP:
            this.state = 1377;
            this.alter_method_spec();
            break;
        case plsqlParser.MODIFY:
            this.state = 1378;
            this.alter_collection_clauses();
            break;
        case plsqlParser.FINAL:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.NOT:
        case plsqlParser.OVERRIDING:
            this.state = 1379;
            this.modifier_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.CASCADE || _la===plsqlParser.INVALIDATE) {
            this.state = 1382;
            this.dependent_handling_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compile_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_compile_type_clause;
    return this;
}

Compile_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compile_type_clauseContext.prototype.constructor = Compile_type_clauseContext;

Compile_type_clauseContext.prototype.COMPILE = function() {
    return this.getToken(plsqlParser.COMPILE, 0);
};

Compile_type_clauseContext.prototype.DEBUG = function() {
    return this.getToken(plsqlParser.DEBUG, 0);
};

Compile_type_clauseContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Compile_type_clauseContext.prototype.REUSE = function() {
    return this.getToken(plsqlParser.REUSE, 0);
};

Compile_type_clauseContext.prototype.SETTINGS = function() {
    return this.getToken(plsqlParser.SETTINGS, 0);
};

Compile_type_clauseContext.prototype.SPECIFICATION = function() {
    return this.getToken(plsqlParser.SPECIFICATION, 0);
};

Compile_type_clauseContext.prototype.BODY = function() {
    return this.getToken(plsqlParser.BODY, 0);
};

Compile_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCompile_type_clause(this);
	}
};

Compile_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCompile_type_clause(this);
	}
};




plsqlParser.Compile_type_clauseContext = Compile_type_clauseContext;

plsqlParser.prototype.compile_type_clause = function() {

    var localctx = new Compile_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, plsqlParser.RULE_compile_type_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1385;
        this.match(plsqlParser.COMPILE);
        this.state = 1387;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        if(la_===1) {
            this.state = 1386;
            this.match(plsqlParser.DEBUG);

        }
        this.state = 1390;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 1389;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.BODY || _la===plsqlParser.SPECIFICATION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1395;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1392;
                this.compiler_parameters_clause(); 
            }
            this.state = 1397;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
        }

        this.state = 1400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.REUSE) {
            this.state = 1398;
            this.match(plsqlParser.REUSE);
            this.state = 1399;
            this.match(plsqlParser.SETTINGS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Replace_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_replace_type_clause;
    return this;
}

Replace_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Replace_type_clauseContext.prototype.constructor = Replace_type_clauseContext;

Replace_type_clauseContext.prototype.REPLACE = function() {
    return this.getToken(plsqlParser.REPLACE, 0);
};

Replace_type_clauseContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Replace_type_clauseContext.prototype.OBJECT = function() {
    return this.getToken(plsqlParser.OBJECT, 0);
};

Replace_type_clauseContext.prototype.object_member_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_member_specContext);
    } else {
        return this.getTypedRuleContext(Object_member_specContext,i);
    }
};

Replace_type_clauseContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Replace_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterReplace_type_clause(this);
	}
};

Replace_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitReplace_type_clause(this);
	}
};




plsqlParser.Replace_type_clauseContext = Replace_type_clauseContext;

plsqlParser.prototype.replace_type_clause = function() {

    var localctx = new Replace_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, plsqlParser.RULE_replace_type_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1402;
        this.match(plsqlParser.REPLACE);
        this.state = 1404;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AUTHID) {
            this.state = 1403;
            this.invoker_rights_clause();
        }

        this.state = 1406;
        this.match(plsqlParser.AS);
        this.state = 1407;
        this.match(plsqlParser.OBJECT);
        this.state = 1408;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 1409;
        this.object_member_spec();
        this.state = 1414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 1410;
            this.match(plsqlParser.COMMA);
            this.state = 1411;
            this.object_member_spec();
            this.state = 1416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1417;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_method_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_method_spec;
    return this;
}

Alter_method_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_method_specContext.prototype.constructor = Alter_method_specContext;

Alter_method_specContext.prototype.alter_method_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Alter_method_elementContext);
    } else {
        return this.getTypedRuleContext(Alter_method_elementContext,i);
    }
};

Alter_method_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_method_spec(this);
	}
};

Alter_method_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_method_spec(this);
	}
};




plsqlParser.Alter_method_specContext = Alter_method_specContext;

plsqlParser.prototype.alter_method_spec = function() {

    var localctx = new Alter_method_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, plsqlParser.RULE_alter_method_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1419;
        this.alter_method_element();
        this.state = 1424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 1420;
            this.match(plsqlParser.COMMA);
            this.state = 1421;
            this.alter_method_element();
            this.state = 1426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_method_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_method_element;
    return this;
}

Alter_method_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_method_elementContext.prototype.constructor = Alter_method_elementContext;

Alter_method_elementContext.prototype.ADD = function() {
    return this.getToken(plsqlParser.ADD, 0);
};

Alter_method_elementContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Alter_method_elementContext.prototype.map_order_function_spec = function() {
    return this.getTypedRuleContext(Map_order_function_specContext,0);
};

Alter_method_elementContext.prototype.subprogram_spec = function() {
    return this.getTypedRuleContext(Subprogram_specContext,0);
};

Alter_method_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_method_element(this);
	}
};

Alter_method_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_method_element(this);
	}
};




plsqlParser.Alter_method_elementContext = Alter_method_elementContext;

plsqlParser.prototype.alter_method_element = function() {

    var localctx = new Alter_method_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, plsqlParser.RULE_alter_method_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1427;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.ADD || _la===plsqlParser.DROP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1430;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.MAP:
        case plsqlParser.ORDER:
            this.state = 1428;
            this.map_order_function_spec();
            break;
        case plsqlParser.MEMBER:
        case plsqlParser.STATIC:
            this.state = 1429;
            this.subprogram_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_attribute_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_attribute_definition;
    return this;
}

Alter_attribute_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_attribute_definitionContext.prototype.constructor = Alter_attribute_definitionContext;

Alter_attribute_definitionContext.prototype.ATTRIBUTE = function() {
    return this.getToken(plsqlParser.ATTRIBUTE, 0);
};

Alter_attribute_definitionContext.prototype.ADD = function() {
    return this.getToken(plsqlParser.ADD, 0);
};

Alter_attribute_definitionContext.prototype.MODIFY = function() {
    return this.getToken(plsqlParser.MODIFY, 0);
};

Alter_attribute_definitionContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Alter_attribute_definitionContext.prototype.attribute_definition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_definitionContext);
    } else {
        return this.getTypedRuleContext(Attribute_definitionContext,i);
    }
};

Alter_attribute_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_attribute_definition(this);
	}
};

Alter_attribute_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_attribute_definition(this);
	}
};




plsqlParser.Alter_attribute_definitionContext = Alter_attribute_definitionContext;

plsqlParser.prototype.alter_attribute_definition = function() {

    var localctx = new Alter_attribute_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, plsqlParser.RULE_alter_attribute_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1432;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.ADD || _la===plsqlParser.DROP || _la===plsqlParser.MODIFY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1433;
        this.match(plsqlParser.ATTRIBUTE);
        this.state = 1446;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 1434;
            this.attribute_definition();
            break;
        case plsqlParser.LEFT_PAREN:
            this.state = 1435;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 1436;
            this.attribute_definition();
            this.state = 1441;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1437;
                this.match(plsqlParser.COMMA);
                this.state = 1438;
                this.attribute_definition();
                this.state = 1443;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1444;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_attribute_definition;
    return this;
}

Attribute_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_definitionContext.prototype.constructor = Attribute_definitionContext;

Attribute_definitionContext.prototype.attribute_name = function() {
    return this.getTypedRuleContext(Attribute_nameContext,0);
};

Attribute_definitionContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Attribute_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAttribute_definition(this);
	}
};

Attribute_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAttribute_definition(this);
	}
};




plsqlParser.Attribute_definitionContext = Attribute_definitionContext;

plsqlParser.prototype.attribute_definition = function() {

    var localctx = new Attribute_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, plsqlParser.RULE_attribute_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1448;
        this.attribute_name();
        this.state = 1450;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DATE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 1449;
            this.type_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_collection_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_collection_clauses;
    return this;
}

Alter_collection_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_collection_clausesContext.prototype.constructor = Alter_collection_clausesContext;

Alter_collection_clausesContext.prototype.MODIFY = function() {
    return this.getToken(plsqlParser.MODIFY, 0);
};

Alter_collection_clausesContext.prototype.LIMIT = function() {
    return this.getToken(plsqlParser.LIMIT, 0);
};

Alter_collection_clausesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Alter_collection_clausesContext.prototype.ELEMENT = function() {
    return this.getToken(plsqlParser.ELEMENT, 0);
};

Alter_collection_clausesContext.prototype.TYPE = function() {
    return this.getToken(plsqlParser.TYPE, 0);
};

Alter_collection_clausesContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Alter_collection_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_collection_clauses(this);
	}
};

Alter_collection_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_collection_clauses(this);
	}
};




plsqlParser.Alter_collection_clausesContext = Alter_collection_clausesContext;

plsqlParser.prototype.alter_collection_clauses = function() {

    var localctx = new Alter_collection_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, plsqlParser.RULE_alter_collection_clauses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1452;
        this.match(plsqlParser.MODIFY);
        this.state = 1458;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.LIMIT:
            this.state = 1453;
            this.match(plsqlParser.LIMIT);
            this.state = 1454;
            this.expression(0);
            break;
        case plsqlParser.ELEMENT:
            this.state = 1455;
            this.match(plsqlParser.ELEMENT);
            this.state = 1456;
            this.match(plsqlParser.TYPE);
            this.state = 1457;
            this.type_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dependent_handling_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_dependent_handling_clause;
    return this;
}

Dependent_handling_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dependent_handling_clauseContext.prototype.constructor = Dependent_handling_clauseContext;

Dependent_handling_clauseContext.prototype.INVALIDATE = function() {
    return this.getToken(plsqlParser.INVALIDATE, 0);
};

Dependent_handling_clauseContext.prototype.CASCADE = function() {
    return this.getToken(plsqlParser.CASCADE, 0);
};

Dependent_handling_clauseContext.prototype.CONVERT = function() {
    return this.getToken(plsqlParser.CONVERT, 0);
};

Dependent_handling_clauseContext.prototype.TO = function() {
    return this.getToken(plsqlParser.TO, 0);
};

Dependent_handling_clauseContext.prototype.SUBSTITUTABLE = function() {
    return this.getToken(plsqlParser.SUBSTITUTABLE, 0);
};

Dependent_handling_clauseContext.prototype.INCLUDING = function() {
    return this.getToken(plsqlParser.INCLUDING, 0);
};

Dependent_handling_clauseContext.prototype.TABLE = function() {
    return this.getToken(plsqlParser.TABLE, 0);
};

Dependent_handling_clauseContext.prototype.DATA = function() {
    return this.getToken(plsqlParser.DATA, 0);
};

Dependent_handling_clauseContext.prototype.dependent_exceptions_part = function() {
    return this.getTypedRuleContext(Dependent_exceptions_partContext,0);
};

Dependent_handling_clauseContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Dependent_handling_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDependent_handling_clause(this);
	}
};

Dependent_handling_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDependent_handling_clause(this);
	}
};




plsqlParser.Dependent_handling_clauseContext = Dependent_handling_clauseContext;

plsqlParser.prototype.dependent_handling_clause = function() {

    var localctx = new Dependent_handling_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, plsqlParser.RULE_dependent_handling_clause);
    var _la = 0; // Token type
    try {
        this.state = 1476;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.INVALIDATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1460;
            this.match(plsqlParser.INVALIDATE);
            break;
        case plsqlParser.CASCADE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1461;
            this.match(plsqlParser.CASCADE);
            this.state = 1471;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case plsqlParser.CONVERT:
            	this.state = 1462;
            	this.match(plsqlParser.CONVERT);
            	this.state = 1463;
            	this.match(plsqlParser.TO);
            	this.state = 1464;
            	this.match(plsqlParser.SUBSTITUTABLE);
            	break;
            case plsqlParser.INCLUDING:
            case plsqlParser.NOT:
            	this.state = 1466;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===plsqlParser.NOT) {
            	    this.state = 1465;
            	    this.match(plsqlParser.NOT);
            	}

            	this.state = 1468;
            	this.match(plsqlParser.INCLUDING);
            	this.state = 1469;
            	this.match(plsqlParser.TABLE);
            	this.state = 1470;
            	this.match(plsqlParser.DATA);
            	break;
            case plsqlParser.EOF:
            case plsqlParser.ALTER:
            case plsqlParser.CREATE:
            case plsqlParser.DELETE:
            case plsqlParser.DROP:
            case plsqlParser.EXCEPTIONS:
            case plsqlParser.EXPLAIN:
            case plsqlParser.FORCE:
            case plsqlParser.FUNCTION:
            case plsqlParser.INSERT:
            case plsqlParser.LOCK:
            case plsqlParser.MERGE:
            case plsqlParser.PROCEDURE:
            case plsqlParser.SELECT:
            case plsqlParser.UPDATE:
            case plsqlParser.WITH:
            case plsqlParser.LEFT_PAREN:
            case plsqlParser.SEMICOLON:
            	break;
            default:
            	break;
            }
            this.state = 1474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.EXCEPTIONS || _la===plsqlParser.FORCE) {
                this.state = 1473;
                this.dependent_exceptions_part();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dependent_exceptions_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_dependent_exceptions_part;
    return this;
}

Dependent_exceptions_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dependent_exceptions_partContext.prototype.constructor = Dependent_exceptions_partContext;

Dependent_exceptions_partContext.prototype.EXCEPTIONS = function() {
    return this.getToken(plsqlParser.EXCEPTIONS, 0);
};

Dependent_exceptions_partContext.prototype.INTO = function() {
    return this.getToken(plsqlParser.INTO, 0);
};

Dependent_exceptions_partContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dependent_exceptions_partContext.prototype.FORCE = function() {
    return this.getToken(plsqlParser.FORCE, 0);
};

Dependent_exceptions_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDependent_exceptions_part(this);
	}
};

Dependent_exceptions_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDependent_exceptions_part(this);
	}
};




plsqlParser.Dependent_exceptions_partContext = Dependent_exceptions_partContext;

plsqlParser.prototype.dependent_exceptions_part = function() {

    var localctx = new Dependent_exceptions_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, plsqlParser.RULE_dependent_exceptions_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.FORCE) {
            this.state = 1478;
            this.match(plsqlParser.FORCE);
        }

        this.state = 1481;
        this.match(plsqlParser.EXCEPTIONS);
        this.state = 1482;
        this.match(plsqlParser.INTO);
        this.state = 1483;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_create_type;
    return this;
}

Create_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_typeContext.prototype.constructor = Create_typeContext;

Create_typeContext.prototype.CREATE = function() {
    return this.getToken(plsqlParser.CREATE, 0);
};

Create_typeContext.prototype.TYPE = function() {
    return this.getToken(plsqlParser.TYPE, 0);
};

Create_typeContext.prototype.type_definition = function() {
    return this.getTypedRuleContext(Type_definitionContext,0);
};

Create_typeContext.prototype.type_body = function() {
    return this.getTypedRuleContext(Type_bodyContext,0);
};

Create_typeContext.prototype.OR = function() {
    return this.getToken(plsqlParser.OR, 0);
};

Create_typeContext.prototype.REPLACE = function() {
    return this.getToken(plsqlParser.REPLACE, 0);
};

Create_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCreate_type(this);
	}
};

Create_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCreate_type(this);
	}
};




plsqlParser.Create_typeContext = Create_typeContext;

plsqlParser.prototype.create_type = function() {

    var localctx = new Create_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, plsqlParser.RULE_create_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1485;
        this.match(plsqlParser.CREATE);
        this.state = 1488;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.OR) {
            this.state = 1486;
            this.match(plsqlParser.OR);
            this.state = 1487;
            this.match(plsqlParser.REPLACE);
        }

        this.state = 1490;
        this.match(plsqlParser.TYPE);
        this.state = 1493;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1491;
            this.type_definition();
            break;

        case 2:
            this.state = 1492;
            this.type_body();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_type_definition;
    return this;
}

Type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_definitionContext.prototype.constructor = Type_definitionContext;

Type_definitionContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_definitionContext.prototype.OID = function() {
    return this.getToken(plsqlParser.OID, 0);
};

Type_definitionContext.prototype.CHAR_STRING = function() {
    return this.getToken(plsqlParser.CHAR_STRING, 0);
};

Type_definitionContext.prototype.object_type_def = function() {
    return this.getTypedRuleContext(Object_type_defContext,0);
};

Type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterType_definition(this);
	}
};

Type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitType_definition(this);
	}
};




plsqlParser.Type_definitionContext = Type_definitionContext;

plsqlParser.prototype.type_definition = function() {

    var localctx = new Type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, plsqlParser.RULE_type_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1495;
        this.type_name();
        this.state = 1498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.OID) {
            this.state = 1496;
            this.match(plsqlParser.OID);
            this.state = 1497;
            this.match(plsqlParser.CHAR_STRING);
        }

        this.state = 1501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AS || _la===plsqlParser.AUTHID || _la===plsqlParser.IS || _la===plsqlParser.UNDER) {
            this.state = 1500;
            this.object_type_def();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_object_type_def;
    return this;
}

Object_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_type_defContext.prototype.constructor = Object_type_defContext;

Object_type_defContext.prototype.object_as_part = function() {
    return this.getTypedRuleContext(Object_as_partContext,0);
};

Object_type_defContext.prototype.object_under_part = function() {
    return this.getTypedRuleContext(Object_under_partContext,0);
};

Object_type_defContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Object_type_defContext.prototype.sqlj_object_type = function() {
    return this.getTypedRuleContext(Sqlj_object_typeContext,0);
};

Object_type_defContext.prototype.object_member_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_member_specContext);
    } else {
        return this.getTypedRuleContext(Object_member_specContext,i);
    }
};

Object_type_defContext.prototype.modifier_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Modifier_clauseContext);
    } else {
        return this.getTypedRuleContext(Modifier_clauseContext,i);
    }
};

Object_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterObject_type_def(this);
	}
};

Object_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitObject_type_def(this);
	}
};




plsqlParser.Object_type_defContext = Object_type_defContext;

plsqlParser.prototype.object_type_def = function() {

    var localctx = new Object_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, plsqlParser.RULE_object_type_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AUTHID) {
            this.state = 1503;
            this.invoker_rights_clause();
        }

        this.state = 1508;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.AS:
        case plsqlParser.IS:
            this.state = 1506;
            this.object_as_part();
            break;
        case plsqlParser.UNDER:
            this.state = 1507;
            this.object_under_part();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.EXTERNAL) {
            this.state = 1510;
            this.sqlj_object_type();
        }

        this.state = 1524;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        if(la_===1) {
            this.state = 1513;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 1514;
            this.object_member_spec();
            this.state = 1519;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1515;
                this.match(plsqlParser.COMMA);
                this.state = 1516;
                this.object_member_spec();
                this.state = 1521;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1522;
            this.match(plsqlParser.RIGHT_PAREN);

        }
        this.state = 1529;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.FINAL || _la===plsqlParser.INSTANTIABLE || _la===plsqlParser.NOT || _la===plsqlParser.OVERRIDING) {
            this.state = 1526;
            this.modifier_clause();
            this.state = 1531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_as_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_object_as_part;
    return this;
}

Object_as_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_as_partContext.prototype.constructor = Object_as_partContext;

Object_as_partContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Object_as_partContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Object_as_partContext.prototype.OBJECT = function() {
    return this.getToken(plsqlParser.OBJECT, 0);
};

Object_as_partContext.prototype.varray_type_def = function() {
    return this.getTypedRuleContext(Varray_type_defContext,0);
};

Object_as_partContext.prototype.nested_table_type_def = function() {
    return this.getTypedRuleContext(Nested_table_type_defContext,0);
};

Object_as_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterObject_as_part(this);
	}
};

Object_as_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitObject_as_part(this);
	}
};




plsqlParser.Object_as_partContext = Object_as_partContext;

plsqlParser.prototype.object_as_part = function() {

    var localctx = new Object_as_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, plsqlParser.RULE_object_as_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1532;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1536;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.OBJECT:
            this.state = 1533;
            this.match(plsqlParser.OBJECT);
            break;
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
            this.state = 1534;
            this.varray_type_def();
            break;
        case plsqlParser.TABLE:
            this.state = 1535;
            this.nested_table_type_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_under_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_object_under_part;
    return this;
}

Object_under_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_under_partContext.prototype.constructor = Object_under_partContext;

Object_under_partContext.prototype.UNDER = function() {
    return this.getToken(plsqlParser.UNDER, 0);
};

Object_under_partContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Object_under_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterObject_under_part(this);
	}
};

Object_under_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitObject_under_part(this);
	}
};




plsqlParser.Object_under_partContext = Object_under_partContext;

plsqlParser.prototype.object_under_part = function() {

    var localctx = new Object_under_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, plsqlParser.RULE_object_under_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1538;
        this.match(plsqlParser.UNDER);
        this.state = 1539;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nested_table_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_nested_table_type_def;
    return this;
}

Nested_table_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nested_table_type_defContext.prototype.constructor = Nested_table_type_defContext;

Nested_table_type_defContext.prototype.TABLE = function() {
    return this.getToken(plsqlParser.TABLE, 0);
};

Nested_table_type_defContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Nested_table_type_defContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Nested_table_type_defContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Nested_table_type_defContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

Nested_table_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNested_table_type_def(this);
	}
};

Nested_table_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNested_table_type_def(this);
	}
};




plsqlParser.Nested_table_type_defContext = Nested_table_type_defContext;

plsqlParser.prototype.nested_table_type_def = function() {

    var localctx = new Nested_table_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, plsqlParser.RULE_nested_table_type_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1541;
        this.match(plsqlParser.TABLE);
        this.state = 1542;
        this.match(plsqlParser.OF);
        this.state = 1543;
        this.type_spec();
        this.state = 1546;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        if(la_===1) {
            this.state = 1544;
            this.match(plsqlParser.NOT);
            this.state = 1545;
            this.match(plsqlParser.NULL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sqlj_object_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sqlj_object_type;
    return this;
}

Sqlj_object_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sqlj_object_typeContext.prototype.constructor = Sqlj_object_typeContext;

Sqlj_object_typeContext.prototype.EXTERNAL = function() {
    return this.getToken(plsqlParser.EXTERNAL, 0);
};

Sqlj_object_typeContext.prototype.NAME = function() {
    return this.getToken(plsqlParser.NAME, 0);
};

Sqlj_object_typeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Sqlj_object_typeContext.prototype.LANGUAGE = function() {
    return this.getToken(plsqlParser.LANGUAGE, 0);
};

Sqlj_object_typeContext.prototype.JAVA = function() {
    return this.getToken(plsqlParser.JAVA, 0);
};

Sqlj_object_typeContext.prototype.USING = function() {
    return this.getToken(plsqlParser.USING, 0);
};

Sqlj_object_typeContext.prototype.SQLDATA = function() {
    return this.getToken(plsqlParser.SQLDATA, 0);
};

Sqlj_object_typeContext.prototype.CUSTOMDATUM = function() {
    return this.getToken(plsqlParser.CUSTOMDATUM, 0);
};

Sqlj_object_typeContext.prototype.ORADATA = function() {
    return this.getToken(plsqlParser.ORADATA, 0);
};

Sqlj_object_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSqlj_object_type(this);
	}
};

Sqlj_object_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSqlj_object_type(this);
	}
};




plsqlParser.Sqlj_object_typeContext = Sqlj_object_typeContext;

plsqlParser.prototype.sqlj_object_type = function() {

    var localctx = new Sqlj_object_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, plsqlParser.RULE_sqlj_object_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1548;
        this.match(plsqlParser.EXTERNAL);
        this.state = 1549;
        this.match(plsqlParser.NAME);
        this.state = 1550;
        this.expression(0);
        this.state = 1551;
        this.match(plsqlParser.LANGUAGE);
        this.state = 1552;
        this.match(plsqlParser.JAVA);
        this.state = 1553;
        this.match(plsqlParser.USING);
        this.state = 1554;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.CUSTOMDATUM || _la===plsqlParser.ORADATA || _la===plsqlParser.SQLDATA)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_type_body;
    return this;
}

Type_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_bodyContext.prototype.constructor = Type_bodyContext;

Type_bodyContext.prototype.BODY = function() {
    return this.getToken(plsqlParser.BODY, 0);
};

Type_bodyContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_bodyContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

Type_bodyContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Type_bodyContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Type_bodyContext.prototype.type_body_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_body_elementsContext);
    } else {
        return this.getTypedRuleContext(Type_body_elementsContext,i);
    }
};

Type_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterType_body(this);
	}
};

Type_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitType_body(this);
	}
};




plsqlParser.Type_bodyContext = Type_bodyContext;

plsqlParser.prototype.type_body = function() {

    var localctx = new Type_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, plsqlParser.RULE_type_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1556;
        this.match(plsqlParser.BODY);
        this.state = 1557;
        this.type_name();
        this.state = 1558;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1560; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1559;
            this.type_body_elements();
            this.state = 1562; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.MAP || _la===plsqlParser.MEMBER || _la===plsqlParser.ORDER || _la===plsqlParser.STATIC);
        this.state = 1564;
        this.match(plsqlParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_body_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_type_body_elements;
    return this;
}

Type_body_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_body_elementsContext.prototype.constructor = Type_body_elementsContext;

Type_body_elementsContext.prototype.map_order_func_declaration = function() {
    return this.getTypedRuleContext(Map_order_func_declarationContext,0);
};

Type_body_elementsContext.prototype.subprog_decl_in_type = function() {
    return this.getTypedRuleContext(Subprog_decl_in_typeContext,0);
};

Type_body_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterType_body_elements(this);
	}
};

Type_body_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitType_body_elements(this);
	}
};




plsqlParser.Type_body_elementsContext = Type_body_elementsContext;

plsqlParser.prototype.type_body_elements = function() {

    var localctx = new Type_body_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, plsqlParser.RULE_type_body_elements);
    try {
        this.state = 1568;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.MAP:
        case plsqlParser.ORDER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1566;
            this.map_order_func_declaration();
            break;
        case plsqlParser.MEMBER:
        case plsqlParser.STATIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1567;
            this.subprog_decl_in_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Map_order_func_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_map_order_func_declaration;
    return this;
}

Map_order_func_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Map_order_func_declarationContext.prototype.constructor = Map_order_func_declarationContext;

Map_order_func_declarationContext.prototype.MEMBER = function() {
    return this.getToken(plsqlParser.MEMBER, 0);
};

Map_order_func_declarationContext.prototype.func_decl_in_type = function() {
    return this.getTypedRuleContext(Func_decl_in_typeContext,0);
};

Map_order_func_declarationContext.prototype.MAP = function() {
    return this.getToken(plsqlParser.MAP, 0);
};

Map_order_func_declarationContext.prototype.ORDER = function() {
    return this.getToken(plsqlParser.ORDER, 0);
};

Map_order_func_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMap_order_func_declaration(this);
	}
};

Map_order_func_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMap_order_func_declaration(this);
	}
};




plsqlParser.Map_order_func_declarationContext = Map_order_func_declarationContext;

plsqlParser.prototype.map_order_func_declaration = function() {

    var localctx = new Map_order_func_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, plsqlParser.RULE_map_order_func_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1570;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.MAP || _la===plsqlParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1571;
        this.match(plsqlParser.MEMBER);
        this.state = 1572;
        this.func_decl_in_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subprog_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_subprog_decl_in_type;
    return this;
}

Subprog_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprog_decl_in_typeContext.prototype.constructor = Subprog_decl_in_typeContext;

Subprog_decl_in_typeContext.prototype.MEMBER = function() {
    return this.getToken(plsqlParser.MEMBER, 0);
};

Subprog_decl_in_typeContext.prototype.STATIC = function() {
    return this.getToken(plsqlParser.STATIC, 0);
};

Subprog_decl_in_typeContext.prototype.proc_decl_in_type = function() {
    return this.getTypedRuleContext(Proc_decl_in_typeContext,0);
};

Subprog_decl_in_typeContext.prototype.func_decl_in_type = function() {
    return this.getTypedRuleContext(Func_decl_in_typeContext,0);
};

Subprog_decl_in_typeContext.prototype.constructor_declaration = function() {
    return this.getTypedRuleContext(Constructor_declarationContext,0);
};

Subprog_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSubprog_decl_in_type(this);
	}
};

Subprog_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSubprog_decl_in_type(this);
	}
};




plsqlParser.Subprog_decl_in_typeContext = Subprog_decl_in_typeContext;

plsqlParser.prototype.subprog_decl_in_type = function() {

    var localctx = new Subprog_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, plsqlParser.RULE_subprog_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1574;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.MEMBER || _la===plsqlParser.STATIC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1578;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.PROCEDURE:
            this.state = 1575;
            this.proc_decl_in_type();
            break;
        case plsqlParser.FUNCTION:
            this.state = 1576;
            this.func_decl_in_type();
            break;
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.FINAL:
        case plsqlParser.INSTANTIABLE:
            this.state = 1577;
            this.constructor_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Proc_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_proc_decl_in_type;
    return this;
}

Proc_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Proc_decl_in_typeContext.prototype.constructor = Proc_decl_in_typeContext;

Proc_decl_in_typeContext.prototype.PROCEDURE = function() {
    return this.getToken(plsqlParser.PROCEDURE, 0);
};

Proc_decl_in_typeContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Proc_decl_in_typeContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Proc_decl_in_typeContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Proc_decl_in_typeContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Proc_decl_in_typeContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Proc_decl_in_typeContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Proc_decl_in_typeContext.prototype.DECLARE = function() {
    return this.getToken(plsqlParser.DECLARE, 0);
};

Proc_decl_in_typeContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Proc_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterProc_decl_in_type(this);
	}
};

Proc_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitProc_decl_in_type(this);
	}
};




plsqlParser.Proc_decl_in_typeContext = Proc_decl_in_typeContext;

plsqlParser.prototype.proc_decl_in_type = function() {

    var localctx = new Proc_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, plsqlParser.RULE_proc_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1580;
        this.match(plsqlParser.PROCEDURE);
        this.state = 1581;
        this.procedure_name();
        this.state = 1582;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 1583;
        this.type_elements_parameter();
        this.state = 1588;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 1584;
            this.match(plsqlParser.COMMA);
            this.state = 1585;
            this.type_elements_parameter();
            this.state = 1590;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1591;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 1592;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1606;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1593;
            this.call_spec();
            break;

        case 2:
            this.state = 1595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.DECLARE) {
                this.state = 1594;
                this.match(plsqlParser.DECLARE);
            }

            this.state = 1600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0)) {
                this.state = 1597;
                this.declare_spec();
                this.state = 1602;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1603;
            this.body();
            this.state = 1604;
            this.match(plsqlParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_func_decl_in_type;
    return this;
}

Func_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_decl_in_typeContext.prototype.constructor = Func_decl_in_typeContext;

Func_decl_in_typeContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Func_decl_in_typeContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Func_decl_in_typeContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Func_decl_in_typeContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Func_decl_in_typeContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Func_decl_in_typeContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Func_decl_in_typeContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Func_decl_in_typeContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Func_decl_in_typeContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Func_decl_in_typeContext.prototype.DECLARE = function() {
    return this.getToken(plsqlParser.DECLARE, 0);
};

Func_decl_in_typeContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Func_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFunc_decl_in_type(this);
	}
};

Func_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFunc_decl_in_type(this);
	}
};




plsqlParser.Func_decl_in_typeContext = Func_decl_in_typeContext;

plsqlParser.prototype.func_decl_in_type = function() {

    var localctx = new Func_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, plsqlParser.RULE_func_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1608;
        this.match(plsqlParser.FUNCTION);
        this.state = 1609;
        this.function_name();
        this.state = 1621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 1610;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 1611;
            this.type_elements_parameter();
            this.state = 1616;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1612;
                this.match(plsqlParser.COMMA);
                this.state = 1613;
                this.type_elements_parameter();
                this.state = 1618;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1619;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 1623;
        this.match(plsqlParser.RETURN);
        this.state = 1624;
        this.type_spec();
        this.state = 1625;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1626;
            this.call_spec();
            break;

        case 2:
            this.state = 1628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.DECLARE) {
                this.state = 1627;
                this.match(plsqlParser.DECLARE);
            }

            this.state = 1633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0)) {
                this.state = 1630;
                this.declare_spec();
                this.state = 1635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1636;
            this.body();
            this.state = 1637;
            this.match(plsqlParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_constructor_declaration;
    return this;
}

Constructor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_declarationContext.prototype.constructor = Constructor_declarationContext;

Constructor_declarationContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(plsqlParser.CONSTRUCTOR, 0);
};

Constructor_declarationContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Constructor_declarationContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Constructor_declarationContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Constructor_declarationContext.prototype.SELF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.SELF);
    } else {
        return this.getToken(plsqlParser.SELF, i);
    }
};


Constructor_declarationContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.AS);
    } else {
        return this.getToken(plsqlParser.AS, i);
    }
};


Constructor_declarationContext.prototype.RESULT = function() {
    return this.getToken(plsqlParser.RESULT, 0);
};

Constructor_declarationContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Constructor_declarationContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Constructor_declarationContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Constructor_declarationContext.prototype.FINAL = function() {
    return this.getToken(plsqlParser.FINAL, 0);
};

Constructor_declarationContext.prototype.INSTANTIABLE = function() {
    return this.getToken(plsqlParser.INSTANTIABLE, 0);
};

Constructor_declarationContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Constructor_declarationContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Constructor_declarationContext.prototype.OUT = function() {
    return this.getToken(plsqlParser.OUT, 0);
};

Constructor_declarationContext.prototype.DECLARE = function() {
    return this.getToken(plsqlParser.DECLARE, 0);
};

Constructor_declarationContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Constructor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConstructor_declaration(this);
	}
};

Constructor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConstructor_declaration(this);
	}
};




plsqlParser.Constructor_declarationContext = Constructor_declarationContext;

plsqlParser.prototype.constructor_declaration = function() {

    var localctx = new Constructor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, plsqlParser.RULE_constructor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1642;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.FINAL) {
            this.state = 1641;
            this.match(plsqlParser.FINAL);
        }

        this.state = 1645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.INSTANTIABLE) {
            this.state = 1644;
            this.match(plsqlParser.INSTANTIABLE);
        }

        this.state = 1647;
        this.match(plsqlParser.CONSTRUCTOR);
        this.state = 1648;
        this.match(plsqlParser.FUNCTION);
        this.state = 1649;
        this.type_spec();
        this.state = 1667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 1650;
            this.match(plsqlParser.LEFT_PAREN);

            this.state = 1651;
            this.match(plsqlParser.SELF);
            this.state = 1652;
            this.match(plsqlParser.IN);
            this.state = 1653;
            this.match(plsqlParser.OUT);
            this.state = 1654;
            this.type_spec();
            this.state = 1655;
            this.match(plsqlParser.COMMA);
            this.state = 1657;
            this.type_elements_parameter();
            this.state = 1662;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1658;
                this.match(plsqlParser.COMMA);
                this.state = 1659;
                this.type_elements_parameter();
                this.state = 1664;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1665;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 1669;
        this.match(plsqlParser.RETURN);
        this.state = 1670;
        this.match(plsqlParser.SELF);
        this.state = 1671;
        this.match(plsqlParser.AS);
        this.state = 1672;
        this.match(plsqlParser.RESULT);
        this.state = 1673;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1687;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1674;
            this.call_spec();
            break;

        case 2:
            this.state = 1676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.DECLARE) {
                this.state = 1675;
                this.match(plsqlParser.DECLARE);
            }

            this.state = 1681;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0)) {
                this.state = 1678;
                this.declare_spec();
                this.state = 1683;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1684;
            this.body();
            this.state = 1685;
            this.match(plsqlParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Modifier_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_modifier_clause;
    return this;
}

Modifier_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Modifier_clauseContext.prototype.constructor = Modifier_clauseContext;

Modifier_clauseContext.prototype.INSTANTIABLE = function() {
    return this.getToken(plsqlParser.INSTANTIABLE, 0);
};

Modifier_clauseContext.prototype.FINAL = function() {
    return this.getToken(plsqlParser.FINAL, 0);
};

Modifier_clauseContext.prototype.OVERRIDING = function() {
    return this.getToken(plsqlParser.OVERRIDING, 0);
};

Modifier_clauseContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Modifier_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModifier_clause(this);
	}
};

Modifier_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModifier_clause(this);
	}
};




plsqlParser.Modifier_clauseContext = Modifier_clauseContext;

plsqlParser.prototype.modifier_clause = function() {

    var localctx = new Modifier_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, plsqlParser.RULE_modifier_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1690;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NOT) {
            this.state = 1689;
            this.match(plsqlParser.NOT);
        }

        this.state = 1692;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.FINAL || _la===plsqlParser.INSTANTIABLE || _la===plsqlParser.OVERRIDING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_member_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_object_member_spec;
    return this;
}

Object_member_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_member_specContext.prototype.constructor = Object_member_specContext;

Object_member_specContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Object_member_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Object_member_specContext.prototype.sqlj_object_type_attr = function() {
    return this.getTypedRuleContext(Sqlj_object_type_attrContext,0);
};

Object_member_specContext.prototype.element_spec = function() {
    return this.getTypedRuleContext(Element_specContext,0);
};

Object_member_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterObject_member_spec(this);
	}
};

Object_member_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitObject_member_spec(this);
	}
};




plsqlParser.Object_member_specContext = Object_member_specContext;

plsqlParser.prototype.object_member_spec = function() {

    var localctx = new Object_member_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, plsqlParser.RULE_object_member_spec);
    var _la = 0; // Token type
    try {
        this.state = 1700;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1694;
            this.r_id();
            this.state = 1695;
            this.type_spec();
            this.state = 1697;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.EXTERNAL) {
                this.state = 1696;
                this.sqlj_object_type_attr();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1699;
            this.element_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sqlj_object_type_attrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sqlj_object_type_attr;
    return this;
}

Sqlj_object_type_attrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sqlj_object_type_attrContext.prototype.constructor = Sqlj_object_type_attrContext;

Sqlj_object_type_attrContext.prototype.EXTERNAL = function() {
    return this.getToken(plsqlParser.EXTERNAL, 0);
};

Sqlj_object_type_attrContext.prototype.NAME = function() {
    return this.getToken(plsqlParser.NAME, 0);
};

Sqlj_object_type_attrContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Sqlj_object_type_attrContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSqlj_object_type_attr(this);
	}
};

Sqlj_object_type_attrContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSqlj_object_type_attr(this);
	}
};




plsqlParser.Sqlj_object_type_attrContext = Sqlj_object_type_attrContext;

plsqlParser.prototype.sqlj_object_type_attr = function() {

    var localctx = new Sqlj_object_type_attrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, plsqlParser.RULE_sqlj_object_type_attr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1702;
        this.match(plsqlParser.EXTERNAL);
        this.state = 1703;
        this.match(plsqlParser.NAME);
        this.state = 1704;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Element_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_element_spec;
    return this;
}

Element_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_specContext.prototype.constructor = Element_specContext;

Element_specContext.prototype.modifier_clause = function() {
    return this.getTypedRuleContext(Modifier_clauseContext,0);
};

Element_specContext.prototype.element_spec_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Element_spec_optionsContext);
    } else {
        return this.getTypedRuleContext(Element_spec_optionsContext,i);
    }
};

Element_specContext.prototype.pragma_clause = function() {
    return this.getTypedRuleContext(Pragma_clauseContext,0);
};

Element_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterElement_spec(this);
	}
};

Element_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitElement_spec(this);
	}
};




plsqlParser.Element_specContext = Element_specContext;

plsqlParser.prototype.element_spec = function() {

    var localctx = new Element_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, plsqlParser.RULE_element_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        if(la_===1) {
            this.state = 1706;
            this.modifier_clause();

        }
        this.state = 1710; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1709;
            this.element_spec_options();
            this.state = 1712; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.CONSTRUCTOR || _la===plsqlParser.FINAL || _la===plsqlParser.INSTANTIABLE || _la===plsqlParser.MAP || _la===plsqlParser.MEMBER || _la===plsqlParser.ORDER || _la===plsqlParser.STATIC);
        this.state = 1716;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        if(la_===1) {
            this.state = 1714;
            this.match(plsqlParser.COMMA);
            this.state = 1715;
            this.pragma_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Element_spec_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_element_spec_options;
    return this;
}

Element_spec_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_spec_optionsContext.prototype.constructor = Element_spec_optionsContext;

Element_spec_optionsContext.prototype.subprogram_spec = function() {
    return this.getTypedRuleContext(Subprogram_specContext,0);
};

Element_spec_optionsContext.prototype.constructor_spec = function() {
    return this.getTypedRuleContext(Constructor_specContext,0);
};

Element_spec_optionsContext.prototype.map_order_function_spec = function() {
    return this.getTypedRuleContext(Map_order_function_specContext,0);
};

Element_spec_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterElement_spec_options(this);
	}
};

Element_spec_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitElement_spec_options(this);
	}
};




plsqlParser.Element_spec_optionsContext = Element_spec_optionsContext;

plsqlParser.prototype.element_spec_options = function() {

    var localctx = new Element_spec_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, plsqlParser.RULE_element_spec_options);
    try {
        this.state = 1721;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.MEMBER:
        case plsqlParser.STATIC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1718;
            this.subprogram_spec();
            break;
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.FINAL:
        case plsqlParser.INSTANTIABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1719;
            this.constructor_spec();
            break;
        case plsqlParser.MAP:
        case plsqlParser.ORDER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1720;
            this.map_order_function_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subprogram_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_subprogram_spec;
    return this;
}

Subprogram_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_specContext.prototype.constructor = Subprogram_specContext;

Subprogram_specContext.prototype.MEMBER = function() {
    return this.getToken(plsqlParser.MEMBER, 0);
};

Subprogram_specContext.prototype.STATIC = function() {
    return this.getToken(plsqlParser.STATIC, 0);
};

Subprogram_specContext.prototype.type_procedure_spec = function() {
    return this.getTypedRuleContext(Type_procedure_specContext,0);
};

Subprogram_specContext.prototype.type_function_spec = function() {
    return this.getTypedRuleContext(Type_function_specContext,0);
};

Subprogram_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSubprogram_spec(this);
	}
};

Subprogram_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSubprogram_spec(this);
	}
};




plsqlParser.Subprogram_specContext = Subprogram_specContext;

plsqlParser.prototype.subprogram_spec = function() {

    var localctx = new Subprogram_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, plsqlParser.RULE_subprogram_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1723;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.MEMBER || _la===plsqlParser.STATIC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1726;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.PROCEDURE:
            this.state = 1724;
            this.type_procedure_spec();
            break;
        case plsqlParser.FUNCTION:
            this.state = 1725;
            this.type_function_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_procedure_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_type_procedure_spec;
    return this;
}

Type_procedure_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_procedure_specContext.prototype.constructor = Type_procedure_specContext;

Type_procedure_specContext.prototype.PROCEDURE = function() {
    return this.getToken(plsqlParser.PROCEDURE, 0);
};

Type_procedure_specContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Type_procedure_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Type_procedure_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Type_procedure_specContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Type_procedure_specContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Type_procedure_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterType_procedure_spec(this);
	}
};

Type_procedure_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitType_procedure_spec(this);
	}
};




plsqlParser.Type_procedure_specContext = Type_procedure_specContext;

plsqlParser.prototype.type_procedure_spec = function() {

    var localctx = new Type_procedure_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, plsqlParser.RULE_type_procedure_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1728;
        this.match(plsqlParser.PROCEDURE);
        this.state = 1729;
        this.procedure_name();
        this.state = 1730;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 1731;
        this.type_elements_parameter();
        this.state = 1736;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 1732;
            this.match(plsqlParser.COMMA);
            this.state = 1733;
            this.type_elements_parameter();
            this.state = 1738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1739;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 1742;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AS || _la===plsqlParser.IS) {
            this.state = 1740;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1741;
            this.call_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_type_function_spec;
    return this;
}

Type_function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_function_specContext.prototype.constructor = Type_function_specContext;

Type_function_specContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Type_function_specContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Type_function_specContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Type_function_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Type_function_specContext.prototype.SELF = function() {
    return this.getToken(plsqlParser.SELF, 0);
};

Type_function_specContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.AS);
    } else {
        return this.getToken(plsqlParser.AS, i);
    }
};


Type_function_specContext.prototype.RESULT = function() {
    return this.getToken(plsqlParser.RESULT, 0);
};

Type_function_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Type_function_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Type_function_specContext.prototype.EXTERNAL = function() {
    return this.getToken(plsqlParser.EXTERNAL, 0);
};

Type_function_specContext.prototype.NAME = function() {
    return this.getToken(plsqlParser.NAME, 0);
};

Type_function_specContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Type_function_specContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Type_function_specContext.prototype.VARIABLE = function() {
    return this.getToken(plsqlParser.VARIABLE, 0);
};

Type_function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterType_function_spec(this);
	}
};

Type_function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitType_function_spec(this);
	}
};




plsqlParser.Type_function_specContext = Type_function_specContext;

plsqlParser.prototype.type_function_spec = function() {

    var localctx = new Type_function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, plsqlParser.RULE_type_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1744;
        this.match(plsqlParser.FUNCTION);
        this.state = 1745;
        this.function_name();
        this.state = 1757;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 1746;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 1747;
            this.type_elements_parameter();
            this.state = 1752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1748;
                this.match(plsqlParser.COMMA);
                this.state = 1749;
                this.type_elements_parameter();
                this.state = 1754;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1755;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 1759;
        this.match(plsqlParser.RETURN);
        this.state = 1764;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1760;
            this.type_spec();
            break;

        case 2:
            this.state = 1761;
            this.match(plsqlParser.SELF);
            this.state = 1762;
            this.match(plsqlParser.AS);
            this.state = 1763;
            this.match(plsqlParser.RESULT);
            break;

        }
        this.state = 1774;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case plsqlParser.AS:
        case plsqlParser.IS:
        	this.state = 1766;
        	_la = this._input.LA(1);
        	if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	this.state = 1767;
        	this.call_spec();
        	break;
        case plsqlParser.EXTERNAL:
        	this.state = 1768;
        	this.match(plsqlParser.EXTERNAL);
        	this.state = 1770;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===plsqlParser.VARIABLE) {
        	    this.state = 1769;
        	    this.match(plsqlParser.VARIABLE);
        	}

        	this.state = 1772;
        	this.match(plsqlParser.NAME);
        	this.state = 1773;
        	this.expression(0);
        	break;
        case plsqlParser.EOF:
        case plsqlParser.ALTER:
        case plsqlParser.CASCADE:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CREATE:
        case plsqlParser.DELETE:
        case plsqlParser.DROP:
        case plsqlParser.EXPLAIN:
        case plsqlParser.FINAL:
        case plsqlParser.FUNCTION:
        case plsqlParser.INSERT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INVALIDATE:
        case plsqlParser.LOCK:
        case plsqlParser.MAP:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.ORDER:
        case plsqlParser.PROCEDURE:
        case plsqlParser.SELECT:
        case plsqlParser.STATIC:
        case plsqlParser.UPDATE:
        case plsqlParser.WITH:
        case plsqlParser.LEFT_PAREN:
        case plsqlParser.RIGHT_PAREN:
        case plsqlParser.COMMA:
        case plsqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_constructor_spec;
    return this;
}

Constructor_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_specContext.prototype.constructor = Constructor_specContext;

Constructor_specContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(plsqlParser.CONSTRUCTOR, 0);
};

Constructor_specContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Constructor_specContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Constructor_specContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Constructor_specContext.prototype.SELF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.SELF);
    } else {
        return this.getToken(plsqlParser.SELF, i);
    }
};


Constructor_specContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.AS);
    } else {
        return this.getToken(plsqlParser.AS, i);
    }
};


Constructor_specContext.prototype.RESULT = function() {
    return this.getToken(plsqlParser.RESULT, 0);
};

Constructor_specContext.prototype.FINAL = function() {
    return this.getToken(plsqlParser.FINAL, 0);
};

Constructor_specContext.prototype.INSTANTIABLE = function() {
    return this.getToken(plsqlParser.INSTANTIABLE, 0);
};

Constructor_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Constructor_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Constructor_specContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Constructor_specContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Constructor_specContext.prototype.OUT = function() {
    return this.getToken(plsqlParser.OUT, 0);
};

Constructor_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConstructor_spec(this);
	}
};

Constructor_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConstructor_spec(this);
	}
};




plsqlParser.Constructor_specContext = Constructor_specContext;

plsqlParser.prototype.constructor_spec = function() {

    var localctx = new Constructor_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, plsqlParser.RULE_constructor_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1777;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.FINAL) {
            this.state = 1776;
            this.match(plsqlParser.FINAL);
        }

        this.state = 1780;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.INSTANTIABLE) {
            this.state = 1779;
            this.match(plsqlParser.INSTANTIABLE);
        }

        this.state = 1782;
        this.match(plsqlParser.CONSTRUCTOR);
        this.state = 1783;
        this.match(plsqlParser.FUNCTION);
        this.state = 1784;
        this.type_spec();
        this.state = 1802;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 1785;
            this.match(plsqlParser.LEFT_PAREN);

            this.state = 1786;
            this.match(plsqlParser.SELF);
            this.state = 1787;
            this.match(plsqlParser.IN);
            this.state = 1788;
            this.match(plsqlParser.OUT);
            this.state = 1789;
            this.type_spec();
            this.state = 1790;
            this.match(plsqlParser.COMMA);
            this.state = 1792;
            this.type_elements_parameter();
            this.state = 1797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1793;
                this.match(plsqlParser.COMMA);
                this.state = 1794;
                this.type_elements_parameter();
                this.state = 1799;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1800;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 1804;
        this.match(plsqlParser.RETURN);
        this.state = 1805;
        this.match(plsqlParser.SELF);
        this.state = 1806;
        this.match(plsqlParser.AS);
        this.state = 1807;
        this.match(plsqlParser.RESULT);
        this.state = 1810;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AS || _la===plsqlParser.IS) {
            this.state = 1808;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.AS || _la===plsqlParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1809;
            this.call_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Map_order_function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_map_order_function_spec;
    return this;
}

Map_order_function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Map_order_function_specContext.prototype.constructor = Map_order_function_specContext;

Map_order_function_specContext.prototype.MEMBER = function() {
    return this.getToken(plsqlParser.MEMBER, 0);
};

Map_order_function_specContext.prototype.type_function_spec = function() {
    return this.getTypedRuleContext(Type_function_specContext,0);
};

Map_order_function_specContext.prototype.MAP = function() {
    return this.getToken(plsqlParser.MAP, 0);
};

Map_order_function_specContext.prototype.ORDER = function() {
    return this.getToken(plsqlParser.ORDER, 0);
};

Map_order_function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMap_order_function_spec(this);
	}
};

Map_order_function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMap_order_function_spec(this);
	}
};




plsqlParser.Map_order_function_specContext = Map_order_function_specContext;

plsqlParser.prototype.map_order_function_spec = function() {

    var localctx = new Map_order_function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, plsqlParser.RULE_map_order_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1812;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.MAP || _la===plsqlParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1813;
        this.match(plsqlParser.MEMBER);
        this.state = 1814;
        this.type_function_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pragma_clause;
    return this;
}

Pragma_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_clauseContext.prototype.constructor = Pragma_clauseContext;

Pragma_clauseContext.prototype.PRAGMA = function() {
    return this.getToken(plsqlParser.PRAGMA, 0);
};

Pragma_clauseContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(plsqlParser.RESTRICT_REFERENCES, 0);
};

Pragma_clauseContext.prototype.pragma_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pragma_elementsContext);
    } else {
        return this.getTypedRuleContext(Pragma_elementsContext,i);
    }
};

Pragma_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPragma_clause(this);
	}
};

Pragma_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPragma_clause(this);
	}
};




plsqlParser.Pragma_clauseContext = Pragma_clauseContext;

plsqlParser.prototype.pragma_clause = function() {

    var localctx = new Pragma_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, plsqlParser.RULE_pragma_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1816;
        this.match(plsqlParser.PRAGMA);
        this.state = 1817;
        this.match(plsqlParser.RESTRICT_REFERENCES);
        this.state = 1818;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 1819;
        this.pragma_elements();
        this.state = 1824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 1820;
            this.match(plsqlParser.COMMA);
            this.state = 1821;
            this.pragma_elements();
            this.state = 1826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1827;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pragma_elements;
    return this;
}

Pragma_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_elementsContext.prototype.constructor = Pragma_elementsContext;

Pragma_elementsContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Pragma_elementsContext.prototype.DEFAULT = function() {
    return this.getToken(plsqlParser.DEFAULT, 0);
};

Pragma_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPragma_elements(this);
	}
};

Pragma_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPragma_elements(this);
	}
};




plsqlParser.Pragma_elementsContext = Pragma_elementsContext;

plsqlParser.prototype.pragma_elements = function() {

    var localctx = new Pragma_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, plsqlParser.RULE_pragma_elements);
    try {
        this.state = 1831;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 1829;
            this.r_id();
            break;
        case plsqlParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1830;
            this.match(plsqlParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_elements_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_type_elements_parameter;
    return this;
}

Type_elements_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_elements_parameterContext.prototype.constructor = Type_elements_parameterContext;

Type_elements_parameterContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

Type_elements_parameterContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Type_elements_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterType_elements_parameter(this);
	}
};

Type_elements_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitType_elements_parameter(this);
	}
};




plsqlParser.Type_elements_parameterContext = Type_elements_parameterContext;

plsqlParser.prototype.type_elements_parameter = function() {

    var localctx = new Type_elements_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, plsqlParser.RULE_type_elements_parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1833;
        this.parameter_name();
        this.state = 1834;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_drop_sequence;
    return this;
}

Drop_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_sequenceContext.prototype.constructor = Drop_sequenceContext;

Drop_sequenceContext.prototype.DROP = function() {
    return this.getToken(plsqlParser.DROP, 0);
};

Drop_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(plsqlParser.SEQUENCE, 0);
};

Drop_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Drop_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDrop_sequence(this);
	}
};

Drop_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDrop_sequence(this);
	}
};




plsqlParser.Drop_sequenceContext = Drop_sequenceContext;

plsqlParser.prototype.drop_sequence = function() {

    var localctx = new Drop_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, plsqlParser.RULE_drop_sequence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1836;
        this.match(plsqlParser.DROP);
        this.state = 1837;
        this.match(plsqlParser.SEQUENCE);
        this.state = 1838;
        this.sequence_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alter_sequence;
    return this;
}

Alter_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_sequenceContext.prototype.constructor = Alter_sequenceContext;

Alter_sequenceContext.prototype.ALTER = function() {
    return this.getToken(plsqlParser.ALTER, 0);
};

Alter_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(plsqlParser.SEQUENCE, 0);
};

Alter_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Alter_sequenceContext.prototype.sequence_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_specContext);
    } else {
        return this.getTypedRuleContext(Sequence_specContext,i);
    }
};

Alter_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlter_sequence(this);
	}
};

Alter_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlter_sequence(this);
	}
};




plsqlParser.Alter_sequenceContext = Alter_sequenceContext;

plsqlParser.prototype.alter_sequence = function() {

    var localctx = new Alter_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, plsqlParser.RULE_alter_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1840;
        this.match(plsqlParser.ALTER);
        this.state = 1841;
        this.match(plsqlParser.SEQUENCE);
        this.state = 1842;
        this.sequence_name();
        this.state = 1844; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1843;
            this.sequence_spec();
            this.state = 1846; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.CACHE || _la===plsqlParser.CYCLE || _la===plsqlParser.INCREMENT || ((((_la - 215)) & ~0x1f) == 0 && ((1 << (_la - 215)) & ((1 << (plsqlParser.MAXVALUE - 215)) | (1 << (plsqlParser.MINVALUE - 215)) | (1 << (plsqlParser.NOCACHE - 215)) | (1 << (plsqlParser.NOCYCLE - 215)) | (1 << (plsqlParser.NOMAXVALUE - 215)) | (1 << (plsqlParser.NOMINVALUE - 215)))) !== 0) || _la===plsqlParser.NOORDER || _la===plsqlParser.ORDER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_create_sequence;
    return this;
}

Create_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_sequenceContext.prototype.constructor = Create_sequenceContext;

Create_sequenceContext.prototype.CREATE = function() {
    return this.getToken(plsqlParser.CREATE, 0);
};

Create_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(plsqlParser.SEQUENCE, 0);
};

Create_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Create_sequenceContext.prototype.sequence_start_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_start_clauseContext);
    } else {
        return this.getTypedRuleContext(Sequence_start_clauseContext,i);
    }
};

Create_sequenceContext.prototype.sequence_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_specContext);
    } else {
        return this.getTypedRuleContext(Sequence_specContext,i);
    }
};

Create_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCreate_sequence(this);
	}
};

Create_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCreate_sequence(this);
	}
};




plsqlParser.Create_sequenceContext = Create_sequenceContext;

plsqlParser.prototype.create_sequence = function() {

    var localctx = new Create_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, plsqlParser.RULE_create_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1848;
        this.match(plsqlParser.CREATE);
        this.state = 1849;
        this.match(plsqlParser.SEQUENCE);
        this.state = 1850;
        this.sequence_name();
        this.state = 1855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.CACHE || _la===plsqlParser.CYCLE || _la===plsqlParser.INCREMENT || ((((_la - 215)) & ~0x1f) == 0 && ((1 << (_la - 215)) & ((1 << (plsqlParser.MAXVALUE - 215)) | (1 << (plsqlParser.MINVALUE - 215)) | (1 << (plsqlParser.NOCACHE - 215)) | (1 << (plsqlParser.NOCYCLE - 215)) | (1 << (plsqlParser.NOMAXVALUE - 215)) | (1 << (plsqlParser.NOMINVALUE - 215)))) !== 0) || _la===plsqlParser.NOORDER || _la===plsqlParser.ORDER || _la===plsqlParser.START) {
            this.state = 1853;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.START:
                this.state = 1851;
                this.sequence_start_clause();
                break;
            case plsqlParser.CACHE:
            case plsqlParser.CYCLE:
            case plsqlParser.INCREMENT:
            case plsqlParser.MAXVALUE:
            case plsqlParser.MINVALUE:
            case plsqlParser.NOCACHE:
            case plsqlParser.NOCYCLE:
            case plsqlParser.NOMAXVALUE:
            case plsqlParser.NOMINVALUE:
            case plsqlParser.NOORDER:
            case plsqlParser.ORDER:
                this.state = 1852;
                this.sequence_spec();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1857;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sequence_spec;
    return this;
}

Sequence_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_specContext.prototype.constructor = Sequence_specContext;

Sequence_specContext.prototype.INCREMENT = function() {
    return this.getToken(plsqlParser.INCREMENT, 0);
};

Sequence_specContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Sequence_specContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(plsqlParser.UNSIGNED_INTEGER, 0);
};

Sequence_specContext.prototype.MAXVALUE = function() {
    return this.getToken(plsqlParser.MAXVALUE, 0);
};

Sequence_specContext.prototype.NOMAXVALUE = function() {
    return this.getToken(plsqlParser.NOMAXVALUE, 0);
};

Sequence_specContext.prototype.MINVALUE = function() {
    return this.getToken(plsqlParser.MINVALUE, 0);
};

Sequence_specContext.prototype.NOMINVALUE = function() {
    return this.getToken(plsqlParser.NOMINVALUE, 0);
};

Sequence_specContext.prototype.CYCLE = function() {
    return this.getToken(plsqlParser.CYCLE, 0);
};

Sequence_specContext.prototype.NOCYCLE = function() {
    return this.getToken(plsqlParser.NOCYCLE, 0);
};

Sequence_specContext.prototype.CACHE = function() {
    return this.getToken(plsqlParser.CACHE, 0);
};

Sequence_specContext.prototype.NOCACHE = function() {
    return this.getToken(plsqlParser.NOCACHE, 0);
};

Sequence_specContext.prototype.ORDER = function() {
    return this.getToken(plsqlParser.ORDER, 0);
};

Sequence_specContext.prototype.NOORDER = function() {
    return this.getToken(plsqlParser.NOORDER, 0);
};

Sequence_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSequence_spec(this);
	}
};

Sequence_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSequence_spec(this);
	}
};




plsqlParser.Sequence_specContext = Sequence_specContext;

plsqlParser.prototype.sequence_spec = function() {

    var localctx = new Sequence_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, plsqlParser.RULE_sequence_spec);
    try {
        this.state = 1874;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.INCREMENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1858;
            this.match(plsqlParser.INCREMENT);
            this.state = 1859;
            this.match(plsqlParser.BY);
            this.state = 1860;
            this.match(plsqlParser.UNSIGNED_INTEGER);
            break;
        case plsqlParser.MAXVALUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1861;
            this.match(plsqlParser.MAXVALUE);
            this.state = 1862;
            this.match(plsqlParser.UNSIGNED_INTEGER);
            break;
        case plsqlParser.NOMAXVALUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1863;
            this.match(plsqlParser.NOMAXVALUE);
            break;
        case plsqlParser.MINVALUE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1864;
            this.match(plsqlParser.MINVALUE);
            this.state = 1865;
            this.match(plsqlParser.UNSIGNED_INTEGER);
            break;
        case plsqlParser.NOMINVALUE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1866;
            this.match(plsqlParser.NOMINVALUE);
            break;
        case plsqlParser.CYCLE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1867;
            this.match(plsqlParser.CYCLE);
            break;
        case plsqlParser.NOCYCLE:
            this.enterOuterAlt(localctx, 7);
            this.state = 1868;
            this.match(plsqlParser.NOCYCLE);
            break;
        case plsqlParser.CACHE:
            this.enterOuterAlt(localctx, 8);
            this.state = 1869;
            this.match(plsqlParser.CACHE);
            this.state = 1870;
            this.match(plsqlParser.UNSIGNED_INTEGER);
            break;
        case plsqlParser.NOCACHE:
            this.enterOuterAlt(localctx, 9);
            this.state = 1871;
            this.match(plsqlParser.NOCACHE);
            break;
        case plsqlParser.ORDER:
            this.enterOuterAlt(localctx, 10);
            this.state = 1872;
            this.match(plsqlParser.ORDER);
            break;
        case plsqlParser.NOORDER:
            this.enterOuterAlt(localctx, 11);
            this.state = 1873;
            this.match(plsqlParser.NOORDER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_start_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sequence_start_clause;
    return this;
}

Sequence_start_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_start_clauseContext.prototype.constructor = Sequence_start_clauseContext;

Sequence_start_clauseContext.prototype.START = function() {
    return this.getToken(plsqlParser.START, 0);
};

Sequence_start_clauseContext.prototype.WITH = function() {
    return this.getToken(plsqlParser.WITH, 0);
};

Sequence_start_clauseContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(plsqlParser.UNSIGNED_INTEGER, 0);
};

Sequence_start_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSequence_start_clause(this);
	}
};

Sequence_start_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSequence_start_clause(this);
	}
};




plsqlParser.Sequence_start_clauseContext = Sequence_start_clauseContext;

plsqlParser.prototype.sequence_start_clause = function() {

    var localctx = new Sequence_start_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, plsqlParser.RULE_sequence_start_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1876;
        this.match(plsqlParser.START);
        this.state = 1877;
        this.match(plsqlParser.WITH);
        this.state = 1878;
        this.match(plsqlParser.UNSIGNED_INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Invoker_rights_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_invoker_rights_clause;
    return this;
}

Invoker_rights_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Invoker_rights_clauseContext.prototype.constructor = Invoker_rights_clauseContext;

Invoker_rights_clauseContext.prototype.AUTHID = function() {
    return this.getToken(plsqlParser.AUTHID, 0);
};

Invoker_rights_clauseContext.prototype.CURRENT_USER = function() {
    return this.getToken(plsqlParser.CURRENT_USER, 0);
};

Invoker_rights_clauseContext.prototype.DEFINER = function() {
    return this.getToken(plsqlParser.DEFINER, 0);
};

Invoker_rights_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterInvoker_rights_clause(this);
	}
};

Invoker_rights_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitInvoker_rights_clause(this);
	}
};




plsqlParser.Invoker_rights_clauseContext = Invoker_rights_clauseContext;

plsqlParser.prototype.invoker_rights_clause = function() {

    var localctx = new Invoker_rights_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, plsqlParser.RULE_invoker_rights_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1880;
        this.match(plsqlParser.AUTHID);
        this.state = 1881;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.CURRENT_USER || _la===plsqlParser.DEFINER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compiler_parameters_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_compiler_parameters_clause;
    return this;
}

Compiler_parameters_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compiler_parameters_clauseContext.prototype.constructor = Compiler_parameters_clauseContext;

Compiler_parameters_clauseContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Compiler_parameters_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Compiler_parameters_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCompiler_parameters_clause(this);
	}
};

Compiler_parameters_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCompiler_parameters_clause(this);
	}
};




plsqlParser.Compiler_parameters_clauseContext = Compiler_parameters_clauseContext;

plsqlParser.prototype.compiler_parameters_clause = function() {

    var localctx = new Compiler_parameters_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, plsqlParser.RULE_compiler_parameters_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1883;
        this.r_id();
        this.state = 1884;
        this.match(plsqlParser.EQUALS_OP);
        this.state = 1885;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Call_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_call_spec;
    return this;
}

Call_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_specContext.prototype.constructor = Call_specContext;

Call_specContext.prototype.LANGUAGE = function() {
    return this.getToken(plsqlParser.LANGUAGE, 0);
};

Call_specContext.prototype.java_spec = function() {
    return this.getTypedRuleContext(Java_specContext,0);
};

Call_specContext.prototype.c_spec = function() {
    return this.getTypedRuleContext(C_specContext,0);
};

Call_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCall_spec(this);
	}
};

Call_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCall_spec(this);
	}
};




plsqlParser.Call_specContext = Call_specContext;

plsqlParser.prototype.call_spec = function() {

    var localctx = new Call_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, plsqlParser.RULE_call_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1887;
        this.match(plsqlParser.LANGUAGE);
        this.state = 1890;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.JAVA:
            this.state = 1888;
            this.java_spec();
            break;
        case plsqlParser.C_LETTER:
            this.state = 1889;
            this.c_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_java_spec;
    return this;
}

Java_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_specContext.prototype.constructor = Java_specContext;

Java_specContext.prototype.JAVA = function() {
    return this.getToken(plsqlParser.JAVA, 0);
};

Java_specContext.prototype.NAME = function() {
    return this.getToken(plsqlParser.NAME, 0);
};

Java_specContext.prototype.CHAR_STRING = function() {
    return this.getToken(plsqlParser.CHAR_STRING, 0);
};

Java_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterJava_spec(this);
	}
};

Java_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitJava_spec(this);
	}
};




plsqlParser.Java_specContext = Java_specContext;

plsqlParser.prototype.java_spec = function() {

    var localctx = new Java_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, plsqlParser.RULE_java_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1892;
        this.match(plsqlParser.JAVA);
        this.state = 1893;
        this.match(plsqlParser.NAME);
        this.state = 1894;
        this.match(plsqlParser.CHAR_STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_c_spec;
    return this;
}

C_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_specContext.prototype.constructor = C_specContext;

C_specContext.prototype.C_LETTER = function() {
    return this.getToken(plsqlParser.C_LETTER, 0);
};

C_specContext.prototype.LIBRARY = function() {
    return this.getToken(plsqlParser.LIBRARY, 0);
};

C_specContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

C_specContext.prototype.NAME = function() {
    return this.getToken(plsqlParser.NAME, 0);
};

C_specContext.prototype.CHAR_STRING = function() {
    return this.getToken(plsqlParser.CHAR_STRING, 0);
};

C_specContext.prototype.c_agent_in_clause = function() {
    return this.getTypedRuleContext(C_agent_in_clauseContext,0);
};

C_specContext.prototype.WITH = function() {
    return this.getToken(plsqlParser.WITH, 0);
};

C_specContext.prototype.CONTEXT = function() {
    return this.getToken(plsqlParser.CONTEXT, 0);
};

C_specContext.prototype.c_parameters_clause = function() {
    return this.getTypedRuleContext(C_parameters_clauseContext,0);
};

C_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterC_spec(this);
	}
};

C_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitC_spec(this);
	}
};




plsqlParser.C_specContext = C_specContext;

plsqlParser.prototype.c_spec = function() {

    var localctx = new C_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, plsqlParser.RULE_c_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1896;
        this.match(plsqlParser.C_LETTER);
        this.state = 1899;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NAME) {
            this.state = 1897;
            this.match(plsqlParser.NAME);
            this.state = 1898;
            this.match(plsqlParser.CHAR_STRING);
        }

        this.state = 1901;
        this.match(plsqlParser.LIBRARY);
        this.state = 1902;
        this.r_id();
        this.state = 1904;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
        if(la_===1) {
            this.state = 1903;
            this.c_agent_in_clause();

        }
        this.state = 1908;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        if(la_===1) {
            this.state = 1906;
            this.match(plsqlParser.WITH);
            this.state = 1907;
            this.match(plsqlParser.CONTEXT);

        }
        this.state = 1911;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        if(la_===1) {
            this.state = 1910;
            this.c_parameters_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_agent_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_c_agent_in_clause;
    return this;
}

C_agent_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_agent_in_clauseContext.prototype.constructor = C_agent_in_clauseContext;

C_agent_in_clauseContext.prototype.AGENT = function() {
    return this.getToken(plsqlParser.AGENT, 0);
};

C_agent_in_clauseContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

C_agent_in_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

C_agent_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterC_agent_in_clause(this);
	}
};

C_agent_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitC_agent_in_clause(this);
	}
};




plsqlParser.C_agent_in_clauseContext = C_agent_in_clauseContext;

plsqlParser.prototype.c_agent_in_clause = function() {

    var localctx = new C_agent_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, plsqlParser.RULE_c_agent_in_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1913;
        this.match(plsqlParser.AGENT);
        this.state = 1914;
        this.match(plsqlParser.IN);
        this.state = 1915;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 1916;
        this.expression(0);
        this.state = 1921;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 1917;
            this.match(plsqlParser.COMMA);
            this.state = 1918;
            this.expression(0);
            this.state = 1923;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1924;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_parameters_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_c_parameters_clause;
    return this;
}

C_parameters_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_parameters_clauseContext.prototype.constructor = C_parameters_clauseContext;

C_parameters_clauseContext.prototype.PARAMETERS = function() {
    return this.getToken(plsqlParser.PARAMETERS, 0);
};

C_parameters_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

C_parameters_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterC_parameters_clause(this);
	}
};

C_parameters_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitC_parameters_clause(this);
	}
};




plsqlParser.C_parameters_clauseContext = C_parameters_clauseContext;

plsqlParser.prototype.c_parameters_clause = function() {

    var localctx = new C_parameters_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, plsqlParser.RULE_c_parameters_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1926;
        this.match(plsqlParser.PARAMETERS);
        this.state = 1927;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 1939;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ALL:
        case plsqlParser.ANALYZE:
        case plsqlParser.ANY:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CASE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONNECT_BY_ROOT:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DATE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DISTINCT:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXISTS:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FALSE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NOT:
        case plsqlParser.NULL:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.PRIOR:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUE:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.NATIONAL_CHAR_STRING_LIT:
        case plsqlParser.UNSIGNED_INTEGER:
        case plsqlParser.APPROXIMATE_NUM_LIT:
        case plsqlParser.CHAR_STRING:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.LEFT_PAREN:
        case plsqlParser.PLUS_SIGN:
        case plsqlParser.MINUS_SIGN:
        case plsqlParser.BINDVAR:
        case plsqlParser.COLON:
        case plsqlParser.REGULAR_ID:
            this.state = 1928;
            this.expression(0);
            this.state = 1933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 1929;
                this.match(plsqlParser.COMMA);
                this.state = 1930;
                this.expression(0);
                this.state = 1935;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case plsqlParser.PERIOD:
            this.state = 1936;
            this.match(plsqlParser.PERIOD);
            this.state = 1937;
            this.match(plsqlParser.PERIOD);
            this.state = 1938;
            this.match(plsqlParser.PERIOD);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1941;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

ParameterContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

ParameterContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

ParameterContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.IN);
    } else {
        return this.getToken(plsqlParser.IN, i);
    }
};


ParameterContext.prototype.OUT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.OUT);
    } else {
        return this.getToken(plsqlParser.OUT, i);
    }
};


ParameterContext.prototype.INOUT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.INOUT);
    } else {
        return this.getToken(plsqlParser.INOUT, i);
    }
};


ParameterContext.prototype.NOCOPY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.NOCOPY);
    } else {
        return this.getToken(plsqlParser.NOCOPY, i);
    }
};


ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitParameter(this);
	}
};




plsqlParser.ParameterContext = ParameterContext;

plsqlParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, plsqlParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1943;
        this.parameter_name();
        this.state = 1947;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1944;
                _la = this._input.LA(1);
                if(!(_la===plsqlParser.IN || _la===plsqlParser.INOUT || _la===plsqlParser.NOCOPY || _la===plsqlParser.OUT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 1949;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
        }

        this.state = 1951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DATE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 1950;
            this.type_spec();
        }

        this.state = 1954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.DEFAULT || _la===plsqlParser.ASSIGN_OP) {
            this.state = 1953;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Default_value_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_default_value_part;
    return this;
}

Default_value_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Default_value_partContext.prototype.constructor = Default_value_partContext;

Default_value_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Default_value_partContext.prototype.ASSIGN_OP = function() {
    return this.getToken(plsqlParser.ASSIGN_OP, 0);
};

Default_value_partContext.prototype.DEFAULT = function() {
    return this.getToken(plsqlParser.DEFAULT, 0);
};

Default_value_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDefault_value_part(this);
	}
};

Default_value_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDefault_value_part(this);
	}
};




plsqlParser.Default_value_partContext = Default_value_partContext;

plsqlParser.prototype.default_value_part = function() {

    var localctx = new Default_value_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, plsqlParser.RULE_default_value_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1956;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.DEFAULT || _la===plsqlParser.ASSIGN_OP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1957;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declare_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_declare_spec;
    return this;
}

Declare_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declare_specContext.prototype.constructor = Declare_specContext;

Declare_specContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Declare_specContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Declare_specContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Declare_specContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Declare_specContext.prototype.pragma_declaration = function() {
    return this.getTypedRuleContext(Pragma_declarationContext,0);
};

Declare_specContext.prototype.record_declaration = function() {
    return this.getTypedRuleContext(Record_declarationContext,0);
};

Declare_specContext.prototype.table_declaration = function() {
    return this.getTypedRuleContext(Table_declarationContext,0);
};

Declare_specContext.prototype.create_procedure_body = function() {
    return this.getTypedRuleContext(Create_procedure_bodyContext,0);
};

Declare_specContext.prototype.create_function_body = function() {
    return this.getTypedRuleContext(Create_function_bodyContext,0);
};

Declare_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDeclare_spec(this);
	}
};

Declare_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDeclare_spec(this);
	}
};




plsqlParser.Declare_specContext = Declare_specContext;

plsqlParser.prototype.declare_spec = function() {

    var localctx = new Declare_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, plsqlParser.RULE_declare_spec);
    try {
        this.state = 1968;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1959;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1960;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1961;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1962;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1963;
            this.pragma_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1964;
            this.record_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1965;
            this.table_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1966;
            this.create_procedure_body();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1967;
            this.create_function_body();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_variable_declaration;
    return this;
}

Variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarationContext.prototype.constructor = Variable_declarationContext;

Variable_declarationContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Variable_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Variable_declarationContext.prototype.CONSTANT = function() {
    return this.getToken(plsqlParser.CONSTANT, 0);
};

Variable_declarationContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Variable_declarationContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

Variable_declarationContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterVariable_declaration(this);
	}
};

Variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitVariable_declaration(this);
	}
};




plsqlParser.Variable_declarationContext = Variable_declarationContext;

plsqlParser.prototype.variable_declaration = function() {

    var localctx = new Variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, plsqlParser.RULE_variable_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1970;
        this.variable_name();
        this.state = 1972;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        if(la_===1) {
            this.state = 1971;
            this.match(plsqlParser.CONSTANT);

        }
        this.state = 1974;
        this.type_spec();
        this.state = 1977;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NOT) {
            this.state = 1975;
            this.match(plsqlParser.NOT);
            this.state = 1976;
            this.match(plsqlParser.NULL);
        }

        this.state = 1980;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.DEFAULT || _la===plsqlParser.ASSIGN_OP) {
            this.state = 1979;
            this.default_value_part();
        }

        this.state = 1982;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subtype_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_subtype_declaration;
    return this;
}

Subtype_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subtype_declarationContext.prototype.constructor = Subtype_declarationContext;

Subtype_declarationContext.prototype.SUBTYPE = function() {
    return this.getToken(plsqlParser.SUBTYPE, 0);
};

Subtype_declarationContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Subtype_declarationContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Subtype_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Subtype_declarationContext.prototype.RANGE = function() {
    return this.getToken(plsqlParser.RANGE, 0);
};

Subtype_declarationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Subtype_declarationContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Subtype_declarationContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

Subtype_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSubtype_declaration(this);
	}
};

Subtype_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSubtype_declaration(this);
	}
};




plsqlParser.Subtype_declarationContext = Subtype_declarationContext;

plsqlParser.prototype.subtype_declaration = function() {

    var localctx = new Subtype_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, plsqlParser.RULE_subtype_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1984;
        this.match(plsqlParser.SUBTYPE);
        this.state = 1985;
        this.type_name();
        this.state = 1986;
        this.match(plsqlParser.IS);
        this.state = 1987;
        this.type_spec();
        this.state = 1993;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.RANGE) {
            this.state = 1988;
            this.match(plsqlParser.RANGE);
            this.state = 1989;
            this.expression(0);
            this.state = 1990;
            this.match(plsqlParser.T__0);
            this.state = 1991;
            this.expression(0);
        }

        this.state = 1997;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NOT) {
            this.state = 1995;
            this.match(plsqlParser.NOT);
            this.state = 1996;
            this.match(plsqlParser.NULL);
        }

        this.state = 1999;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cursor_declaration;
    return this;
}

Cursor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_declarationContext.prototype.constructor = Cursor_declarationContext;

Cursor_declarationContext.prototype.CURSOR = function() {
    return this.getToken(plsqlParser.CURSOR, 0);
};

Cursor_declarationContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Cursor_declarationContext.prototype.parameter_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parameter_specContext);
    } else {
        return this.getTypedRuleContext(Parameter_specContext,i);
    }
};

Cursor_declarationContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Cursor_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Cursor_declarationContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Cursor_declarationContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Cursor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCursor_declaration(this);
	}
};

Cursor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCursor_declaration(this);
	}
};




plsqlParser.Cursor_declarationContext = Cursor_declarationContext;

plsqlParser.prototype.cursor_declaration = function() {

    var localctx = new Cursor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, plsqlParser.RULE_cursor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2001;
        this.match(plsqlParser.CURSOR);
        this.state = 2002;
        this.cursor_name();
        this.state = 2014;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 2003;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2004;
            this.parameter_spec();
            this.state = 2009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2005;
                this.match(plsqlParser.COMMA);
                this.state = 2006;
                this.parameter_spec();
                this.state = 2011;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2012;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 2018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.RETURN) {
            this.state = 2016;
            this.match(plsqlParser.RETURN);
            this.state = 2017;
            this.type_spec();
        }

        this.state = 2022;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.IS) {
            this.state = 2020;
            this.match(plsqlParser.IS);
            this.state = 2021;
            this.select_statement();
        }

        this.state = 2024;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_parameter_spec;
    return this;
}

Parameter_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_specContext.prototype.constructor = Parameter_specContext;

Parameter_specContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

Parameter_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Parameter_specContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Parameter_specContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Parameter_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterParameter_spec(this);
	}
};

Parameter_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitParameter_spec(this);
	}
};




plsqlParser.Parameter_specContext = Parameter_specContext;

plsqlParser.prototype.parameter_spec = function() {

    var localctx = new Parameter_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, plsqlParser.RULE_parameter_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2026;
        this.parameter_name();
        this.state = 2031;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (plsqlParser.BLOCK - 32)) | (1 << (plsqlParser.BODY - 32)) | (1 << (plsqlParser.BOOLEAN - 32)) | (1 << (plsqlParser.BOTH - 32)) | (1 << (plsqlParser.BULK - 32)) | (1 << (plsqlParser.BYTE - 32)) | (1 << (plsqlParser.C_LETTER - 32)) | (1 << (plsqlParser.CALL - 32)) | (1 << (plsqlParser.CANONICAL - 32)) | (1 << (plsqlParser.CASCADE - 32)) | (1 << (plsqlParser.CAST - 32)) | (1 << (plsqlParser.CHAR - 32)) | (1 << (plsqlParser.CHAR_CS - 32)) | (1 << (plsqlParser.CHARACTER - 32)) | (1 << (plsqlParser.CHR - 32)) | (1 << (plsqlParser.CLOB - 32)) | (1 << (plsqlParser.CLOSE - 32)) | (1 << (plsqlParser.CLUSTER - 32)) | (1 << (plsqlParser.COLLECT - 32)) | (1 << (plsqlParser.COLUMNS - 32)) | (1 << (plsqlParser.COMMENT - 32)) | (1 << (plsqlParser.COMMIT - 32)) | (1 << (plsqlParser.COMMITTED - 32)) | (1 << (plsqlParser.COMPATIBILITY - 32)) | (1 << (plsqlParser.COMPILE - 32)) | (1 << (plsqlParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (plsqlParser.DECREMENT - 97)) | (1 << (plsqlParser.DEFAULTS - 97)) | (1 << (plsqlParser.DEFERRED - 97)) | (1 << (plsqlParser.DEFINER - 97)) | (1 << (plsqlParser.DETERMINISTIC - 97)) | (1 << (plsqlParser.DIMENSION - 97)) | (1 << (plsqlParser.DISABLE - 97)) | (1 << (plsqlParser.DISASSOCIATE - 97)) | (1 << (plsqlParser.DOCUMENT - 97)) | (1 << (plsqlParser.DOUBLE - 97)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (plsqlParser.EACH - 97)) | (1 << (plsqlParser.ELEMENT - 97)) | (1 << (plsqlParser.EMPTY - 97)) | (1 << (plsqlParser.ENABLE - 97)) | (1 << (plsqlParser.ENCODING - 97)) | (1 << (plsqlParser.ENTITYESCAPING - 97)) | (1 << (plsqlParser.ERR - 97)) | (1 << (plsqlParser.ERRORS - 97)) | (1 << (plsqlParser.ESCAPE - 97)) | (1 << (plsqlParser.EVALNAME - 97)) | (1 << (plsqlParser.EXCEPTION - 97)) | (1 << (plsqlParser.EXCEPTION_INIT - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (plsqlParser.IGNORE - 162)) | (1 << (plsqlParser.IMMEDIATE - 162)) | (1 << (plsqlParser.IN - 162)) | (1 << (plsqlParser.INCLUDE - 162)) | (1 << (plsqlParser.INCLUDING - 162)) | (1 << (plsqlParser.INCREMENT - 162)) | (1 << (plsqlParser.INDENT - 162)) | (1 << (plsqlParser.INDEXED - 162)) | (1 << (plsqlParser.INDICATOR - 162)) | (1 << (plsqlParser.INDICES - 162)) | (1 << (plsqlParser.INFINITE - 162)) | (1 << (plsqlParser.INLINE - 162)) | (1 << (plsqlParser.INNER - 162)) | (1 << (plsqlParser.INOUT - 162)) | (1 << (plsqlParser.INSTANTIABLE - 162)) | (1 << (plsqlParser.INSTEAD - 162)) | (1 << (plsqlParser.INT - 162)) | (1 << (plsqlParser.INTEGER - 162)) | (1 << (plsqlParser.INTERVAL - 162)) | (1 << (plsqlParser.INVALIDATE - 162)) | (1 << (plsqlParser.ISOLATION - 162)) | (1 << (plsqlParser.ITERATE - 162)) | (1 << (plsqlParser.JAVA - 162)) | (1 << (plsqlParser.JOIN - 162)) | (1 << (plsqlParser.KEEP - 162)) | (1 << (plsqlParser.LANGUAGE - 162)) | (1 << (plsqlParser.LAST - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (plsqlParser.LAST_VALUE - 194)) | (1 << (plsqlParser.LEADING - 194)) | (1 << (plsqlParser.LEFT - 194)) | (1 << (plsqlParser.LEVEL - 194)) | (1 << (plsqlParser.LIBRARY - 194)) | (1 << (plsqlParser.LIKE2 - 194)) | (1 << (plsqlParser.LIKE4 - 194)) | (1 << (plsqlParser.LIKEC - 194)) | (1 << (plsqlParser.LIMIT - 194)) | (1 << (plsqlParser.LOCAL - 194)) | (1 << (plsqlParser.LOCKED - 194)) | (1 << (plsqlParser.LOG - 194)) | (1 << (plsqlParser.LOGOFF - 194)) | (1 << (plsqlParser.LOGON - 194)) | (1 << (plsqlParser.LONG - 194)) | (1 << (plsqlParser.LOOP - 194)) | (1 << (plsqlParser.MAIN - 194)) | (1 << (plsqlParser.MAP - 194)) | (1 << (plsqlParser.MATCHED - 194)) | (1 << (plsqlParser.MAXVALUE - 194)) | (1 << (plsqlParser.MEASURES - 194)) | (1 << (plsqlParser.MEMBER - 194)) | (1 << (plsqlParser.MERGE - 194)) | (1 << (plsqlParser.MINUTE - 194)) | (1 << (plsqlParser.MINVALUE - 194)) | (1 << (plsqlParser.MLSLABEL - 194)) | (1 << (plsqlParser.MODEL - 194)) | (1 << (plsqlParser.MODIFY - 194)))) !== 0) || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (plsqlParser.MONTH - 226)) | (1 << (plsqlParser.MULTISET - 226)) | (1 << (plsqlParser.NAME - 226)) | (1 << (plsqlParser.NAN - 226)) | (1 << (plsqlParser.NATURAL - 226)) | (1 << (plsqlParser.NATURALN - 226)) | (1 << (plsqlParser.NAV - 226)) | (1 << (plsqlParser.NCHAR - 226)) | (1 << (plsqlParser.NCHAR_CS - 226)) | (1 << (plsqlParser.NCLOB - 226)) | (1 << (plsqlParser.NESTED - 226)) | (1 << (plsqlParser.NEW - 226)) | (1 << (plsqlParser.NO - 226)) | (1 << (plsqlParser.NOAUDIT - 226)) | (1 << (plsqlParser.NOCOPY - 226)) | (1 << (plsqlParser.NOCYCLE - 226)) | (1 << (plsqlParser.NOENTITYESCAPING - 226)) | (1 << (plsqlParser.NONE - 226)) | (1 << (plsqlParser.NOSCHEMACHECK - 226)) | (1 << (plsqlParser.NULLS - 226)) | (1 << (plsqlParser.NUMBER - 226)) | (1 << (plsqlParser.NUMERIC - 226)) | (1 << (plsqlParser.NVARCHAR2 - 226)) | (1 << (plsqlParser.OBJECT - 226)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (plsqlParser.OFF - 258)) | (1 << (plsqlParser.OID - 258)) | (1 << (plsqlParser.OLD - 258)) | (1 << (plsqlParser.ONLY - 258)) | (1 << (plsqlParser.OPEN - 258)) | (1 << (plsqlParser.ORADATA - 258)) | (1 << (plsqlParser.ORDINALITY - 258)) | (1 << (plsqlParser.OSERROR - 258)) | (1 << (plsqlParser.OUT - 258)) | (1 << (plsqlParser.OUTER - 258)) | (1 << (plsqlParser.OVER - 258)) | (1 << (plsqlParser.OVERRIDING - 258)) | (1 << (plsqlParser.PACKAGE - 258)) | (1 << (plsqlParser.PARALLEL_ENABLE - 258)) | (1 << (plsqlParser.PARAMETERS - 258)) | (1 << (plsqlParser.PARENT - 258)) | (1 << (plsqlParser.PARTITION - 258)) | (1 << (plsqlParser.PASSING - 258)) | (1 << (plsqlParser.PATH - 258)) | (1 << (plsqlParser.PIPELINED - 258)) | (1 << (plsqlParser.PLAN - 258)) | (1 << (plsqlParser.PLS_INTEGER - 258)) | (1 << (plsqlParser.POSITIVE - 258)) | (1 << (plsqlParser.POSITIVEN - 258)) | (1 << (plsqlParser.PRAGMA - 258)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (plsqlParser.PRECEDING - 290)) | (1 << (plsqlParser.PRECISION - 290)) | (1 << (plsqlParser.PRESENT - 290)) | (1 << (plsqlParser.RAISE - 290)) | (1 << (plsqlParser.RANGE - 290)) | (1 << (plsqlParser.RAW - 290)) | (1 << (plsqlParser.READ - 290)) | (1 << (plsqlParser.REAL - 290)) | (1 << (plsqlParser.RECORD - 290)) | (1 << (plsqlParser.REF - 290)) | (1 << (plsqlParser.REFERENCE - 290)) | (1 << (plsqlParser.REFERENCING - 290)) | (1 << (plsqlParser.REJECT - 290)) | (1 << (plsqlParser.RELIES_ON - 290)) | (1 << (plsqlParser.RENAME - 290)) | (1 << (plsqlParser.REPLACE - 290)) | (1 << (plsqlParser.RESPECT - 290)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 290)) | (1 << (plsqlParser.RESULT - 290)) | (1 << (plsqlParser.RESULT_CACHE - 290)) | (1 << (plsqlParser.RETURN - 290)) | (1 << (plsqlParser.RETURNING - 290)) | (1 << (plsqlParser.REUSE - 290)) | (1 << (plsqlParser.REVERSE - 290)) | (1 << (plsqlParser.RIGHT - 290)) | (1 << (plsqlParser.ROLLBACK - 290)) | (1 << (plsqlParser.ROLLUP - 290)) | (1 << (plsqlParser.ROW - 290)) | (1 << (plsqlParser.ROWID - 290)))) !== 0) || ((((_la - 322)) & ~0x1f) == 0 && ((1 << (_la - 322)) & ((1 << (plsqlParser.ROWS - 322)) | (1 << (plsqlParser.RULES - 322)) | (1 << (plsqlParser.SAMPLE - 322)) | (1 << (plsqlParser.SAVE - 322)) | (1 << (plsqlParser.SAVEPOINT - 322)) | (1 << (plsqlParser.SCHEMA - 322)) | (1 << (plsqlParser.SCHEMACHECK - 322)) | (1 << (plsqlParser.SCN - 322)) | (1 << (plsqlParser.SECOND - 322)) | (1 << (plsqlParser.SEED - 322)) | (1 << (plsqlParser.SEGMENT - 322)) | (1 << (plsqlParser.SELF - 322)) | (1 << (plsqlParser.SEQUENTIAL - 322)) | (1 << (plsqlParser.SERIALIZABLE - 322)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 322)) | (1 << (plsqlParser.SERVERERROR - 322)) | (1 << (plsqlParser.SESSIONTIMEZONE - 322)) | (1 << (plsqlParser.SET - 322)) | (1 << (plsqlParser.SETS - 322)) | (1 << (plsqlParser.SETTINGS - 322)) | (1 << (plsqlParser.SHOW - 322)) | (1 << (plsqlParser.SHUTDOWN - 322)) | (1 << (plsqlParser.SIBLINGS - 322)) | (1 << (plsqlParser.SIGNTYPE - 322)) | (1 << (plsqlParser.SIMPLE_INTEGER - 322)) | (1 << (plsqlParser.SINGLE - 322)) | (1 << (plsqlParser.SKIP_ - 322)))) !== 0) || ((((_la - 354)) & ~0x1f) == 0 && ((1 << (_la - 354)) & ((1 << (plsqlParser.SMALLINT - 354)) | (1 << (plsqlParser.SNAPSHOT - 354)) | (1 << (plsqlParser.SOME - 354)) | (1 << (plsqlParser.SPECIFICATION - 354)) | (1 << (plsqlParser.SQLDATA - 354)) | (1 << (plsqlParser.SQLERROR - 354)) | (1 << (plsqlParser.STANDALONE - 354)) | (1 << (plsqlParser.STARTUP - 354)) | (1 << (plsqlParser.STATEMENT - 354)) | (1 << (plsqlParser.STATEMENT_ID - 354)) | (1 << (plsqlParser.STATIC - 354)) | (1 << (plsqlParser.STATISTICS - 354)) | (1 << (plsqlParser.STRING - 354)) | (1 << (plsqlParser.SUBMULTISET - 354)) | (1 << (plsqlParser.SUBPARTITION - 354)) | (1 << (plsqlParser.SUBSTITUTABLE - 354)) | (1 << (plsqlParser.SUBTYPE - 354)) | (1 << (plsqlParser.SUCCESS - 354)) | (1 << (plsqlParser.SUSPEND - 354)) | (1 << (plsqlParser.TIME - 354)) | (1 << (plsqlParser.TIMESTAMP - 354)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 354)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 354)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 354)) | (1 << (plsqlParser.TIMEZONE_ABBR - 354)) | (1 << (plsqlParser.TIMEZONE_HOUR - 354)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 354)) | (1 << (plsqlParser.TIMEZONE_REGION - 354)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (plsqlParser.TRAILING - 387)) | (1 << (plsqlParser.TRANSACTION - 387)) | (1 << (plsqlParser.TRANSLATE - 387)) | (1 << (plsqlParser.TREAT - 387)) | (1 << (plsqlParser.TRIGGER - 387)) | (1 << (plsqlParser.TRIM - 387)) | (1 << (plsqlParser.TRUNCATE - 387)) | (1 << (plsqlParser.TYPE - 387)) | (1 << (plsqlParser.UNBOUNDED - 387)) | (1 << (plsqlParser.UNDER - 387)) | (1 << (plsqlParser.UNLIMITED - 387)) | (1 << (plsqlParser.UNTIL - 387)) | (1 << (plsqlParser.UPDATED - 387)) | (1 << (plsqlParser.UPSERT - 387)) | (1 << (plsqlParser.UROWID - 387)) | (1 << (plsqlParser.USE - 387)) | (1 << (plsqlParser.VALIDATE - 387)) | (1 << (plsqlParser.VALUE - 387)) | (1 << (plsqlParser.VARCHAR - 387)) | (1 << (plsqlParser.VARCHAR2 - 387)) | (1 << (plsqlParser.VARIABLE - 387)) | (1 << (plsqlParser.VARRAY - 387)) | (1 << (plsqlParser.VARYING - 387)) | (1 << (plsqlParser.VERSION - 387)) | (1 << (plsqlParser.VERSIONS - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (plsqlParser.WAIT - 419)) | (1 << (plsqlParser.WARNING - 419)) | (1 << (plsqlParser.WELLFORMED - 419)) | (1 << (plsqlParser.WHENEVER - 419)) | (1 << (plsqlParser.WHILE - 419)) | (1 << (plsqlParser.WITHIN - 419)) | (1 << (plsqlParser.WORK - 419)) | (1 << (plsqlParser.WRITE - 419)) | (1 << (plsqlParser.XML - 419)) | (1 << (plsqlParser.XMLAGG - 419)) | (1 << (plsqlParser.XMLATTRIBUTES - 419)) | (1 << (plsqlParser.XMLCAST - 419)) | (1 << (plsqlParser.XMLCOLATTVAL - 419)) | (1 << (plsqlParser.XMLELEMENT - 419)) | (1 << (plsqlParser.XMLEXISTS - 419)) | (1 << (plsqlParser.XMLFOREST - 419)) | (1 << (plsqlParser.XMLNAMESPACES - 419)) | (1 << (plsqlParser.XMLPARSE - 419)) | (1 << (plsqlParser.XMLPI - 419)) | (1 << (plsqlParser.XMLQUERY - 419)) | (1 << (plsqlParser.XMLROOT - 419)) | (1 << (plsqlParser.XMLSERIALIZE - 419)) | (1 << (plsqlParser.XMLTABLE - 419)) | (1 << (plsqlParser.YEAR - 419)) | (1 << (plsqlParser.YES - 419)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 419)) | (1 << (plsqlParser.ZONE - 419)) | (1 << (plsqlParser.PREDICTION - 419)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (plsqlParser.PREDICTION_COST - 451)) | (1 << (plsqlParser.PREDICTION_DETAILS - 451)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 451)) | (1 << (plsqlParser.PREDICTION_SET - 451)) | (1 << (plsqlParser.CUME_DIST - 451)) | (1 << (plsqlParser.DENSE_RANK - 451)) | (1 << (plsqlParser.LISTAGG - 451)) | (1 << (plsqlParser.PERCENT_RANK - 451)) | (1 << (plsqlParser.PERCENTILE_CONT - 451)) | (1 << (plsqlParser.PERCENTILE_DISC - 451)) | (1 << (plsqlParser.RANK - 451)) | (1 << (plsqlParser.AVG - 451)) | (1 << (plsqlParser.CORR - 451)) | (1 << (plsqlParser.LAG - 451)) | (1 << (plsqlParser.LEAD - 451)) | (1 << (plsqlParser.MAX - 451)) | (1 << (plsqlParser.MEDIAN - 451)) | (1 << (plsqlParser.MIN - 451)) | (1 << (plsqlParser.NTILE - 451)) | (1 << (plsqlParser.RATIO_TO_REPORT - 451)) | (1 << (plsqlParser.ROW_NUMBER - 451)) | (1 << (plsqlParser.SUM - 451)) | (1 << (plsqlParser.VARIANCE - 451)) | (1 << (plsqlParser.REGR_ - 451)) | (1 << (plsqlParser.STDDEV - 451)) | (1 << (plsqlParser.VAR_ - 451)) | (1 << (plsqlParser.COVAR_ - 451)))) !== 0) || _la===plsqlParser.DELIMITED_ID || _la===plsqlParser.REGULAR_ID) {
            this.state = 2028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.IN) {
                this.state = 2027;
                this.match(plsqlParser.IN);
            }

            this.state = 2030;
            this.type_spec();
        }

        this.state = 2034;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.DEFAULT || _la===plsqlParser.ASSIGN_OP) {
            this.state = 2033;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_exception_declaration;
    return this;
}

Exception_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_declarationContext.prototype.constructor = Exception_declarationContext;

Exception_declarationContext.prototype.exception_name = function() {
    return this.getTypedRuleContext(Exception_nameContext,0);
};

Exception_declarationContext.prototype.EXCEPTION = function() {
    return this.getToken(plsqlParser.EXCEPTION, 0);
};

Exception_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterException_declaration(this);
	}
};

Exception_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitException_declaration(this);
	}
};




plsqlParser.Exception_declarationContext = Exception_declarationContext;

plsqlParser.prototype.exception_declaration = function() {

    var localctx = new Exception_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, plsqlParser.RULE_exception_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2036;
        this.exception_name();
        this.state = 2037;
        this.match(plsqlParser.EXCEPTION);
        this.state = 2038;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pragma_declaration;
    this.id1 = null; // R_idContext
    return this;
}

Pragma_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_declarationContext.prototype.constructor = Pragma_declarationContext;

Pragma_declarationContext.prototype.PRAGMA = function() {
    return this.getToken(plsqlParser.PRAGMA, 0);
};

Pragma_declarationContext.prototype.SERIALLY_REUSABLE = function() {
    return this.getToken(plsqlParser.SERIALLY_REUSABLE, 0);
};

Pragma_declarationContext.prototype.AUTONOMOUS_TRANSACTION = function() {
    return this.getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0);
};

Pragma_declarationContext.prototype.EXCEPTION_INIT = function() {
    return this.getToken(plsqlParser.EXCEPTION_INIT, 0);
};

Pragma_declarationContext.prototype.exception_name = function() {
    return this.getTypedRuleContext(Exception_nameContext,0);
};

Pragma_declarationContext.prototype.numeric_negative = function() {
    return this.getTypedRuleContext(Numeric_negativeContext,0);
};

Pragma_declarationContext.prototype.INLINE = function() {
    return this.getToken(plsqlParser.INLINE, 0);
};

Pragma_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pragma_declarationContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(plsqlParser.RESTRICT_REFERENCES, 0);
};

Pragma_declarationContext.prototype.r_id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(R_idContext);
    } else {
        return this.getTypedRuleContext(R_idContext,i);
    }
};

Pragma_declarationContext.prototype.DEFAULT = function() {
    return this.getToken(plsqlParser.DEFAULT, 0);
};

Pragma_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPragma_declaration(this);
	}
};

Pragma_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPragma_declaration(this);
	}
};




plsqlParser.Pragma_declarationContext = Pragma_declarationContext;

plsqlParser.prototype.pragma_declaration = function() {

    var localctx = new Pragma_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, plsqlParser.RULE_pragma_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2040;
        this.match(plsqlParser.PRAGMA);
        this.state = 2071;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.SERIALLY_REUSABLE:
            this.state = 2041;
            this.match(plsqlParser.SERIALLY_REUSABLE);
            break;
        case plsqlParser.AUTONOMOUS_TRANSACTION:
            this.state = 2042;
            this.match(plsqlParser.AUTONOMOUS_TRANSACTION);
            break;
        case plsqlParser.EXCEPTION_INIT:
            this.state = 2043;
            this.match(plsqlParser.EXCEPTION_INIT);
            this.state = 2044;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2045;
            this.exception_name();
            this.state = 2046;
            this.match(plsqlParser.COMMA);
            this.state = 2047;
            this.numeric_negative();
            this.state = 2048;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        case plsqlParser.INLINE:
            this.state = 2050;
            this.match(plsqlParser.INLINE);
            this.state = 2051;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2052;
            localctx.id1 = this.r_id();
            this.state = 2053;
            this.match(plsqlParser.COMMA);
            this.state = 2054;
            this.expression(0);
            this.state = 2055;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        case plsqlParser.RESTRICT_REFERENCES:
            this.state = 2057;
            this.match(plsqlParser.RESTRICT_REFERENCES);
            this.state = 2058;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2061;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.A_LETTER:
            case plsqlParser.ADD:
            case plsqlParser.AFTER:
            case plsqlParser.AGENT:
            case plsqlParser.AGGREGATE:
            case plsqlParser.ANALYZE:
            case plsqlParser.ARRAY:
            case plsqlParser.ASSOCIATE:
            case plsqlParser.AT:
            case plsqlParser.ATTRIBUTE:
            case plsqlParser.AUDIT:
            case plsqlParser.AUTHID:
            case plsqlParser.AUTO:
            case plsqlParser.AUTOMATIC:
            case plsqlParser.AUTONOMOUS_TRANSACTION:
            case plsqlParser.BATCH:
            case plsqlParser.BEFORE:
            case plsqlParser.BFILE:
            case plsqlParser.BINARY_DOUBLE:
            case plsqlParser.BINARY_FLOAT:
            case plsqlParser.BINARY_INTEGER:
            case plsqlParser.BLOB:
            case plsqlParser.BLOCK:
            case plsqlParser.BODY:
            case plsqlParser.BOOLEAN:
            case plsqlParser.BOTH:
            case plsqlParser.BULK:
            case plsqlParser.BYTE:
            case plsqlParser.C_LETTER:
            case plsqlParser.CALL:
            case plsqlParser.CANONICAL:
            case plsqlParser.CASCADE:
            case plsqlParser.CAST:
            case plsqlParser.CHAR:
            case plsqlParser.CHAR_CS:
            case plsqlParser.CHARACTER:
            case plsqlParser.CHR:
            case plsqlParser.CLOB:
            case plsqlParser.CLOSE:
            case plsqlParser.CLUSTER:
            case plsqlParser.COLLECT:
            case plsqlParser.COLUMNS:
            case plsqlParser.COMMENT:
            case plsqlParser.COMMIT:
            case plsqlParser.COMMITTED:
            case plsqlParser.COMPATIBILITY:
            case plsqlParser.COMPILE:
            case plsqlParser.COMPOUND:
            case plsqlParser.CONSTANT:
            case plsqlParser.CONSTRAINT:
            case plsqlParser.CONSTRAINTS:
            case plsqlParser.CONSTRUCTOR:
            case plsqlParser.CONTENT:
            case plsqlParser.CONTEXT:
            case plsqlParser.CONTINUE:
            case plsqlParser.CONVERT:
            case plsqlParser.CORRUPT_XID:
            case plsqlParser.CORRUPT_XID_ALL:
            case plsqlParser.COST:
            case plsqlParser.COUNT:
            case plsqlParser.CROSS:
            case plsqlParser.CUBE:
            case plsqlParser.CURRENT_USER:
            case plsqlParser.CURSOR:
            case plsqlParser.CUSTOMDATUM:
            case plsqlParser.CYCLE:
            case plsqlParser.DATA:
            case plsqlParser.DATABASE:
            case plsqlParser.DAY:
            case plsqlParser.DB_ROLE_CHANGE:
            case plsqlParser.DBTIMEZONE:
            case plsqlParser.DDL:
            case plsqlParser.DEBUG:
            case plsqlParser.DEC:
            case plsqlParser.DECIMAL:
            case plsqlParser.DECOMPOSE:
            case plsqlParser.DECREMENT:
            case plsqlParser.DEFAULTS:
            case plsqlParser.DEFERRED:
            case plsqlParser.DEFINER:
            case plsqlParser.DETERMINISTIC:
            case plsqlParser.DIMENSION:
            case plsqlParser.DISABLE:
            case plsqlParser.DISASSOCIATE:
            case plsqlParser.DOCUMENT:
            case plsqlParser.DOUBLE:
            case plsqlParser.DSINTERVAL_UNCONSTRAINED:
            case plsqlParser.EACH:
            case plsqlParser.ELEMENT:
            case plsqlParser.EMPTY:
            case plsqlParser.ENABLE:
            case plsqlParser.ENCODING:
            case plsqlParser.ENTITYESCAPING:
            case plsqlParser.ERR:
            case plsqlParser.ERRORS:
            case plsqlParser.ESCAPE:
            case plsqlParser.EVALNAME:
            case plsqlParser.EXCEPTION:
            case plsqlParser.EXCEPTION_INIT:
            case plsqlParser.EXCEPTIONS:
            case plsqlParser.EXCLUDE:
            case plsqlParser.EXECUTE:
            case plsqlParser.EXIT:
            case plsqlParser.EXPLAIN:
            case plsqlParser.EXTERNAL:
            case plsqlParser.EXTRACT:
            case plsqlParser.FAILURE:
            case plsqlParser.FINAL:
            case plsqlParser.FIRST:
            case plsqlParser.FIRST_VALUE:
            case plsqlParser.FLOAT:
            case plsqlParser.FOLLOWING:
            case plsqlParser.FOLLOWS:
            case plsqlParser.FORALL:
            case plsqlParser.FORCE:
            case plsqlParser.FULL:
            case plsqlParser.FUNCTION:
            case plsqlParser.GROUPING:
            case plsqlParser.HASH:
            case plsqlParser.HIDE:
            case plsqlParser.HOUR:
            case plsqlParser.IGNORE:
            case plsqlParser.IMMEDIATE:
            case plsqlParser.INCLUDE:
            case plsqlParser.INCLUDING:
            case plsqlParser.INCREMENT:
            case plsqlParser.INDENT:
            case plsqlParser.INDEXED:
            case plsqlParser.INDICATOR:
            case plsqlParser.INDICES:
            case plsqlParser.INFINITE:
            case plsqlParser.INLINE:
            case plsqlParser.INNER:
            case plsqlParser.INOUT:
            case plsqlParser.INSTANTIABLE:
            case plsqlParser.INSTEAD:
            case plsqlParser.INT:
            case plsqlParser.INTEGER:
            case plsqlParser.INTERVAL:
            case plsqlParser.INVALIDATE:
            case plsqlParser.ISOLATION:
            case plsqlParser.ITERATE:
            case plsqlParser.JAVA:
            case plsqlParser.JOIN:
            case plsqlParser.KEEP:
            case plsqlParser.LANGUAGE:
            case plsqlParser.LAST:
            case plsqlParser.LAST_VALUE:
            case plsqlParser.LEADING:
            case plsqlParser.LEFT:
            case plsqlParser.LEVEL:
            case plsqlParser.LIBRARY:
            case plsqlParser.LIKE2:
            case plsqlParser.LIKE4:
            case plsqlParser.LIKEC:
            case plsqlParser.LIMIT:
            case plsqlParser.LOCAL:
            case plsqlParser.LOCKED:
            case plsqlParser.LOG:
            case plsqlParser.LOGOFF:
            case plsqlParser.LOGON:
            case plsqlParser.LONG:
            case plsqlParser.LOOP:
            case plsqlParser.MAIN:
            case plsqlParser.MAP:
            case plsqlParser.MATCHED:
            case plsqlParser.MAXVALUE:
            case plsqlParser.MEASURES:
            case plsqlParser.MEMBER:
            case plsqlParser.MERGE:
            case plsqlParser.MINUTE:
            case plsqlParser.MINVALUE:
            case plsqlParser.MLSLABEL:
            case plsqlParser.MODEL:
            case plsqlParser.MODIFY:
            case plsqlParser.MONTH:
            case plsqlParser.MULTISET:
            case plsqlParser.NAME:
            case plsqlParser.NAN:
            case plsqlParser.NATURAL:
            case plsqlParser.NATURALN:
            case plsqlParser.NAV:
            case plsqlParser.NCHAR:
            case plsqlParser.NCHAR_CS:
            case plsqlParser.NCLOB:
            case plsqlParser.NESTED:
            case plsqlParser.NEW:
            case plsqlParser.NO:
            case plsqlParser.NOAUDIT:
            case plsqlParser.NOCOPY:
            case plsqlParser.NOCYCLE:
            case plsqlParser.NOENTITYESCAPING:
            case plsqlParser.NONE:
            case plsqlParser.NOSCHEMACHECK:
            case plsqlParser.NULLS:
            case plsqlParser.NUMBER:
            case plsqlParser.NUMERIC:
            case plsqlParser.NVARCHAR2:
            case plsqlParser.OBJECT:
            case plsqlParser.OFF:
            case plsqlParser.OID:
            case plsqlParser.OLD:
            case plsqlParser.ONLY:
            case plsqlParser.OPEN:
            case plsqlParser.ORADATA:
            case plsqlParser.ORDINALITY:
            case plsqlParser.OSERROR:
            case plsqlParser.OUT:
            case plsqlParser.OUTER:
            case plsqlParser.OVER:
            case plsqlParser.OVERRIDING:
            case plsqlParser.PACKAGE:
            case plsqlParser.PARALLEL_ENABLE:
            case plsqlParser.PARAMETERS:
            case plsqlParser.PARENT:
            case plsqlParser.PARTITION:
            case plsqlParser.PASSING:
            case plsqlParser.PATH:
            case plsqlParser.PIPELINED:
            case plsqlParser.PLAN:
            case plsqlParser.PLS_INTEGER:
            case plsqlParser.POSITIVE:
            case plsqlParser.POSITIVEN:
            case plsqlParser.PRAGMA:
            case plsqlParser.PRECEDING:
            case plsqlParser.PRECISION:
            case plsqlParser.PRESENT:
            case plsqlParser.RAISE:
            case plsqlParser.RANGE:
            case plsqlParser.RAW:
            case plsqlParser.READ:
            case plsqlParser.REAL:
            case plsqlParser.RECORD:
            case plsqlParser.REF:
            case plsqlParser.REFERENCE:
            case plsqlParser.REFERENCING:
            case plsqlParser.REJECT:
            case plsqlParser.RELIES_ON:
            case plsqlParser.RENAME:
            case plsqlParser.REPLACE:
            case plsqlParser.RESPECT:
            case plsqlParser.RESTRICT_REFERENCES:
            case plsqlParser.RESULT:
            case plsqlParser.RESULT_CACHE:
            case plsqlParser.RETURN:
            case plsqlParser.RETURNING:
            case plsqlParser.REUSE:
            case plsqlParser.REVERSE:
            case plsqlParser.RIGHT:
            case plsqlParser.ROLLBACK:
            case plsqlParser.ROLLUP:
            case plsqlParser.ROW:
            case plsqlParser.ROWID:
            case plsqlParser.ROWS:
            case plsqlParser.RULES:
            case plsqlParser.SAMPLE:
            case plsqlParser.SAVE:
            case plsqlParser.SAVEPOINT:
            case plsqlParser.SCHEMA:
            case plsqlParser.SCHEMACHECK:
            case plsqlParser.SCN:
            case plsqlParser.SECOND:
            case plsqlParser.SEED:
            case plsqlParser.SEGMENT:
            case plsqlParser.SELF:
            case plsqlParser.SEQUENTIAL:
            case plsqlParser.SERIALIZABLE:
            case plsqlParser.SERIALLY_REUSABLE:
            case plsqlParser.SERVERERROR:
            case plsqlParser.SESSIONTIMEZONE:
            case plsqlParser.SET:
            case plsqlParser.SETS:
            case plsqlParser.SETTINGS:
            case plsqlParser.SHOW:
            case plsqlParser.SHUTDOWN:
            case plsqlParser.SIBLINGS:
            case plsqlParser.SIGNTYPE:
            case plsqlParser.SIMPLE_INTEGER:
            case plsqlParser.SINGLE:
            case plsqlParser.SKIP_:
            case plsqlParser.SMALLINT:
            case plsqlParser.SNAPSHOT:
            case plsqlParser.SOME:
            case plsqlParser.SPECIFICATION:
            case plsqlParser.SQLDATA:
            case plsqlParser.SQLERROR:
            case plsqlParser.STANDALONE:
            case plsqlParser.STARTUP:
            case plsqlParser.STATEMENT:
            case plsqlParser.STATEMENT_ID:
            case plsqlParser.STATIC:
            case plsqlParser.STATISTICS:
            case plsqlParser.STRING:
            case plsqlParser.SUBMULTISET:
            case plsqlParser.SUBPARTITION:
            case plsqlParser.SUBSTITUTABLE:
            case plsqlParser.SUBTYPE:
            case plsqlParser.SUCCESS:
            case plsqlParser.SUSPEND:
            case plsqlParser.TIME:
            case plsqlParser.TIMESTAMP:
            case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_UNCONSTRAINED:
            case plsqlParser.TIMEZONE_ABBR:
            case plsqlParser.TIMEZONE_HOUR:
            case plsqlParser.TIMEZONE_MINUTE:
            case plsqlParser.TIMEZONE_REGION:
            case plsqlParser.TRAILING:
            case plsqlParser.TRANSACTION:
            case plsqlParser.TRANSLATE:
            case plsqlParser.TREAT:
            case plsqlParser.TRIGGER:
            case plsqlParser.TRIM:
            case plsqlParser.TRUNCATE:
            case plsqlParser.TYPE:
            case plsqlParser.UNBOUNDED:
            case plsqlParser.UNDER:
            case plsqlParser.UNLIMITED:
            case plsqlParser.UNTIL:
            case plsqlParser.UPDATED:
            case plsqlParser.UPSERT:
            case plsqlParser.UROWID:
            case plsqlParser.USE:
            case plsqlParser.VALIDATE:
            case plsqlParser.VALUE:
            case plsqlParser.VARCHAR:
            case plsqlParser.VARCHAR2:
            case plsqlParser.VARIABLE:
            case plsqlParser.VARRAY:
            case plsqlParser.VARYING:
            case plsqlParser.VERSION:
            case plsqlParser.VERSIONS:
            case plsqlParser.WAIT:
            case plsqlParser.WARNING:
            case plsqlParser.WELLFORMED:
            case plsqlParser.WHENEVER:
            case plsqlParser.WHILE:
            case plsqlParser.WITHIN:
            case plsqlParser.WORK:
            case plsqlParser.WRITE:
            case plsqlParser.XML:
            case plsqlParser.XMLAGG:
            case plsqlParser.XMLATTRIBUTES:
            case plsqlParser.XMLCAST:
            case plsqlParser.XMLCOLATTVAL:
            case plsqlParser.XMLELEMENT:
            case plsqlParser.XMLEXISTS:
            case plsqlParser.XMLFOREST:
            case plsqlParser.XMLNAMESPACES:
            case plsqlParser.XMLPARSE:
            case plsqlParser.XMLPI:
            case plsqlParser.XMLQUERY:
            case plsqlParser.XMLROOT:
            case plsqlParser.XMLSERIALIZE:
            case plsqlParser.XMLTABLE:
            case plsqlParser.YEAR:
            case plsqlParser.YES:
            case plsqlParser.YMINTERVAL_UNCONSTRAINED:
            case plsqlParser.ZONE:
            case plsqlParser.PREDICTION:
            case plsqlParser.PREDICTION_BOUNDS:
            case plsqlParser.PREDICTION_COST:
            case plsqlParser.PREDICTION_DETAILS:
            case plsqlParser.PREDICTION_PROBABILITY:
            case plsqlParser.PREDICTION_SET:
            case plsqlParser.CUME_DIST:
            case plsqlParser.DENSE_RANK:
            case plsqlParser.LISTAGG:
            case plsqlParser.PERCENT_RANK:
            case plsqlParser.PERCENTILE_CONT:
            case plsqlParser.PERCENTILE_DISC:
            case plsqlParser.RANK:
            case plsqlParser.AVG:
            case plsqlParser.CORR:
            case plsqlParser.LAG:
            case plsqlParser.LEAD:
            case plsqlParser.MAX:
            case plsqlParser.MEDIAN:
            case plsqlParser.MIN:
            case plsqlParser.NTILE:
            case plsqlParser.RATIO_TO_REPORT:
            case plsqlParser.ROW_NUMBER:
            case plsqlParser.SUM:
            case plsqlParser.VARIANCE:
            case plsqlParser.REGR_:
            case plsqlParser.STDDEV:
            case plsqlParser.VAR_:
            case plsqlParser.COVAR_:
            case plsqlParser.DELIMITED_ID:
            case plsqlParser.REGULAR_ID:
                this.state = 2059;
                this.r_id();
                break;
            case plsqlParser.DEFAULT:
                this.state = 2060;
                this.match(plsqlParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2065; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2063;
                this.match(plsqlParser.COMMA);
                this.state = 2064;
                this.r_id();
                this.state = 2067; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===plsqlParser.COMMA);
            this.state = 2069;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2073;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_record_declaration;
    return this;
}

Record_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_declarationContext.prototype.constructor = Record_declarationContext;

Record_declarationContext.prototype.record_type_dec = function() {
    return this.getTypedRuleContext(Record_type_decContext,0);
};

Record_declarationContext.prototype.record_var_dec = function() {
    return this.getTypedRuleContext(Record_var_decContext,0);
};

Record_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRecord_declaration(this);
	}
};

Record_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRecord_declaration(this);
	}
};




plsqlParser.Record_declarationContext = Record_declarationContext;

plsqlParser.prototype.record_declaration = function() {

    var localctx = new Record_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, plsqlParser.RULE_record_declaration);
    try {
        this.state = 2077;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2075;
            this.record_type_dec();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2076;
            this.record_var_dec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_type_decContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_record_type_dec;
    return this;
}

Record_type_decContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_type_decContext.prototype.constructor = Record_type_decContext;

Record_type_decContext.prototype.TYPE = function() {
    return this.getToken(plsqlParser.TYPE, 0);
};

Record_type_decContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Record_type_decContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Record_type_decContext.prototype.RECORD = function() {
    return this.getToken(plsqlParser.RECORD, 0);
};

Record_type_decContext.prototype.field_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Field_specContext);
    } else {
        return this.getTypedRuleContext(Field_specContext,i);
    }
};

Record_type_decContext.prototype.REF = function() {
    return this.getToken(plsqlParser.REF, 0);
};

Record_type_decContext.prototype.CURSOR = function() {
    return this.getToken(plsqlParser.CURSOR, 0);
};

Record_type_decContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Record_type_decContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Record_type_decContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRecord_type_dec(this);
	}
};

Record_type_decContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRecord_type_dec(this);
	}
};




plsqlParser.Record_type_decContext = Record_type_decContext;

plsqlParser.prototype.record_type_dec = function() {

    var localctx = new Record_type_decContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, plsqlParser.RULE_record_type_dec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2079;
        this.match(plsqlParser.TYPE);
        this.state = 2080;
        this.type_name();
        this.state = 2081;
        this.match(plsqlParser.IS);
        this.state = 2100;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.RECORD:
            this.state = 2082;
            this.match(plsqlParser.RECORD);
            this.state = 2083;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2084;
            this.field_spec();
            this.state = 2089;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2085;
                this.match(plsqlParser.COMMA);
                this.state = 2086;
                this.field_spec();
                this.state = 2091;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2092;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        case plsqlParser.REF:
            this.state = 2094;
            this.match(plsqlParser.REF);
            this.state = 2095;
            this.match(plsqlParser.CURSOR);
            this.state = 2098;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.RETURN) {
                this.state = 2096;
                this.match(plsqlParser.RETURN);
                this.state = 2097;
                this.type_spec();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2102;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_field_spec;
    return this;
}

Field_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_specContext.prototype.constructor = Field_specContext;

Field_specContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Field_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Field_specContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Field_specContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

Field_specContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Field_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterField_spec(this);
	}
};

Field_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitField_spec(this);
	}
};




plsqlParser.Field_specContext = Field_specContext;

plsqlParser.prototype.field_spec = function() {

    var localctx = new Field_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, plsqlParser.RULE_field_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2104;
        this.column_name();
        this.state = 2106;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DATE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 2105;
            this.type_spec();
        }

        this.state = 2110;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NOT) {
            this.state = 2108;
            this.match(plsqlParser.NOT);
            this.state = 2109;
            this.match(plsqlParser.NULL);
        }

        this.state = 2113;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.DEFAULT || _la===plsqlParser.ASSIGN_OP) {
            this.state = 2112;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_var_decContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_record_var_dec;
    return this;
}

Record_var_decContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_var_decContext.prototype.constructor = Record_var_decContext;

Record_var_decContext.prototype.record_name = function() {
    return this.getTypedRuleContext(Record_nameContext,0);
};

Record_var_decContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Record_var_decContext.prototype.PERCENT_ROWTYPE = function() {
    return this.getToken(plsqlParser.PERCENT_ROWTYPE, 0);
};

Record_var_decContext.prototype.PERCENT_TYPE = function() {
    return this.getToken(plsqlParser.PERCENT_TYPE, 0);
};

Record_var_decContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRecord_var_dec(this);
	}
};

Record_var_decContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRecord_var_dec(this);
	}
};




plsqlParser.Record_var_decContext = Record_var_decContext;

plsqlParser.prototype.record_var_dec = function() {

    var localctx = new Record_var_decContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, plsqlParser.RULE_record_var_dec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2115;
        this.record_name();
        this.state = 2116;
        this.type_name();
        this.state = 2117;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.PERCENT_ROWTYPE || _la===plsqlParser.PERCENT_TYPE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2118;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_declaration;
    return this;
}

Table_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_declarationContext.prototype.constructor = Table_declarationContext;

Table_declarationContext.prototype.table_type_dec = function() {
    return this.getTypedRuleContext(Table_type_decContext,0);
};

Table_declarationContext.prototype.table_var_dec = function() {
    return this.getTypedRuleContext(Table_var_decContext,0);
};

Table_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_declaration(this);
	}
};

Table_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_declaration(this);
	}
};




plsqlParser.Table_declarationContext = Table_declarationContext;

plsqlParser.prototype.table_declaration = function() {

    var localctx = new Table_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, plsqlParser.RULE_table_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2122;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2120;
            this.table_type_dec();
            break;

        case 2:
            this.state = 2121;
            this.table_var_dec();
            break;

        }
        this.state = 2124;
        this.match(plsqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_type_decContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_type_dec;
    return this;
}

Table_type_decContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_type_decContext.prototype.constructor = Table_type_decContext;

Table_type_decContext.prototype.TYPE = function() {
    return this.getToken(plsqlParser.TYPE, 0);
};

Table_type_decContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Table_type_decContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

Table_type_decContext.prototype.TABLE = function() {
    return this.getToken(plsqlParser.TABLE, 0);
};

Table_type_decContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Table_type_decContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Table_type_decContext.prototype.varray_type_def = function() {
    return this.getTypedRuleContext(Varray_type_defContext,0);
};

Table_type_decContext.prototype.table_indexed_by_part = function() {
    return this.getTypedRuleContext(Table_indexed_by_partContext,0);
};

Table_type_decContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Table_type_decContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

Table_type_decContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_type_dec(this);
	}
};

Table_type_decContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_type_dec(this);
	}
};




plsqlParser.Table_type_decContext = Table_type_decContext;

plsqlParser.prototype.table_type_dec = function() {

    var localctx = new Table_type_decContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, plsqlParser.RULE_table_type_dec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2126;
        this.match(plsqlParser.TYPE);
        this.state = 2127;
        this.type_name();
        this.state = 2128;
        this.match(plsqlParser.IS);
        this.state = 2140;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.TABLE:
            this.state = 2129;
            this.match(plsqlParser.TABLE);
            this.state = 2130;
            this.match(plsqlParser.OF);
            this.state = 2131;
            this.type_spec();
            this.state = 2133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.INDEX || _la===plsqlParser.INDEXED) {
                this.state = 2132;
                this.table_indexed_by_part();
            }

            this.state = 2137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.NOT) {
                this.state = 2135;
                this.match(plsqlParser.NOT);
                this.state = 2136;
                this.match(plsqlParser.NULL);
            }

            break;
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
            this.state = 2139;
            this.varray_type_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_indexed_by_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_indexed_by_part;
    this.idx1 = null; // Token
    this.idx2 = null; // Token
    return this;
}

Table_indexed_by_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_indexed_by_partContext.prototype.constructor = Table_indexed_by_partContext;

Table_indexed_by_partContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Table_indexed_by_partContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Table_indexed_by_partContext.prototype.INDEXED = function() {
    return this.getToken(plsqlParser.INDEXED, 0);
};

Table_indexed_by_partContext.prototype.INDEX = function() {
    return this.getToken(plsqlParser.INDEX, 0);
};

Table_indexed_by_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_indexed_by_part(this);
	}
};

Table_indexed_by_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_indexed_by_part(this);
	}
};




plsqlParser.Table_indexed_by_partContext = Table_indexed_by_partContext;

plsqlParser.prototype.table_indexed_by_part = function() {

    var localctx = new Table_indexed_by_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, plsqlParser.RULE_table_indexed_by_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2144;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.INDEXED:
            this.state = 2142;
            localctx.idx1 = this.match(plsqlParser.INDEXED);
            break;
        case plsqlParser.INDEX:
            this.state = 2143;
            localctx.idx2 = this.match(plsqlParser.INDEX);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2146;
        this.match(plsqlParser.BY);
        this.state = 2147;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Varray_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_varray_type_def;
    return this;
}

Varray_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Varray_type_defContext.prototype.constructor = Varray_type_defContext;

Varray_type_defContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Varray_type_defContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Varray_type_defContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Varray_type_defContext.prototype.VARRAY = function() {
    return this.getToken(plsqlParser.VARRAY, 0);
};

Varray_type_defContext.prototype.VARYING = function() {
    return this.getToken(plsqlParser.VARYING, 0);
};

Varray_type_defContext.prototype.ARRAY = function() {
    return this.getToken(plsqlParser.ARRAY, 0);
};

Varray_type_defContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Varray_type_defContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

Varray_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterVarray_type_def(this);
	}
};

Varray_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitVarray_type_def(this);
	}
};




plsqlParser.Varray_type_defContext = Varray_type_defContext;

plsqlParser.prototype.varray_type_def = function() {

    var localctx = new Varray_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, plsqlParser.RULE_varray_type_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2152;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.VARRAY:
            this.state = 2149;
            this.match(plsqlParser.VARRAY);
            break;
        case plsqlParser.VARYING:
            this.state = 2150;
            this.match(plsqlParser.VARYING);
            this.state = 2151;
            this.match(plsqlParser.ARRAY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2154;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 2155;
        this.expression(0);
        this.state = 2156;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 2157;
        this.match(plsqlParser.OF);
        this.state = 2158;
        this.type_spec();
        this.state = 2161;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
        if(la_===1) {
            this.state = 2159;
            this.match(plsqlParser.NOT);
            this.state = 2160;
            this.match(plsqlParser.NULL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_var_decContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_var_dec;
    return this;
}

Table_var_decContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_var_decContext.prototype.constructor = Table_var_decContext;

Table_var_decContext.prototype.table_var_name = function() {
    return this.getTypedRuleContext(Table_var_nameContext,0);
};

Table_var_decContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Table_var_decContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_var_dec(this);
	}
};

Table_var_decContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_var_dec(this);
	}
};




plsqlParser.Table_var_decContext = Table_var_decContext;

plsqlParser.prototype.table_var_dec = function() {

    var localctx = new Table_var_decContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, plsqlParser.RULE_table_var_dec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2163;
        this.table_var_name();
        this.state = 2164;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Seq_of_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_seq_of_statements;
    return this;
}

Seq_of_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seq_of_statementsContext.prototype.constructor = Seq_of_statementsContext;

Seq_of_statementsContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Seq_of_statementsContext.prototype.label_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_declarationContext);
    } else {
        return this.getTypedRuleContext(Label_declarationContext,i);
    }
};

Seq_of_statementsContext.prototype.EOF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.EOF);
    } else {
        return this.getToken(plsqlParser.EOF, i);
    }
};


Seq_of_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSeq_of_statements(this);
	}
};

Seq_of_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSeq_of_statements(this);
	}
};




plsqlParser.Seq_of_statementsContext = Seq_of_statementsContext;

plsqlParser.prototype.seq_of_statements = function() {

    var localctx = new Seq_of_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, plsqlParser.RULE_seq_of_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2170; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2170;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case plsqlParser.A_LETTER:
        		case plsqlParser.ADD:
        		case plsqlParser.AFTER:
        		case plsqlParser.AGENT:
        		case plsqlParser.AGGREGATE:
        		case plsqlParser.ALTER:
        		case plsqlParser.ANALYZE:
        		case plsqlParser.ARRAY:
        		case plsqlParser.ASSOCIATE:
        		case plsqlParser.AT:
        		case plsqlParser.ATTRIBUTE:
        		case plsqlParser.AUDIT:
        		case plsqlParser.AUTHID:
        		case plsqlParser.AUTO:
        		case plsqlParser.AUTOMATIC:
        		case plsqlParser.AUTONOMOUS_TRANSACTION:
        		case plsqlParser.BATCH:
        		case plsqlParser.BEFORE:
        		case plsqlParser.BEGIN:
        		case plsqlParser.BFILE:
        		case plsqlParser.BINARY_DOUBLE:
        		case plsqlParser.BINARY_FLOAT:
        		case plsqlParser.BINARY_INTEGER:
        		case plsqlParser.BLOB:
        		case plsqlParser.BLOCK:
        		case plsqlParser.BODY:
        		case plsqlParser.BOOLEAN:
        		case plsqlParser.BOTH:
        		case plsqlParser.BULK:
        		case plsqlParser.BYTE:
        		case plsqlParser.C_LETTER:
        		case plsqlParser.CALL:
        		case plsqlParser.CANONICAL:
        		case plsqlParser.CASCADE:
        		case plsqlParser.CASE:
        		case plsqlParser.CAST:
        		case plsqlParser.CHAR:
        		case plsqlParser.CHAR_CS:
        		case plsqlParser.CHARACTER:
        		case plsqlParser.CHR:
        		case plsqlParser.CLOB:
        		case plsqlParser.CLOSE:
        		case plsqlParser.CLUSTER:
        		case plsqlParser.COLLECT:
        		case plsqlParser.COLUMNS:
        		case plsqlParser.COMMENT:
        		case plsqlParser.COMMIT:
        		case plsqlParser.COMMITTED:
        		case plsqlParser.COMPATIBILITY:
        		case plsqlParser.COMPILE:
        		case plsqlParser.COMPOUND:
        		case plsqlParser.CONSTANT:
        		case plsqlParser.CONSTRAINT:
        		case plsqlParser.CONSTRAINTS:
        		case plsqlParser.CONSTRUCTOR:
        		case plsqlParser.CONTENT:
        		case plsqlParser.CONTEXT:
        		case plsqlParser.CONTINUE:
        		case plsqlParser.CONVERT:
        		case plsqlParser.CORRUPT_XID:
        		case plsqlParser.CORRUPT_XID_ALL:
        		case plsqlParser.COST:
        		case plsqlParser.COUNT:
        		case plsqlParser.CREATE:
        		case plsqlParser.CROSS:
        		case plsqlParser.CUBE:
        		case plsqlParser.CURRENT_USER:
        		case plsqlParser.CURSOR:
        		case plsqlParser.CUSTOMDATUM:
        		case plsqlParser.CYCLE:
        		case plsqlParser.DATA:
        		case plsqlParser.DATABASE:
        		case plsqlParser.DAY:
        		case plsqlParser.DB_ROLE_CHANGE:
        		case plsqlParser.DBTIMEZONE:
        		case plsqlParser.DDL:
        		case plsqlParser.DEBUG:
        		case plsqlParser.DEC:
        		case plsqlParser.DECIMAL:
        		case plsqlParser.DECLARE:
        		case plsqlParser.DECOMPOSE:
        		case plsqlParser.DECREMENT:
        		case plsqlParser.DEFAULTS:
        		case plsqlParser.DEFERRED:
        		case plsqlParser.DEFINER:
        		case plsqlParser.DELETE:
        		case plsqlParser.DETERMINISTIC:
        		case plsqlParser.DIMENSION:
        		case plsqlParser.DISABLE:
        		case plsqlParser.DISASSOCIATE:
        		case plsqlParser.DOCUMENT:
        		case plsqlParser.DOUBLE:
        		case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        		case plsqlParser.EACH:
        		case plsqlParser.ELEMENT:
        		case plsqlParser.EMPTY:
        		case plsqlParser.ENABLE:
        		case plsqlParser.ENCODING:
        		case plsqlParser.ENTITYESCAPING:
        		case plsqlParser.ERR:
        		case plsqlParser.ERRORS:
        		case plsqlParser.ESCAPE:
        		case plsqlParser.EVALNAME:
        		case plsqlParser.EXCEPTION:
        		case plsqlParser.EXCEPTION_INIT:
        		case plsqlParser.EXCEPTIONS:
        		case plsqlParser.EXCLUDE:
        		case plsqlParser.EXECUTE:
        		case plsqlParser.EXIT:
        		case plsqlParser.EXPLAIN:
        		case plsqlParser.EXTERNAL:
        		case plsqlParser.EXTRACT:
        		case plsqlParser.FAILURE:
        		case plsqlParser.FETCH:
        		case plsqlParser.FINAL:
        		case plsqlParser.FIRST:
        		case plsqlParser.FIRST_VALUE:
        		case plsqlParser.FLOAT:
        		case plsqlParser.FOLLOWING:
        		case plsqlParser.FOLLOWS:
        		case plsqlParser.FOR:
        		case plsqlParser.FORALL:
        		case plsqlParser.FORCE:
        		case plsqlParser.FULL:
        		case plsqlParser.FUNCTION:
        		case plsqlParser.GOTO:
        		case plsqlParser.GRANT:
        		case plsqlParser.GROUPING:
        		case plsqlParser.HASH:
        		case plsqlParser.HIDE:
        		case plsqlParser.HOUR:
        		case plsqlParser.IF:
        		case plsqlParser.IGNORE:
        		case plsqlParser.IMMEDIATE:
        		case plsqlParser.INCLUDE:
        		case plsqlParser.INCLUDING:
        		case plsqlParser.INCREMENT:
        		case plsqlParser.INDENT:
        		case plsqlParser.INDEXED:
        		case plsqlParser.INDICATOR:
        		case plsqlParser.INDICES:
        		case plsqlParser.INFINITE:
        		case plsqlParser.INLINE:
        		case plsqlParser.INNER:
        		case plsqlParser.INOUT:
        		case plsqlParser.INSERT:
        		case plsqlParser.INSTANTIABLE:
        		case plsqlParser.INSTEAD:
        		case plsqlParser.INT:
        		case plsqlParser.INTEGER:
        		case plsqlParser.INTERVAL:
        		case plsqlParser.INVALIDATE:
        		case plsqlParser.ISOLATION:
        		case plsqlParser.ITERATE:
        		case plsqlParser.JAVA:
        		case plsqlParser.JOIN:
        		case plsqlParser.KEEP:
        		case plsqlParser.LANGUAGE:
        		case plsqlParser.LAST:
        		case plsqlParser.LAST_VALUE:
        		case plsqlParser.LEADING:
        		case plsqlParser.LEFT:
        		case plsqlParser.LEVEL:
        		case plsqlParser.LIBRARY:
        		case plsqlParser.LIKE2:
        		case plsqlParser.LIKE4:
        		case plsqlParser.LIKEC:
        		case plsqlParser.LIMIT:
        		case plsqlParser.LOCAL:
        		case plsqlParser.LOCK:
        		case plsqlParser.LOCKED:
        		case plsqlParser.LOG:
        		case plsqlParser.LOGOFF:
        		case plsqlParser.LOGON:
        		case plsqlParser.LONG:
        		case plsqlParser.LOOP:
        		case plsqlParser.MAIN:
        		case plsqlParser.MAP:
        		case plsqlParser.MATCHED:
        		case plsqlParser.MAXVALUE:
        		case plsqlParser.MEASURES:
        		case plsqlParser.MEMBER:
        		case plsqlParser.MERGE:
        		case plsqlParser.MINUTE:
        		case plsqlParser.MINVALUE:
        		case plsqlParser.MLSLABEL:
        		case plsqlParser.MODEL:
        		case plsqlParser.MODIFY:
        		case plsqlParser.MONTH:
        		case plsqlParser.MULTISET:
        		case plsqlParser.NAME:
        		case plsqlParser.NAN:
        		case plsqlParser.NATURAL:
        		case plsqlParser.NATURALN:
        		case plsqlParser.NAV:
        		case plsqlParser.NCHAR:
        		case plsqlParser.NCHAR_CS:
        		case plsqlParser.NCLOB:
        		case plsqlParser.NESTED:
        		case plsqlParser.NEW:
        		case plsqlParser.NO:
        		case plsqlParser.NOAUDIT:
        		case plsqlParser.NOCOPY:
        		case plsqlParser.NOCYCLE:
        		case plsqlParser.NOENTITYESCAPING:
        		case plsqlParser.NONE:
        		case plsqlParser.NOSCHEMACHECK:
        		case plsqlParser.NULL:
        		case plsqlParser.NULLS:
        		case plsqlParser.NUMBER:
        		case plsqlParser.NUMERIC:
        		case plsqlParser.NVARCHAR2:
        		case plsqlParser.OBJECT:
        		case plsqlParser.OFF:
        		case plsqlParser.OID:
        		case plsqlParser.OLD:
        		case plsqlParser.ONLY:
        		case plsqlParser.OPEN:
        		case plsqlParser.ORADATA:
        		case plsqlParser.ORDINALITY:
        		case plsqlParser.OSERROR:
        		case plsqlParser.OUT:
        		case plsqlParser.OUTER:
        		case plsqlParser.OVER:
        		case plsqlParser.OVERRIDING:
        		case plsqlParser.PACKAGE:
        		case plsqlParser.PARALLEL_ENABLE:
        		case plsqlParser.PARAMETERS:
        		case plsqlParser.PARENT:
        		case plsqlParser.PARTITION:
        		case plsqlParser.PASSING:
        		case plsqlParser.PATH:
        		case plsqlParser.PIPELINED:
        		case plsqlParser.PLAN:
        		case plsqlParser.PLS_INTEGER:
        		case plsqlParser.POSITIVE:
        		case plsqlParser.POSITIVEN:
        		case plsqlParser.PRAGMA:
        		case plsqlParser.PRECEDING:
        		case plsqlParser.PRECISION:
        		case plsqlParser.PRESENT:
        		case plsqlParser.PROCEDURE:
        		case plsqlParser.RAISE:
        		case plsqlParser.RANGE:
        		case plsqlParser.RAW:
        		case plsqlParser.READ:
        		case plsqlParser.REAL:
        		case plsqlParser.RECORD:
        		case plsqlParser.REF:
        		case plsqlParser.REFERENCE:
        		case plsqlParser.REFERENCING:
        		case plsqlParser.REJECT:
        		case plsqlParser.RELIES_ON:
        		case plsqlParser.RENAME:
        		case plsqlParser.REPLACE:
        		case plsqlParser.RESPECT:
        		case plsqlParser.RESTRICT_REFERENCES:
        		case plsqlParser.RESULT:
        		case plsqlParser.RESULT_CACHE:
        		case plsqlParser.RETURN:
        		case plsqlParser.RETURNING:
        		case plsqlParser.REUSE:
        		case plsqlParser.REVERSE:
        		case plsqlParser.RIGHT:
        		case plsqlParser.ROLLBACK:
        		case plsqlParser.ROLLUP:
        		case plsqlParser.ROW:
        		case plsqlParser.ROWID:
        		case plsqlParser.ROWS:
        		case plsqlParser.RULES:
        		case plsqlParser.SAMPLE:
        		case plsqlParser.SAVE:
        		case plsqlParser.SAVEPOINT:
        		case plsqlParser.SCHEMA:
        		case plsqlParser.SCHEMACHECK:
        		case plsqlParser.SCN:
        		case plsqlParser.SECOND:
        		case plsqlParser.SEED:
        		case plsqlParser.SEGMENT:
        		case plsqlParser.SELECT:
        		case plsqlParser.SELF:
        		case plsqlParser.SEQUENTIAL:
        		case plsqlParser.SERIALIZABLE:
        		case plsqlParser.SERIALLY_REUSABLE:
        		case plsqlParser.SERVERERROR:
        		case plsqlParser.SESSIONTIMEZONE:
        		case plsqlParser.SET:
        		case plsqlParser.SETS:
        		case plsqlParser.SETTINGS:
        		case plsqlParser.SHOW:
        		case plsqlParser.SHUTDOWN:
        		case plsqlParser.SIBLINGS:
        		case plsqlParser.SIGNTYPE:
        		case plsqlParser.SIMPLE_INTEGER:
        		case plsqlParser.SINGLE:
        		case plsqlParser.SKIP_:
        		case plsqlParser.SMALLINT:
        		case plsqlParser.SNAPSHOT:
        		case plsqlParser.SOME:
        		case plsqlParser.SPECIFICATION:
        		case plsqlParser.SQLDATA:
        		case plsqlParser.SQLERROR:
        		case plsqlParser.STANDALONE:
        		case plsqlParser.STARTUP:
        		case plsqlParser.STATEMENT:
        		case plsqlParser.STATEMENT_ID:
        		case plsqlParser.STATIC:
        		case plsqlParser.STATISTICS:
        		case plsqlParser.STRING:
        		case plsqlParser.SUBMULTISET:
        		case plsqlParser.SUBPARTITION:
        		case plsqlParser.SUBSTITUTABLE:
        		case plsqlParser.SUBTYPE:
        		case plsqlParser.SUCCESS:
        		case plsqlParser.SUSPEND:
        		case plsqlParser.TIME:
        		case plsqlParser.TIMESTAMP:
        		case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        		case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        		case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        		case plsqlParser.TIMEZONE_ABBR:
        		case plsqlParser.TIMEZONE_HOUR:
        		case plsqlParser.TIMEZONE_MINUTE:
        		case plsqlParser.TIMEZONE_REGION:
        		case plsqlParser.TRAILING:
        		case plsqlParser.TRANSACTION:
        		case plsqlParser.TRANSLATE:
        		case plsqlParser.TREAT:
        		case plsqlParser.TRIGGER:
        		case plsqlParser.TRIM:
        		case plsqlParser.TRUNCATE:
        		case plsqlParser.TYPE:
        		case plsqlParser.UNBOUNDED:
        		case plsqlParser.UNDER:
        		case plsqlParser.UNLIMITED:
        		case plsqlParser.UNTIL:
        		case plsqlParser.UPDATE:
        		case plsqlParser.UPDATED:
        		case plsqlParser.UPSERT:
        		case plsqlParser.UROWID:
        		case plsqlParser.USE:
        		case plsqlParser.VALIDATE:
        		case plsqlParser.VALUE:
        		case plsqlParser.VARCHAR:
        		case plsqlParser.VARCHAR2:
        		case plsqlParser.VARIABLE:
        		case plsqlParser.VARRAY:
        		case plsqlParser.VARYING:
        		case plsqlParser.VERSION:
        		case plsqlParser.VERSIONS:
        		case plsqlParser.WAIT:
        		case plsqlParser.WARNING:
        		case plsqlParser.WELLFORMED:
        		case plsqlParser.WHENEVER:
        		case plsqlParser.WHILE:
        		case plsqlParser.WITH:
        		case plsqlParser.WITHIN:
        		case plsqlParser.WORK:
        		case plsqlParser.WRITE:
        		case plsqlParser.XML:
        		case plsqlParser.XMLAGG:
        		case plsqlParser.XMLATTRIBUTES:
        		case plsqlParser.XMLCAST:
        		case plsqlParser.XMLCOLATTVAL:
        		case plsqlParser.XMLELEMENT:
        		case plsqlParser.XMLEXISTS:
        		case plsqlParser.XMLFOREST:
        		case plsqlParser.XMLNAMESPACES:
        		case plsqlParser.XMLPARSE:
        		case plsqlParser.XMLPI:
        		case plsqlParser.XMLQUERY:
        		case plsqlParser.XMLROOT:
        		case plsqlParser.XMLSERIALIZE:
        		case plsqlParser.XMLTABLE:
        		case plsqlParser.YEAR:
        		case plsqlParser.YES:
        		case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        		case plsqlParser.ZONE:
        		case plsqlParser.PREDICTION:
        		case plsqlParser.PREDICTION_BOUNDS:
        		case plsqlParser.PREDICTION_COST:
        		case plsqlParser.PREDICTION_DETAILS:
        		case plsqlParser.PREDICTION_PROBABILITY:
        		case plsqlParser.PREDICTION_SET:
        		case plsqlParser.CUME_DIST:
        		case plsqlParser.DENSE_RANK:
        		case plsqlParser.LISTAGG:
        		case plsqlParser.PERCENT_RANK:
        		case plsqlParser.PERCENTILE_CONT:
        		case plsqlParser.PERCENTILE_DISC:
        		case plsqlParser.RANK:
        		case plsqlParser.AVG:
        		case plsqlParser.CORR:
        		case plsqlParser.LAG:
        		case plsqlParser.LEAD:
        		case plsqlParser.MAX:
        		case plsqlParser.MEDIAN:
        		case plsqlParser.MIN:
        		case plsqlParser.NTILE:
        		case plsqlParser.RATIO_TO_REPORT:
        		case plsqlParser.ROW_NUMBER:
        		case plsqlParser.SUM:
        		case plsqlParser.VARIANCE:
        		case plsqlParser.REGR_:
        		case plsqlParser.STDDEV:
        		case plsqlParser.VAR_:
        		case plsqlParser.COVAR_:
        		case plsqlParser.DELIMITED_ID:
        		case plsqlParser.LEFT_PAREN:
        		case plsqlParser.BINDVAR:
        		case plsqlParser.COLON:
        		case plsqlParser.REGULAR_ID:
        		    this.state = 2166;
        		    this.statement();
        		    this.state = 2167;
        		    _la = this._input.LA(1);
        		    if(!(_la===plsqlParser.EOF || _la===plsqlParser.SEMICOLON)) {
        		    this._errHandler.recoverInline(this);
        		    }
        		    else {
        		    	this._errHandler.reportMatch(this);
        		        this.consume();
        		    }
        		    break;
        		case plsqlParser.LESS_THAN_OP:
        		    this.state = 2169;
        		    this.label_declaration();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2172; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,208, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Label_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_label_declaration;
    this.ltp1 = null; // Token
    return this;
}

Label_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_declarationContext.prototype.constructor = Label_declarationContext;

Label_declarationContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Label_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLabel_declaration(this);
	}
};

Label_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLabel_declaration(this);
	}
};




plsqlParser.Label_declarationContext = Label_declarationContext;

plsqlParser.prototype.label_declaration = function() {

    var localctx = new Label_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, plsqlParser.RULE_label_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2174;
        localctx.ltp1 = this.match(plsqlParser.LESS_THAN_OP);
        this.state = 2175;
        this.match(plsqlParser.LESS_THAN_OP);
        this.state = 2176;
        this.label_name();
        this.state = 2177;
        this.match(plsqlParser.GREATER_THAN_OP);
        this.state = 2178;
        this.match(plsqlParser.GREATER_THAN_OP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.CREATE = function() {
    return this.getToken(plsqlParser.CREATE, 0);
};

StatementContext.prototype.swallow_to_semi = function() {
    return this.getTypedRuleContext(Swallow_to_semiContext,0);
};

StatementContext.prototype.ALTER = function() {
    return this.getToken(plsqlParser.ALTER, 0);
};

StatementContext.prototype.GRANT = function() {
    return this.getToken(plsqlParser.GRANT, 0);
};

StatementContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

StatementContext.prototype.TRUNCATE = function() {
    return this.getToken(plsqlParser.TRUNCATE, 0);
};

StatementContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.assignment_statement = function() {
    return this.getTypedRuleContext(Assignment_statementContext,0);
};

StatementContext.prototype.continue_statement = function() {
    return this.getTypedRuleContext(Continue_statementContext,0);
};

StatementContext.prototype.exit_statement = function() {
    return this.getTypedRuleContext(Exit_statementContext,0);
};

StatementContext.prototype.goto_statement = function() {
    return this.getTypedRuleContext(Goto_statementContext,0);
};

StatementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

StatementContext.prototype.loop_statement = function() {
    return this.getTypedRuleContext(Loop_statementContext,0);
};

StatementContext.prototype.forall_statement = function() {
    return this.getTypedRuleContext(Forall_statementContext,0);
};

StatementContext.prototype.null_statement = function() {
    return this.getTypedRuleContext(Null_statementContext,0);
};

StatementContext.prototype.raise_statement = function() {
    return this.getTypedRuleContext(Raise_statementContext,0);
};

StatementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};

StatementContext.prototype.case_statement = function() {
    return this.getTypedRuleContext(Case_statementContext,0);
};

StatementContext.prototype.sql_statement = function() {
    return this.getTypedRuleContext(Sql_statementContext,0);
};

StatementContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitStatement(this);
	}
};




plsqlParser.StatementContext = StatementContext;

plsqlParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, plsqlParser.RULE_statement);
    try {
        this.state = 2206;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2180;
            this.match(plsqlParser.CREATE);
            this.state = 2181;
            this.swallow_to_semi();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2182;
            this.match(plsqlParser.ALTER);
            this.state = 2183;
            this.swallow_to_semi();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2184;
            this.match(plsqlParser.GRANT);
            this.state = 2186;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
            if(la_===1) {
                this.state = 2185;
                this.match(plsqlParser.ALL);

            }
            this.state = 2188;
            this.swallow_to_semi();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2189;
            this.match(plsqlParser.TRUNCATE);
            this.state = 2190;
            this.swallow_to_semi();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2191;
            this.body();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2192;
            this.block();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2193;
            this.assignment_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2194;
            this.continue_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2195;
            this.exit_statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2196;
            this.goto_statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2197;
            this.if_statement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2198;
            this.loop_statement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2199;
            this.forall_statement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2200;
            this.null_statement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2201;
            this.raise_statement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2202;
            this.return_statement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2203;
            this.case_statement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2204;
            this.sql_statement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2205;
            this.function_call();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_assignment_statement;
    return this;
}

Assignment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_statementContext.prototype.constructor = Assignment_statementContext;

Assignment_statementContext.prototype.ASSIGN_OP = function() {
    return this.getToken(plsqlParser.ASSIGN_OP, 0);
};

Assignment_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assignment_statementContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

Assignment_statementContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Assignment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAssignment_statement(this);
	}
};

Assignment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAssignment_statement(this);
	}
};




plsqlParser.Assignment_statementContext = Assignment_statementContext;

plsqlParser.prototype.assignment_statement = function() {

    var localctx = new Assignment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, plsqlParser.RULE_assignment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2210;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 2208;
            this.general_element();
            break;
        case plsqlParser.BINDVAR:
        case plsqlParser.COLON:
            this.state = 2209;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2212;
        this.match(plsqlParser.ASSIGN_OP);
        this.state = 2213;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Continue_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_continue_statement;
    return this;
}

Continue_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_statementContext.prototype.constructor = Continue_statementContext;

Continue_statementContext.prototype.CONTINUE = function() {
    return this.getToken(plsqlParser.CONTINUE, 0);
};

Continue_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Continue_statementContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Continue_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Continue_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterContinue_statement(this);
	}
};

Continue_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitContinue_statement(this);
	}
};




plsqlParser.Continue_statementContext = Continue_statementContext;

plsqlParser.prototype.continue_statement = function() {

    var localctx = new Continue_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, plsqlParser.RULE_continue_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2215;
        this.match(plsqlParser.CONTINUE);
        this.state = 2217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 2216;
            this.label_name();
        }

        this.state = 2221;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WHEN) {
            this.state = 2219;
            this.match(plsqlParser.WHEN);
            this.state = 2220;
            this.condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_exit_statement;
    return this;
}

Exit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exit_statementContext.prototype.constructor = Exit_statementContext;

Exit_statementContext.prototype.EXIT = function() {
    return this.getToken(plsqlParser.EXIT, 0);
};

Exit_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Exit_statementContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Exit_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Exit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterExit_statement(this);
	}
};

Exit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitExit_statement(this);
	}
};




plsqlParser.Exit_statementContext = Exit_statementContext;

plsqlParser.prototype.exit_statement = function() {

    var localctx = new Exit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, plsqlParser.RULE_exit_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2223;
        this.match(plsqlParser.EXIT);
        this.state = 2225;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 2224;
            this.label_name();
        }

        this.state = 2229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WHEN) {
            this.state = 2227;
            this.match(plsqlParser.WHEN);
            this.state = 2228;
            this.condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Goto_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_goto_statement;
    return this;
}

Goto_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Goto_statementContext.prototype.constructor = Goto_statementContext;

Goto_statementContext.prototype.GOTO = function() {
    return this.getToken(plsqlParser.GOTO, 0);
};

Goto_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Goto_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterGoto_statement(this);
	}
};

Goto_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitGoto_statement(this);
	}
};




plsqlParser.Goto_statementContext = Goto_statementContext;

plsqlParser.prototype.goto_statement = function() {

    var localctx = new Goto_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, plsqlParser.RULE_goto_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2231;
        this.match(plsqlParser.GOTO);
        this.state = 2232;
        this.label_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_if_statement;
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.IF);
    } else {
        return this.getToken(plsqlParser.IF, i);
    }
};


If_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

If_statementContext.prototype.THEN = function() {
    return this.getToken(plsqlParser.THEN, 0);
};

If_statementContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

If_statementContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

If_statementContext.prototype.elsif_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Elsif_partContext);
    } else {
        return this.getTypedRuleContext(Elsif_partContext,i);
    }
};

If_statementContext.prototype.else_part = function() {
    return this.getTypedRuleContext(Else_partContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIf_statement(this);
	}
};




plsqlParser.If_statementContext = If_statementContext;

plsqlParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, plsqlParser.RULE_if_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2234;
        this.match(plsqlParser.IF);
        this.state = 2235;
        this.condition();
        this.state = 2236;
        this.match(plsqlParser.THEN);
        this.state = 2237;
        this.seq_of_statements();
        this.state = 2241;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.ELSIF) {
            this.state = 2238;
            this.elsif_part();
            this.state = 2243;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ELSE) {
            this.state = 2244;
            this.else_part();
        }

        this.state = 2247;
        this.match(plsqlParser.END);
        this.state = 2248;
        this.match(plsqlParser.IF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Elsif_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_elsif_part;
    return this;
}

Elsif_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Elsif_partContext.prototype.constructor = Elsif_partContext;

Elsif_partContext.prototype.ELSIF = function() {
    return this.getToken(plsqlParser.ELSIF, 0);
};

Elsif_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Elsif_partContext.prototype.THEN = function() {
    return this.getToken(plsqlParser.THEN, 0);
};

Elsif_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Elsif_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterElsif_part(this);
	}
};

Elsif_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitElsif_part(this);
	}
};




plsqlParser.Elsif_partContext = Elsif_partContext;

plsqlParser.prototype.elsif_part = function() {

    var localctx = new Elsif_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, plsqlParser.RULE_elsif_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2250;
        this.match(plsqlParser.ELSIF);
        this.state = 2251;
        this.condition();
        this.state = 2252;
        this.match(plsqlParser.THEN);
        this.state = 2253;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_else_part;
    return this;
}

Else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_partContext.prototype.constructor = Else_partContext;

Else_partContext.prototype.ELSE = function() {
    return this.getToken(plsqlParser.ELSE, 0);
};

Else_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterElse_part(this);
	}
};

Else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitElse_part(this);
	}
};




plsqlParser.Else_partContext = Else_partContext;

plsqlParser.prototype.else_part = function() {

    var localctx = new Else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, plsqlParser.RULE_else_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2255;
        this.match(plsqlParser.ELSE);
        this.state = 2256;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Loop_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_loop_statement;
    return this;
}

Loop_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_statementContext.prototype.constructor = Loop_statementContext;

Loop_statementContext.prototype.LOOP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.LOOP);
    } else {
        return this.getToken(plsqlParser.LOOP, i);
    }
};


Loop_statementContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Loop_statementContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

Loop_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Loop_statementContext.prototype.WHILE = function() {
    return this.getToken(plsqlParser.WHILE, 0);
};

Loop_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Loop_statementContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Loop_statementContext.prototype.cursor_loop_param = function() {
    return this.getTypedRuleContext(Cursor_loop_paramContext,0);
};

Loop_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLoop_statement(this);
	}
};

Loop_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLoop_statement(this);
	}
};




plsqlParser.Loop_statementContext = Loop_statementContext;

plsqlParser.prototype.loop_statement = function() {

    var localctx = new Loop_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, plsqlParser.RULE_loop_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2259;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
        if(la_===1) {
            this.state = 2258;
            this.label_name();

        }
        this.state = 2265;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case plsqlParser.WHILE:
        	this.state = 2261;
        	this.match(plsqlParser.WHILE);
        	this.state = 2262;
        	this.condition();
        	break;
        case plsqlParser.FOR:
        	this.state = 2263;
        	this.match(plsqlParser.FOR);
        	this.state = 2264;
        	this.cursor_loop_param();
        	break;
        case plsqlParser.LOOP:
        	break;
        default:
        	break;
        }
        this.state = 2267;
        this.match(plsqlParser.LOOP);
        this.state = 2268;
        this.seq_of_statements();
        this.state = 2269;
        this.match(plsqlParser.END);
        this.state = 2270;
        this.match(plsqlParser.LOOP);
        this.state = 2272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 2271;
            this.label_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_loop_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cursor_loop_param;
    return this;
}

Cursor_loop_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_loop_paramContext.prototype.constructor = Cursor_loop_paramContext;

Cursor_loop_paramContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Cursor_loop_paramContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Cursor_loop_paramContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Cursor_loop_paramContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Cursor_loop_paramContext.prototype.REVERSE = function() {
    return this.getToken(plsqlParser.REVERSE, 0);
};

Cursor_loop_paramContext.prototype.record_name = function() {
    return this.getTypedRuleContext(Record_nameContext,0);
};

Cursor_loop_paramContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Cursor_loop_paramContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Cursor_loop_paramContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Cursor_loop_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCursor_loop_param(this);
	}
};

Cursor_loop_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCursor_loop_param(this);
	}
};




plsqlParser.Cursor_loop_paramContext = Cursor_loop_paramContext;

plsqlParser.prototype.cursor_loop_param = function() {

    var localctx = new Cursor_loop_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, plsqlParser.RULE_cursor_loop_param);
    var _la = 0; // Token type
    try {
        this.state = 2295;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2274;
            this.index_name();
            this.state = 2275;
            this.match(plsqlParser.IN);
            this.state = 2277;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
            if(la_===1) {
                this.state = 2276;
                this.match(plsqlParser.REVERSE);

            }
            this.state = 2279;
            this.lower_bound();
            this.state = 2280;
            this.match(plsqlParser.T__0);
            this.state = 2281;
            this.upper_bound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2283;
            this.record_name();
            this.state = 2284;
            this.match(plsqlParser.IN);
            this.state = 2293;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.A_LETTER:
            case plsqlParser.ADD:
            case plsqlParser.AFTER:
            case plsqlParser.AGENT:
            case plsqlParser.AGGREGATE:
            case plsqlParser.ANALYZE:
            case plsqlParser.ARRAY:
            case plsqlParser.ASSOCIATE:
            case plsqlParser.AT:
            case plsqlParser.ATTRIBUTE:
            case plsqlParser.AUDIT:
            case plsqlParser.AUTHID:
            case plsqlParser.AUTO:
            case plsqlParser.AUTOMATIC:
            case plsqlParser.AUTONOMOUS_TRANSACTION:
            case plsqlParser.BATCH:
            case plsqlParser.BEFORE:
            case plsqlParser.BFILE:
            case plsqlParser.BINARY_DOUBLE:
            case plsqlParser.BINARY_FLOAT:
            case plsqlParser.BINARY_INTEGER:
            case plsqlParser.BLOB:
            case plsqlParser.BLOCK:
            case plsqlParser.BODY:
            case plsqlParser.BOOLEAN:
            case plsqlParser.BOTH:
            case plsqlParser.BULK:
            case plsqlParser.BYTE:
            case plsqlParser.C_LETTER:
            case plsqlParser.CALL:
            case plsqlParser.CANONICAL:
            case plsqlParser.CASCADE:
            case plsqlParser.CAST:
            case plsqlParser.CHAR:
            case plsqlParser.CHAR_CS:
            case plsqlParser.CHARACTER:
            case plsqlParser.CHR:
            case plsqlParser.CLOB:
            case plsqlParser.CLOSE:
            case plsqlParser.CLUSTER:
            case plsqlParser.COLLECT:
            case plsqlParser.COLUMNS:
            case plsqlParser.COMMENT:
            case plsqlParser.COMMIT:
            case plsqlParser.COMMITTED:
            case plsqlParser.COMPATIBILITY:
            case plsqlParser.COMPILE:
            case plsqlParser.COMPOUND:
            case plsqlParser.CONSTANT:
            case plsqlParser.CONSTRAINT:
            case plsqlParser.CONSTRAINTS:
            case plsqlParser.CONSTRUCTOR:
            case plsqlParser.CONTENT:
            case plsqlParser.CONTEXT:
            case plsqlParser.CONTINUE:
            case plsqlParser.CONVERT:
            case plsqlParser.CORRUPT_XID:
            case plsqlParser.CORRUPT_XID_ALL:
            case plsqlParser.COST:
            case plsqlParser.COUNT:
            case plsqlParser.CROSS:
            case plsqlParser.CUBE:
            case plsqlParser.CURRENT_USER:
            case plsqlParser.CURSOR:
            case plsqlParser.CUSTOMDATUM:
            case plsqlParser.CYCLE:
            case plsqlParser.DATA:
            case plsqlParser.DATABASE:
            case plsqlParser.DAY:
            case plsqlParser.DB_ROLE_CHANGE:
            case plsqlParser.DBTIMEZONE:
            case plsqlParser.DDL:
            case plsqlParser.DEBUG:
            case plsqlParser.DEC:
            case plsqlParser.DECIMAL:
            case plsqlParser.DECOMPOSE:
            case plsqlParser.DECREMENT:
            case plsqlParser.DEFAULTS:
            case plsqlParser.DEFERRED:
            case plsqlParser.DEFINER:
            case plsqlParser.DETERMINISTIC:
            case plsqlParser.DIMENSION:
            case plsqlParser.DISABLE:
            case plsqlParser.DISASSOCIATE:
            case plsqlParser.DOCUMENT:
            case plsqlParser.DOUBLE:
            case plsqlParser.DSINTERVAL_UNCONSTRAINED:
            case plsqlParser.EACH:
            case plsqlParser.ELEMENT:
            case plsqlParser.EMPTY:
            case plsqlParser.ENABLE:
            case plsqlParser.ENCODING:
            case plsqlParser.ENTITYESCAPING:
            case plsqlParser.ERR:
            case plsqlParser.ERRORS:
            case plsqlParser.ESCAPE:
            case plsqlParser.EVALNAME:
            case plsqlParser.EXCEPTION:
            case plsqlParser.EXCEPTION_INIT:
            case plsqlParser.EXCEPTIONS:
            case plsqlParser.EXCLUDE:
            case plsqlParser.EXECUTE:
            case plsqlParser.EXIT:
            case plsqlParser.EXPLAIN:
            case plsqlParser.EXTERNAL:
            case plsqlParser.EXTRACT:
            case plsqlParser.FAILURE:
            case plsqlParser.FINAL:
            case plsqlParser.FIRST:
            case plsqlParser.FIRST_VALUE:
            case plsqlParser.FLOAT:
            case plsqlParser.FOLLOWING:
            case plsqlParser.FOLLOWS:
            case plsqlParser.FORALL:
            case plsqlParser.FORCE:
            case plsqlParser.FULL:
            case plsqlParser.FUNCTION:
            case plsqlParser.GROUPING:
            case plsqlParser.HASH:
            case plsqlParser.HIDE:
            case plsqlParser.HOUR:
            case plsqlParser.IGNORE:
            case plsqlParser.IMMEDIATE:
            case plsqlParser.INCLUDE:
            case plsqlParser.INCLUDING:
            case plsqlParser.INCREMENT:
            case plsqlParser.INDENT:
            case plsqlParser.INDEXED:
            case plsqlParser.INDICATOR:
            case plsqlParser.INDICES:
            case plsqlParser.INFINITE:
            case plsqlParser.INLINE:
            case plsqlParser.INNER:
            case plsqlParser.INOUT:
            case plsqlParser.INSTANTIABLE:
            case plsqlParser.INSTEAD:
            case plsqlParser.INT:
            case plsqlParser.INTEGER:
            case plsqlParser.INTERVAL:
            case plsqlParser.INVALIDATE:
            case plsqlParser.ISOLATION:
            case plsqlParser.ITERATE:
            case plsqlParser.JAVA:
            case plsqlParser.JOIN:
            case plsqlParser.KEEP:
            case plsqlParser.LANGUAGE:
            case plsqlParser.LAST:
            case plsqlParser.LAST_VALUE:
            case plsqlParser.LEADING:
            case plsqlParser.LEFT:
            case plsqlParser.LEVEL:
            case plsqlParser.LIBRARY:
            case plsqlParser.LIKE2:
            case plsqlParser.LIKE4:
            case plsqlParser.LIKEC:
            case plsqlParser.LIMIT:
            case plsqlParser.LOCAL:
            case plsqlParser.LOCKED:
            case plsqlParser.LOG:
            case plsqlParser.LOGOFF:
            case plsqlParser.LOGON:
            case plsqlParser.LONG:
            case plsqlParser.LOOP:
            case plsqlParser.MAIN:
            case plsqlParser.MAP:
            case plsqlParser.MATCHED:
            case plsqlParser.MAXVALUE:
            case plsqlParser.MEASURES:
            case plsqlParser.MEMBER:
            case plsqlParser.MERGE:
            case plsqlParser.MINUTE:
            case plsqlParser.MINVALUE:
            case plsqlParser.MLSLABEL:
            case plsqlParser.MODEL:
            case plsqlParser.MODIFY:
            case plsqlParser.MONTH:
            case plsqlParser.MULTISET:
            case plsqlParser.NAME:
            case plsqlParser.NAN:
            case plsqlParser.NATURAL:
            case plsqlParser.NATURALN:
            case plsqlParser.NAV:
            case plsqlParser.NCHAR:
            case plsqlParser.NCHAR_CS:
            case plsqlParser.NCLOB:
            case plsqlParser.NESTED:
            case plsqlParser.NEW:
            case plsqlParser.NO:
            case plsqlParser.NOAUDIT:
            case plsqlParser.NOCOPY:
            case plsqlParser.NOCYCLE:
            case plsqlParser.NOENTITYESCAPING:
            case plsqlParser.NONE:
            case plsqlParser.NOSCHEMACHECK:
            case plsqlParser.NULLS:
            case plsqlParser.NUMBER:
            case plsqlParser.NUMERIC:
            case plsqlParser.NVARCHAR2:
            case plsqlParser.OBJECT:
            case plsqlParser.OFF:
            case plsqlParser.OID:
            case plsqlParser.OLD:
            case plsqlParser.ONLY:
            case plsqlParser.OPEN:
            case plsqlParser.ORADATA:
            case plsqlParser.ORDINALITY:
            case plsqlParser.OSERROR:
            case plsqlParser.OUT:
            case plsqlParser.OUTER:
            case plsqlParser.OVER:
            case plsqlParser.OVERRIDING:
            case plsqlParser.PACKAGE:
            case plsqlParser.PARALLEL_ENABLE:
            case plsqlParser.PARAMETERS:
            case plsqlParser.PARENT:
            case plsqlParser.PARTITION:
            case plsqlParser.PASSING:
            case plsqlParser.PATH:
            case plsqlParser.PIPELINED:
            case plsqlParser.PLAN:
            case plsqlParser.PLS_INTEGER:
            case plsqlParser.POSITIVE:
            case plsqlParser.POSITIVEN:
            case plsqlParser.PRAGMA:
            case plsqlParser.PRECEDING:
            case plsqlParser.PRECISION:
            case plsqlParser.PRESENT:
            case plsqlParser.RAISE:
            case plsqlParser.RANGE:
            case plsqlParser.RAW:
            case plsqlParser.READ:
            case plsqlParser.REAL:
            case plsqlParser.RECORD:
            case plsqlParser.REF:
            case plsqlParser.REFERENCE:
            case plsqlParser.REFERENCING:
            case plsqlParser.REJECT:
            case plsqlParser.RELIES_ON:
            case plsqlParser.RENAME:
            case plsqlParser.REPLACE:
            case plsqlParser.RESPECT:
            case plsqlParser.RESTRICT_REFERENCES:
            case plsqlParser.RESULT:
            case plsqlParser.RESULT_CACHE:
            case plsqlParser.RETURN:
            case plsqlParser.RETURNING:
            case plsqlParser.REUSE:
            case plsqlParser.REVERSE:
            case plsqlParser.RIGHT:
            case plsqlParser.ROLLBACK:
            case plsqlParser.ROLLUP:
            case plsqlParser.ROW:
            case plsqlParser.ROWID:
            case plsqlParser.ROWS:
            case plsqlParser.RULES:
            case plsqlParser.SAMPLE:
            case plsqlParser.SAVE:
            case plsqlParser.SAVEPOINT:
            case plsqlParser.SCHEMA:
            case plsqlParser.SCHEMACHECK:
            case plsqlParser.SCN:
            case plsqlParser.SECOND:
            case plsqlParser.SEED:
            case plsqlParser.SEGMENT:
            case plsqlParser.SELF:
            case plsqlParser.SEQUENTIAL:
            case plsqlParser.SERIALIZABLE:
            case plsqlParser.SERIALLY_REUSABLE:
            case plsqlParser.SERVERERROR:
            case plsqlParser.SESSIONTIMEZONE:
            case plsqlParser.SET:
            case plsqlParser.SETS:
            case plsqlParser.SETTINGS:
            case plsqlParser.SHOW:
            case plsqlParser.SHUTDOWN:
            case plsqlParser.SIBLINGS:
            case plsqlParser.SIGNTYPE:
            case plsqlParser.SIMPLE_INTEGER:
            case plsqlParser.SINGLE:
            case plsqlParser.SKIP_:
            case plsqlParser.SMALLINT:
            case plsqlParser.SNAPSHOT:
            case plsqlParser.SOME:
            case plsqlParser.SPECIFICATION:
            case plsqlParser.SQLDATA:
            case plsqlParser.SQLERROR:
            case plsqlParser.STANDALONE:
            case plsqlParser.STARTUP:
            case plsqlParser.STATEMENT:
            case plsqlParser.STATEMENT_ID:
            case plsqlParser.STATIC:
            case plsqlParser.STATISTICS:
            case plsqlParser.STRING:
            case plsqlParser.SUBMULTISET:
            case plsqlParser.SUBPARTITION:
            case plsqlParser.SUBSTITUTABLE:
            case plsqlParser.SUBTYPE:
            case plsqlParser.SUCCESS:
            case plsqlParser.SUSPEND:
            case plsqlParser.TIME:
            case plsqlParser.TIMESTAMP:
            case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_UNCONSTRAINED:
            case plsqlParser.TIMEZONE_ABBR:
            case plsqlParser.TIMEZONE_HOUR:
            case plsqlParser.TIMEZONE_MINUTE:
            case plsqlParser.TIMEZONE_REGION:
            case plsqlParser.TRAILING:
            case plsqlParser.TRANSACTION:
            case plsqlParser.TRANSLATE:
            case plsqlParser.TREAT:
            case plsqlParser.TRIGGER:
            case plsqlParser.TRIM:
            case plsqlParser.TRUNCATE:
            case plsqlParser.TYPE:
            case plsqlParser.UNBOUNDED:
            case plsqlParser.UNDER:
            case plsqlParser.UNLIMITED:
            case plsqlParser.UNTIL:
            case plsqlParser.UPDATED:
            case plsqlParser.UPSERT:
            case plsqlParser.UROWID:
            case plsqlParser.USE:
            case plsqlParser.VALIDATE:
            case plsqlParser.VALUE:
            case plsqlParser.VARCHAR:
            case plsqlParser.VARCHAR2:
            case plsqlParser.VARIABLE:
            case plsqlParser.VARRAY:
            case plsqlParser.VARYING:
            case plsqlParser.VERSION:
            case plsqlParser.VERSIONS:
            case plsqlParser.WAIT:
            case plsqlParser.WARNING:
            case plsqlParser.WELLFORMED:
            case plsqlParser.WHENEVER:
            case plsqlParser.WHILE:
            case plsqlParser.WITHIN:
            case plsqlParser.WORK:
            case plsqlParser.WRITE:
            case plsqlParser.XML:
            case plsqlParser.XMLAGG:
            case plsqlParser.XMLATTRIBUTES:
            case plsqlParser.XMLCAST:
            case plsqlParser.XMLCOLATTVAL:
            case plsqlParser.XMLELEMENT:
            case plsqlParser.XMLEXISTS:
            case plsqlParser.XMLFOREST:
            case plsqlParser.XMLNAMESPACES:
            case plsqlParser.XMLPARSE:
            case plsqlParser.XMLPI:
            case plsqlParser.XMLQUERY:
            case plsqlParser.XMLROOT:
            case plsqlParser.XMLSERIALIZE:
            case plsqlParser.XMLTABLE:
            case plsqlParser.YEAR:
            case plsqlParser.YES:
            case plsqlParser.YMINTERVAL_UNCONSTRAINED:
            case plsqlParser.ZONE:
            case plsqlParser.PREDICTION:
            case plsqlParser.PREDICTION_BOUNDS:
            case plsqlParser.PREDICTION_COST:
            case plsqlParser.PREDICTION_DETAILS:
            case plsqlParser.PREDICTION_PROBABILITY:
            case plsqlParser.PREDICTION_SET:
            case plsqlParser.CUME_DIST:
            case plsqlParser.DENSE_RANK:
            case plsqlParser.LISTAGG:
            case plsqlParser.PERCENT_RANK:
            case plsqlParser.PERCENTILE_CONT:
            case plsqlParser.PERCENTILE_DISC:
            case plsqlParser.RANK:
            case plsqlParser.AVG:
            case plsqlParser.CORR:
            case plsqlParser.LAG:
            case plsqlParser.LEAD:
            case plsqlParser.MAX:
            case plsqlParser.MEDIAN:
            case plsqlParser.MIN:
            case plsqlParser.NTILE:
            case plsqlParser.RATIO_TO_REPORT:
            case plsqlParser.ROW_NUMBER:
            case plsqlParser.SUM:
            case plsqlParser.VARIANCE:
            case plsqlParser.REGR_:
            case plsqlParser.STDDEV:
            case plsqlParser.VAR_:
            case plsqlParser.COVAR_:
            case plsqlParser.DELIMITED_ID:
            case plsqlParser.BINDVAR:
            case plsqlParser.COLON:
            case plsqlParser.REGULAR_ID:
                this.state = 2285;
                this.cursor_name();
                this.state = 2287;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===plsqlParser.LEFT_PAREN) {
                    this.state = 2286;
                    this.expression_list();
                }

                break;
            case plsqlParser.LEFT_PAREN:
                this.state = 2289;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 2290;
                this.select_statement();
                this.state = 2291;
                this.match(plsqlParser.RIGHT_PAREN);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Forall_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_forall_statement;
    return this;
}

Forall_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Forall_statementContext.prototype.constructor = Forall_statementContext;

Forall_statementContext.prototype.FORALL = function() {
    return this.getToken(plsqlParser.FORALL, 0);
};

Forall_statementContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Forall_statementContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Forall_statementContext.prototype.bounds_clause = function() {
    return this.getTypedRuleContext(Bounds_clauseContext,0);
};

Forall_statementContext.prototype.sql_statement = function() {
    return this.getTypedRuleContext(Sql_statementContext,0);
};

Forall_statementContext.prototype.SAVE = function() {
    return this.getToken(plsqlParser.SAVE, 0);
};

Forall_statementContext.prototype.EXCEPTIONS = function() {
    return this.getToken(plsqlParser.EXCEPTIONS, 0);
};

Forall_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterForall_statement(this);
	}
};

Forall_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitForall_statement(this);
	}
};




plsqlParser.Forall_statementContext = Forall_statementContext;

plsqlParser.prototype.forall_statement = function() {

    var localctx = new Forall_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, plsqlParser.RULE_forall_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2297;
        this.match(plsqlParser.FORALL);
        this.state = 2298;
        this.index_name();
        this.state = 2299;
        this.match(plsqlParser.IN);
        this.state = 2300;
        this.bounds_clause();
        this.state = 2301;
        this.sql_statement();
        this.state = 2304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.SAVE) {
            this.state = 2302;
            this.match(plsqlParser.SAVE);
            this.state = 2303;
            this.match(plsqlParser.EXCEPTIONS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bounds_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_bounds_clause;
    return this;
}

Bounds_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bounds_clauseContext.prototype.constructor = Bounds_clauseContext;

Bounds_clauseContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Bounds_clauseContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Bounds_clauseContext.prototype.INDICES = function() {
    return this.getToken(plsqlParser.INDICES, 0);
};

Bounds_clauseContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Bounds_clauseContext.prototype.collection_name = function() {
    return this.getTypedRuleContext(Collection_nameContext,0);
};

Bounds_clauseContext.prototype.between_bound = function() {
    return this.getTypedRuleContext(Between_boundContext,0);
};

Bounds_clauseContext.prototype.VALUES = function() {
    return this.getToken(plsqlParser.VALUES, 0);
};

Bounds_clauseContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Bounds_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterBounds_clause(this);
	}
};

Bounds_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitBounds_clause(this);
	}
};




plsqlParser.Bounds_clauseContext = Bounds_clauseContext;

plsqlParser.prototype.bounds_clause = function() {

    var localctx = new Bounds_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, plsqlParser.RULE_bounds_clause);
    var _la = 0; // Token type
    try {
        this.state = 2319;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2306;
            this.lower_bound();
            this.state = 2307;
            this.match(plsqlParser.T__0);
            this.state = 2308;
            this.upper_bound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2310;
            this.match(plsqlParser.INDICES);
            this.state = 2311;
            this.match(plsqlParser.OF);
            this.state = 2312;
            this.collection_name();
            this.state = 2314;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.BETWEEN) {
                this.state = 2313;
                this.between_bound();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2316;
            this.match(plsqlParser.VALUES);
            this.state = 2317;
            this.match(plsqlParser.OF);
            this.state = 2318;
            this.index_name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_between_bound;
    return this;
}

Between_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_boundContext.prototype.constructor = Between_boundContext;

Between_boundContext.prototype.BETWEEN = function() {
    return this.getToken(plsqlParser.BETWEEN, 0);
};

Between_boundContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Between_boundContext.prototype.AND = function() {
    return this.getToken(plsqlParser.AND, 0);
};

Between_boundContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Between_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterBetween_bound(this);
	}
};

Between_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitBetween_bound(this);
	}
};




plsqlParser.Between_boundContext = Between_boundContext;

plsqlParser.prototype.between_bound = function() {

    var localctx = new Between_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, plsqlParser.RULE_between_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2321;
        this.match(plsqlParser.BETWEEN);
        this.state = 2322;
        this.lower_bound();
        this.state = 2323;
        this.match(plsqlParser.AND);
        this.state = 2324;
        this.upper_bound();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lower_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_lower_bound;
    return this;
}

Lower_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lower_boundContext.prototype.constructor = Lower_boundContext;

Lower_boundContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Lower_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLower_bound(this);
	}
};

Lower_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLower_bound(this);
	}
};




plsqlParser.Lower_boundContext = Lower_boundContext;

plsqlParser.prototype.lower_bound = function() {

    var localctx = new Lower_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, plsqlParser.RULE_lower_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2326;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Upper_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_upper_bound;
    return this;
}

Upper_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Upper_boundContext.prototype.constructor = Upper_boundContext;

Upper_boundContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Upper_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUpper_bound(this);
	}
};

Upper_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUpper_bound(this);
	}
};




plsqlParser.Upper_boundContext = Upper_boundContext;

plsqlParser.prototype.upper_bound = function() {

    var localctx = new Upper_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, plsqlParser.RULE_upper_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2328;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_null_statement;
    return this;
}

Null_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_statementContext.prototype.constructor = Null_statementContext;

Null_statementContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

Null_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNull_statement(this);
	}
};

Null_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNull_statement(this);
	}
};




plsqlParser.Null_statementContext = Null_statementContext;

plsqlParser.prototype.null_statement = function() {

    var localctx = new Null_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, plsqlParser.RULE_null_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2330;
        this.match(plsqlParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raise_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_raise_statement;
    return this;
}

Raise_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_statementContext.prototype.constructor = Raise_statementContext;

Raise_statementContext.prototype.RAISE = function() {
    return this.getToken(plsqlParser.RAISE, 0);
};

Raise_statementContext.prototype.exception_name = function() {
    return this.getTypedRuleContext(Exception_nameContext,0);
};

Raise_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRaise_statement(this);
	}
};

Raise_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRaise_statement(this);
	}
};




plsqlParser.Raise_statementContext = Raise_statementContext;

plsqlParser.prototype.raise_statement = function() {

    var localctx = new Raise_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, plsqlParser.RULE_raise_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2332;
        this.match(plsqlParser.RAISE);
        this.state = 2334;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 2333;
            this.exception_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_return_statement;
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Return_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitReturn_statement(this);
	}
};




plsqlParser.Return_statementContext = Return_statementContext;

plsqlParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, plsqlParser.RULE_return_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2336;
        this.match(plsqlParser.RETURN);
        this.state = 2338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (plsqlParser.BLOCK - 32)) | (1 << (plsqlParser.BODY - 32)) | (1 << (plsqlParser.BOOLEAN - 32)) | (1 << (plsqlParser.BOTH - 32)) | (1 << (plsqlParser.BULK - 32)) | (1 << (plsqlParser.BYTE - 32)) | (1 << (plsqlParser.C_LETTER - 32)) | (1 << (plsqlParser.CALL - 32)) | (1 << (plsqlParser.CANONICAL - 32)) | (1 << (plsqlParser.CASCADE - 32)) | (1 << (plsqlParser.CASE - 32)) | (1 << (plsqlParser.CAST - 32)) | (1 << (plsqlParser.CHAR - 32)) | (1 << (plsqlParser.CHAR_CS - 32)) | (1 << (plsqlParser.CHARACTER - 32)) | (1 << (plsqlParser.CHR - 32)) | (1 << (plsqlParser.CLOB - 32)) | (1 << (plsqlParser.CLOSE - 32)) | (1 << (plsqlParser.CLUSTER - 32)) | (1 << (plsqlParser.COLLECT - 32)) | (1 << (plsqlParser.COLUMNS - 32)) | (1 << (plsqlParser.COMMENT - 32)) | (1 << (plsqlParser.COMMIT - 32)) | (1 << (plsqlParser.COMMITTED - 32)) | (1 << (plsqlParser.COMPATIBILITY - 32)) | (1 << (plsqlParser.COMPILE - 32)) | (1 << (plsqlParser.COMPOUND - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (plsqlParser.DECOMPOSE - 96)) | (1 << (plsqlParser.DECREMENT - 96)) | (1 << (plsqlParser.DEFAULT - 96)) | (1 << (plsqlParser.DEFAULTS - 96)) | (1 << (plsqlParser.DEFERRED - 96)) | (1 << (plsqlParser.DEFINER - 96)) | (1 << (plsqlParser.DETERMINISTIC - 96)) | (1 << (plsqlParser.DIMENSION - 96)) | (1 << (plsqlParser.DISABLE - 96)) | (1 << (plsqlParser.DISASSOCIATE - 96)) | (1 << (plsqlParser.DISTINCT - 96)) | (1 << (plsqlParser.DOCUMENT - 96)) | (1 << (plsqlParser.DOUBLE - 96)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (plsqlParser.EACH - 96)) | (1 << (plsqlParser.ELEMENT - 96)) | (1 << (plsqlParser.EMPTY - 96)) | (1 << (plsqlParser.ENABLE - 96)) | (1 << (plsqlParser.ENCODING - 96)) | (1 << (plsqlParser.ENTITYESCAPING - 96)) | (1 << (plsqlParser.ERR - 96)) | (1 << (plsqlParser.ERRORS - 96)) | (1 << (plsqlParser.ESCAPE - 96)) | (1 << (plsqlParser.EVALNAME - 96)) | (1 << (plsqlParser.EXCEPTION - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HIDE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (plsqlParser.HOUR - 160)) | (1 << (plsqlParser.IGNORE - 160)) | (1 << (plsqlParser.IMMEDIATE - 160)) | (1 << (plsqlParser.INCLUDE - 160)) | (1 << (plsqlParser.INCLUDING - 160)) | (1 << (plsqlParser.INCREMENT - 160)) | (1 << (plsqlParser.INDENT - 160)) | (1 << (plsqlParser.INDEXED - 160)) | (1 << (plsqlParser.INDICATOR - 160)) | (1 << (plsqlParser.INDICES - 160)) | (1 << (plsqlParser.INFINITE - 160)) | (1 << (plsqlParser.INLINE - 160)) | (1 << (plsqlParser.INNER - 160)) | (1 << (plsqlParser.INOUT - 160)) | (1 << (plsqlParser.INSTANTIABLE - 160)) | (1 << (plsqlParser.INSTEAD - 160)) | (1 << (plsqlParser.INT - 160)) | (1 << (plsqlParser.INTEGER - 160)) | (1 << (plsqlParser.INTERVAL - 160)) | (1 << (plsqlParser.INVALIDATE - 160)) | (1 << (plsqlParser.ISOLATION - 160)) | (1 << (plsqlParser.ITERATE - 160)) | (1 << (plsqlParser.JAVA - 160)) | (1 << (plsqlParser.JOIN - 160)) | (1 << (plsqlParser.KEEP - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (plsqlParser.MODEL - 224)) | (1 << (plsqlParser.MODIFY - 224)) | (1 << (plsqlParser.MONTH - 224)) | (1 << (plsqlParser.MULTISET - 224)) | (1 << (plsqlParser.NAME - 224)) | (1 << (plsqlParser.NAN - 224)) | (1 << (plsqlParser.NATURAL - 224)) | (1 << (plsqlParser.NATURALN - 224)) | (1 << (plsqlParser.NAV - 224)) | (1 << (plsqlParser.NCHAR - 224)) | (1 << (plsqlParser.NCHAR_CS - 224)) | (1 << (plsqlParser.NCLOB - 224)) | (1 << (plsqlParser.NESTED - 224)) | (1 << (plsqlParser.NEW - 224)) | (1 << (plsqlParser.NO - 224)) | (1 << (plsqlParser.NOAUDIT - 224)) | (1 << (plsqlParser.NOCOPY - 224)) | (1 << (plsqlParser.NOCYCLE - 224)) | (1 << (plsqlParser.NOENTITYESCAPING - 224)) | (1 << (plsqlParser.NONE - 224)) | (1 << (plsqlParser.NOSCHEMACHECK - 224)) | (1 << (plsqlParser.NOT - 224)) | (1 << (plsqlParser.NULL - 224)) | (1 << (plsqlParser.NULLS - 224)) | (1 << (plsqlParser.NUMBER - 224)) | (1 << (plsqlParser.NUMERIC - 224)) | (1 << (plsqlParser.NVARCHAR2 - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (plsqlParser.POSITIVEN - 288)) | (1 << (plsqlParser.PRAGMA - 288)) | (1 << (plsqlParser.PRECEDING - 288)) | (1 << (plsqlParser.PRECISION - 288)) | (1 << (plsqlParser.PRESENT - 288)) | (1 << (plsqlParser.PRIOR - 288)) | (1 << (plsqlParser.RAISE - 288)) | (1 << (plsqlParser.RANGE - 288)) | (1 << (plsqlParser.RAW - 288)) | (1 << (plsqlParser.READ - 288)) | (1 << (plsqlParser.REAL - 288)) | (1 << (plsqlParser.RECORD - 288)) | (1 << (plsqlParser.REF - 288)) | (1 << (plsqlParser.REFERENCE - 288)) | (1 << (plsqlParser.REFERENCING - 288)) | (1 << (plsqlParser.REJECT - 288)) | (1 << (plsqlParser.RELIES_ON - 288)) | (1 << (plsqlParser.RENAME - 288)) | (1 << (plsqlParser.REPLACE - 288)) | (1 << (plsqlParser.RESPECT - 288)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 288)) | (1 << (plsqlParser.RESULT - 288)) | (1 << (plsqlParser.RESULT_CACHE - 288)) | (1 << (plsqlParser.RETURN - 288)) | (1 << (plsqlParser.RETURNING - 288)) | (1 << (plsqlParser.REUSE - 288)) | (1 << (plsqlParser.REVERSE - 288)) | (1 << (plsqlParser.RIGHT - 288)) | (1 << (plsqlParser.ROLLBACK - 288)) | (1 << (plsqlParser.ROLLUP - 288)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (plsqlParser.SKIP_ - 353)) | (1 << (plsqlParser.SMALLINT - 353)) | (1 << (plsqlParser.SNAPSHOT - 353)) | (1 << (plsqlParser.SOME - 353)) | (1 << (plsqlParser.SPECIFICATION - 353)) | (1 << (plsqlParser.SQLDATA - 353)) | (1 << (plsqlParser.SQLERROR - 353)) | (1 << (plsqlParser.STANDALONE - 353)) | (1 << (plsqlParser.STARTUP - 353)) | (1 << (plsqlParser.STATEMENT - 353)) | (1 << (plsqlParser.STATEMENT_ID - 353)) | (1 << (plsqlParser.STATIC - 353)) | (1 << (plsqlParser.STATISTICS - 353)) | (1 << (plsqlParser.STRING - 353)) | (1 << (plsqlParser.SUBMULTISET - 353)) | (1 << (plsqlParser.SUBPARTITION - 353)) | (1 << (plsqlParser.SUBSTITUTABLE - 353)) | (1 << (plsqlParser.SUBTYPE - 353)) | (1 << (plsqlParser.SUCCESS - 353)) | (1 << (plsqlParser.SUSPEND - 353)) | (1 << (plsqlParser.TIME - 353)) | (1 << (plsqlParser.TIMESTAMP - 353)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMEZONE_ABBR - 353)) | (1 << (plsqlParser.TIMEZONE_HOUR - 353)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 353)))) !== 0) || ((((_la - 385)) & ~0x1f) == 0 && ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUE - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)))) !== 0) || ((((_la - 417)) & ~0x1f) == 0 && ((1 << (_la - 417)) & ((1 << (plsqlParser.VERSION - 417)) | (1 << (plsqlParser.VERSIONS - 417)) | (1 << (plsqlParser.WAIT - 417)) | (1 << (plsqlParser.WARNING - 417)) | (1 << (plsqlParser.WELLFORMED - 417)) | (1 << (plsqlParser.WHENEVER - 417)) | (1 << (plsqlParser.WHILE - 417)) | (1 << (plsqlParser.WITHIN - 417)) | (1 << (plsqlParser.WORK - 417)) | (1 << (plsqlParser.WRITE - 417)) | (1 << (plsqlParser.XML - 417)) | (1 << (plsqlParser.XMLAGG - 417)) | (1 << (plsqlParser.XMLATTRIBUTES - 417)) | (1 << (plsqlParser.XMLCAST - 417)) | (1 << (plsqlParser.XMLCOLATTVAL - 417)) | (1 << (plsqlParser.XMLELEMENT - 417)) | (1 << (plsqlParser.XMLEXISTS - 417)) | (1 << (plsqlParser.XMLFOREST - 417)) | (1 << (plsqlParser.XMLNAMESPACES - 417)) | (1 << (plsqlParser.XMLPARSE - 417)) | (1 << (plsqlParser.XMLPI - 417)) | (1 << (plsqlParser.XMLQUERY - 417)) | (1 << (plsqlParser.XMLROOT - 417)) | (1 << (plsqlParser.XMLSERIALIZE - 417)) | (1 << (plsqlParser.XMLTABLE - 417)) | (1 << (plsqlParser.YEAR - 417)) | (1 << (plsqlParser.YES - 417)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 417)) | (1 << (plsqlParser.ZONE - 417)))) !== 0) || ((((_la - 449)) & ~0x1f) == 0 && ((1 << (_la - 449)) & ((1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)))) !== 0) || ((((_la - 483)) & ~0x1f) == 0 && ((1 << (_la - 483)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 483)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 483)) | (1 << (plsqlParser.CHAR_STRING - 483)) | (1 << (plsqlParser.DELIMITED_ID - 483)) | (1 << (plsqlParser.LEFT_PAREN - 483)) | (1 << (plsqlParser.PLUS_SIGN - 483)) | (1 << (plsqlParser.MINUS_SIGN - 483)) | (1 << (plsqlParser.BINDVAR - 483)) | (1 << (plsqlParser.COLON - 483)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 2337;
            this.condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_function_call;
    return this;
}

Function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_callContext.prototype.constructor = Function_callContext;

Function_callContext.prototype.routine_name = function() {
    return this.getTypedRuleContext(Routine_nameContext,0);
};

Function_callContext.prototype.CALL = function() {
    return this.getToken(plsqlParser.CALL, 0);
};

Function_callContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

Function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFunction_call(this);
	}
};

Function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFunction_call(this);
	}
};




plsqlParser.Function_callContext = Function_callContext;

plsqlParser.prototype.function_call = function() {

    var localctx = new Function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, plsqlParser.RULE_function_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2341;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
        if(la_===1) {
            this.state = 2340;
            this.match(plsqlParser.CALL);

        }
        this.state = 2343;
        this.routine_name();
        this.state = 2345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 2344;
            this.function_argument();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_body;
    return this;
}

BodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BodyContext.prototype.constructor = BodyContext;

BodyContext.prototype.BEGIN = function() {
    return this.getToken(plsqlParser.BEGIN, 0);
};

BodyContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

BodyContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

BodyContext.prototype.EXCEPTION = function() {
    return this.getToken(plsqlParser.EXCEPTION, 0);
};

BodyContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

BodyContext.prototype.exception_handler = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Exception_handlerContext);
    } else {
        return this.getTypedRuleContext(Exception_handlerContext,i);
    }
};

BodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterBody(this);
	}
};

BodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitBody(this);
	}
};




plsqlParser.BodyContext = BodyContext;

plsqlParser.prototype.body = function() {

    var localctx = new BodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, plsqlParser.RULE_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2347;
        this.match(plsqlParser.BEGIN);
        this.state = 2348;
        this.seq_of_statements();
        this.state = 2355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.EXCEPTION) {
            this.state = 2349;
            this.match(plsqlParser.EXCEPTION);
            this.state = 2351; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2350;
                this.exception_handler();
                this.state = 2353; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===plsqlParser.WHEN);
        }

        this.state = 2357;
        this.match(plsqlParser.END);
        this.state = 2359;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
        if(la_===1) {
            this.state = 2358;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_handlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_exception_handler;
    return this;
}

Exception_handlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_handlerContext.prototype.constructor = Exception_handlerContext;

Exception_handlerContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Exception_handlerContext.prototype.exception_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Exception_nameContext);
    } else {
        return this.getTypedRuleContext(Exception_nameContext,i);
    }
};

Exception_handlerContext.prototype.THEN = function() {
    return this.getToken(plsqlParser.THEN, 0);
};

Exception_handlerContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Exception_handlerContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.OR);
    } else {
        return this.getToken(plsqlParser.OR, i);
    }
};


Exception_handlerContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterException_handler(this);
	}
};

Exception_handlerContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitException_handler(this);
	}
};




plsqlParser.Exception_handlerContext = Exception_handlerContext;

plsqlParser.prototype.exception_handler = function() {

    var localctx = new Exception_handlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, plsqlParser.RULE_exception_handler);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2361;
        this.match(plsqlParser.WHEN);
        this.state = 2362;
        this.exception_name();
        this.state = 2367;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.OR) {
            this.state = 2363;
            this.match(plsqlParser.OR);
            this.state = 2364;
            this.exception_name();
            this.state = 2369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2370;
        this.match(plsqlParser.THEN);
        this.state = 2371;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_trigger_block;
    return this;
}

Trigger_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_blockContext.prototype.constructor = Trigger_blockContext;

Trigger_blockContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Trigger_blockContext.prototype.DECLARE = function() {
    return this.getToken(plsqlParser.DECLARE, 0);
};

Trigger_blockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Trigger_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTrigger_block(this);
	}
};

Trigger_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTrigger_block(this);
	}
};




plsqlParser.Trigger_blockContext = Trigger_blockContext;

plsqlParser.prototype.trigger_block = function() {

    var localctx = new Trigger_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, plsqlParser.RULE_trigger_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECLARE - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0)) {
            this.state = 2374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.DECLARE) {
                this.state = 2373;
                this.match(plsqlParser.DECLARE);
            }

            this.state = 2377; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2376;
                this.declare_spec();
                this.state = 2379; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0));
        }

        this.state = 2383;
        this.body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

BlockContext.prototype.DECLARE = function() {
    return this.getToken(plsqlParser.DECLARE, 0);
};

BlockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitBlock(this);
	}
};




plsqlParser.BlockContext = BlockContext;

plsqlParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, plsqlParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.DECLARE) {
            this.state = 2385;
            this.match(plsqlParser.DECLARE);
        }

        this.state = 2389; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2388;
            this.declare_spec();
            this.state = 2391; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CREATE - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (plsqlParser.PROCEDURE - 294)) | (1 << (plsqlParser.RAISE - 294)) | (1 << (plsqlParser.RANGE - 294)) | (1 << (plsqlParser.RAW - 294)) | (1 << (plsqlParser.READ - 294)) | (1 << (plsqlParser.REAL - 294)) | (1 << (plsqlParser.RECORD - 294)) | (1 << (plsqlParser.REF - 294)) | (1 << (plsqlParser.REFERENCE - 294)) | (1 << (plsqlParser.REFERENCING - 294)) | (1 << (plsqlParser.REJECT - 294)) | (1 << (plsqlParser.RELIES_ON - 294)) | (1 << (plsqlParser.RENAME - 294)) | (1 << (plsqlParser.REPLACE - 294)) | (1 << (plsqlParser.RESPECT - 294)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 294)) | (1 << (plsqlParser.RESULT - 294)) | (1 << (plsqlParser.RESULT_CACHE - 294)) | (1 << (plsqlParser.RETURN - 294)) | (1 << (plsqlParser.RETURNING - 294)) | (1 << (plsqlParser.REUSE - 294)) | (1 << (plsqlParser.REVERSE - 294)) | (1 << (plsqlParser.RIGHT - 294)) | (1 << (plsqlParser.ROLLBACK - 294)) | (1 << (plsqlParser.ROLLUP - 294)) | (1 << (plsqlParser.ROW - 294)) | (1 << (plsqlParser.ROWID - 294)) | (1 << (plsqlParser.ROWS - 294)) | (1 << (plsqlParser.RULES - 294)) | (1 << (plsqlParser.SAMPLE - 294)) | (1 << (plsqlParser.SAVE - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (plsqlParser.SAVEPOINT - 326)) | (1 << (plsqlParser.SCHEMA - 326)) | (1 << (plsqlParser.SCHEMACHECK - 326)) | (1 << (plsqlParser.SCN - 326)) | (1 << (plsqlParser.SECOND - 326)) | (1 << (plsqlParser.SEED - 326)) | (1 << (plsqlParser.SEGMENT - 326)) | (1 << (plsqlParser.SELF - 326)) | (1 << (plsqlParser.SEQUENTIAL - 326)) | (1 << (plsqlParser.SERIALIZABLE - 326)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 326)) | (1 << (plsqlParser.SERVERERROR - 326)) | (1 << (plsqlParser.SESSIONTIMEZONE - 326)) | (1 << (plsqlParser.SET - 326)) | (1 << (plsqlParser.SETS - 326)) | (1 << (plsqlParser.SETTINGS - 326)) | (1 << (plsqlParser.SHOW - 326)) | (1 << (plsqlParser.SHUTDOWN - 326)) | (1 << (plsqlParser.SIBLINGS - 326)) | (1 << (plsqlParser.SIGNTYPE - 326)) | (1 << (plsqlParser.SIMPLE_INTEGER - 326)) | (1 << (plsqlParser.SINGLE - 326)) | (1 << (plsqlParser.SKIP_ - 326)) | (1 << (plsqlParser.SMALLINT - 326)) | (1 << (plsqlParser.SNAPSHOT - 326)) | (1 << (plsqlParser.SOME - 326)) | (1 << (plsqlParser.SPECIFICATION - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (plsqlParser.SQLDATA - 358)) | (1 << (plsqlParser.SQLERROR - 358)) | (1 << (plsqlParser.STANDALONE - 358)) | (1 << (plsqlParser.STARTUP - 358)) | (1 << (plsqlParser.STATEMENT - 358)) | (1 << (plsqlParser.STATEMENT_ID - 358)) | (1 << (plsqlParser.STATIC - 358)) | (1 << (plsqlParser.STATISTICS - 358)) | (1 << (plsqlParser.STRING - 358)) | (1 << (plsqlParser.SUBMULTISET - 358)) | (1 << (plsqlParser.SUBPARTITION - 358)) | (1 << (plsqlParser.SUBSTITUTABLE - 358)) | (1 << (plsqlParser.SUBTYPE - 358)) | (1 << (plsqlParser.SUCCESS - 358)) | (1 << (plsqlParser.SUSPEND - 358)) | (1 << (plsqlParser.TIME - 358)) | (1 << (plsqlParser.TIMESTAMP - 358)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (plsqlParser.TIMEZONE_ABBR - 358)) | (1 << (plsqlParser.TIMEZONE_HOUR - 358)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 358)) | (1 << (plsqlParser.TIMEZONE_REGION - 358)) | (1 << (plsqlParser.TRAILING - 358)) | (1 << (plsqlParser.TRANSACTION - 358)) | (1 << (plsqlParser.TRANSLATE - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (plsqlParser.TREAT - 390)) | (1 << (plsqlParser.TRIGGER - 390)) | (1 << (plsqlParser.TRIM - 390)) | (1 << (plsqlParser.TRUNCATE - 390)) | (1 << (plsqlParser.TYPE - 390)) | (1 << (plsqlParser.UNBOUNDED - 390)) | (1 << (plsqlParser.UNDER - 390)) | (1 << (plsqlParser.UNLIMITED - 390)) | (1 << (plsqlParser.UNTIL - 390)) | (1 << (plsqlParser.UPDATED - 390)) | (1 << (plsqlParser.UPSERT - 390)) | (1 << (plsqlParser.UROWID - 390)) | (1 << (plsqlParser.USE - 390)) | (1 << (plsqlParser.VALIDATE - 390)) | (1 << (plsqlParser.VALUE - 390)) | (1 << (plsqlParser.VARCHAR - 390)) | (1 << (plsqlParser.VARCHAR2 - 390)) | (1 << (plsqlParser.VARIABLE - 390)) | (1 << (plsqlParser.VARRAY - 390)) | (1 << (plsqlParser.VARYING - 390)) | (1 << (plsqlParser.VERSION - 390)) | (1 << (plsqlParser.VERSIONS - 390)) | (1 << (plsqlParser.WAIT - 390)) | (1 << (plsqlParser.WARNING - 390)) | (1 << (plsqlParser.WELLFORMED - 390)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || ((((_la - 499)) & ~0x1f) == 0 && ((1 << (_la - 499)) & ((1 << (plsqlParser.BINDVAR - 499)) | (1 << (plsqlParser.COLON - 499)) | (1 << (plsqlParser.REGULAR_ID - 499)))) !== 0));
        this.state = 2393;
        this.body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sql_statement;
    return this;
}

Sql_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_statementContext.prototype.constructor = Sql_statementContext;

Sql_statementContext.prototype.execute_immediate = function() {
    return this.getTypedRuleContext(Execute_immediateContext,0);
};

Sql_statementContext.prototype.data_manipulation_language_statements = function() {
    return this.getTypedRuleContext(Data_manipulation_language_statementsContext,0);
};

Sql_statementContext.prototype.cursor_manipulation_statements = function() {
    return this.getTypedRuleContext(Cursor_manipulation_statementsContext,0);
};

Sql_statementContext.prototype.transaction_control_statements = function() {
    return this.getTypedRuleContext(Transaction_control_statementsContext,0);
};

Sql_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSql_statement(this);
	}
};

Sql_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSql_statement(this);
	}
};




plsqlParser.Sql_statementContext = Sql_statementContext;

plsqlParser.prototype.sql_statement = function() {

    var localctx = new Sql_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, plsqlParser.RULE_sql_statement);
    try {
        this.state = 2399;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.EXECUTE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2395;
            this.execute_immediate();
            break;
        case plsqlParser.DELETE:
        case plsqlParser.EXPLAIN:
        case plsqlParser.INSERT:
        case plsqlParser.LOCK:
        case plsqlParser.MERGE:
        case plsqlParser.SELECT:
        case plsqlParser.UPDATE:
        case plsqlParser.WITH:
        case plsqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2396;
            this.data_manipulation_language_statements();
            break;
        case plsqlParser.CLOSE:
        case plsqlParser.FETCH:
        case plsqlParser.OPEN:
            this.enterOuterAlt(localctx, 3);
            this.state = 2397;
            this.cursor_manipulation_statements();
            break;
        case plsqlParser.COMMIT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SET:
            this.enterOuterAlt(localctx, 4);
            this.state = 2398;
            this.transaction_control_statements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Execute_immediateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_execute_immediate;
    return this;
}

Execute_immediateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Execute_immediateContext.prototype.constructor = Execute_immediateContext;

Execute_immediateContext.prototype.EXECUTE = function() {
    return this.getToken(plsqlParser.EXECUTE, 0);
};

Execute_immediateContext.prototype.IMMEDIATE = function() {
    return this.getToken(plsqlParser.IMMEDIATE, 0);
};

Execute_immediateContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Execute_immediateContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Execute_immediateContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Execute_immediateContext.prototype.dynamic_returning_clause = function() {
    return this.getTypedRuleContext(Dynamic_returning_clauseContext,0);
};

Execute_immediateContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterExecute_immediate(this);
	}
};

Execute_immediateContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitExecute_immediate(this);
	}
};




plsqlParser.Execute_immediateContext = Execute_immediateContext;

plsqlParser.prototype.execute_immediate = function() {

    var localctx = new Execute_immediateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, plsqlParser.RULE_execute_immediate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2401;
        this.match(plsqlParser.EXECUTE);
        this.state = 2402;
        this.match(plsqlParser.IMMEDIATE);
        this.state = 2403;
        this.expression(0);
        this.state = 2413;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case plsqlParser.BULK:
        case plsqlParser.INTO:
        	this.state = 2404;
        	this.into_clause();
        	this.state = 2406;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===plsqlParser.USING) {
        	    this.state = 2405;
        	    this.using_clause();
        	}

        	break;
        case plsqlParser.USING:
        	this.state = 2408;
        	this.using_clause();
        	this.state = 2410;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===plsqlParser.RETURN || _la===plsqlParser.RETURNING) {
        	    this.state = 2409;
        	    this.dynamic_returning_clause();
        	}

        	break;
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        	this.state = 2412;
        	this.dynamic_returning_clause();
        	break;
        case plsqlParser.EOF:
        case plsqlParser.SAVE:
        case plsqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dynamic_returning_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_dynamic_returning_clause;
    return this;
}

Dynamic_returning_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dynamic_returning_clauseContext.prototype.constructor = Dynamic_returning_clauseContext;

Dynamic_returning_clauseContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Dynamic_returning_clauseContext.prototype.RETURNING = function() {
    return this.getToken(plsqlParser.RETURNING, 0);
};

Dynamic_returning_clauseContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Dynamic_returning_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDynamic_returning_clause(this);
	}
};

Dynamic_returning_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDynamic_returning_clause(this);
	}
};




plsqlParser.Dynamic_returning_clauseContext = Dynamic_returning_clauseContext;

plsqlParser.prototype.dynamic_returning_clause = function() {

    var localctx = new Dynamic_returning_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, plsqlParser.RULE_dynamic_returning_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2415;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.RETURN || _la===plsqlParser.RETURNING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2416;
        this.into_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_manipulation_language_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_data_manipulation_language_statements;
    return this;
}

Data_manipulation_language_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_manipulation_language_statementsContext.prototype.constructor = Data_manipulation_language_statementsContext;

Data_manipulation_language_statementsContext.prototype.merge_statement = function() {
    return this.getTypedRuleContext(Merge_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.lock_table_statement = function() {
    return this.getTypedRuleContext(Lock_table_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.update_statement = function() {
    return this.getTypedRuleContext(Update_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.delete_statement = function() {
    return this.getTypedRuleContext(Delete_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.explain_statement = function() {
    return this.getTypedRuleContext(Explain_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterData_manipulation_language_statements(this);
	}
};

Data_manipulation_language_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitData_manipulation_language_statements(this);
	}
};




plsqlParser.Data_manipulation_language_statementsContext = Data_manipulation_language_statementsContext;

plsqlParser.prototype.data_manipulation_language_statements = function() {

    var localctx = new Data_manipulation_language_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, plsqlParser.RULE_data_manipulation_language_statements);
    try {
        this.state = 2425;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.MERGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2418;
            this.merge_statement();
            break;
        case plsqlParser.LOCK:
            this.enterOuterAlt(localctx, 2);
            this.state = 2419;
            this.lock_table_statement();
            break;
        case plsqlParser.SELECT:
        case plsqlParser.WITH:
        case plsqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 3);
            this.state = 2420;
            this.select_statement();
            break;
        case plsqlParser.UPDATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 2421;
            this.update_statement();
            break;
        case plsqlParser.DELETE:
            this.enterOuterAlt(localctx, 5);
            this.state = 2422;
            this.delete_statement();
            break;
        case plsqlParser.INSERT:
            this.enterOuterAlt(localctx, 6);
            this.state = 2423;
            this.insert_statement();
            break;
        case plsqlParser.EXPLAIN:
            this.enterOuterAlt(localctx, 7);
            this.state = 2424;
            this.explain_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_manipulation_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cursor_manipulation_statements;
    return this;
}

Cursor_manipulation_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_manipulation_statementsContext.prototype.constructor = Cursor_manipulation_statementsContext;

Cursor_manipulation_statementsContext.prototype.close_statement = function() {
    return this.getTypedRuleContext(Close_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.open_statement = function() {
    return this.getTypedRuleContext(Open_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.fetch_statement = function() {
    return this.getTypedRuleContext(Fetch_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.open_for_statement = function() {
    return this.getTypedRuleContext(Open_for_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCursor_manipulation_statements(this);
	}
};

Cursor_manipulation_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCursor_manipulation_statements(this);
	}
};




plsqlParser.Cursor_manipulation_statementsContext = Cursor_manipulation_statementsContext;

plsqlParser.prototype.cursor_manipulation_statements = function() {

    var localctx = new Cursor_manipulation_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, plsqlParser.RULE_cursor_manipulation_statements);
    try {
        this.state = 2431;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2427;
            this.close_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2428;
            this.open_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2429;
            this.fetch_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2430;
            this.open_for_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Close_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_close_statement;
    return this;
}

Close_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Close_statementContext.prototype.constructor = Close_statementContext;

Close_statementContext.prototype.CLOSE = function() {
    return this.getToken(plsqlParser.CLOSE, 0);
};

Close_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Close_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterClose_statement(this);
	}
};

Close_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitClose_statement(this);
	}
};




plsqlParser.Close_statementContext = Close_statementContext;

plsqlParser.prototype.close_statement = function() {

    var localctx = new Close_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, plsqlParser.RULE_close_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2433;
        this.match(plsqlParser.CLOSE);
        this.state = 2434;
        this.cursor_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Open_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_open_statement;
    return this;
}

Open_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_statementContext.prototype.constructor = Open_statementContext;

Open_statementContext.prototype.OPEN = function() {
    return this.getToken(plsqlParser.OPEN, 0);
};

Open_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Open_statementContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Open_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOpen_statement(this);
	}
};

Open_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOpen_statement(this);
	}
};




plsqlParser.Open_statementContext = Open_statementContext;

plsqlParser.prototype.open_statement = function() {

    var localctx = new Open_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, plsqlParser.RULE_open_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2436;
        this.match(plsqlParser.OPEN);
        this.state = 2437;
        this.cursor_name();
        this.state = 2439;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 2438;
            this.expression_list();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_fetch_statement;
    this.it1 = null; // Token
    return this;
}

Fetch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_statementContext.prototype.constructor = Fetch_statementContext;

Fetch_statementContext.prototype.FETCH = function() {
    return this.getToken(plsqlParser.FETCH, 0);
};

Fetch_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Fetch_statementContext.prototype.variable_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_nameContext);
    } else {
        return this.getTypedRuleContext(Variable_nameContext,i);
    }
};

Fetch_statementContext.prototype.BULK = function() {
    return this.getToken(plsqlParser.BULK, 0);
};

Fetch_statementContext.prototype.COLLECT = function() {
    return this.getToken(plsqlParser.COLLECT, 0);
};

Fetch_statementContext.prototype.INTO = function() {
    return this.getToken(plsqlParser.INTO, 0);
};

Fetch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFetch_statement(this);
	}
};

Fetch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFetch_statement(this);
	}
};




plsqlParser.Fetch_statementContext = Fetch_statementContext;

plsqlParser.prototype.fetch_statement = function() {

    var localctx = new Fetch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, plsqlParser.RULE_fetch_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2441;
        this.match(plsqlParser.FETCH);
        this.state = 2442;
        this.cursor_name();
        this.state = 2463;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.INTO:
            this.state = 2443;
            localctx.it1 = this.match(plsqlParser.INTO);
            this.state = 2444;
            this.variable_name();
            this.state = 2449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2445;
                this.match(plsqlParser.COMMA);
                this.state = 2446;
                this.variable_name();
                this.state = 2451;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case plsqlParser.BULK:
            this.state = 2452;
            this.match(plsqlParser.BULK);
            this.state = 2453;
            this.match(plsqlParser.COLLECT);
            this.state = 2454;
            this.match(plsqlParser.INTO);
            this.state = 2455;
            this.variable_name();
            this.state = 2460;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2456;
                this.match(plsqlParser.COMMA);
                this.state = 2457;
                this.variable_name();
                this.state = 2462;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Open_for_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_open_for_statement;
    return this;
}

Open_for_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_for_statementContext.prototype.constructor = Open_for_statementContext;

Open_for_statementContext.prototype.OPEN = function() {
    return this.getToken(plsqlParser.OPEN, 0);
};

Open_for_statementContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Open_for_statementContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Open_for_statementContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Open_for_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Open_for_statementContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Open_for_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOpen_for_statement(this);
	}
};

Open_for_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOpen_for_statement(this);
	}
};




plsqlParser.Open_for_statementContext = Open_for_statementContext;

plsqlParser.prototype.open_for_statement = function() {

    var localctx = new Open_for_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, plsqlParser.RULE_open_for_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2465;
        this.match(plsqlParser.OPEN);
        this.state = 2466;
        this.variable_name();
        this.state = 2467;
        this.match(plsqlParser.FOR);
        this.state = 2470;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2468;
            this.select_statement();
            break;

        case 2:
            this.state = 2469;
            this.expression(0);
            break;

        }
        this.state = 2473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.USING) {
            this.state = 2472;
            this.using_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Transaction_control_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_transaction_control_statements;
    return this;
}

Transaction_control_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_control_statementsContext.prototype.constructor = Transaction_control_statementsContext;

Transaction_control_statementsContext.prototype.set_transaction_command = function() {
    return this.getTypedRuleContext(Set_transaction_commandContext,0);
};

Transaction_control_statementsContext.prototype.set_constraint_command = function() {
    return this.getTypedRuleContext(Set_constraint_commandContext,0);
};

Transaction_control_statementsContext.prototype.commit_statement = function() {
    return this.getTypedRuleContext(Commit_statementContext,0);
};

Transaction_control_statementsContext.prototype.rollback_statement = function() {
    return this.getTypedRuleContext(Rollback_statementContext,0);
};

Transaction_control_statementsContext.prototype.savepoint_statement = function() {
    return this.getTypedRuleContext(Savepoint_statementContext,0);
};

Transaction_control_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTransaction_control_statements(this);
	}
};

Transaction_control_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTransaction_control_statements(this);
	}
};




plsqlParser.Transaction_control_statementsContext = Transaction_control_statementsContext;

plsqlParser.prototype.transaction_control_statements = function() {

    var localctx = new Transaction_control_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, plsqlParser.RULE_transaction_control_statements);
    try {
        this.state = 2480;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2475;
            this.set_transaction_command();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2476;
            this.set_constraint_command();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2477;
            this.commit_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2478;
            this.rollback_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2479;
            this.savepoint_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_transaction_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_set_transaction_command;
    return this;
}

Set_transaction_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_transaction_commandContext.prototype.constructor = Set_transaction_commandContext;

Set_transaction_commandContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Set_transaction_commandContext.prototype.TRANSACTION = function() {
    return this.getToken(plsqlParser.TRANSACTION, 0);
};

Set_transaction_commandContext.prototype.READ = function() {
    return this.getToken(plsqlParser.READ, 0);
};

Set_transaction_commandContext.prototype.ISOLATION = function() {
    return this.getToken(plsqlParser.ISOLATION, 0);
};

Set_transaction_commandContext.prototype.LEVEL = function() {
    return this.getToken(plsqlParser.LEVEL, 0);
};

Set_transaction_commandContext.prototype.USE = function() {
    return this.getToken(plsqlParser.USE, 0);
};

Set_transaction_commandContext.prototype.ROLLBACK = function() {
    return this.getToken(plsqlParser.ROLLBACK, 0);
};

Set_transaction_commandContext.prototype.SEGMENT = function() {
    return this.getToken(plsqlParser.SEGMENT, 0);
};

Set_transaction_commandContext.prototype.rollback_segment_name = function() {
    return this.getTypedRuleContext(Rollback_segment_nameContext,0);
};

Set_transaction_commandContext.prototype.NAME = function() {
    return this.getToken(plsqlParser.NAME, 0);
};

Set_transaction_commandContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Set_transaction_commandContext.prototype.ONLY = function() {
    return this.getToken(plsqlParser.ONLY, 0);
};

Set_transaction_commandContext.prototype.WRITE = function() {
    return this.getToken(plsqlParser.WRITE, 0);
};

Set_transaction_commandContext.prototype.SERIALIZABLE = function() {
    return this.getToken(plsqlParser.SERIALIZABLE, 0);
};

Set_transaction_commandContext.prototype.COMMITTED = function() {
    return this.getToken(plsqlParser.COMMITTED, 0);
};

Set_transaction_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSet_transaction_command(this);
	}
};

Set_transaction_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSet_transaction_command(this);
	}
};




plsqlParser.Set_transaction_commandContext = Set_transaction_commandContext;

plsqlParser.prototype.set_transaction_command = function() {

    var localctx = new Set_transaction_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, plsqlParser.RULE_set_transaction_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2482;
        this.match(plsqlParser.SET);
        this.state = 2483;
        this.match(plsqlParser.TRANSACTION);
        this.state = 2497;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case plsqlParser.READ:
        	this.state = 2484;
        	this.match(plsqlParser.READ);
        	this.state = 2485;
        	_la = this._input.LA(1);
        	if(!(_la===plsqlParser.ONLY || _la===plsqlParser.WRITE)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	break;
        case plsqlParser.ISOLATION:
        	this.state = 2486;
        	this.match(plsqlParser.ISOLATION);
        	this.state = 2487;
        	this.match(plsqlParser.LEVEL);
        	this.state = 2491;
        	this._errHandler.sync(this);
        	switch(this._input.LA(1)) {
        	case plsqlParser.SERIALIZABLE:
        	    this.state = 2488;
        	    this.match(plsqlParser.SERIALIZABLE);
        	    break;
        	case plsqlParser.READ:
        	    this.state = 2489;
        	    this.match(plsqlParser.READ);
        	    this.state = 2490;
        	    this.match(plsqlParser.COMMITTED);
        	    break;
        	default:
        	    throw new antlr4.error.NoViableAltException(this);
        	}
        	break;
        case plsqlParser.USE:
        	this.state = 2493;
        	this.match(plsqlParser.USE);
        	this.state = 2494;
        	this.match(plsqlParser.ROLLBACK);
        	this.state = 2495;
        	this.match(plsqlParser.SEGMENT);
        	this.state = 2496;
        	this.rollback_segment_name();
        	break;
        case plsqlParser.EOF:
        case plsqlParser.NAME:
        case plsqlParser.SAVE:
        case plsqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
        this.state = 2501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NAME) {
            this.state = 2499;
            this.match(plsqlParser.NAME);
            this.state = 2500;
            this.quoted_string();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_constraint_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_set_constraint_command;
    return this;
}

Set_constraint_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_constraint_commandContext.prototype.constructor = Set_constraint_commandContext;

Set_constraint_commandContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Set_constraint_commandContext.prototype.CONSTRAINT = function() {
    return this.getToken(plsqlParser.CONSTRAINT, 0);
};

Set_constraint_commandContext.prototype.CONSTRAINTS = function() {
    return this.getToken(plsqlParser.CONSTRAINTS, 0);
};

Set_constraint_commandContext.prototype.IMMEDIATE = function() {
    return this.getToken(plsqlParser.IMMEDIATE, 0);
};

Set_constraint_commandContext.prototype.DEFERRED = function() {
    return this.getToken(plsqlParser.DEFERRED, 0);
};

Set_constraint_commandContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Set_constraint_commandContext.prototype.constraint_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constraint_nameContext);
    } else {
        return this.getTypedRuleContext(Constraint_nameContext,i);
    }
};

Set_constraint_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSet_constraint_command(this);
	}
};

Set_constraint_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSet_constraint_command(this);
	}
};




plsqlParser.Set_constraint_commandContext = Set_constraint_commandContext;

plsqlParser.prototype.set_constraint_command = function() {

    var localctx = new Set_constraint_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, plsqlParser.RULE_set_constraint_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2503;
        this.match(plsqlParser.SET);
        this.state = 2504;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.CONSTRAINT || _la===plsqlParser.CONSTRAINTS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2514;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.ALL:
            this.state = 2505;
            this.match(plsqlParser.ALL);
            break;
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 2506;
            this.constraint_name();
            this.state = 2511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2507;
                this.match(plsqlParser.COMMA);
                this.state = 2508;
                this.constraint_name();
                this.state = 2513;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2516;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.DEFERRED || _la===plsqlParser.IMMEDIATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Commit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_commit_statement;
    return this;
}

Commit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Commit_statementContext.prototype.constructor = Commit_statementContext;

Commit_statementContext.prototype.COMMIT = function() {
    return this.getToken(plsqlParser.COMMIT, 0);
};

Commit_statementContext.prototype.WORK = function() {
    return this.getToken(plsqlParser.WORK, 0);
};

Commit_statementContext.prototype.COMMENT = function() {
    return this.getToken(plsqlParser.COMMENT, 0);
};

Commit_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Commit_statementContext.prototype.FORCE = function() {
    return this.getToken(plsqlParser.FORCE, 0);
};

Commit_statementContext.prototype.write_clause = function() {
    return this.getTypedRuleContext(Write_clauseContext,0);
};

Commit_statementContext.prototype.CORRUPT_XID = function() {
    return this.getToken(plsqlParser.CORRUPT_XID, 0);
};

Commit_statementContext.prototype.CORRUPT_XID_ALL = function() {
    return this.getToken(plsqlParser.CORRUPT_XID_ALL, 0);
};

Commit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCommit_statement(this);
	}
};

Commit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCommit_statement(this);
	}
};




plsqlParser.Commit_statementContext = Commit_statementContext;

plsqlParser.prototype.commit_statement = function() {

    var localctx = new Commit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, plsqlParser.RULE_commit_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2518;
        this.match(plsqlParser.COMMIT);
        this.state = 2520;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WORK) {
            this.state = 2519;
            this.match(plsqlParser.WORK);
        }

        this.state = 2535;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case plsqlParser.COMMENT:
        	this.state = 2522;
        	this.match(plsqlParser.COMMENT);
        	this.state = 2523;
        	this.expression(0);
        	break;
        case plsqlParser.FORCE:
        	this.state = 2524;
        	this.match(plsqlParser.FORCE);
        	this.state = 2533;
        	this._errHandler.sync(this);
        	var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
        	switch(la_) {
        	case 1:
        	    this.state = 2525;
        	    this.match(plsqlParser.CORRUPT_XID);
        	    this.state = 2526;
        	    this.expression(0);
        	    break;

        	case 2:
        	    this.state = 2527;
        	    this.match(plsqlParser.CORRUPT_XID_ALL);
        	    break;

        	case 3:
        	    this.state = 2528;
        	    this.expression(0);
        	    this.state = 2531;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	    if(_la===plsqlParser.COMMA) {
        	        this.state = 2529;
        	        this.match(plsqlParser.COMMA);
        	        this.state = 2530;
        	        this.expression(0);
        	    }

        	    break;

        	}
        	break;
        case plsqlParser.EOF:
        case plsqlParser.SAVE:
        case plsqlParser.WRITE:
        case plsqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
        this.state = 2538;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WRITE) {
            this.state = 2537;
            this.write_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Write_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_write_clause;
    return this;
}

Write_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Write_clauseContext.prototype.constructor = Write_clauseContext;

Write_clauseContext.prototype.WRITE = function() {
    return this.getToken(plsqlParser.WRITE, 0);
};

Write_clauseContext.prototype.WAIT = function() {
    return this.getToken(plsqlParser.WAIT, 0);
};

Write_clauseContext.prototype.NOWAIT = function() {
    return this.getToken(plsqlParser.NOWAIT, 0);
};

Write_clauseContext.prototype.IMMEDIATE = function() {
    return this.getToken(plsqlParser.IMMEDIATE, 0);
};

Write_clauseContext.prototype.BATCH = function() {
    return this.getToken(plsqlParser.BATCH, 0);
};

Write_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWrite_clause(this);
	}
};

Write_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWrite_clause(this);
	}
};




plsqlParser.Write_clauseContext = Write_clauseContext;

plsqlParser.prototype.write_clause = function() {

    var localctx = new Write_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, plsqlParser.RULE_write_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2540;
        this.match(plsqlParser.WRITE);
        this.state = 2542;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NOWAIT || _la===plsqlParser.WAIT) {
            this.state = 2541;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.NOWAIT || _la===plsqlParser.WAIT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.BATCH || _la===plsqlParser.IMMEDIATE) {
            this.state = 2544;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.BATCH || _la===plsqlParser.IMMEDIATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollback_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_rollback_statement;
    return this;
}

Rollback_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollback_statementContext.prototype.constructor = Rollback_statementContext;

Rollback_statementContext.prototype.ROLLBACK = function() {
    return this.getToken(plsqlParser.ROLLBACK, 0);
};

Rollback_statementContext.prototype.WORK = function() {
    return this.getToken(plsqlParser.WORK, 0);
};

Rollback_statementContext.prototype.TO = function() {
    return this.getToken(plsqlParser.TO, 0);
};

Rollback_statementContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Rollback_statementContext.prototype.FORCE = function() {
    return this.getToken(plsqlParser.FORCE, 0);
};

Rollback_statementContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Rollback_statementContext.prototype.SAVEPOINT = function() {
    return this.getToken(plsqlParser.SAVEPOINT, 0);
};

Rollback_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRollback_statement(this);
	}
};

Rollback_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRollback_statement(this);
	}
};




plsqlParser.Rollback_statementContext = Rollback_statementContext;

plsqlParser.prototype.rollback_statement = function() {

    var localctx = new Rollback_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, plsqlParser.RULE_rollback_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2547;
        this.match(plsqlParser.ROLLBACK);
        this.state = 2549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WORK) {
            this.state = 2548;
            this.match(plsqlParser.WORK);
        }

        this.state = 2558;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case plsqlParser.TO:
        	this.state = 2551;
        	this.match(plsqlParser.TO);
        	this.state = 2553;
        	this._errHandler.sync(this);
        	var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
        	if(la_===1) {
        	    this.state = 2552;
        	    this.match(plsqlParser.SAVEPOINT);

        	}
        	this.state = 2555;
        	this.savepoint_name();
        	break;
        case plsqlParser.FORCE:
        	this.state = 2556;
        	this.match(plsqlParser.FORCE);
        	this.state = 2557;
        	this.quoted_string();
        	break;
        case plsqlParser.EOF:
        case plsqlParser.SAVE:
        case plsqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_savepoint_statement;
    return this;
}

Savepoint_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_statementContext.prototype.constructor = Savepoint_statementContext;

Savepoint_statementContext.prototype.SAVEPOINT = function() {
    return this.getToken(plsqlParser.SAVEPOINT, 0);
};

Savepoint_statementContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Savepoint_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSavepoint_statement(this);
	}
};

Savepoint_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSavepoint_statement(this);
	}
};




plsqlParser.Savepoint_statementContext = Savepoint_statementContext;

plsqlParser.prototype.savepoint_statement = function() {

    var localctx = new Savepoint_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, plsqlParser.RULE_savepoint_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2560;
        this.match(plsqlParser.SAVEPOINT);
        this.state = 2561;
        this.savepoint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explain_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_explain_statement;
    return this;
}

Explain_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explain_statementContext.prototype.constructor = Explain_statementContext;

Explain_statementContext.prototype.EXPLAIN = function() {
    return this.getToken(plsqlParser.EXPLAIN, 0);
};

Explain_statementContext.prototype.PLAN = function() {
    return this.getToken(plsqlParser.PLAN, 0);
};

Explain_statementContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Explain_statementContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Explain_statementContext.prototype.update_statement = function() {
    return this.getTypedRuleContext(Update_statementContext,0);
};

Explain_statementContext.prototype.delete_statement = function() {
    return this.getTypedRuleContext(Delete_statementContext,0);
};

Explain_statementContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Explain_statementContext.prototype.merge_statement = function() {
    return this.getTypedRuleContext(Merge_statementContext,0);
};

Explain_statementContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Explain_statementContext.prototype.STATEMENT_ID = function() {
    return this.getToken(plsqlParser.STATEMENT_ID, 0);
};

Explain_statementContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Explain_statementContext.prototype.INTO = function() {
    return this.getToken(plsqlParser.INTO, 0);
};

Explain_statementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Explain_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterExplain_statement(this);
	}
};

Explain_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitExplain_statement(this);
	}
};




plsqlParser.Explain_statementContext = Explain_statementContext;

plsqlParser.prototype.explain_statement = function() {

    var localctx = new Explain_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, plsqlParser.RULE_explain_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2563;
        this.match(plsqlParser.EXPLAIN);
        this.state = 2564;
        this.match(plsqlParser.PLAN);
        this.state = 2569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.SET) {
            this.state = 2565;
            this.match(plsqlParser.SET);
            this.state = 2566;
            this.match(plsqlParser.STATEMENT_ID);
            this.state = 2567;
            this.match(plsqlParser.EQUALS_OP);
            this.state = 2568;
            this.quoted_string();
        }

        this.state = 2573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.INTO) {
            this.state = 2571;
            this.match(plsqlParser.INTO);
            this.state = 2572;
            this.tableview_name();
        }

        this.state = 2575;
        this.match(plsqlParser.FOR);
        this.state = 2581;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.SELECT:
        case plsqlParser.WITH:
        case plsqlParser.LEFT_PAREN:
            this.state = 2576;
            this.select_statement();
            break;
        case plsqlParser.UPDATE:
            this.state = 2577;
            this.update_statement();
            break;
        case plsqlParser.DELETE:
            this.state = 2578;
            this.delete_statement();
            break;
        case plsqlParser.INSERT:
            this.state = 2579;
            this.insert_statement();
            break;
        case plsqlParser.MERGE:
            this.state = 2580;
            this.merge_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_select_statement;
    return this;
}

Select_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_statementContext.prototype.constructor = Select_statementContext;

Select_statementContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Select_statementContext.prototype.subquery_factoring_clause = function() {
    return this.getTypedRuleContext(Subquery_factoring_clauseContext,0);
};

Select_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSelect_statement(this);
	}
};

Select_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSelect_statement(this);
	}
};




plsqlParser.Select_statementContext = Select_statementContext;

plsqlParser.prototype.select_statement = function() {

    var localctx = new Select_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, plsqlParser.RULE_select_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WITH) {
            this.state = 2583;
            this.subquery_factoring_clause();
        }

        this.state = 2586;
        this.subquery(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_factoring_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_subquery_factoring_clause;
    return this;
}

Subquery_factoring_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_factoring_clauseContext.prototype.constructor = Subquery_factoring_clauseContext;

Subquery_factoring_clauseContext.prototype.WITH = function() {
    return this.getToken(plsqlParser.WITH, 0);
};

Subquery_factoring_clauseContext.prototype.factoring_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Factoring_elementContext);
    } else {
        return this.getTypedRuleContext(Factoring_elementContext,i);
    }
};

Subquery_factoring_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSubquery_factoring_clause(this);
	}
};

Subquery_factoring_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSubquery_factoring_clause(this);
	}
};




plsqlParser.Subquery_factoring_clauseContext = Subquery_factoring_clauseContext;

plsqlParser.prototype.subquery_factoring_clause = function() {

    var localctx = new Subquery_factoring_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, plsqlParser.RULE_subquery_factoring_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2588;
        this.match(plsqlParser.WITH);
        this.state = 2589;
        this.factoring_element();
        this.state = 2594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 2590;
            this.match(plsqlParser.COMMA);
            this.state = 2591;
            this.factoring_element();
            this.state = 2596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Factoring_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_factoring_element;
    return this;
}

Factoring_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Factoring_elementContext.prototype.constructor = Factoring_elementContext;

Factoring_elementContext.prototype.query_name = function() {
    return this.getTypedRuleContext(Query_nameContext,0);
};

Factoring_elementContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Factoring_elementContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Factoring_elementContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Factoring_elementContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Factoring_elementContext.prototype.search_clause = function() {
    return this.getTypedRuleContext(Search_clauseContext,0);
};

Factoring_elementContext.prototype.cycle_clause = function() {
    return this.getTypedRuleContext(Cycle_clauseContext,0);
};

Factoring_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFactoring_element(this);
	}
};

Factoring_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFactoring_element(this);
	}
};




plsqlParser.Factoring_elementContext = Factoring_elementContext;

plsqlParser.prototype.factoring_element = function() {

    var localctx = new Factoring_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, plsqlParser.RULE_factoring_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2597;
        this.query_name();
        this.state = 2609;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 2598;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2599;
            this.column_name();
            this.state = 2604;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2600;
                this.match(plsqlParser.COMMA);
                this.state = 2601;
                this.column_name();
                this.state = 2606;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2607;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 2611;
        this.match(plsqlParser.AS);
        this.state = 2612;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 2613;
        this.subquery(0);
        this.state = 2615;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ORDER) {
            this.state = 2614;
            this.order_by_clause();
        }

        this.state = 2617;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 2619;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.SEARCH) {
            this.state = 2618;
            this.search_clause();
        }

        this.state = 2622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.CYCLE) {
            this.state = 2621;
            this.cycle_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_search_clause;
    return this;
}

Search_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_clauseContext.prototype.constructor = Search_clauseContext;

Search_clauseContext.prototype.SEARCH = function() {
    return this.getToken(plsqlParser.SEARCH, 0);
};

Search_clauseContext.prototype.FIRST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.FIRST);
    } else {
        return this.getToken(plsqlParser.FIRST, i);
    }
};


Search_clauseContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Search_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Search_clauseContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Search_clauseContext.prototype.DEPTH = function() {
    return this.getToken(plsqlParser.DEPTH, 0);
};

Search_clauseContext.prototype.BREADTH = function() {
    return this.getToken(plsqlParser.BREADTH, 0);
};

Search_clauseContext.prototype.ASC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.ASC);
    } else {
        return this.getToken(plsqlParser.ASC, i);
    }
};


Search_clauseContext.prototype.DESC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.DESC);
    } else {
        return this.getToken(plsqlParser.DESC, i);
    }
};


Search_clauseContext.prototype.NULLS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.NULLS);
    } else {
        return this.getToken(plsqlParser.NULLS, i);
    }
};


Search_clauseContext.prototype.LAST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.LAST);
    } else {
        return this.getToken(plsqlParser.LAST, i);
    }
};


Search_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSearch_clause(this);
	}
};

Search_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSearch_clause(this);
	}
};




plsqlParser.Search_clauseContext = Search_clauseContext;

plsqlParser.prototype.search_clause = function() {

    var localctx = new Search_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, plsqlParser.RULE_search_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2624;
        this.match(plsqlParser.SEARCH);
        this.state = 2625;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.BREADTH || _la===plsqlParser.DEPTH)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2626;
        this.match(plsqlParser.FIRST);
        this.state = 2627;
        this.match(plsqlParser.BY);
        this.state = 2628;
        this.column_name();
        this.state = 2630;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ASC) {
            this.state = 2629;
            this.match(plsqlParser.ASC);
        }

        this.state = 2633;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.DESC) {
            this.state = 2632;
            this.match(plsqlParser.DESC);
        }

        this.state = 2637;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
        if(la_===1) {
            this.state = 2635;
            this.match(plsqlParser.NULLS);
            this.state = 2636;
            this.match(plsqlParser.FIRST);

        }
        this.state = 2641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NULLS) {
            this.state = 2639;
            this.match(plsqlParser.NULLS);
            this.state = 2640;
            this.match(plsqlParser.LAST);
        }

        this.state = 2661;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 2643;
            this.match(plsqlParser.COMMA);
            this.state = 2644;
            this.column_name();
            this.state = 2646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.ASC) {
                this.state = 2645;
                this.match(plsqlParser.ASC);
            }

            this.state = 2649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.DESC) {
                this.state = 2648;
                this.match(plsqlParser.DESC);
            }

            this.state = 2653;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
            if(la_===1) {
                this.state = 2651;
                this.match(plsqlParser.NULLS);
                this.state = 2652;
                this.match(plsqlParser.FIRST);

            }
            this.state = 2657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.NULLS) {
                this.state = 2655;
                this.match(plsqlParser.NULLS);
                this.state = 2656;
                this.match(plsqlParser.LAST);
            }

            this.state = 2663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2664;
        this.match(plsqlParser.SET);
        this.state = 2665;
        this.column_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cycle_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cycle_clause;
    return this;
}

Cycle_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cycle_clauseContext.prototype.constructor = Cycle_clauseContext;

Cycle_clauseContext.prototype.CYCLE = function() {
    return this.getToken(plsqlParser.CYCLE, 0);
};

Cycle_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Cycle_clauseContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Cycle_clauseContext.prototype.TO = function() {
    return this.getToken(plsqlParser.TO, 0);
};

Cycle_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Cycle_clauseContext.prototype.DEFAULT = function() {
    return this.getToken(plsqlParser.DEFAULT, 0);
};

Cycle_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCycle_clause(this);
	}
};

Cycle_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCycle_clause(this);
	}
};




plsqlParser.Cycle_clauseContext = Cycle_clauseContext;

plsqlParser.prototype.cycle_clause = function() {

    var localctx = new Cycle_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, plsqlParser.RULE_cycle_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2667;
        this.match(plsqlParser.CYCLE);
        this.state = 2668;
        this.column_name();
        this.state = 2673;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 2669;
            this.match(plsqlParser.COMMA);
            this.state = 2670;
            this.column_name();
            this.state = 2675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2676;
        this.match(plsqlParser.SET);
        this.state = 2677;
        this.column_name();
        this.state = 2678;
        this.match(plsqlParser.TO);
        this.state = 2679;
        this.expression(0);
        this.state = 2680;
        this.match(plsqlParser.DEFAULT);
        this.state = 2681;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;


 
SubqueryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SubqueryCompoundContext(parser, ctx) {
	SubqueryContext.call(this, parser);
    this.left = null; // SubqueryContext;
    this.op = null; // Subquery_operation_partContext;
    this.right = null; // SubqueryContext;
    SubqueryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryCompoundContext.prototype = Object.create(SubqueryContext.prototype);
SubqueryCompoundContext.prototype.constructor = SubqueryCompoundContext;

plsqlParser.SubqueryCompoundContext = SubqueryCompoundContext;

SubqueryCompoundContext.prototype.subquery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubqueryContext);
    } else {
        return this.getTypedRuleContext(SubqueryContext,i);
    }
};

SubqueryCompoundContext.prototype.subquery_operation_part = function() {
    return this.getTypedRuleContext(Subquery_operation_partContext,0);
};
SubqueryCompoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSubqueryCompound(this);
	}
};

SubqueryCompoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSubqueryCompound(this);
	}
};


function IgnoreSubqueryContext(parser, ctx) {
	SubqueryContext.call(this, parser);
    SubqueryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IgnoreSubqueryContext.prototype = Object.create(SubqueryContext.prototype);
IgnoreSubqueryContext.prototype.constructor = IgnoreSubqueryContext;

plsqlParser.IgnoreSubqueryContext = IgnoreSubqueryContext;

IgnoreSubqueryContext.prototype.query_block = function() {
    return this.getTypedRuleContext(Query_blockContext,0);
};
IgnoreSubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIgnoreSubquery(this);
	}
};

IgnoreSubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIgnoreSubquery(this);
	}
};


function SubqueryParenContext(parser, ctx) {
	SubqueryContext.call(this, parser);
    SubqueryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryParenContext.prototype = Object.create(SubqueryContext.prototype);
SubqueryParenContext.prototype.constructor = SubqueryParenContext;

plsqlParser.SubqueryParenContext = SubqueryParenContext;

SubqueryParenContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};
SubqueryParenContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSubqueryParen(this);
	}
};

SubqueryParenContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSubqueryParen(this);
	}
};



plsqlParser.prototype.subquery = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SubqueryContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 316;
    this.enterRecursionRule(localctx, 316, plsqlParser.RULE_subquery, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2689;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.LEFT_PAREN:
            localctx = new SubqueryParenContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2684;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2685;
            this.subquery(0);
            this.state = 2686;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        case plsqlParser.SELECT:
            localctx = new IgnoreSubqueryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2688;
            this.query_block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2697;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,290,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SubqueryCompoundContext(this, new SubqueryContext(this, _parentctx, _parentState));
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_subquery);
                this.state = 2691;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 2692;
                localctx.op = this.subquery_operation_part();
                this.state = 2693;
                localctx.right = this.subquery(3); 
            }
            this.state = 2699;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,290,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Subquery_operation_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_subquery_operation_part;
    return this;
}

Subquery_operation_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_operation_partContext.prototype.constructor = Subquery_operation_partContext;

Subquery_operation_partContext.prototype.UNION = function() {
    return this.getToken(plsqlParser.UNION, 0);
};

Subquery_operation_partContext.prototype.INTERSECT = function() {
    return this.getToken(plsqlParser.INTERSECT, 0);
};

Subquery_operation_partContext.prototype.MINUS = function() {
    return this.getToken(plsqlParser.MINUS, 0);
};

Subquery_operation_partContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Subquery_operation_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSubquery_operation_part(this);
	}
};

Subquery_operation_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSubquery_operation_part(this);
	}
};




plsqlParser.Subquery_operation_partContext = Subquery_operation_partContext;

plsqlParser.prototype.subquery_operation_part = function() {

    var localctx = new Subquery_operation_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, plsqlParser.RULE_subquery_operation_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2706;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.UNION:
            this.state = 2700;
            this.match(plsqlParser.UNION);
            this.state = 2702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.ALL) {
                this.state = 2701;
                this.match(plsqlParser.ALL);
            }

            break;
        case plsqlParser.INTERSECT:
            this.state = 2704;
            this.match(plsqlParser.INTERSECT);
            break;
        case plsqlParser.MINUS:
            this.state = 2705;
            this.match(plsqlParser.MINUS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_query_block;
    this.pref = null; // Token
    this._selected_element = null; // Selected_elementContext
    this.target_list = []; // of Selected_elementContexts
    return this;
}

Query_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_blockContext.prototype.constructor = Query_blockContext;

Query_blockContext.prototype.SELECT = function() {
    return this.getToken(plsqlParser.SELECT, 0);
};

Query_blockContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Query_blockContext.prototype.selected_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Selected_elementContext);
    } else {
        return this.getTypedRuleContext(Selected_elementContext,i);
    }
};

Query_blockContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Query_blockContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Query_blockContext.prototype.hierarchical_query_clause = function() {
    return this.getTypedRuleContext(Hierarchical_query_clauseContext,0);
};

Query_blockContext.prototype.group_by_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_by_clauseContext);
    } else {
        return this.getTypedRuleContext(Group_by_clauseContext,i);
    }
};

Query_blockContext.prototype.having_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Having_clauseContext);
    } else {
        return this.getTypedRuleContext(Having_clauseContext,i);
    }
};

Query_blockContext.prototype.model_clause = function() {
    return this.getTypedRuleContext(Model_clauseContext,0);
};

Query_blockContext.prototype.for_update_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(For_update_clauseContext);
    } else {
        return this.getTypedRuleContext(For_update_clauseContext,i);
    }
};

Query_blockContext.prototype.order_by_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_clauseContext);
    } else {
        return this.getTypedRuleContext(Order_by_clauseContext,i);
    }
};

Query_blockContext.prototype.limit_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Limit_clauseContext);
    } else {
        return this.getTypedRuleContext(Limit_clauseContext,i);
    }
};

Query_blockContext.prototype.DISTINCT = function() {
    return this.getToken(plsqlParser.DISTINCT, 0);
};

Query_blockContext.prototype.UNIQUE = function() {
    return this.getToken(plsqlParser.UNIQUE, 0);
};

Query_blockContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Query_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterQuery_block(this);
	}
};

Query_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitQuery_block(this);
	}
};




plsqlParser.Query_blockContext = Query_blockContext;

plsqlParser.prototype.query_block = function() {

    var localctx = new Query_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, plsqlParser.RULE_query_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2708;
        this.match(plsqlParser.SELECT);
        this.state = 2710;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
        if(la_===1) {
            this.state = 2709;
            localctx.pref = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.ALL || _la===plsqlParser.DISTINCT || _la===plsqlParser.UNIQUE)) {
                localctx.pref = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }

        this.state = 2712;
        localctx._selected_element = this.selected_element();
        localctx.target_list.push(localctx._selected_element);
        this.state = 2717;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 2713;
            this.match(plsqlParser.COMMA);
            this.state = 2714;
            localctx._selected_element = this.selected_element();
            localctx.target_list.push(localctx._selected_element);
            this.state = 2719;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.BULK || _la===plsqlParser.INTO) {
            this.state = 2720;
            this.into_clause();
        }

        this.state = 2723;
        this.from_clause();
        this.state = 2725;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
        if(la_===1) {
            this.state = 2724;
            this.where_clause();

        }
        this.state = 2728;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
        if(la_===1) {
            this.state = 2727;
            this.hierarchical_query_clause();

        }
        this.state = 2734;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,299,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2732;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case plsqlParser.GROUP:
                    this.state = 2730;
                    this.group_by_clause();
                    break;
                case plsqlParser.HAVING:
                    this.state = 2731;
                    this.having_clause();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 2736;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,299,this._ctx);
        }

        this.state = 2738;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
        if(la_===1) {
            this.state = 2737;
            this.model_clause();

        }
        this.state = 2745;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,302,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2743;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case plsqlParser.FOR:
                    this.state = 2740;
                    this.for_update_clause();
                    break;
                case plsqlParser.ORDER:
                    this.state = 2741;
                    this.order_by_clause();
                    break;
                case plsqlParser.LIMIT:
                    this.state = 2742;
                    this.limit_clause();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 2747;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,302,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selected_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_selected_element;
    return this;
}

Selected_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_elementContext.prototype.constructor = Selected_elementContext;


 
Selected_elementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StarTableContext(parser, ctx) {
	Selected_elementContext.call(this, parser);
    Selected_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StarTableContext.prototype = Object.create(Selected_elementContext.prototype);
StarTableContext.prototype.constructor = StarTableContext;

plsqlParser.StarTableContext = StarTableContext;

StarTableContext.prototype.dot_id = function() {
    return this.getTypedRuleContext(Dot_idContext,0);
};

StarTableContext.prototype.star = function() {
    return this.getTypedRuleContext(StarContext,0);
};
StarTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterStarTable(this);
	}
};

StarTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitStarTable(this);
	}
};


function IgnoreTableview_nameContext(parser, ctx) {
	Selected_elementContext.call(this, parser);
    Selected_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IgnoreTableview_nameContext.prototype = Object.create(Selected_elementContext.prototype);
IgnoreTableview_nameContext.prototype.constructor = IgnoreTableview_nameContext;

plsqlParser.IgnoreTableview_nameContext = IgnoreTableview_nameContext;

IgnoreTableview_nameContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};
IgnoreTableview_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIgnoreTableview_name(this);
	}
};

IgnoreTableview_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIgnoreTableview_name(this);
	}
};


function Alias_exprContext(parser, ctx) {
	Selected_elementContext.call(this, parser);
    this.expr = null; // ExpressionContext;
    this.alias = null; // Column_aliasContext;
    Selected_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Alias_exprContext.prototype = Object.create(Selected_elementContext.prototype);
Alias_exprContext.prototype.constructor = Alias_exprContext;

plsqlParser.Alias_exprContext = Alias_exprContext;

Alias_exprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Alias_exprContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};
Alias_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlias_expr(this);
	}
};

Alias_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlias_expr(this);
	}
};


function Star1Context(parser, ctx) {
	Selected_elementContext.call(this, parser);
    Selected_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Star1Context.prototype = Object.create(Selected_elementContext.prototype);
Star1Context.prototype.constructor = Star1Context;

plsqlParser.Star1Context = Star1Context;

Star1Context.prototype.star = function() {
    return this.getTypedRuleContext(StarContext,0);
};
Star1Context.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterStar1(this);
	}
};

Star1Context.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitStar1(this);
	}
};



plsqlParser.Selected_elementContext = Selected_elementContext;

plsqlParser.prototype.selected_element = function() {

    var localctx = new Selected_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, plsqlParser.RULE_selected_element);
    try {
        this.state = 2758;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
        switch(la_) {
        case 1:
            localctx = new Star1Context(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2748;
            this.star();
            break;

        case 2:
            localctx = new StarTableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2749;
            this.dot_id();
            this.state = 2750;
            this.match(plsqlParser.PERIOD);
            this.state = 2751;
            this.star();
            break;

        case 3:
            localctx = new IgnoreTableview_nameContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2753;
            this.tableview_name();
            break;

        case 4:
            localctx = new Alias_exprContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2754;
            localctx.expr = this.expression(0);
            this.state = 2756;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
            if(la_===1) {
                this.state = 2755;
                localctx.alias = this.column_alias();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function From_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_from_clause;
    return this;
}

From_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_clauseContext.prototype.constructor = From_clauseContext;

From_clauseContext.prototype.FROM = function() {
    return this.getToken(plsqlParser.FROM, 0);
};

From_clauseContext.prototype.table_ref_list = function() {
    return this.getTypedRuleContext(Table_ref_listContext,0);
};

From_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFrom_clause(this);
	}
};

From_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFrom_clause(this);
	}
};




plsqlParser.From_clauseContext = From_clauseContext;

plsqlParser.prototype.from_clause = function() {

    var localctx = new From_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, plsqlParser.RULE_from_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2760;
        this.match(plsqlParser.FROM);
        this.state = 2761;
        this.table_ref_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_ref_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_ref_list;
    return this;
}

Table_ref_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_ref_listContext.prototype.constructor = Table_ref_listContext;

Table_ref_listContext.prototype.table_ref = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_refContext);
    } else {
        return this.getTypedRuleContext(Table_refContext,i);
    }
};

Table_ref_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_ref_list(this);
	}
};

Table_ref_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_ref_list(this);
	}
};




plsqlParser.Table_ref_listContext = Table_ref_listContext;

plsqlParser.prototype.table_ref_list = function() {

    var localctx = new Table_ref_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, plsqlParser.RULE_table_ref_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2763;
        this.table_ref();
        this.state = 2768;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,305,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2764;
                this.match(plsqlParser.COMMA);
                this.state = 2765;
                this.table_ref(); 
            }
            this.state = 2770;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,305,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_refContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_ref;
    return this;
}

Table_refContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_refContext.prototype.constructor = Table_refContext;

Table_refContext.prototype.table_ref_aux = function() {
    return this.getTypedRuleContext(Table_ref_auxContext,0);
};

Table_refContext.prototype.join_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_clauseContext);
    } else {
        return this.getTypedRuleContext(Join_clauseContext,i);
    }
};

Table_refContext.prototype.pivot_clause = function() {
    return this.getTypedRuleContext(Pivot_clauseContext,0);
};

Table_refContext.prototype.unpivot_clause = function() {
    return this.getTypedRuleContext(Unpivot_clauseContext,0);
};

Table_refContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_ref(this);
	}
};

Table_refContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_ref(this);
	}
};




plsqlParser.Table_refContext = Table_refContext;

plsqlParser.prototype.table_ref = function() {

    var localctx = new Table_refContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, plsqlParser.RULE_table_ref);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2771;
        this.table_ref_aux();
        this.state = 2775;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,306,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2772;
                this.join_clause(); 
            }
            this.state = 2777;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,306,this._ctx);
        }

        this.state = 2780;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
        if(la_===1) {
            this.state = 2778;
            this.pivot_clause();

        } else if(la_===2) {
            this.state = 2779;
            this.unpivot_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_ref_auxContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_ref_aux;
    return this;
}

Table_ref_auxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_ref_auxContext.prototype.constructor = Table_ref_auxContext;

Table_ref_auxContext.prototype.dml_table_expression_clause = function() {
    return this.getTypedRuleContext(Dml_table_expression_clauseContext,0);
};

Table_ref_auxContext.prototype.table_ref = function() {
    return this.getTypedRuleContext(Table_refContext,0);
};

Table_ref_auxContext.prototype.ONLY = function() {
    return this.getToken(plsqlParser.ONLY, 0);
};

Table_ref_auxContext.prototype.flashback_query_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Flashback_query_clauseContext);
    } else {
        return this.getTypedRuleContext(Flashback_query_clauseContext,i);
    }
};

Table_ref_auxContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Table_ref_auxContext.prototype.pivot_clause = function() {
    return this.getTypedRuleContext(Pivot_clauseContext,0);
};

Table_ref_auxContext.prototype.unpivot_clause = function() {
    return this.getTypedRuleContext(Unpivot_clauseContext,0);
};

Table_ref_auxContext.prototype.subquery_operation_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subquery_operation_partContext);
    } else {
        return this.getTypedRuleContext(Subquery_operation_partContext,i);
    }
};

Table_ref_auxContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_ref_aux(this);
	}
};

Table_ref_auxContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_ref_aux(this);
	}
};




plsqlParser.Table_ref_auxContext = Table_ref_auxContext;

plsqlParser.prototype.table_ref_aux = function() {

    var localctx = new Table_ref_auxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, plsqlParser.RULE_table_ref_aux);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2810;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2782;
            this.dml_table_expression_clause();
            this.state = 2785;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
            if(la_===1) {
                this.state = 2783;
                this.pivot_clause();

            } else if(la_===2) {
                this.state = 2784;
                this.unpivot_clause();

            }
            break;

        case 2:
            this.state = 2787;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2788;
            this.table_ref();
            this.state = 2792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.INTERSECT || _la===plsqlParser.MINUS || _la===plsqlParser.UNION) {
                this.state = 2789;
                this.subquery_operation_part();
                this.state = 2794;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2795;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 2798;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
            if(la_===1) {
                this.state = 2796;
                this.pivot_clause();

            } else if(la_===2) {
                this.state = 2797;
                this.unpivot_clause();

            }
            break;

        case 3:
            this.state = 2800;
            this.match(plsqlParser.ONLY);
            this.state = 2801;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2802;
            this.dml_table_expression_clause();
            this.state = 2803;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 4:
            this.state = 2805;
            this.dml_table_expression_clause();
            this.state = 2808;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
            if(la_===1) {
                this.state = 2806;
                this.pivot_clause();

            } else if(la_===2) {
                this.state = 2807;
                this.unpivot_clause();

            }
            break;

        }
        this.state = 2815;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,313,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2812;
                this.flashback_query_clause(); 
            }
            this.state = 2817;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,313,this._ctx);
        }

        this.state = 2819;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
        if(la_===1) {
            this.state = 2818;
            this.table_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_join_clause;
    return this;
}

Join_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_clauseContext.prototype.constructor = Join_clauseContext;

Join_clauseContext.prototype.JOIN = function() {
    return this.getToken(plsqlParser.JOIN, 0);
};

Join_clauseContext.prototype.table_ref_aux = function() {
    return this.getTypedRuleContext(Table_ref_auxContext,0);
};

Join_clauseContext.prototype.query_partition_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_partition_clauseContext);
    } else {
        return this.getTypedRuleContext(Query_partition_clauseContext,i);
    }
};

Join_clauseContext.prototype.INNER = function() {
    return this.getToken(plsqlParser.INNER, 0);
};

Join_clauseContext.prototype.outer_join_type = function() {
    return this.getTypedRuleContext(Outer_join_typeContext,0);
};

Join_clauseContext.prototype.join_on_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_on_partContext);
    } else {
        return this.getTypedRuleContext(Join_on_partContext,i);
    }
};

Join_clauseContext.prototype.join_using_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_using_partContext);
    } else {
        return this.getTypedRuleContext(Join_using_partContext,i);
    }
};

Join_clauseContext.prototype.CROSS = function() {
    return this.getToken(plsqlParser.CROSS, 0);
};

Join_clauseContext.prototype.NATURAL = function() {
    return this.getToken(plsqlParser.NATURAL, 0);
};

Join_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterJoin_clause(this);
	}
};

Join_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitJoin_clause(this);
	}
};




plsqlParser.Join_clauseContext = Join_clauseContext;

plsqlParser.prototype.join_clause = function() {

    var localctx = new Join_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, plsqlParser.RULE_join_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PARTITION) {
            this.state = 2821;
            this.query_partition_clause();
        }

        this.state = 2825;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.CROSS || _la===plsqlParser.NATURAL) {
            this.state = 2824;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.CROSS || _la===plsqlParser.NATURAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2829;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case plsqlParser.INNER:
        	this.state = 2827;
        	this.match(plsqlParser.INNER);
        	break;
        case plsqlParser.FULL:
        case plsqlParser.LEFT:
        case plsqlParser.RIGHT:
        	this.state = 2828;
        	this.outer_join_type();
        	break;
        case plsqlParser.JOIN:
        	break;
        default:
        	break;
        }
        this.state = 2831;
        this.match(plsqlParser.JOIN);
        this.state = 2832;
        this.table_ref_aux();
        this.state = 2834;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
        if(la_===1) {
            this.state = 2833;
            this.query_partition_clause();

        }
        this.state = 2840;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,320,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2838;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case plsqlParser.ON:
                    this.state = 2836;
                    this.join_on_part();
                    break;
                case plsqlParser.USING:
                    this.state = 2837;
                    this.join_using_part();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 2842;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,320,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_on_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_join_on_part;
    return this;
}

Join_on_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_on_partContext.prototype.constructor = Join_on_partContext;

Join_on_partContext.prototype.ON = function() {
    return this.getToken(plsqlParser.ON, 0);
};

Join_on_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Join_on_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterJoin_on_part(this);
	}
};

Join_on_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitJoin_on_part(this);
	}
};




plsqlParser.Join_on_partContext = Join_on_partContext;

plsqlParser.prototype.join_on_part = function() {

    var localctx = new Join_on_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, plsqlParser.RULE_join_on_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2843;
        this.match(plsqlParser.ON);
        this.state = 2844;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_using_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_join_using_part;
    return this;
}

Join_using_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_using_partContext.prototype.constructor = Join_using_partContext;

Join_using_partContext.prototype.USING = function() {
    return this.getToken(plsqlParser.USING, 0);
};

Join_using_partContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Join_using_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterJoin_using_part(this);
	}
};

Join_using_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitJoin_using_part(this);
	}
};




plsqlParser.Join_using_partContext = Join_using_partContext;

plsqlParser.prototype.join_using_part = function() {

    var localctx = new Join_using_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, plsqlParser.RULE_join_using_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2846;
        this.match(plsqlParser.USING);
        this.state = 2847;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 2848;
        this.column_name();
        this.state = 2853;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 2849;
            this.match(plsqlParser.COMMA);
            this.state = 2850;
            this.column_name();
            this.state = 2855;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2856;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_outer_join_type;
    return this;
}

Outer_join_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_typeContext.prototype.constructor = Outer_join_typeContext;

Outer_join_typeContext.prototype.FULL = function() {
    return this.getToken(plsqlParser.FULL, 0);
};

Outer_join_typeContext.prototype.LEFT = function() {
    return this.getToken(plsqlParser.LEFT, 0);
};

Outer_join_typeContext.prototype.RIGHT = function() {
    return this.getToken(plsqlParser.RIGHT, 0);
};

Outer_join_typeContext.prototype.OUTER = function() {
    return this.getToken(plsqlParser.OUTER, 0);
};

Outer_join_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOuter_join_type(this);
	}
};

Outer_join_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOuter_join_type(this);
	}
};




plsqlParser.Outer_join_typeContext = Outer_join_typeContext;

plsqlParser.prototype.outer_join_type = function() {

    var localctx = new Outer_join_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, plsqlParser.RULE_outer_join_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2858;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.FULL || _la===plsqlParser.LEFT || _la===plsqlParser.RIGHT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2860;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.OUTER) {
            this.state = 2859;
            this.match(plsqlParser.OUTER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_partition_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_query_partition_clause;
    return this;
}

Query_partition_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_partition_clauseContext.prototype.constructor = Query_partition_clauseContext;

Query_partition_clauseContext.prototype.PARTITION = function() {
    return this.getToken(plsqlParser.PARTITION, 0);
};

Query_partition_clauseContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Query_partition_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Query_partition_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Query_partition_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Query_partition_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterQuery_partition_clause(this);
	}
};

Query_partition_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitQuery_partition_clause(this);
	}
};




plsqlParser.Query_partition_clauseContext = Query_partition_clauseContext;

plsqlParser.prototype.query_partition_clause = function() {

    var localctx = new Query_partition_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, plsqlParser.RULE_query_partition_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2862;
        this.match(plsqlParser.PARTITION);
        this.state = 2863;
        this.match(plsqlParser.BY);
        this.state = 2877;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2864;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2865;
            this.subquery(0);
            this.state = 2866;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 2868;
            this.expression_list();
            break;

        case 3:
            this.state = 2869;
            this.expression(0);
            this.state = 2874;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,323,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2870;
                    this.match(plsqlParser.COMMA);
                    this.state = 2871;
                    this.expression(0); 
                }
                this.state = 2876;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,323,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flashback_query_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_flashback_query_clause;
    return this;
}

Flashback_query_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flashback_query_clauseContext.prototype.constructor = Flashback_query_clauseContext;

Flashback_query_clauseContext.prototype.VERSIONS = function() {
    return this.getToken(plsqlParser.VERSIONS, 0);
};

Flashback_query_clauseContext.prototype.BETWEEN = function() {
    return this.getToken(plsqlParser.BETWEEN, 0);
};

Flashback_query_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Flashback_query_clauseContext.prototype.SCN = function() {
    return this.getToken(plsqlParser.SCN, 0);
};

Flashback_query_clauseContext.prototype.TIMESTAMP = function() {
    return this.getToken(plsqlParser.TIMESTAMP, 0);
};

Flashback_query_clauseContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Flashback_query_clauseContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Flashback_query_clauseContext.prototype.SNAPSHOT = function() {
    return this.getToken(plsqlParser.SNAPSHOT, 0);
};

Flashback_query_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFlashback_query_clause(this);
	}
};

Flashback_query_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFlashback_query_clause(this);
	}
};




plsqlParser.Flashback_query_clauseContext = Flashback_query_clauseContext;

plsqlParser.prototype.flashback_query_clause = function() {

    var localctx = new Flashback_query_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, plsqlParser.RULE_flashback_query_clause);
    var _la = 0; // Token type
    try {
        this.state = 2887;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.VERSIONS:
            this.enterOuterAlt(localctx, 1);
            this.state = 2879;
            this.match(plsqlParser.VERSIONS);
            this.state = 2880;
            this.match(plsqlParser.BETWEEN);
            this.state = 2881;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.SCN || _la===plsqlParser.TIMESTAMP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2882;
            this.expression(0);
            break;
        case plsqlParser.AS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2883;
            this.match(plsqlParser.AS);
            this.state = 2884;
            this.match(plsqlParser.OF);
            this.state = 2885;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.SCN || _la===plsqlParser.SNAPSHOT || _la===plsqlParser.TIMESTAMP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2886;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pivot_clause;
    return this;
}

Pivot_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_clauseContext.prototype.constructor = Pivot_clauseContext;

Pivot_clauseContext.prototype.PIVOT = function() {
    return this.getToken(plsqlParser.PIVOT, 0);
};

Pivot_clauseContext.prototype.pivot_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pivot_elementContext);
    } else {
        return this.getTypedRuleContext(Pivot_elementContext,i);
    }
};

Pivot_clauseContext.prototype.pivot_for_clause = function() {
    return this.getTypedRuleContext(Pivot_for_clauseContext,0);
};

Pivot_clauseContext.prototype.pivot_in_clause = function() {
    return this.getTypedRuleContext(Pivot_in_clauseContext,0);
};

Pivot_clauseContext.prototype.XML = function() {
    return this.getToken(plsqlParser.XML, 0);
};

Pivot_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPivot_clause(this);
	}
};

Pivot_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPivot_clause(this);
	}
};




plsqlParser.Pivot_clauseContext = Pivot_clauseContext;

plsqlParser.prototype.pivot_clause = function() {

    var localctx = new Pivot_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, plsqlParser.RULE_pivot_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2889;
        this.match(plsqlParser.PIVOT);
        this.state = 2891;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.XML) {
            this.state = 2890;
            this.match(plsqlParser.XML);
        }

        this.state = 2893;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 2894;
        this.pivot_element();
        this.state = 2899;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 2895;
            this.match(plsqlParser.COMMA);
            this.state = 2896;
            this.pivot_element();
            this.state = 2901;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2902;
        this.pivot_for_clause();
        this.state = 2903;
        this.pivot_in_clause();
        this.state = 2904;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pivot_element;
    return this;
}

Pivot_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_elementContext.prototype.constructor = Pivot_elementContext;

Pivot_elementContext.prototype.aggregate_function_name = function() {
    return this.getTypedRuleContext(Aggregate_function_nameContext,0);
};

Pivot_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pivot_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Pivot_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPivot_element(this);
	}
};

Pivot_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPivot_element(this);
	}
};




plsqlParser.Pivot_elementContext = Pivot_elementContext;

plsqlParser.prototype.pivot_element = function() {

    var localctx = new Pivot_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, plsqlParser.RULE_pivot_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2906;
        this.aggregate_function_name();
        this.state = 2907;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 2908;
        this.expression(0);
        this.state = 2909;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 2911;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.AS - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 2910;
            this.column_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_for_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pivot_for_clause;
    return this;
}

Pivot_for_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_for_clauseContext.prototype.constructor = Pivot_for_clauseContext;

Pivot_for_clauseContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Pivot_for_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Pivot_for_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPivot_for_clause(this);
	}
};

Pivot_for_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPivot_for_clause(this);
	}
};




plsqlParser.Pivot_for_clauseContext = Pivot_for_clauseContext;

plsqlParser.prototype.pivot_for_clause = function() {

    var localctx = new Pivot_for_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, plsqlParser.RULE_pivot_for_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2913;
        this.match(plsqlParser.FOR);
        this.state = 2926;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 2914;
            this.column_name();
            break;
        case plsqlParser.LEFT_PAREN:
            this.state = 2915;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2916;
            this.column_name();
            this.state = 2921;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2917;
                this.match(plsqlParser.COMMA);
                this.state = 2918;
                this.column_name();
                this.state = 2923;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2924;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pivot_in_clause;
    return this;
}

Pivot_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clauseContext.prototype.constructor = Pivot_in_clauseContext;

Pivot_in_clauseContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Pivot_in_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Pivot_in_clauseContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.ANY);
    } else {
        return this.getToken(plsqlParser.ANY, i);
    }
};


Pivot_in_clauseContext.prototype.pivot_in_clause_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pivot_in_clause_elementContext);
    } else {
        return this.getTypedRuleContext(Pivot_in_clause_elementContext,i);
    }
};

Pivot_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPivot_in_clause(this);
	}
};

Pivot_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPivot_in_clause(this);
	}
};




plsqlParser.Pivot_in_clauseContext = Pivot_in_clauseContext;

plsqlParser.prototype.pivot_in_clause = function() {

    var localctx = new Pivot_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, plsqlParser.RULE_pivot_in_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2928;
        this.match(plsqlParser.IN);
        this.state = 2929;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 2947;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2930;
            this.subquery(0);
            break;

        case 2:
            this.state = 2931;
            this.match(plsqlParser.ANY);
            this.state = 2936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2932;
                this.match(plsqlParser.COMMA);
                this.state = 2933;
                this.match(plsqlParser.ANY);
                this.state = 2938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.state = 2939;
            this.pivot_in_clause_element();
            this.state = 2944;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2940;
                this.match(plsqlParser.COMMA);
                this.state = 2941;
                this.pivot_in_clause_element();
                this.state = 2946;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
        this.state = 2949;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clause_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pivot_in_clause_element;
    return this;
}

Pivot_in_clause_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clause_elementContext.prototype.constructor = Pivot_in_clause_elementContext;

Pivot_in_clause_elementContext.prototype.pivot_in_clause_elements = function() {
    return this.getTypedRuleContext(Pivot_in_clause_elementsContext,0);
};

Pivot_in_clause_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Pivot_in_clause_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPivot_in_clause_element(this);
	}
};

Pivot_in_clause_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPivot_in_clause_element(this);
	}
};




plsqlParser.Pivot_in_clause_elementContext = Pivot_in_clause_elementContext;

plsqlParser.prototype.pivot_in_clause_element = function() {

    var localctx = new Pivot_in_clause_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, plsqlParser.RULE_pivot_in_clause_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2951;
        this.pivot_in_clause_elements();
        this.state = 2953;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.AS - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 2952;
            this.column_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clause_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_pivot_in_clause_elements;
    return this;
}

Pivot_in_clause_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clause_elementsContext.prototype.constructor = Pivot_in_clause_elementsContext;

Pivot_in_clause_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pivot_in_clause_elementsContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Pivot_in_clause_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPivot_in_clause_elements(this);
	}
};

Pivot_in_clause_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPivot_in_clause_elements(this);
	}
};




plsqlParser.Pivot_in_clause_elementsContext = Pivot_in_clause_elementsContext;

plsqlParser.prototype.pivot_in_clause_elements = function() {

    var localctx = new Pivot_in_clause_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, plsqlParser.RULE_pivot_in_clause_elements);
    try {
        this.state = 2957;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2955;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2956;
            this.expression_list();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_unpivot_clause;
    return this;
}

Unpivot_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_clauseContext.prototype.constructor = Unpivot_clauseContext;

Unpivot_clauseContext.prototype.UNPIVOT = function() {
    return this.getToken(plsqlParser.UNPIVOT, 0);
};

Unpivot_clauseContext.prototype.pivot_for_clause = function() {
    return this.getTypedRuleContext(Pivot_for_clauseContext,0);
};

Unpivot_clauseContext.prototype.unpivot_in_clause = function() {
    return this.getTypedRuleContext(Unpivot_in_clauseContext,0);
};

Unpivot_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Unpivot_clauseContext.prototype.NULLS = function() {
    return this.getToken(plsqlParser.NULLS, 0);
};

Unpivot_clauseContext.prototype.INCLUDE = function() {
    return this.getToken(plsqlParser.INCLUDE, 0);
};

Unpivot_clauseContext.prototype.EXCLUDE = function() {
    return this.getToken(plsqlParser.EXCLUDE, 0);
};

Unpivot_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUnpivot_clause(this);
	}
};

Unpivot_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUnpivot_clause(this);
	}
};




plsqlParser.Unpivot_clauseContext = Unpivot_clauseContext;

plsqlParser.prototype.unpivot_clause = function() {

    var localctx = new Unpivot_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, plsqlParser.RULE_unpivot_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2959;
        this.match(plsqlParser.UNPIVOT);
        this.state = 2962;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.EXCLUDE || _la===plsqlParser.INCLUDE) {
            this.state = 2960;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.EXCLUDE || _la===plsqlParser.INCLUDE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2961;
            this.match(plsqlParser.NULLS);
        }

        this.state = 2964;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 2977;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 2965;
            this.column_name();
            break;
        case plsqlParser.LEFT_PAREN:
            this.state = 2966;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2967;
            this.column_name();
            this.state = 2972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2968;
                this.match(plsqlParser.COMMA);
                this.state = 2969;
                this.column_name();
                this.state = 2974;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2975;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2979;
        this.pivot_for_clause();
        this.state = 2980;
        this.unpivot_in_clause();
        this.state = 2981;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_unpivot_in_clause;
    return this;
}

Unpivot_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_in_clauseContext.prototype.constructor = Unpivot_in_clauseContext;

Unpivot_in_clauseContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Unpivot_in_clauseContext.prototype.unpivot_in_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unpivot_in_elementsContext);
    } else {
        return this.getTypedRuleContext(Unpivot_in_elementsContext,i);
    }
};

Unpivot_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUnpivot_in_clause(this);
	}
};

Unpivot_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUnpivot_in_clause(this);
	}
};




plsqlParser.Unpivot_in_clauseContext = Unpivot_in_clauseContext;

plsqlParser.prototype.unpivot_in_clause = function() {

    var localctx = new Unpivot_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, plsqlParser.RULE_unpivot_in_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2983;
        this.match(plsqlParser.IN);
        this.state = 2984;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 2985;
        this.unpivot_in_elements();
        this.state = 2990;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 2986;
            this.match(plsqlParser.COMMA);
            this.state = 2987;
            this.unpivot_in_elements();
            this.state = 2992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2993;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_in_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_unpivot_in_elements;
    return this;
}

Unpivot_in_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_in_elementsContext.prototype.constructor = Unpivot_in_elementsContext;

Unpivot_in_elementsContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Unpivot_in_elementsContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Unpivot_in_elementsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

Unpivot_in_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUnpivot_in_elements(this);
	}
};

Unpivot_in_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUnpivot_in_elements(this);
	}
};




plsqlParser.Unpivot_in_elementsContext = Unpivot_in_elementsContext;

plsqlParser.prototype.unpivot_in_elements = function() {

    var localctx = new Unpivot_in_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, plsqlParser.RULE_unpivot_in_elements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3007;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 2995;
            this.column_name();
            break;
        case plsqlParser.LEFT_PAREN:
            this.state = 2996;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 2997;
            this.column_name();
            this.state = 3002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 2998;
                this.match(plsqlParser.COMMA);
                this.state = 2999;
                this.column_name();
                this.state = 3004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3005;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AS) {
            this.state = 3009;
            this.match(plsqlParser.AS);
            this.state = 3022;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.DATE:
            case plsqlParser.DBTIMEZONE:
            case plsqlParser.DEFAULT:
            case plsqlParser.FALSE:
            case plsqlParser.INTERVAL:
            case plsqlParser.MAXVALUE:
            case plsqlParser.MINVALUE:
            case plsqlParser.NULL:
            case plsqlParser.SESSIONTIMEZONE:
            case plsqlParser.TIMESTAMP:
            case plsqlParser.TRUE:
            case plsqlParser.NATIONAL_CHAR_STRING_LIT:
            case plsqlParser.UNSIGNED_INTEGER:
            case plsqlParser.APPROXIMATE_NUM_LIT:
            case plsqlParser.CHAR_STRING:
                this.state = 3010;
                this.constant();
                break;
            case plsqlParser.LEFT_PAREN:
                this.state = 3011;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 3012;
                this.constant();
                this.state = 3017;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===plsqlParser.COMMA) {
                    this.state = 3013;
                    this.match(plsqlParser.COMMA);
                    this.state = 3014;
                    this.constant();
                    this.state = 3019;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3020;
                this.match(plsqlParser.RIGHT_PAREN);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hierarchical_query_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_hierarchical_query_clause;
    return this;
}

Hierarchical_query_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_query_clauseContext.prototype.constructor = Hierarchical_query_clauseContext;

Hierarchical_query_clauseContext.prototype.CONNECT = function() {
    return this.getToken(plsqlParser.CONNECT, 0);
};

Hierarchical_query_clauseContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Hierarchical_query_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Hierarchical_query_clauseContext.prototype.NOCYCLE = function() {
    return this.getToken(plsqlParser.NOCYCLE, 0);
};

Hierarchical_query_clauseContext.prototype.start_part = function() {
    return this.getTypedRuleContext(Start_partContext,0);
};

Hierarchical_query_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterHierarchical_query_clause(this);
	}
};

Hierarchical_query_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitHierarchical_query_clause(this);
	}
};




plsqlParser.Hierarchical_query_clauseContext = Hierarchical_query_clauseContext;

plsqlParser.prototype.hierarchical_query_clause = function() {

    var localctx = new Hierarchical_query_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, plsqlParser.RULE_hierarchical_query_clause);
    try {
        this.state = 3043;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.CONNECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3026;
            this.match(plsqlParser.CONNECT);
            this.state = 3027;
            this.match(plsqlParser.BY);
            this.state = 3029;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
            if(la_===1) {
                this.state = 3028;
                this.match(plsqlParser.NOCYCLE);

            }
            this.state = 3031;
            this.condition();
            this.state = 3033;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
            if(la_===1) {
                this.state = 3032;
                this.start_part();

            }
            break;
        case plsqlParser.START:
            this.enterOuterAlt(localctx, 2);
            this.state = 3035;
            this.start_part();
            this.state = 3036;
            this.match(plsqlParser.CONNECT);
            this.state = 3037;
            this.match(plsqlParser.BY);
            this.state = 3039;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
            if(la_===1) {
                this.state = 3038;
                this.match(plsqlParser.NOCYCLE);

            }
            this.state = 3041;
            this.condition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Start_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_start_part;
    return this;
}

Start_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Start_partContext.prototype.constructor = Start_partContext;

Start_partContext.prototype.START = function() {
    return this.getToken(plsqlParser.START, 0);
};

Start_partContext.prototype.WITH = function() {
    return this.getToken(plsqlParser.WITH, 0);
};

Start_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Start_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterStart_part(this);
	}
};

Start_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitStart_part(this);
	}
};




plsqlParser.Start_partContext = Start_partContext;

plsqlParser.prototype.start_part = function() {

    var localctx = new Start_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, plsqlParser.RULE_start_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3045;
        this.match(plsqlParser.START);
        this.state = 3046;
        this.match(plsqlParser.WITH);
        this.state = 3047;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_group_by_clause;
    return this;
}

Group_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_clauseContext.prototype.constructor = Group_by_clauseContext;

Group_by_clauseContext.prototype.GROUP = function() {
    return this.getToken(plsqlParser.GROUP, 0);
};

Group_by_clauseContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Group_by_clauseContext.prototype.group_by_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_by_elementsContext);
    } else {
        return this.getTypedRuleContext(Group_by_elementsContext,i);
    }
};

Group_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterGroup_by_clause(this);
	}
};

Group_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitGroup_by_clause(this);
	}
};




plsqlParser.Group_by_clauseContext = Group_by_clauseContext;

plsqlParser.prototype.group_by_clause = function() {

    var localctx = new Group_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, plsqlParser.RULE_group_by_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3049;
        this.match(plsqlParser.GROUP);
        this.state = 3050;
        this.match(plsqlParser.BY);
        this.state = 3051;
        this.group_by_elements();
        this.state = 3056;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,349,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3052;
                this.match(plsqlParser.COMMA);
                this.state = 3053;
                this.group_by_elements(); 
            }
            this.state = 3058;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,349,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_group_by_elements;
    return this;
}

Group_by_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_elementsContext.prototype.constructor = Group_by_elementsContext;

Group_by_elementsContext.prototype.grouping_sets_clause = function() {
    return this.getTypedRuleContext(Grouping_sets_clauseContext,0);
};

Group_by_elementsContext.prototype.rollup_cube_clause = function() {
    return this.getTypedRuleContext(Rollup_cube_clauseContext,0);
};

Group_by_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Group_by_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterGroup_by_elements(this);
	}
};

Group_by_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitGroup_by_elements(this);
	}
};




plsqlParser.Group_by_elementsContext = Group_by_elementsContext;

plsqlParser.prototype.group_by_elements = function() {

    var localctx = new Group_by_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, plsqlParser.RULE_group_by_elements);
    try {
        this.state = 3062;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3059;
            this.grouping_sets_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3060;
            this.rollup_cube_clause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3061;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollup_cube_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_rollup_cube_clause;
    return this;
}

Rollup_cube_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollup_cube_clauseContext.prototype.constructor = Rollup_cube_clauseContext;

Rollup_cube_clauseContext.prototype.grouping_sets_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Grouping_sets_elementsContext);
    } else {
        return this.getTypedRuleContext(Grouping_sets_elementsContext,i);
    }
};

Rollup_cube_clauseContext.prototype.ROLLUP = function() {
    return this.getToken(plsqlParser.ROLLUP, 0);
};

Rollup_cube_clauseContext.prototype.CUBE = function() {
    return this.getToken(plsqlParser.CUBE, 0);
};

Rollup_cube_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRollup_cube_clause(this);
	}
};

Rollup_cube_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRollup_cube_clause(this);
	}
};




plsqlParser.Rollup_cube_clauseContext = Rollup_cube_clauseContext;

plsqlParser.prototype.rollup_cube_clause = function() {

    var localctx = new Rollup_cube_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, plsqlParser.RULE_rollup_cube_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3064;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.CUBE || _la===plsqlParser.ROLLUP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3065;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3066;
        this.grouping_sets_elements();
        this.state = 3071;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3067;
            this.match(plsqlParser.COMMA);
            this.state = 3068;
            this.grouping_sets_elements();
            this.state = 3073;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3074;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_sets_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_grouping_sets_clause;
    return this;
}

Grouping_sets_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_sets_clauseContext.prototype.constructor = Grouping_sets_clauseContext;

Grouping_sets_clauseContext.prototype.GROUPING = function() {
    return this.getToken(plsqlParser.GROUPING, 0);
};

Grouping_sets_clauseContext.prototype.SETS = function() {
    return this.getToken(plsqlParser.SETS, 0);
};

Grouping_sets_clauseContext.prototype.grouping_sets_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Grouping_sets_elementsContext);
    } else {
        return this.getTypedRuleContext(Grouping_sets_elementsContext,i);
    }
};

Grouping_sets_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterGrouping_sets_clause(this);
	}
};

Grouping_sets_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitGrouping_sets_clause(this);
	}
};




plsqlParser.Grouping_sets_clauseContext = Grouping_sets_clauseContext;

plsqlParser.prototype.grouping_sets_clause = function() {

    var localctx = new Grouping_sets_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, plsqlParser.RULE_grouping_sets_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3076;
        this.match(plsqlParser.GROUPING);
        this.state = 3077;
        this.match(plsqlParser.SETS);
        this.state = 3078;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3079;
        this.grouping_sets_elements();
        this.state = 3084;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3080;
            this.match(plsqlParser.COMMA);
            this.state = 3081;
            this.grouping_sets_elements();
            this.state = 3086;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3087;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_sets_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_grouping_sets_elements;
    return this;
}

Grouping_sets_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_sets_elementsContext.prototype.constructor = Grouping_sets_elementsContext;

Grouping_sets_elementsContext.prototype.rollup_cube_clause = function() {
    return this.getTypedRuleContext(Rollup_cube_clauseContext,0);
};

Grouping_sets_elementsContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Grouping_sets_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Grouping_sets_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterGrouping_sets_elements(this);
	}
};

Grouping_sets_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitGrouping_sets_elements(this);
	}
};




plsqlParser.Grouping_sets_elementsContext = Grouping_sets_elementsContext;

plsqlParser.prototype.grouping_sets_elements = function() {

    var localctx = new Grouping_sets_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, plsqlParser.RULE_grouping_sets_elements);
    try {
        this.state = 3092;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3089;
            this.rollup_cube_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3090;
            this.expression_list();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3091;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Having_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_having_clause;
    return this;
}

Having_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Having_clauseContext.prototype.constructor = Having_clauseContext;

Having_clauseContext.prototype.HAVING = function() {
    return this.getToken(plsqlParser.HAVING, 0);
};

Having_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Having_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterHaving_clause(this);
	}
};

Having_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitHaving_clause(this);
	}
};




plsqlParser.Having_clauseContext = Having_clauseContext;

plsqlParser.prototype.having_clause = function() {

    var localctx = new Having_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, plsqlParser.RULE_having_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3094;
        this.match(plsqlParser.HAVING);
        this.state = 3095;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_clause;
    return this;
}

Model_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_clauseContext.prototype.constructor = Model_clauseContext;

Model_clauseContext.prototype.MODEL = function() {
    return this.getToken(plsqlParser.MODEL, 0);
};

Model_clauseContext.prototype.main_model = function() {
    return this.getTypedRuleContext(Main_modelContext,0);
};

Model_clauseContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Model_clauseContext.prototype.return_rows_clause = function() {
    return this.getTypedRuleContext(Return_rows_clauseContext,0);
};

Model_clauseContext.prototype.reference_model = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Reference_modelContext);
    } else {
        return this.getTypedRuleContext(Reference_modelContext,i);
    }
};

Model_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_clause(this);
	}
};

Model_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_clause(this);
	}
};




plsqlParser.Model_clauseContext = Model_clauseContext;

plsqlParser.prototype.model_clause = function() {

    var localctx = new Model_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, plsqlParser.RULE_model_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3097;
        this.match(plsqlParser.MODEL);
        this.state = 3101;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.IGNORE || _la===plsqlParser.KEEP || _la===plsqlParser.UNIQUE) {
            this.state = 3098;
            this.cell_reference_options();
            this.state = 3103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3105;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.RETURN) {
            this.state = 3104;
            this.return_rows_clause();
        }

        this.state = 3110;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.REFERENCE) {
            this.state = 3107;
            this.reference_model();
            this.state = 3112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3113;
        this.main_model();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cell_reference_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cell_reference_options;
    return this;
}

Cell_reference_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cell_reference_optionsContext.prototype.constructor = Cell_reference_optionsContext;

Cell_reference_optionsContext.prototype.NAV = function() {
    return this.getToken(plsqlParser.NAV, 0);
};

Cell_reference_optionsContext.prototype.IGNORE = function() {
    return this.getToken(plsqlParser.IGNORE, 0);
};

Cell_reference_optionsContext.prototype.KEEP = function() {
    return this.getToken(plsqlParser.KEEP, 0);
};

Cell_reference_optionsContext.prototype.UNIQUE = function() {
    return this.getToken(plsqlParser.UNIQUE, 0);
};

Cell_reference_optionsContext.prototype.DIMENSION = function() {
    return this.getToken(plsqlParser.DIMENSION, 0);
};

Cell_reference_optionsContext.prototype.SINGLE = function() {
    return this.getToken(plsqlParser.SINGLE, 0);
};

Cell_reference_optionsContext.prototype.REFERENCE = function() {
    return this.getToken(plsqlParser.REFERENCE, 0);
};

Cell_reference_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCell_reference_options(this);
	}
};

Cell_reference_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCell_reference_options(this);
	}
};




plsqlParser.Cell_reference_optionsContext = Cell_reference_optionsContext;

plsqlParser.prototype.cell_reference_options = function() {

    var localctx = new Cell_reference_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, plsqlParser.RULE_cell_reference_options);
    var _la = 0; // Token type
    try {
        this.state = 3123;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.IGNORE:
        case plsqlParser.KEEP:
            this.enterOuterAlt(localctx, 1);
            this.state = 3115;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.IGNORE || _la===plsqlParser.KEEP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3116;
            this.match(plsqlParser.NAV);
            break;
        case plsqlParser.UNIQUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3117;
            this.match(plsqlParser.UNIQUE);
            this.state = 3121;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.DIMENSION:
                this.state = 3118;
                this.match(plsqlParser.DIMENSION);
                break;
            case plsqlParser.SINGLE:
                this.state = 3119;
                this.match(plsqlParser.SINGLE);
                this.state = 3120;
                this.match(plsqlParser.REFERENCE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_rows_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_return_rows_clause;
    return this;
}

Return_rows_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_rows_clauseContext.prototype.constructor = Return_rows_clauseContext;

Return_rows_clauseContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Return_rows_clauseContext.prototype.ROWS = function() {
    return this.getToken(plsqlParser.ROWS, 0);
};

Return_rows_clauseContext.prototype.UPDATED = function() {
    return this.getToken(plsqlParser.UPDATED, 0);
};

Return_rows_clauseContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Return_rows_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterReturn_rows_clause(this);
	}
};

Return_rows_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitReturn_rows_clause(this);
	}
};




plsqlParser.Return_rows_clauseContext = Return_rows_clauseContext;

plsqlParser.prototype.return_rows_clause = function() {

    var localctx = new Return_rows_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, plsqlParser.RULE_return_rows_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3125;
        this.match(plsqlParser.RETURN);
        this.state = 3126;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.ALL || _la===plsqlParser.UPDATED)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3127;
        this.match(plsqlParser.ROWS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reference_modelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_reference_model;
    return this;
}

Reference_modelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reference_modelContext.prototype.constructor = Reference_modelContext;

Reference_modelContext.prototype.REFERENCE = function() {
    return this.getToken(plsqlParser.REFERENCE, 0);
};

Reference_modelContext.prototype.reference_model_name = function() {
    return this.getTypedRuleContext(Reference_model_nameContext,0);
};

Reference_modelContext.prototype.ON = function() {
    return this.getToken(plsqlParser.ON, 0);
};

Reference_modelContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Reference_modelContext.prototype.model_column_clauses = function() {
    return this.getTypedRuleContext(Model_column_clausesContext,0);
};

Reference_modelContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Reference_modelContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterReference_model(this);
	}
};

Reference_modelContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitReference_model(this);
	}
};




plsqlParser.Reference_modelContext = Reference_modelContext;

plsqlParser.prototype.reference_model = function() {

    var localctx = new Reference_modelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, plsqlParser.RULE_reference_model);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3129;
        this.match(plsqlParser.REFERENCE);
        this.state = 3130;
        this.reference_model_name();
        this.state = 3131;
        this.match(plsqlParser.ON);
        this.state = 3132;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3133;
        this.subquery(0);
        this.state = 3134;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 3135;
        this.model_column_clauses();
        this.state = 3139;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.IGNORE || _la===plsqlParser.KEEP || _la===plsqlParser.UNIQUE) {
            this.state = 3136;
            this.cell_reference_options();
            this.state = 3141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Main_modelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_main_model;
    return this;
}

Main_modelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Main_modelContext.prototype.constructor = Main_modelContext;

Main_modelContext.prototype.model_column_clauses = function() {
    return this.getTypedRuleContext(Model_column_clausesContext,0);
};

Main_modelContext.prototype.model_rules_clause = function() {
    return this.getTypedRuleContext(Model_rules_clauseContext,0);
};

Main_modelContext.prototype.MAIN = function() {
    return this.getToken(plsqlParser.MAIN, 0);
};

Main_modelContext.prototype.main_model_name = function() {
    return this.getTypedRuleContext(Main_model_nameContext,0);
};

Main_modelContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Main_modelContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMain_model(this);
	}
};

Main_modelContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMain_model(this);
	}
};




plsqlParser.Main_modelContext = Main_modelContext;

plsqlParser.prototype.main_model = function() {

    var localctx = new Main_modelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, plsqlParser.RULE_main_model);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.MAIN) {
            this.state = 3142;
            this.match(plsqlParser.MAIN);
            this.state = 3143;
            this.main_model_name();
        }

        this.state = 3146;
        this.model_column_clauses();
        this.state = 3150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.IGNORE || _la===plsqlParser.KEEP || _la===plsqlParser.UNIQUE) {
            this.state = 3147;
            this.cell_reference_options();
            this.state = 3152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3153;
        this.model_rules_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_column_clauses;
    return this;
}

Model_column_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_clausesContext.prototype.constructor = Model_column_clausesContext;

Model_column_clausesContext.prototype.DIMENSION = function() {
    return this.getToken(plsqlParser.DIMENSION, 0);
};

Model_column_clausesContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Model_column_clausesContext.prototype.model_column_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_column_listContext);
    } else {
        return this.getTypedRuleContext(Model_column_listContext,i);
    }
};

Model_column_clausesContext.prototype.MEASURES = function() {
    return this.getToken(plsqlParser.MEASURES, 0);
};

Model_column_clausesContext.prototype.model_column_partition_part = function() {
    return this.getTypedRuleContext(Model_column_partition_partContext,0);
};

Model_column_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_column_clauses(this);
	}
};

Model_column_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_column_clauses(this);
	}
};




plsqlParser.Model_column_clausesContext = Model_column_clausesContext;

plsqlParser.prototype.model_column_clauses = function() {

    var localctx = new Model_column_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, plsqlParser.RULE_model_column_clauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3156;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PARTITION) {
            this.state = 3155;
            this.model_column_partition_part();
        }

        this.state = 3158;
        this.match(plsqlParser.DIMENSION);
        this.state = 3159;
        this.match(plsqlParser.BY);
        this.state = 3160;
        this.model_column_list();
        this.state = 3161;
        this.match(plsqlParser.MEASURES);
        this.state = 3162;
        this.model_column_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_partition_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_column_partition_part;
    return this;
}

Model_column_partition_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_partition_partContext.prototype.constructor = Model_column_partition_partContext;

Model_column_partition_partContext.prototype.PARTITION = function() {
    return this.getToken(plsqlParser.PARTITION, 0);
};

Model_column_partition_partContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Model_column_partition_partContext.prototype.model_column_list = function() {
    return this.getTypedRuleContext(Model_column_listContext,0);
};

Model_column_partition_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_column_partition_part(this);
	}
};

Model_column_partition_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_column_partition_part(this);
	}
};




plsqlParser.Model_column_partition_partContext = Model_column_partition_partContext;

plsqlParser.prototype.model_column_partition_part = function() {

    var localctx = new Model_column_partition_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, plsqlParser.RULE_model_column_partition_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3164;
        this.match(plsqlParser.PARTITION);
        this.state = 3165;
        this.match(plsqlParser.BY);
        this.state = 3166;
        this.model_column_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_column_list;
    return this;
}

Model_column_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_listContext.prototype.constructor = Model_column_listContext;

Model_column_listContext.prototype.model_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_columnContext);
    } else {
        return this.getTypedRuleContext(Model_columnContext,i);
    }
};

Model_column_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_column_list(this);
	}
};

Model_column_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_column_list(this);
	}
};




plsqlParser.Model_column_listContext = Model_column_listContext;

plsqlParser.prototype.model_column_list = function() {

    var localctx = new Model_column_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, plsqlParser.RULE_model_column_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3168;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3169;
        this.model_column();
        this.state = 3174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3170;
            this.match(plsqlParser.COMMA);
            this.state = 3171;
            this.model_column();
            this.state = 3176;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3177;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_column;
    return this;
}

Model_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_columnContext.prototype.constructor = Model_columnContext;

Model_columnContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_columnContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Model_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_column(this);
	}
};

Model_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_column(this);
	}
};




plsqlParser.Model_columnContext = Model_columnContext;

plsqlParser.prototype.model_column = function() {

    var localctx = new Model_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, plsqlParser.RULE_model_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3179;
        this.expression(0);
        this.state = 3181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 3180;
            this.table_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_rules_clause;
    return this;
}

Model_rules_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_clauseContext.prototype.constructor = Model_rules_clauseContext;

Model_rules_clauseContext.prototype.model_rules_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_rules_elementContext);
    } else {
        return this.getTypedRuleContext(Model_rules_elementContext,i);
    }
};

Model_rules_clauseContext.prototype.model_rules_part = function() {
    return this.getTypedRuleContext(Model_rules_partContext,0);
};

Model_rules_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_rules_clause(this);
	}
};

Model_rules_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_rules_clause(this);
	}
};




plsqlParser.Model_rules_clauseContext = Model_rules_clauseContext;

plsqlParser.prototype.model_rules_clause = function() {

    var localctx = new Model_rules_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, plsqlParser.RULE_model_rules_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.RULES) {
            this.state = 3183;
            this.model_rules_part();
        }

        this.state = 3186;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3187;
        this.model_rules_element();
        this.state = 3192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3188;
            this.match(plsqlParser.COMMA);
            this.state = 3189;
            this.model_rules_element();
            this.state = 3194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3195;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_rules_part;
    return this;
}

Model_rules_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_partContext.prototype.constructor = Model_rules_partContext;

Model_rules_partContext.prototype.RULES = function() {
    return this.getToken(plsqlParser.RULES, 0);
};

Model_rules_partContext.prototype.UPDATE = function() {
    return this.getToken(plsqlParser.UPDATE, 0);
};

Model_rules_partContext.prototype.UPSERT = function() {
    return this.getToken(plsqlParser.UPSERT, 0);
};

Model_rules_partContext.prototype.ORDER = function() {
    return this.getToken(plsqlParser.ORDER, 0);
};

Model_rules_partContext.prototype.model_iterate_clause = function() {
    return this.getTypedRuleContext(Model_iterate_clauseContext,0);
};

Model_rules_partContext.prototype.AUTOMATIC = function() {
    return this.getToken(plsqlParser.AUTOMATIC, 0);
};

Model_rules_partContext.prototype.SEQUENTIAL = function() {
    return this.getToken(plsqlParser.SEQUENTIAL, 0);
};

Model_rules_partContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Model_rules_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_rules_part(this);
	}
};

Model_rules_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_rules_part(this);
	}
};




plsqlParser.Model_rules_partContext = Model_rules_partContext;

plsqlParser.prototype.model_rules_part = function() {

    var localctx = new Model_rules_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, plsqlParser.RULE_model_rules_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3197;
        this.match(plsqlParser.RULES);
        this.state = 3203;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case plsqlParser.UPDATE:
        	this.state = 3198;
        	this.match(plsqlParser.UPDATE);
        	break;
        case plsqlParser.UPSERT:
        	this.state = 3199;
        	this.match(plsqlParser.UPSERT);
        	this.state = 3201;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===plsqlParser.ALL) {
        	    this.state = 3200;
        	    this.match(plsqlParser.ALL);
        	}

        	break;
        case plsqlParser.AUTOMATIC:
        case plsqlParser.ITERATE:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.LEFT_PAREN:
        	break;
        default:
        	break;
        }
        this.state = 3207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AUTOMATIC || _la===plsqlParser.SEQUENTIAL) {
            this.state = 3205;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.AUTOMATIC || _la===plsqlParser.SEQUENTIAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3206;
            this.match(plsqlParser.ORDER);
        }

        this.state = 3210;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ITERATE) {
            this.state = 3209;
            this.model_iterate_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_rules_element;
    return this;
}

Model_rules_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_elementContext.prototype.constructor = Model_rules_elementContext;

Model_rules_elementContext.prototype.cell_assignment = function() {
    return this.getTypedRuleContext(Cell_assignmentContext,0);
};

Model_rules_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_rules_elementContext.prototype.UPDATE = function() {
    return this.getToken(plsqlParser.UPDATE, 0);
};

Model_rules_elementContext.prototype.UPSERT = function() {
    return this.getToken(plsqlParser.UPSERT, 0);
};

Model_rules_elementContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Model_rules_elementContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Model_rules_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_rules_element(this);
	}
};

Model_rules_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_rules_element(this);
	}
};




plsqlParser.Model_rules_elementContext = Model_rules_elementContext;

plsqlParser.prototype.model_rules_element = function() {

    var localctx = new Model_rules_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, plsqlParser.RULE_model_rules_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3217;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,372,this._ctx);
        if(la_===1) {
            this.state = 3212;
            this.match(plsqlParser.UPDATE);

        } else if(la_===2) {
            this.state = 3213;
            this.match(plsqlParser.UPSERT);
            this.state = 3215;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
            if(la_===1) {
                this.state = 3214;
                this.match(plsqlParser.ALL);

            }

        }
        this.state = 3219;
        this.cell_assignment();
        this.state = 3221;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ORDER) {
            this.state = 3220;
            this.order_by_clause();
        }

        this.state = 3223;
        this.match(plsqlParser.EQUALS_OP);
        this.state = 3224;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cell_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cell_assignment;
    return this;
}

Cell_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cell_assignmentContext.prototype.constructor = Cell_assignmentContext;

Cell_assignmentContext.prototype.model_expression = function() {
    return this.getTypedRuleContext(Model_expressionContext,0);
};

Cell_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCell_assignment(this);
	}
};

Cell_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCell_assignment(this);
	}
};




plsqlParser.Cell_assignmentContext = Cell_assignmentContext;

plsqlParser.prototype.cell_assignment = function() {

    var localctx = new Cell_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, plsqlParser.RULE_cell_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3226;
        this.model_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_iterate_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_iterate_clause;
    return this;
}

Model_iterate_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_iterate_clauseContext.prototype.constructor = Model_iterate_clauseContext;

Model_iterate_clauseContext.prototype.ITERATE = function() {
    return this.getToken(plsqlParser.ITERATE, 0);
};

Model_iterate_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_iterate_clauseContext.prototype.until_part = function() {
    return this.getTypedRuleContext(Until_partContext,0);
};

Model_iterate_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_iterate_clause(this);
	}
};

Model_iterate_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_iterate_clause(this);
	}
};




plsqlParser.Model_iterate_clauseContext = Model_iterate_clauseContext;

plsqlParser.prototype.model_iterate_clause = function() {

    var localctx = new Model_iterate_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, plsqlParser.RULE_model_iterate_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3228;
        this.match(plsqlParser.ITERATE);
        this.state = 3229;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3230;
        this.expression(0);
        this.state = 3231;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 3233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.UNTIL) {
            this.state = 3232;
            this.until_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Until_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_until_part;
    return this;
}

Until_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Until_partContext.prototype.constructor = Until_partContext;

Until_partContext.prototype.UNTIL = function() {
    return this.getToken(plsqlParser.UNTIL, 0);
};

Until_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Until_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUntil_part(this);
	}
};

Until_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUntil_part(this);
	}
};




plsqlParser.Until_partContext = Until_partContext;

plsqlParser.prototype.until_part = function() {

    var localctx = new Until_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, plsqlParser.RULE_until_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3235;
        this.match(plsqlParser.UNTIL);
        this.state = 3236;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3237;
        this.condition();
        this.state = 3238;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_order_by_clause;
    return this;
}

Order_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_clauseContext.prototype.constructor = Order_by_clauseContext;

Order_by_clauseContext.prototype.ORDER = function() {
    return this.getToken(plsqlParser.ORDER, 0);
};

Order_by_clauseContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Order_by_clauseContext.prototype.order_by_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_elementsContext);
    } else {
        return this.getTypedRuleContext(Order_by_elementsContext,i);
    }
};

Order_by_clauseContext.prototype.SIBLINGS = function() {
    return this.getToken(plsqlParser.SIBLINGS, 0);
};

Order_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOrder_by_clause(this);
	}
};

Order_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOrder_by_clause(this);
	}
};




plsqlParser.Order_by_clauseContext = Order_by_clauseContext;

plsqlParser.prototype.order_by_clause = function() {

    var localctx = new Order_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, plsqlParser.RULE_order_by_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3240;
        this.match(plsqlParser.ORDER);
        this.state = 3242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.SIBLINGS) {
            this.state = 3241;
            this.match(plsqlParser.SIBLINGS);
        }

        this.state = 3244;
        this.match(plsqlParser.BY);
        this.state = 3245;
        this.order_by_elements();
        this.state = 3250;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,376,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3246;
                this.match(plsqlParser.COMMA);
                this.state = 3247;
                this.order_by_elements(); 
            }
            this.state = 3252;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,376,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_order_by_elements;
    this.direction = null; // Token
    this.nulls = null; // Token
    return this;
}

Order_by_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_elementsContext.prototype.constructor = Order_by_elementsContext;

Order_by_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Order_by_elementsContext.prototype.NULLS = function() {
    return this.getToken(plsqlParser.NULLS, 0);
};

Order_by_elementsContext.prototype.ASC = function() {
    return this.getToken(plsqlParser.ASC, 0);
};

Order_by_elementsContext.prototype.DESC = function() {
    return this.getToken(plsqlParser.DESC, 0);
};

Order_by_elementsContext.prototype.FIRST = function() {
    return this.getToken(plsqlParser.FIRST, 0);
};

Order_by_elementsContext.prototype.LAST = function() {
    return this.getToken(plsqlParser.LAST, 0);
};

Order_by_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOrder_by_elements(this);
	}
};

Order_by_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOrder_by_elements(this);
	}
};




plsqlParser.Order_by_elementsContext = Order_by_elementsContext;

plsqlParser.prototype.order_by_elements = function() {

    var localctx = new Order_by_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, plsqlParser.RULE_order_by_elements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3253;
        this.expression(0);
        this.state = 3255;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
        if(la_===1) {
            this.state = 3254;
            localctx.direction = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.ASC || _la===plsqlParser.DESC)) {
                localctx.direction = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 3259;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
        if(la_===1) {
            this.state = 3257;
            this.match(plsqlParser.NULLS);
            this.state = 3258;
            localctx.nulls = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.FIRST || _la===plsqlParser.LAST)) {
                localctx.nulls = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_for_update_clause;
    return this;
}

For_update_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_clauseContext.prototype.constructor = For_update_clauseContext;

For_update_clauseContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

For_update_clauseContext.prototype.UPDATE = function() {
    return this.getToken(plsqlParser.UPDATE, 0);
};

For_update_clauseContext.prototype.for_update_of_part = function() {
    return this.getTypedRuleContext(For_update_of_partContext,0);
};

For_update_clauseContext.prototype.for_update_options = function() {
    return this.getTypedRuleContext(For_update_optionsContext,0);
};

For_update_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFor_update_clause(this);
	}
};

For_update_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFor_update_clause(this);
	}
};




plsqlParser.For_update_clauseContext = For_update_clauseContext;

plsqlParser.prototype.for_update_clause = function() {

    var localctx = new For_update_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, plsqlParser.RULE_for_update_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3261;
        this.match(plsqlParser.FOR);
        this.state = 3262;
        this.match(plsqlParser.UPDATE);
        this.state = 3264;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,379,this._ctx);
        if(la_===1) {
            this.state = 3263;
            this.for_update_of_part();

        }
        this.state = 3267;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
        if(la_===1) {
            this.state = 3266;
            this.for_update_options();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_of_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_for_update_of_part;
    return this;
}

For_update_of_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_of_partContext.prototype.constructor = For_update_of_partContext;

For_update_of_partContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

For_update_of_partContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

For_update_of_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFor_update_of_part(this);
	}
};

For_update_of_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFor_update_of_part(this);
	}
};




plsqlParser.For_update_of_partContext = For_update_of_partContext;

plsqlParser.prototype.for_update_of_part = function() {

    var localctx = new For_update_of_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, plsqlParser.RULE_for_update_of_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3269;
        this.match(plsqlParser.OF);
        this.state = 3270;
        this.column_name();
        this.state = 3275;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,381,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3271;
                this.match(plsqlParser.COMMA);
                this.state = 3272;
                this.column_name(); 
            }
            this.state = 3277;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,381,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_for_update_options;
    return this;
}

For_update_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_optionsContext.prototype.constructor = For_update_optionsContext;

For_update_optionsContext.prototype.SKIP_ = function() {
    return this.getToken(plsqlParser.SKIP_, 0);
};

For_update_optionsContext.prototype.LOCKED = function() {
    return this.getToken(plsqlParser.LOCKED, 0);
};

For_update_optionsContext.prototype.NOWAIT = function() {
    return this.getToken(plsqlParser.NOWAIT, 0);
};

For_update_optionsContext.prototype.WAIT = function() {
    return this.getToken(plsqlParser.WAIT, 0);
};

For_update_optionsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_update_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFor_update_options(this);
	}
};

For_update_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFor_update_options(this);
	}
};




plsqlParser.For_update_optionsContext = For_update_optionsContext;

plsqlParser.prototype.for_update_options = function() {

    var localctx = new For_update_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, plsqlParser.RULE_for_update_options);
    try {
        this.state = 3283;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.SKIP_:
            this.enterOuterAlt(localctx, 1);
            this.state = 3278;
            this.match(plsqlParser.SKIP_);
            this.state = 3279;
            this.match(plsqlParser.LOCKED);
            break;
        case plsqlParser.NOWAIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3280;
            this.match(plsqlParser.NOWAIT);
            break;
        case plsqlParser.WAIT:
            this.enterOuterAlt(localctx, 3);
            this.state = 3281;
            this.match(plsqlParser.WAIT);
            this.state = 3282;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Limit_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_limit_clause;
    return this;
}

Limit_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Limit_clauseContext.prototype.constructor = Limit_clauseContext;

Limit_clauseContext.prototype.LIMIT = function() {
    return this.getToken(plsqlParser.LIMIT, 0);
};

Limit_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Limit_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLimit_clause(this);
	}
};

Limit_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLimit_clause(this);
	}
};




plsqlParser.Limit_clauseContext = Limit_clauseContext;

plsqlParser.prototype.limit_clause = function() {

    var localctx = new Limit_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, plsqlParser.RULE_limit_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3285;
        this.match(plsqlParser.LIMIT);
        this.state = 3286;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_update_statement;
    return this;
}

Update_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_statementContext.prototype.constructor = Update_statementContext;

Update_statementContext.prototype.UPDATE = function() {
    return this.getToken(plsqlParser.UPDATE, 0);
};

Update_statementContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Update_statementContext.prototype.update_set_clause = function() {
    return this.getTypedRuleContext(Update_set_clauseContext,0);
};

Update_statementContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Update_statementContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Update_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Update_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUpdate_statement(this);
	}
};

Update_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUpdate_statement(this);
	}
};




plsqlParser.Update_statementContext = Update_statementContext;

plsqlParser.prototype.update_statement = function() {

    var localctx = new Update_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, plsqlParser.RULE_update_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3288;
        this.match(plsqlParser.UPDATE);
        this.state = 3289;
        this.general_table_ref();
        this.state = 3290;
        this.update_set_clause();
        this.state = 3292;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WHERE) {
            this.state = 3291;
            this.where_clause();
        }

        this.state = 3295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.RETURN || _la===plsqlParser.RETURNING) {
            this.state = 3294;
            this.static_returning_clause();
        }

        this.state = 3298;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LOG) {
            this.state = 3297;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_set_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_update_set_clause;
    return this;
}

Update_set_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_set_clauseContext.prototype.constructor = Update_set_clauseContext;

Update_set_clauseContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Update_set_clauseContext.prototype.column_based_update_set_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_based_update_set_clauseContext);
    } else {
        return this.getTypedRuleContext(Column_based_update_set_clauseContext,i);
    }
};

Update_set_clauseContext.prototype.VALUE = function() {
    return this.getToken(plsqlParser.VALUE, 0);
};

Update_set_clauseContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Update_set_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Update_set_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUpdate_set_clause(this);
	}
};

Update_set_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUpdate_set_clause(this);
	}
};




plsqlParser.Update_set_clauseContext = Update_set_clauseContext;

plsqlParser.prototype.update_set_clause = function() {

    var localctx = new Update_set_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, plsqlParser.RULE_update_set_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3300;
        this.match(plsqlParser.SET);
        this.state = 3316;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,387,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3301;
            this.column_based_update_set_clause();
            this.state = 3306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3302;
                this.match(plsqlParser.COMMA);
                this.state = 3303;
                this.column_based_update_set_clause();
                this.state = 3308;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.state = 3309;
            this.match(plsqlParser.VALUE);
            this.state = 3310;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3311;
            this.r_id();
            this.state = 3312;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 3313;
            this.match(plsqlParser.EQUALS_OP);
            this.state = 3314;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_based_update_set_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_column_based_update_set_clause;
    return this;
}

Column_based_update_set_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_based_update_set_clauseContext.prototype.constructor = Column_based_update_set_clauseContext;

Column_based_update_set_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Column_based_update_set_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Column_based_update_set_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Column_based_update_set_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterColumn_based_update_set_clause(this);
	}
};

Column_based_update_set_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitColumn_based_update_set_clause(this);
	}
};




plsqlParser.Column_based_update_set_clauseContext = Column_based_update_set_clauseContext;

plsqlParser.prototype.column_based_update_set_clause = function() {

    var localctx = new Column_based_update_set_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, plsqlParser.RULE_column_based_update_set_clause);
    var _la = 0; // Token type
    try {
        this.state = 3335;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 3318;
            this.column_name();
            this.state = 3319;
            this.match(plsqlParser.EQUALS_OP);
            this.state = 3320;
            this.expression(0);
            break;
        case plsqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 3322;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3323;
            this.column_name();
            this.state = 3328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3324;
                this.match(plsqlParser.COMMA);
                this.state = 3325;
                this.column_name();
                this.state = 3330;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3331;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 3332;
            this.match(plsqlParser.EQUALS_OP);
            this.state = 3333;
            this.subquery(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_delete_statement;
    return this;
}

Delete_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_statementContext.prototype.constructor = Delete_statementContext;

Delete_statementContext.prototype.DELETE = function() {
    return this.getToken(plsqlParser.DELETE, 0);
};

Delete_statementContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Delete_statementContext.prototype.FROM = function() {
    return this.getToken(plsqlParser.FROM, 0);
};

Delete_statementContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Delete_statementContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Delete_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Delete_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDelete_statement(this);
	}
};

Delete_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDelete_statement(this);
	}
};




plsqlParser.Delete_statementContext = Delete_statementContext;

plsqlParser.prototype.delete_statement = function() {

    var localctx = new Delete_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, plsqlParser.RULE_delete_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3337;
        this.match(plsqlParser.DELETE);
        this.state = 3339;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.FROM) {
            this.state = 3338;
            this.match(plsqlParser.FROM);
        }

        this.state = 3341;
        this.general_table_ref();
        this.state = 3343;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WHERE) {
            this.state = 3342;
            this.where_clause();
        }

        this.state = 3346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.RETURN || _la===plsqlParser.RETURNING) {
            this.state = 3345;
            this.static_returning_clause();
        }

        this.state = 3349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LOG) {
            this.state = 3348;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_insert_statement;
    return this;
}

Insert_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_statementContext.prototype.constructor = Insert_statementContext;

Insert_statementContext.prototype.INSERT = function() {
    return this.getToken(plsqlParser.INSERT, 0);
};

Insert_statementContext.prototype.single_table_insert = function() {
    return this.getTypedRuleContext(Single_table_insertContext,0);
};

Insert_statementContext.prototype.multi_table_insert = function() {
    return this.getTypedRuleContext(Multi_table_insertContext,0);
};

Insert_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterInsert_statement(this);
	}
};

Insert_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitInsert_statement(this);
	}
};




plsqlParser.Insert_statementContext = Insert_statementContext;

plsqlParser.prototype.insert_statement = function() {

    var localctx = new Insert_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, plsqlParser.RULE_insert_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3351;
        this.match(plsqlParser.INSERT);
        this.state = 3354;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.INTO:
            this.state = 3352;
            this.single_table_insert();
            break;
        case plsqlParser.ALL:
        case plsqlParser.FIRST:
        case plsqlParser.WHEN:
            this.state = 3353;
            this.multi_table_insert();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Single_table_insertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_single_table_insert;
    return this;
}

Single_table_insertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_table_insertContext.prototype.constructor = Single_table_insertContext;

Single_table_insertContext.prototype.insert_into_clause = function() {
    return this.getTypedRuleContext(Insert_into_clauseContext,0);
};

Single_table_insertContext.prototype.values_clause = function() {
    return this.getTypedRuleContext(Values_clauseContext,0);
};

Single_table_insertContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Single_table_insertContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Single_table_insertContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Single_table_insertContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSingle_table_insert(this);
	}
};

Single_table_insertContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSingle_table_insert(this);
	}
};




plsqlParser.Single_table_insertContext = Single_table_insertContext;

plsqlParser.prototype.single_table_insert = function() {

    var localctx = new Single_table_insertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, plsqlParser.RULE_single_table_insert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3356;
        this.insert_into_clause();
        this.state = 3362;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.VALUES:
            this.state = 3357;
            this.values_clause();
            this.state = 3359;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.RETURN || _la===plsqlParser.RETURNING) {
                this.state = 3358;
                this.static_returning_clause();
            }

            break;
        case plsqlParser.SELECT:
        case plsqlParser.WITH:
        case plsqlParser.LEFT_PAREN:
            this.state = 3361;
            this.select_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LOG) {
            this.state = 3364;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_table_insertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_multi_table_insert;
    return this;
}

Multi_table_insertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_table_insertContext.prototype.constructor = Multi_table_insertContext;

Multi_table_insertContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Multi_table_insertContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Multi_table_insertContext.prototype.conditional_insert_clause = function() {
    return this.getTypedRuleContext(Conditional_insert_clauseContext,0);
};

Multi_table_insertContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Multi_table_insertContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMulti_table_insert(this);
	}
};

Multi_table_insertContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMulti_table_insert(this);
	}
};




plsqlParser.Multi_table_insertContext = Multi_table_insertContext;

plsqlParser.prototype.multi_table_insert = function() {

    var localctx = new Multi_table_insertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, plsqlParser.RULE_multi_table_insert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3374;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3367;
            this.match(plsqlParser.ALL);
            this.state = 3369; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3368;
                this.multi_table_element();
                this.state = 3371; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===plsqlParser.INTO);
            break;

        case 2:
            this.state = 3373;
            this.conditional_insert_clause();
            break;

        }
        this.state = 3376;
        this.select_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_multi_table_element;
    return this;
}

Multi_table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_table_elementContext.prototype.constructor = Multi_table_elementContext;

Multi_table_elementContext.prototype.insert_into_clause = function() {
    return this.getTypedRuleContext(Insert_into_clauseContext,0);
};

Multi_table_elementContext.prototype.values_clause = function() {
    return this.getTypedRuleContext(Values_clauseContext,0);
};

Multi_table_elementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Multi_table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMulti_table_element(this);
	}
};

Multi_table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMulti_table_element(this);
	}
};




plsqlParser.Multi_table_elementContext = Multi_table_elementContext;

plsqlParser.prototype.multi_table_element = function() {

    var localctx = new Multi_table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, plsqlParser.RULE_multi_table_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3378;
        this.insert_into_clause();
        this.state = 3380;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.VALUES) {
            this.state = 3379;
            this.values_clause();
        }

        this.state = 3383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LOG) {
            this.state = 3382;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_conditional_insert_clause;
    return this;
}

Conditional_insert_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_clauseContext.prototype.constructor = Conditional_insert_clauseContext;

Conditional_insert_clauseContext.prototype.conditional_insert_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Conditional_insert_when_partContext);
    } else {
        return this.getTypedRuleContext(Conditional_insert_when_partContext,i);
    }
};

Conditional_insert_clauseContext.prototype.conditional_insert_else_part = function() {
    return this.getTypedRuleContext(Conditional_insert_else_partContext,0);
};

Conditional_insert_clauseContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Conditional_insert_clauseContext.prototype.FIRST = function() {
    return this.getToken(plsqlParser.FIRST, 0);
};

Conditional_insert_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConditional_insert_clause(this);
	}
};

Conditional_insert_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConditional_insert_clause(this);
	}
};




plsqlParser.Conditional_insert_clauseContext = Conditional_insert_clauseContext;

plsqlParser.prototype.conditional_insert_clause = function() {

    var localctx = new Conditional_insert_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, plsqlParser.RULE_conditional_insert_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ALL || _la===plsqlParser.FIRST) {
            this.state = 3385;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.ALL || _la===plsqlParser.FIRST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3389; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3388;
            this.conditional_insert_when_part();
            this.state = 3391; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.WHEN);
        this.state = 3394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ELSE) {
            this.state = 3393;
            this.conditional_insert_else_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_conditional_insert_when_part;
    return this;
}

Conditional_insert_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_when_partContext.prototype.constructor = Conditional_insert_when_partContext;

Conditional_insert_when_partContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Conditional_insert_when_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Conditional_insert_when_partContext.prototype.THEN = function() {
    return this.getToken(plsqlParser.THEN, 0);
};

Conditional_insert_when_partContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Conditional_insert_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConditional_insert_when_part(this);
	}
};

Conditional_insert_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConditional_insert_when_part(this);
	}
};




plsqlParser.Conditional_insert_when_partContext = Conditional_insert_when_partContext;

plsqlParser.prototype.conditional_insert_when_part = function() {

    var localctx = new Conditional_insert_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, plsqlParser.RULE_conditional_insert_when_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3396;
        this.match(plsqlParser.WHEN);
        this.state = 3397;
        this.condition();
        this.state = 3398;
        this.match(plsqlParser.THEN);
        this.state = 3400; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3399;
            this.multi_table_element();
            this.state = 3402; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.INTO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_conditional_insert_else_part;
    return this;
}

Conditional_insert_else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_else_partContext.prototype.constructor = Conditional_insert_else_partContext;

Conditional_insert_else_partContext.prototype.ELSE = function() {
    return this.getToken(plsqlParser.ELSE, 0);
};

Conditional_insert_else_partContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Conditional_insert_else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConditional_insert_else_part(this);
	}
};

Conditional_insert_else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConditional_insert_else_part(this);
	}
};




plsqlParser.Conditional_insert_else_partContext = Conditional_insert_else_partContext;

plsqlParser.prototype.conditional_insert_else_part = function() {

    var localctx = new Conditional_insert_else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, plsqlParser.RULE_conditional_insert_else_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3404;
        this.match(plsqlParser.ELSE);
        this.state = 3406; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3405;
            this.multi_table_element();
            this.state = 3408; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.INTO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_into_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_insert_into_clause;
    return this;
}

Insert_into_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_into_clauseContext.prototype.constructor = Insert_into_clauseContext;

Insert_into_clauseContext.prototype.INTO = function() {
    return this.getToken(plsqlParser.INTO, 0);
};

Insert_into_clauseContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Insert_into_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Insert_into_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterInsert_into_clause(this);
	}
};

Insert_into_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitInsert_into_clause(this);
	}
};




plsqlParser.Insert_into_clauseContext = Insert_into_clauseContext;

plsqlParser.prototype.insert_into_clause = function() {

    var localctx = new Insert_into_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, plsqlParser.RULE_insert_into_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3410;
        this.match(plsqlParser.INTO);
        this.state = 3411;
        this.general_table_ref();
        this.state = 3423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,408,this._ctx);
        if(la_===1) {
            this.state = 3412;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3413;
            this.column_name();
            this.state = 3418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3414;
                this.match(plsqlParser.COMMA);
                this.state = 3415;
                this.column_name();
                this.state = 3420;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3421;
            this.match(plsqlParser.RIGHT_PAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Values_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_values_clause;
    return this;
}

Values_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Values_clauseContext.prototype.constructor = Values_clauseContext;

Values_clauseContext.prototype.VALUES = function() {
    return this.getToken(plsqlParser.VALUES, 0);
};

Values_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Values_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterValues_clause(this);
	}
};

Values_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitValues_clause(this);
	}
};




plsqlParser.Values_clauseContext = Values_clauseContext;

plsqlParser.prototype.values_clause = function() {

    var localctx = new Values_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, plsqlParser.RULE_values_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3425;
        this.match(plsqlParser.VALUES);
        this.state = 3426;
        this.expression_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_merge_statement;
    return this;
}

Merge_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_statementContext.prototype.constructor = Merge_statementContext;

Merge_statementContext.prototype.MERGE = function() {
    return this.getToken(plsqlParser.MERGE, 0);
};

Merge_statementContext.prototype.INTO = function() {
    return this.getToken(plsqlParser.INTO, 0);
};

Merge_statementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Merge_statementContext.prototype.USING = function() {
    return this.getToken(plsqlParser.USING, 0);
};

Merge_statementContext.prototype.selected_tableview = function() {
    return this.getTypedRuleContext(Selected_tableviewContext,0);
};

Merge_statementContext.prototype.ON = function() {
    return this.getToken(plsqlParser.ON, 0);
};

Merge_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Merge_statementContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Merge_statementContext.prototype.merge_update_clause = function() {
    return this.getTypedRuleContext(Merge_update_clauseContext,0);
};

Merge_statementContext.prototype.merge_insert_clause = function() {
    return this.getTypedRuleContext(Merge_insert_clauseContext,0);
};

Merge_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Merge_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMerge_statement(this);
	}
};

Merge_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMerge_statement(this);
	}
};




plsqlParser.Merge_statementContext = Merge_statementContext;

plsqlParser.prototype.merge_statement = function() {

    var localctx = new Merge_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, plsqlParser.RULE_merge_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3428;
        this.match(plsqlParser.MERGE);
        this.state = 3429;
        this.match(plsqlParser.INTO);
        this.state = 3430;
        this.tableview_name();
        this.state = 3432;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 3431;
            this.table_alias();
        }

        this.state = 3434;
        this.match(plsqlParser.USING);
        this.state = 3435;
        this.selected_tableview();
        this.state = 3436;
        this.match(plsqlParser.ON);
        this.state = 3437;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3438;
        this.condition();
        this.state = 3439;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 3448;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,412,this._ctx);
        if(la_===1) {
            this.state = 3440;
            this.merge_update_clause();
            this.state = 3442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.WHEN) {
                this.state = 3441;
                this.merge_insert_clause();
            }


        } else if(la_===2) {
            this.state = 3444;
            this.merge_insert_clause();
            this.state = 3446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.WHEN) {
                this.state = 3445;
                this.merge_update_clause();
            }


        }
        this.state = 3451;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LOG) {
            this.state = 3450;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_update_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_merge_update_clause;
    return this;
}

Merge_update_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_update_clauseContext.prototype.constructor = Merge_update_clauseContext;

Merge_update_clauseContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Merge_update_clauseContext.prototype.MATCHED = function() {
    return this.getToken(plsqlParser.MATCHED, 0);
};

Merge_update_clauseContext.prototype.THEN = function() {
    return this.getToken(plsqlParser.THEN, 0);
};

Merge_update_clauseContext.prototype.UPDATE = function() {
    return this.getToken(plsqlParser.UPDATE, 0);
};

Merge_update_clauseContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Merge_update_clauseContext.prototype.merge_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Merge_elementContext);
    } else {
        return this.getTypedRuleContext(Merge_elementContext,i);
    }
};

Merge_update_clauseContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_update_clauseContext.prototype.merge_update_delete_part = function() {
    return this.getTypedRuleContext(Merge_update_delete_partContext,0);
};

Merge_update_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMerge_update_clause(this);
	}
};

Merge_update_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMerge_update_clause(this);
	}
};




plsqlParser.Merge_update_clauseContext = Merge_update_clauseContext;

plsqlParser.prototype.merge_update_clause = function() {

    var localctx = new Merge_update_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, plsqlParser.RULE_merge_update_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3453;
        this.match(plsqlParser.WHEN);
        this.state = 3454;
        this.match(plsqlParser.MATCHED);
        this.state = 3455;
        this.match(plsqlParser.THEN);
        this.state = 3456;
        this.match(plsqlParser.UPDATE);
        this.state = 3457;
        this.match(plsqlParser.SET);
        this.state = 3458;
        this.merge_element();
        this.state = 3463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3459;
            this.match(plsqlParser.COMMA);
            this.state = 3460;
            this.merge_element();
            this.state = 3465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3467;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WHERE) {
            this.state = 3466;
            this.where_clause();
        }

        this.state = 3470;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
        if(la_===1) {
            this.state = 3469;
            this.merge_update_delete_part();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_merge_element;
    return this;
}

Merge_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_elementContext.prototype.constructor = Merge_elementContext;

Merge_elementContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Merge_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Merge_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMerge_element(this);
	}
};

Merge_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMerge_element(this);
	}
};




plsqlParser.Merge_elementContext = Merge_elementContext;

plsqlParser.prototype.merge_element = function() {

    var localctx = new Merge_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, plsqlParser.RULE_merge_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3472;
        this.column_name();
        this.state = 3473;
        this.match(plsqlParser.EQUALS_OP);
        this.state = 3474;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_update_delete_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_merge_update_delete_part;
    return this;
}

Merge_update_delete_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_update_delete_partContext.prototype.constructor = Merge_update_delete_partContext;

Merge_update_delete_partContext.prototype.DELETE = function() {
    return this.getToken(plsqlParser.DELETE, 0);
};

Merge_update_delete_partContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_update_delete_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMerge_update_delete_part(this);
	}
};

Merge_update_delete_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMerge_update_delete_part(this);
	}
};




plsqlParser.Merge_update_delete_partContext = Merge_update_delete_partContext;

plsqlParser.prototype.merge_update_delete_part = function() {

    var localctx = new Merge_update_delete_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, plsqlParser.RULE_merge_update_delete_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3476;
        this.match(plsqlParser.DELETE);
        this.state = 3477;
        this.where_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_insert_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_merge_insert_clause;
    return this;
}

Merge_insert_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_insert_clauseContext.prototype.constructor = Merge_insert_clauseContext;

Merge_insert_clauseContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Merge_insert_clauseContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Merge_insert_clauseContext.prototype.MATCHED = function() {
    return this.getToken(plsqlParser.MATCHED, 0);
};

Merge_insert_clauseContext.prototype.THEN = function() {
    return this.getToken(plsqlParser.THEN, 0);
};

Merge_insert_clauseContext.prototype.INSERT = function() {
    return this.getToken(plsqlParser.INSERT, 0);
};

Merge_insert_clauseContext.prototype.VALUES = function() {
    return this.getToken(plsqlParser.VALUES, 0);
};

Merge_insert_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Merge_insert_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Merge_insert_clauseContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_insert_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMerge_insert_clause(this);
	}
};

Merge_insert_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMerge_insert_clause(this);
	}
};




plsqlParser.Merge_insert_clauseContext = Merge_insert_clauseContext;

plsqlParser.prototype.merge_insert_clause = function() {

    var localctx = new Merge_insert_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, plsqlParser.RULE_merge_insert_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3479;
        this.match(plsqlParser.WHEN);
        this.state = 3480;
        this.match(plsqlParser.NOT);
        this.state = 3481;
        this.match(plsqlParser.MATCHED);
        this.state = 3482;
        this.match(plsqlParser.THEN);
        this.state = 3483;
        this.match(plsqlParser.INSERT);
        this.state = 3495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.LEFT_PAREN) {
            this.state = 3484;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3485;
            this.column_name();
            this.state = 3490;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3486;
                this.match(plsqlParser.COMMA);
                this.state = 3487;
                this.column_name();
                this.state = 3492;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3493;
            this.match(plsqlParser.RIGHT_PAREN);
        }

        this.state = 3497;
        this.match(plsqlParser.VALUES);
        this.state = 3498;
        this.expression_list();
        this.state = 3500;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.WHERE) {
            this.state = 3499;
            this.where_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selected_tableviewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_selected_tableview;
    return this;
}

Selected_tableviewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_tableviewContext.prototype.constructor = Selected_tableviewContext;

Selected_tableviewContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Selected_tableviewContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Selected_tableviewContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Selected_tableviewContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSelected_tableview(this);
	}
};

Selected_tableviewContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSelected_tableview(this);
	}
};




plsqlParser.Selected_tableviewContext = Selected_tableviewContext;

plsqlParser.prototype.selected_tableview = function() {

    var localctx = new Selected_tableviewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, plsqlParser.RULE_selected_tableview);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3507;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 3502;
            this.tableview_name();
            break;
        case plsqlParser.LEFT_PAREN:
            this.state = 3503;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3504;
            this.select_statement();
            this.state = 3505;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 3509;
            this.table_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_table_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_lock_table_statement;
    return this;
}

Lock_table_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_table_statementContext.prototype.constructor = Lock_table_statementContext;

Lock_table_statementContext.prototype.LOCK = function() {
    return this.getToken(plsqlParser.LOCK, 0);
};

Lock_table_statementContext.prototype.TABLE = function() {
    return this.getToken(plsqlParser.TABLE, 0);
};

Lock_table_statementContext.prototype.lock_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Lock_table_elementContext);
    } else {
        return this.getTypedRuleContext(Lock_table_elementContext,i);
    }
};

Lock_table_statementContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Lock_table_statementContext.prototype.lock_mode = function() {
    return this.getTypedRuleContext(Lock_modeContext,0);
};

Lock_table_statementContext.prototype.MODE = function() {
    return this.getToken(plsqlParser.MODE, 0);
};

Lock_table_statementContext.prototype.wait_nowait_part = function() {
    return this.getTypedRuleContext(Wait_nowait_partContext,0);
};

Lock_table_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLock_table_statement(this);
	}
};

Lock_table_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLock_table_statement(this);
	}
};




plsqlParser.Lock_table_statementContext = Lock_table_statementContext;

plsqlParser.prototype.lock_table_statement = function() {

    var localctx = new Lock_table_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, plsqlParser.RULE_lock_table_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3512;
        this.match(plsqlParser.LOCK);
        this.state = 3513;
        this.match(plsqlParser.TABLE);
        this.state = 3514;
        this.lock_table_element();
        this.state = 3519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3515;
            this.match(plsqlParser.COMMA);
            this.state = 3516;
            this.lock_table_element();
            this.state = 3521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3522;
        this.match(plsqlParser.IN);
        this.state = 3523;
        this.lock_mode();
        this.state = 3524;
        this.match(plsqlParser.MODE);
        this.state = 3526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NOWAIT || _la===plsqlParser.WAIT) {
            this.state = 3525;
            this.wait_nowait_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Wait_nowait_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_wait_nowait_part;
    return this;
}

Wait_nowait_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wait_nowait_partContext.prototype.constructor = Wait_nowait_partContext;

Wait_nowait_partContext.prototype.WAIT = function() {
    return this.getToken(plsqlParser.WAIT, 0);
};

Wait_nowait_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Wait_nowait_partContext.prototype.NOWAIT = function() {
    return this.getToken(plsqlParser.NOWAIT, 0);
};

Wait_nowait_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWait_nowait_part(this);
	}
};

Wait_nowait_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWait_nowait_part(this);
	}
};




plsqlParser.Wait_nowait_partContext = Wait_nowait_partContext;

plsqlParser.prototype.wait_nowait_part = function() {

    var localctx = new Wait_nowait_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, plsqlParser.RULE_wait_nowait_part);
    try {
        this.state = 3531;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.WAIT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3528;
            this.match(plsqlParser.WAIT);
            this.state = 3529;
            this.expression(0);
            break;
        case plsqlParser.NOWAIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3530;
            this.match(plsqlParser.NOWAIT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_lock_table_element;
    return this;
}

Lock_table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_table_elementContext.prototype.constructor = Lock_table_elementContext;

Lock_table_elementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Lock_table_elementContext.prototype.partition_extension_clause = function() {
    return this.getTypedRuleContext(Partition_extension_clauseContext,0);
};

Lock_table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLock_table_element(this);
	}
};

Lock_table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLock_table_element(this);
	}
};




plsqlParser.Lock_table_elementContext = Lock_table_elementContext;

plsqlParser.prototype.lock_table_element = function() {

    var localctx = new Lock_table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, plsqlParser.RULE_lock_table_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3533;
        this.tableview_name();
        this.state = 3535;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PARTITION || _la===plsqlParser.SUBPARTITION) {
            this.state = 3534;
            this.partition_extension_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_modeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_lock_mode;
    return this;
}

Lock_modeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_modeContext.prototype.constructor = Lock_modeContext;

Lock_modeContext.prototype.ROW = function() {
    return this.getToken(plsqlParser.ROW, 0);
};

Lock_modeContext.prototype.SHARE = function() {
    return this.getToken(plsqlParser.SHARE, 0);
};

Lock_modeContext.prototype.EXCLUSIVE = function() {
    return this.getToken(plsqlParser.EXCLUSIVE, 0);
};

Lock_modeContext.prototype.UPDATE = function() {
    return this.getToken(plsqlParser.UPDATE, 0);
};

Lock_modeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLock_mode(this);
	}
};

Lock_modeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLock_mode(this);
	}
};




plsqlParser.Lock_modeContext = Lock_modeContext;

plsqlParser.prototype.lock_mode = function() {

    var localctx = new Lock_modeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, plsqlParser.RULE_lock_mode);
    var _la = 0; // Token type
    try {
        this.state = 3549;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,427,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3537;
            this.match(plsqlParser.ROW);
            this.state = 3538;
            this.match(plsqlParser.SHARE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3539;
            this.match(plsqlParser.ROW);
            this.state = 3540;
            this.match(plsqlParser.EXCLUSIVE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3541;
            this.match(plsqlParser.SHARE);
            this.state = 3543;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.UPDATE) {
                this.state = 3542;
                this.match(plsqlParser.UPDATE);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3545;
            this.match(plsqlParser.SHARE);
            this.state = 3546;
            this.match(plsqlParser.ROW);
            this.state = 3547;
            this.match(plsqlParser.EXCLUSIVE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3548;
            this.match(plsqlParser.EXCLUSIVE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_table_refContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_general_table_ref;
    return this;
}

General_table_refContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_table_refContext.prototype.constructor = General_table_refContext;

General_table_refContext.prototype.dml_table_expression_clause = function() {
    return this.getTypedRuleContext(Dml_table_expression_clauseContext,0);
};

General_table_refContext.prototype.ONLY = function() {
    return this.getToken(plsqlParser.ONLY, 0);
};

General_table_refContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

General_table_refContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterGeneral_table_ref(this);
	}
};

General_table_refContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitGeneral_table_ref(this);
	}
};




plsqlParser.General_table_refContext = General_table_refContext;

plsqlParser.prototype.general_table_ref = function() {

    var localctx = new General_table_refContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, plsqlParser.RULE_general_table_ref);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3557;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,428,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3551;
            this.dml_table_expression_clause();
            break;

        case 2:
            this.state = 3552;
            this.match(plsqlParser.ONLY);
            this.state = 3553;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3554;
            this.dml_table_expression_clause();
            this.state = 3555;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        }
        this.state = 3560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,429,this._ctx);
        if(la_===1) {
            this.state = 3559;
            this.table_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Static_returning_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_static_returning_clause;
    return this;
}

Static_returning_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Static_returning_clauseContext.prototype.constructor = Static_returning_clauseContext;

Static_returning_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Static_returning_clauseContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Static_returning_clauseContext.prototype.RETURNING = function() {
    return this.getToken(plsqlParser.RETURNING, 0);
};

Static_returning_clauseContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Static_returning_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterStatic_returning_clause(this);
	}
};

Static_returning_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitStatic_returning_clause(this);
	}
};




plsqlParser.Static_returning_clauseContext = Static_returning_clauseContext;

plsqlParser.prototype.static_returning_clause = function() {

    var localctx = new Static_returning_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, plsqlParser.RULE_static_returning_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3562;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.RETURN || _la===plsqlParser.RETURNING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3563;
        this.expression(0);
        this.state = 3568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3564;
            this.match(plsqlParser.COMMA);
            this.state = 3565;
            this.expression(0);
            this.state = 3570;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3571;
        this.into_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_error_logging_clause;
    return this;
}

Error_logging_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_clauseContext.prototype.constructor = Error_logging_clauseContext;

Error_logging_clauseContext.prototype.LOG = function() {
    return this.getToken(plsqlParser.LOG, 0);
};

Error_logging_clauseContext.prototype.ERRORS = function() {
    return this.getToken(plsqlParser.ERRORS, 0);
};

Error_logging_clauseContext.prototype.error_logging_into_part = function() {
    return this.getTypedRuleContext(Error_logging_into_partContext,0);
};

Error_logging_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Error_logging_clauseContext.prototype.error_logging_reject_part = function() {
    return this.getTypedRuleContext(Error_logging_reject_partContext,0);
};

Error_logging_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterError_logging_clause(this);
	}
};

Error_logging_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitError_logging_clause(this);
	}
};




plsqlParser.Error_logging_clauseContext = Error_logging_clauseContext;

plsqlParser.prototype.error_logging_clause = function() {

    var localctx = new Error_logging_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, plsqlParser.RULE_error_logging_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3573;
        this.match(plsqlParser.LOG);
        this.state = 3574;
        this.match(plsqlParser.ERRORS);
        this.state = 3576;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
        if(la_===1) {
            this.state = 3575;
            this.error_logging_into_part();

        }
        this.state = 3579;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,432,this._ctx);
        if(la_===1) {
            this.state = 3578;
            this.expression(0);

        }
        this.state = 3582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.REJECT) {
            this.state = 3581;
            this.error_logging_reject_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_into_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_error_logging_into_part;
    return this;
}

Error_logging_into_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_into_partContext.prototype.constructor = Error_logging_into_partContext;

Error_logging_into_partContext.prototype.INTO = function() {
    return this.getToken(plsqlParser.INTO, 0);
};

Error_logging_into_partContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Error_logging_into_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterError_logging_into_part(this);
	}
};

Error_logging_into_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitError_logging_into_part(this);
	}
};




plsqlParser.Error_logging_into_partContext = Error_logging_into_partContext;

plsqlParser.prototype.error_logging_into_part = function() {

    var localctx = new Error_logging_into_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, plsqlParser.RULE_error_logging_into_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3584;
        this.match(plsqlParser.INTO);
        this.state = 3585;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_reject_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_error_logging_reject_part;
    return this;
}

Error_logging_reject_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_reject_partContext.prototype.constructor = Error_logging_reject_partContext;

Error_logging_reject_partContext.prototype.REJECT = function() {
    return this.getToken(plsqlParser.REJECT, 0);
};

Error_logging_reject_partContext.prototype.LIMIT = function() {
    return this.getToken(plsqlParser.LIMIT, 0);
};

Error_logging_reject_partContext.prototype.UNLIMITED = function() {
    return this.getToken(plsqlParser.UNLIMITED, 0);
};

Error_logging_reject_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Error_logging_reject_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterError_logging_reject_part(this);
	}
};

Error_logging_reject_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitError_logging_reject_part(this);
	}
};




plsqlParser.Error_logging_reject_partContext = Error_logging_reject_partContext;

plsqlParser.prototype.error_logging_reject_part = function() {

    var localctx = new Error_logging_reject_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, plsqlParser.RULE_error_logging_reject_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3587;
        this.match(plsqlParser.REJECT);
        this.state = 3588;
        this.match(plsqlParser.LIMIT);
        this.state = 3591;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,434,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3589;
            this.match(plsqlParser.UNLIMITED);
            break;

        case 2:
            this.state = 3590;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_table_expression_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_dml_table_expression_clause;
    return this;
}

Dml_table_expression_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_table_expression_clauseContext.prototype.constructor = Dml_table_expression_clauseContext;

Dml_table_expression_clauseContext.prototype.table_collection_expression = function() {
    return this.getTypedRuleContext(Table_collection_expressionContext,0);
};

Dml_table_expression_clauseContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Dml_table_expression_clauseContext.prototype.subquery_restriction_clause = function() {
    return this.getTypedRuleContext(Subquery_restriction_clauseContext,0);
};

Dml_table_expression_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_table_expression_clauseContext.prototype.sample_clause = function() {
    return this.getTypedRuleContext(Sample_clauseContext,0);
};

Dml_table_expression_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDml_table_expression_clause(this);
	}
};

Dml_table_expression_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDml_table_expression_clause(this);
	}
};




plsqlParser.Dml_table_expression_clauseContext = Dml_table_expression_clauseContext;

plsqlParser.prototype.dml_table_expression_clause = function() {

    var localctx = new Dml_table_expression_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, plsqlParser.RULE_dml_table_expression_clause);
    var _la = 0; // Token type
    try {
        this.state = 3605;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.TABLE:
        case plsqlParser.THE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3593;
            this.table_collection_expression();
            break;
        case plsqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 3594;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3595;
            this.select_statement();
            this.state = 3597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.WITH) {
                this.state = 3596;
                this.subquery_restriction_clause();
            }

            this.state = 3599;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 3601;
            this.tableview_name();
            this.state = 3603;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
            if(la_===1) {
                this.state = 3602;
                this.sample_clause();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_collection_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_collection_expression;
    return this;
}

Table_collection_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_collection_expressionContext.prototype.constructor = Table_collection_expressionContext;

Table_collection_expressionContext.prototype.TABLE = function() {
    return this.getToken(plsqlParser.TABLE, 0);
};

Table_collection_expressionContext.prototype.THE = function() {
    return this.getToken(plsqlParser.THE, 0);
};

Table_collection_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Table_collection_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Table_collection_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_collection_expression(this);
	}
};

Table_collection_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_collection_expression(this);
	}
};




plsqlParser.Table_collection_expressionContext = Table_collection_expressionContext;

plsqlParser.prototype.table_collection_expression = function() {

    var localctx = new Table_collection_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, plsqlParser.RULE_table_collection_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3607;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.TABLE || _la===plsqlParser.THE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3620;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3608;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3609;
            this.subquery(0);
            this.state = 3610;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 3612;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3613;
            this.expression(0);
            this.state = 3614;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 3618;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
            if(la_===1) {
                this.state = 3615;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 3616;
                this.match(plsqlParser.PLUS_SIGN);
                this.state = 3617;
                this.match(plsqlParser.RIGHT_PAREN);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_restriction_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_subquery_restriction_clause;
    return this;
}

Subquery_restriction_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_restriction_clauseContext.prototype.constructor = Subquery_restriction_clauseContext;

Subquery_restriction_clauseContext.prototype.WITH = function() {
    return this.getToken(plsqlParser.WITH, 0);
};

Subquery_restriction_clauseContext.prototype.READ = function() {
    return this.getToken(plsqlParser.READ, 0);
};

Subquery_restriction_clauseContext.prototype.ONLY = function() {
    return this.getToken(plsqlParser.ONLY, 0);
};

Subquery_restriction_clauseContext.prototype.CHECK = function() {
    return this.getToken(plsqlParser.CHECK, 0);
};

Subquery_restriction_clauseContext.prototype.OPTION = function() {
    return this.getToken(plsqlParser.OPTION, 0);
};

Subquery_restriction_clauseContext.prototype.CONSTRAINT = function() {
    return this.getToken(plsqlParser.CONSTRAINT, 0);
};

Subquery_restriction_clauseContext.prototype.constraint_name = function() {
    return this.getTypedRuleContext(Constraint_nameContext,0);
};

Subquery_restriction_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSubquery_restriction_clause(this);
	}
};

Subquery_restriction_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSubquery_restriction_clause(this);
	}
};




plsqlParser.Subquery_restriction_clauseContext = Subquery_restriction_clauseContext;

plsqlParser.prototype.subquery_restriction_clause = function() {

    var localctx = new Subquery_restriction_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, plsqlParser.RULE_subquery_restriction_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3622;
        this.match(plsqlParser.WITH);
        this.state = 3631;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.READ:
            this.state = 3623;
            this.match(plsqlParser.READ);
            this.state = 3624;
            this.match(plsqlParser.ONLY);
            break;
        case plsqlParser.CHECK:
            this.state = 3625;
            this.match(plsqlParser.CHECK);
            this.state = 3626;
            this.match(plsqlParser.OPTION);
            this.state = 3629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.CONSTRAINT) {
                this.state = 3627;
                this.match(plsqlParser.CONSTRAINT);
                this.state = 3628;
                this.constraint_name();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sample_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sample_clause;
    return this;
}

Sample_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sample_clauseContext.prototype.constructor = Sample_clauseContext;

Sample_clauseContext.prototype.SAMPLE = function() {
    return this.getToken(plsqlParser.SAMPLE, 0);
};

Sample_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Sample_clauseContext.prototype.BLOCK = function() {
    return this.getToken(plsqlParser.BLOCK, 0);
};

Sample_clauseContext.prototype.seed_part = function() {
    return this.getTypedRuleContext(Seed_partContext,0);
};

Sample_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSample_clause(this);
	}
};

Sample_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSample_clause(this);
	}
};




plsqlParser.Sample_clauseContext = Sample_clauseContext;

plsqlParser.prototype.sample_clause = function() {

    var localctx = new Sample_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, plsqlParser.RULE_sample_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3633;
        this.match(plsqlParser.SAMPLE);
        this.state = 3635;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.BLOCK) {
            this.state = 3634;
            this.match(plsqlParser.BLOCK);
        }

        this.state = 3637;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3638;
        this.expression(0);
        this.state = 3641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.COMMA) {
            this.state = 3639;
            this.match(plsqlParser.COMMA);
            this.state = 3640;
            this.expression(0);
        }

        this.state = 3643;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 3645;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,444,this._ctx);
        if(la_===1) {
            this.state = 3644;
            this.seed_part();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Seed_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_seed_part;
    return this;
}

Seed_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seed_partContext.prototype.constructor = Seed_partContext;

Seed_partContext.prototype.SEED = function() {
    return this.getToken(plsqlParser.SEED, 0);
};

Seed_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Seed_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSeed_part(this);
	}
};

Seed_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSeed_part(this);
	}
};




plsqlParser.Seed_partContext = Seed_partContext;

plsqlParser.prototype.seed_part = function() {

    var localctx = new Seed_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, plsqlParser.RULE_seed_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3647;
        this.match(plsqlParser.SEED);
        this.state = 3648;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3649;
        this.expression(0);
        this.state = 3650;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cursor_expression;
    return this;
}

Cursor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_expressionContext.prototype.constructor = Cursor_expressionContext;

Cursor_expressionContext.prototype.CURSOR = function() {
    return this.getToken(plsqlParser.CURSOR, 0);
};

Cursor_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Cursor_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCursor_expression(this);
	}
};

Cursor_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCursor_expression(this);
	}
};




plsqlParser.Cursor_expressionContext = Cursor_expressionContext;

plsqlParser.prototype.cursor_expression = function() {

    var localctx = new Cursor_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, plsqlParser.RULE_cursor_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3652;
        this.match(plsqlParser.CURSOR);
        this.state = 3653;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3654;
        this.subquery(0);
        this.state = 3655;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitExpression_list(this);
	}
};




plsqlParser.Expression_listContext = Expression_listContext;

plsqlParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, plsqlParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3657;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3659;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (plsqlParser.BLOCK - 32)) | (1 << (plsqlParser.BODY - 32)) | (1 << (plsqlParser.BOOLEAN - 32)) | (1 << (plsqlParser.BOTH - 32)) | (1 << (plsqlParser.BULK - 32)) | (1 << (plsqlParser.BYTE - 32)) | (1 << (plsqlParser.C_LETTER - 32)) | (1 << (plsqlParser.CALL - 32)) | (1 << (plsqlParser.CANONICAL - 32)) | (1 << (plsqlParser.CASCADE - 32)) | (1 << (plsqlParser.CASE - 32)) | (1 << (plsqlParser.CAST - 32)) | (1 << (plsqlParser.CHAR - 32)) | (1 << (plsqlParser.CHAR_CS - 32)) | (1 << (plsqlParser.CHARACTER - 32)) | (1 << (plsqlParser.CHR - 32)) | (1 << (plsqlParser.CLOB - 32)) | (1 << (plsqlParser.CLOSE - 32)) | (1 << (plsqlParser.CLUSTER - 32)) | (1 << (plsqlParser.COLLECT - 32)) | (1 << (plsqlParser.COLUMNS - 32)) | (1 << (plsqlParser.COMMENT - 32)) | (1 << (plsqlParser.COMMIT - 32)) | (1 << (plsqlParser.COMMITTED - 32)) | (1 << (plsqlParser.COMPATIBILITY - 32)) | (1 << (plsqlParser.COMPILE - 32)) | (1 << (plsqlParser.COMPOUND - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (plsqlParser.DECOMPOSE - 96)) | (1 << (plsqlParser.DECREMENT - 96)) | (1 << (plsqlParser.DEFAULT - 96)) | (1 << (plsqlParser.DEFAULTS - 96)) | (1 << (plsqlParser.DEFERRED - 96)) | (1 << (plsqlParser.DEFINER - 96)) | (1 << (plsqlParser.DETERMINISTIC - 96)) | (1 << (plsqlParser.DIMENSION - 96)) | (1 << (plsqlParser.DISABLE - 96)) | (1 << (plsqlParser.DISASSOCIATE - 96)) | (1 << (plsqlParser.DISTINCT - 96)) | (1 << (plsqlParser.DOCUMENT - 96)) | (1 << (plsqlParser.DOUBLE - 96)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (plsqlParser.EACH - 96)) | (1 << (plsqlParser.ELEMENT - 96)) | (1 << (plsqlParser.EMPTY - 96)) | (1 << (plsqlParser.ENABLE - 96)) | (1 << (plsqlParser.ENCODING - 96)) | (1 << (plsqlParser.ENTITYESCAPING - 96)) | (1 << (plsqlParser.ERR - 96)) | (1 << (plsqlParser.ERRORS - 96)) | (1 << (plsqlParser.ESCAPE - 96)) | (1 << (plsqlParser.EVALNAME - 96)) | (1 << (plsqlParser.EXCEPTION - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HIDE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (plsqlParser.HOUR - 160)) | (1 << (plsqlParser.IGNORE - 160)) | (1 << (plsqlParser.IMMEDIATE - 160)) | (1 << (plsqlParser.INCLUDE - 160)) | (1 << (plsqlParser.INCLUDING - 160)) | (1 << (plsqlParser.INCREMENT - 160)) | (1 << (plsqlParser.INDENT - 160)) | (1 << (plsqlParser.INDEXED - 160)) | (1 << (plsqlParser.INDICATOR - 160)) | (1 << (plsqlParser.INDICES - 160)) | (1 << (plsqlParser.INFINITE - 160)) | (1 << (plsqlParser.INLINE - 160)) | (1 << (plsqlParser.INNER - 160)) | (1 << (plsqlParser.INOUT - 160)) | (1 << (plsqlParser.INSTANTIABLE - 160)) | (1 << (plsqlParser.INSTEAD - 160)) | (1 << (plsqlParser.INT - 160)) | (1 << (plsqlParser.INTEGER - 160)) | (1 << (plsqlParser.INTERVAL - 160)) | (1 << (plsqlParser.INVALIDATE - 160)) | (1 << (plsqlParser.ISOLATION - 160)) | (1 << (plsqlParser.ITERATE - 160)) | (1 << (plsqlParser.JAVA - 160)) | (1 << (plsqlParser.JOIN - 160)) | (1 << (plsqlParser.KEEP - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (plsqlParser.MODEL - 224)) | (1 << (plsqlParser.MODIFY - 224)) | (1 << (plsqlParser.MONTH - 224)) | (1 << (plsqlParser.MULTISET - 224)) | (1 << (plsqlParser.NAME - 224)) | (1 << (plsqlParser.NAN - 224)) | (1 << (plsqlParser.NATURAL - 224)) | (1 << (plsqlParser.NATURALN - 224)) | (1 << (plsqlParser.NAV - 224)) | (1 << (plsqlParser.NCHAR - 224)) | (1 << (plsqlParser.NCHAR_CS - 224)) | (1 << (plsqlParser.NCLOB - 224)) | (1 << (plsqlParser.NESTED - 224)) | (1 << (plsqlParser.NEW - 224)) | (1 << (plsqlParser.NO - 224)) | (1 << (plsqlParser.NOAUDIT - 224)) | (1 << (plsqlParser.NOCOPY - 224)) | (1 << (plsqlParser.NOCYCLE - 224)) | (1 << (plsqlParser.NOENTITYESCAPING - 224)) | (1 << (plsqlParser.NONE - 224)) | (1 << (plsqlParser.NOSCHEMACHECK - 224)) | (1 << (plsqlParser.NOT - 224)) | (1 << (plsqlParser.NULL - 224)) | (1 << (plsqlParser.NULLS - 224)) | (1 << (plsqlParser.NUMBER - 224)) | (1 << (plsqlParser.NUMERIC - 224)) | (1 << (plsqlParser.NVARCHAR2 - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (plsqlParser.POSITIVEN - 288)) | (1 << (plsqlParser.PRAGMA - 288)) | (1 << (plsqlParser.PRECEDING - 288)) | (1 << (plsqlParser.PRECISION - 288)) | (1 << (plsqlParser.PRESENT - 288)) | (1 << (plsqlParser.PRIOR - 288)) | (1 << (plsqlParser.RAISE - 288)) | (1 << (plsqlParser.RANGE - 288)) | (1 << (plsqlParser.RAW - 288)) | (1 << (plsqlParser.READ - 288)) | (1 << (plsqlParser.REAL - 288)) | (1 << (plsqlParser.RECORD - 288)) | (1 << (plsqlParser.REF - 288)) | (1 << (plsqlParser.REFERENCE - 288)) | (1 << (plsqlParser.REFERENCING - 288)) | (1 << (plsqlParser.REJECT - 288)) | (1 << (plsqlParser.RELIES_ON - 288)) | (1 << (plsqlParser.RENAME - 288)) | (1 << (plsqlParser.REPLACE - 288)) | (1 << (plsqlParser.RESPECT - 288)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 288)) | (1 << (plsqlParser.RESULT - 288)) | (1 << (plsqlParser.RESULT_CACHE - 288)) | (1 << (plsqlParser.RETURN - 288)) | (1 << (plsqlParser.RETURNING - 288)) | (1 << (plsqlParser.REUSE - 288)) | (1 << (plsqlParser.REVERSE - 288)) | (1 << (plsqlParser.RIGHT - 288)) | (1 << (plsqlParser.ROLLBACK - 288)) | (1 << (plsqlParser.ROLLUP - 288)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (plsqlParser.SKIP_ - 353)) | (1 << (plsqlParser.SMALLINT - 353)) | (1 << (plsqlParser.SNAPSHOT - 353)) | (1 << (plsqlParser.SOME - 353)) | (1 << (plsqlParser.SPECIFICATION - 353)) | (1 << (plsqlParser.SQLDATA - 353)) | (1 << (plsqlParser.SQLERROR - 353)) | (1 << (plsqlParser.STANDALONE - 353)) | (1 << (plsqlParser.STARTUP - 353)) | (1 << (plsqlParser.STATEMENT - 353)) | (1 << (plsqlParser.STATEMENT_ID - 353)) | (1 << (plsqlParser.STATIC - 353)) | (1 << (plsqlParser.STATISTICS - 353)) | (1 << (plsqlParser.STRING - 353)) | (1 << (plsqlParser.SUBMULTISET - 353)) | (1 << (plsqlParser.SUBPARTITION - 353)) | (1 << (plsqlParser.SUBSTITUTABLE - 353)) | (1 << (plsqlParser.SUBTYPE - 353)) | (1 << (plsqlParser.SUCCESS - 353)) | (1 << (plsqlParser.SUSPEND - 353)) | (1 << (plsqlParser.TIME - 353)) | (1 << (plsqlParser.TIMESTAMP - 353)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMEZONE_ABBR - 353)) | (1 << (plsqlParser.TIMEZONE_HOUR - 353)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 353)))) !== 0) || ((((_la - 385)) & ~0x1f) == 0 && ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUE - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)))) !== 0) || ((((_la - 417)) & ~0x1f) == 0 && ((1 << (_la - 417)) & ((1 << (plsqlParser.VERSION - 417)) | (1 << (plsqlParser.VERSIONS - 417)) | (1 << (plsqlParser.WAIT - 417)) | (1 << (plsqlParser.WARNING - 417)) | (1 << (plsqlParser.WELLFORMED - 417)) | (1 << (plsqlParser.WHENEVER - 417)) | (1 << (plsqlParser.WHILE - 417)) | (1 << (plsqlParser.WITHIN - 417)) | (1 << (plsqlParser.WORK - 417)) | (1 << (plsqlParser.WRITE - 417)) | (1 << (plsqlParser.XML - 417)) | (1 << (plsqlParser.XMLAGG - 417)) | (1 << (plsqlParser.XMLATTRIBUTES - 417)) | (1 << (plsqlParser.XMLCAST - 417)) | (1 << (plsqlParser.XMLCOLATTVAL - 417)) | (1 << (plsqlParser.XMLELEMENT - 417)) | (1 << (plsqlParser.XMLEXISTS - 417)) | (1 << (plsqlParser.XMLFOREST - 417)) | (1 << (plsqlParser.XMLNAMESPACES - 417)) | (1 << (plsqlParser.XMLPARSE - 417)) | (1 << (plsqlParser.XMLPI - 417)) | (1 << (plsqlParser.XMLQUERY - 417)) | (1 << (plsqlParser.XMLROOT - 417)) | (1 << (plsqlParser.XMLSERIALIZE - 417)) | (1 << (plsqlParser.XMLTABLE - 417)) | (1 << (plsqlParser.YEAR - 417)) | (1 << (plsqlParser.YES - 417)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 417)) | (1 << (plsqlParser.ZONE - 417)))) !== 0) || ((((_la - 449)) & ~0x1f) == 0 && ((1 << (_la - 449)) & ((1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)))) !== 0) || ((((_la - 483)) & ~0x1f) == 0 && ((1 << (_la - 483)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 483)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 483)) | (1 << (plsqlParser.CHAR_STRING - 483)) | (1 << (plsqlParser.DELIMITED_ID - 483)) | (1 << (plsqlParser.LEFT_PAREN - 483)) | (1 << (plsqlParser.PLUS_SIGN - 483)) | (1 << (plsqlParser.MINUS_SIGN - 483)) | (1 << (plsqlParser.BINDVAR - 483)) | (1 << (plsqlParser.COLON - 483)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 3658;
            this.expression(0);
        }

        this.state = 3665;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3661;
            this.match(plsqlParser.COMMA);
            this.state = 3662;
            this.expression(0);
            this.state = 3667;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3668;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCondition(this);
	}
};

ConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCondition(this);
	}
};




plsqlParser.ConditionContext = ConditionContext;

plsqlParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, plsqlParser.RULE_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3670;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NotExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    this.expr = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExprContext.prototype = Object.create(ExpressionContext.prototype);
NotExprContext.prototype.constructor = NotExprContext;

plsqlParser.NotExprContext = NotExprContext;

NotExprContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

NotExprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NotExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNotExpr(this);
	}
};

NotExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNotExpr(this);
	}
};


function IgnoreExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IgnoreExprContext.prototype = Object.create(ExpressionContext.prototype);
IgnoreExprContext.prototype.constructor = IgnoreExprContext;

plsqlParser.IgnoreExprContext = IgnoreExprContext;

IgnoreExprContext.prototype.binary_expression = function() {
    return this.getTypedRuleContext(Binary_expressionContext,0);
};
IgnoreExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIgnoreExpr(this);
	}
};

IgnoreExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIgnoreExpr(this);
	}
};


function IsExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // Is_partContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsExprContext.prototype = Object.create(ExpressionContext.prototype);
IsExprContext.prototype.constructor = IsExprContext;

plsqlParser.IsExprContext = IsExprContext;

IsExprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsExprContext.prototype.IS = function() {
    return this.getToken(plsqlParser.IS, 0);
};

IsExprContext.prototype.is_part = function() {
    return this.getTypedRuleContext(Is_partContext,0);
};
IsExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIsExpr(this);
	}
};

IsExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIsExpr(this);
	}
};


function AndExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExprContext.prototype = Object.create(ExpressionContext.prototype);
AndExprContext.prototype.constructor = AndExprContext;

plsqlParser.AndExprContext = AndExprContext;

AndExprContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AndExprContext.prototype.AND = function() {
    return this.getToken(plsqlParser.AND, 0);
};
AndExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAndExpr(this);
	}
};

AndExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAndExpr(this);
	}
};


function OrExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExprContext.prototype = Object.create(ExpressionContext.prototype);
OrExprContext.prototype.constructor = OrExprContext;

plsqlParser.OrExprContext = OrExprContext;

OrExprContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OrExprContext.prototype.OR = function() {
    return this.getToken(plsqlParser.OR, 0);
};
OrExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOrExpr(this);
	}
};

OrExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOrExpr(this);
	}
};


function ParenExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenExprContext.prototype = Object.create(ExpressionContext.prototype);
ParenExprContext.prototype.constructor = ParenExprContext;

plsqlParser.ParenExprContext = ParenExprContext;

ParenExprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ParenExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterParenExpr(this);
	}
};

ParenExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitParenExpr(this);
	}
};


function LikeExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Like_typeContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LikeExprContext.prototype = Object.create(ExpressionContext.prototype);
LikeExprContext.prototype.constructor = LikeExprContext;

plsqlParser.LikeExprContext = LikeExprContext;

LikeExprContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LikeExprContext.prototype.like_type = function() {
    return this.getTypedRuleContext(Like_typeContext,0);
};

LikeExprContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

LikeExprContext.prototype.ESCAPE = function() {
    return this.getToken(plsqlParser.ESCAPE, 0);
};
LikeExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLikeExpr(this);
	}
};

LikeExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLikeExpr(this);
	}
};


function BetweenExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenExprContext.prototype = Object.create(ExpressionContext.prototype);
BetweenExprContext.prototype.constructor = BetweenExprContext;

plsqlParser.BetweenExprContext = BetweenExprContext;

BetweenExprContext.prototype.AND = function() {
    return this.getToken(plsqlParser.AND, 0);
};

BetweenExprContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BetweenExprContext.prototype.BETWEEN = function() {
    return this.getToken(plsqlParser.BETWEEN, 0);
};

BetweenExprContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};
BetweenExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterBetweenExpr(this);
	}
};

BetweenExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitBetweenExpr(this);
	}
};


function InExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExprContext.prototype = Object.create(ExpressionContext.prototype);
InExprContext.prototype.constructor = InExprContext;

plsqlParser.InExprContext = InExprContext;

InExprContext.prototype.in_elements = function() {
    return this.getTypedRuleContext(In_elementsContext,0);
};

InExprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InExprContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

InExprContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};
InExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterInExpr(this);
	}
};

InExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitInExpr(this);
	}
};


function MemberExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // Binary_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberExprContext.prototype = Object.create(ExpressionContext.prototype);
MemberExprContext.prototype.constructor = MemberExprContext;

plsqlParser.MemberExprContext = MemberExprContext;

MemberExprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MemberExprContext.prototype.binary_expression = function() {
    return this.getTypedRuleContext(Binary_expressionContext,0);
};

MemberExprContext.prototype.MEMBER = function() {
    return this.getToken(plsqlParser.MEMBER, 0);
};

MemberExprContext.prototype.SUBMULTISET = function() {
    return this.getToken(plsqlParser.SUBMULTISET, 0);
};

MemberExprContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};
MemberExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMemberExpr(this);
	}
};

MemberExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMemberExpr(this);
	}
};


function CursorExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    this.expr = null; // Cursor_partContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CursorExprContext.prototype = Object.create(ExpressionContext.prototype);
CursorExprContext.prototype.constructor = CursorExprContext;

plsqlParser.CursorExprContext = CursorExprContext;

CursorExprContext.prototype.CURSOR = function() {
    return this.getToken(plsqlParser.CURSOR, 0);
};

CursorExprContext.prototype.cursor_part = function() {
    return this.getTypedRuleContext(Cursor_partContext,0);
};
CursorExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCursorExpr(this);
	}
};

CursorExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCursorExpr(this);
	}
};


function RelExprContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Relational_operatorContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelExprContext.prototype = Object.create(ExpressionContext.prototype);
RelExprContext.prototype.constructor = RelExprContext;

plsqlParser.RelExprContext = RelExprContext;

RelExprContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

RelExprContext.prototype.relational_operator = function() {
    return this.getTypedRuleContext(Relational_operatorContext,0);
};
RelExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRelExpr(this);
	}
};

RelExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRelExpr(this);
	}
};



plsqlParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 492;
    this.enterRecursionRule(localctx, 492, plsqlParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3682;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CursorExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 3673;
            localctx.op = this.match(plsqlParser.CURSOR);
            this.state = 3674;
            localctx.expr = this.cursor_part();
            break;

        case 2:
            localctx = new NotExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3675;
            localctx.op = this.match(plsqlParser.NOT);
            this.state = 3676;
            localctx.expr = this.expression(5);
            break;

        case 3:
            localctx = new IgnoreExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3677;
            this.binary_expression(0);
            break;

        case 4:
            localctx = new ParenExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3678;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3679;
            this.expression(0);
            this.state = 3680;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 3730;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,454,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 3728;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BetweenExprContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_expression);
                    this.state = 3684;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 3686;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===plsqlParser.NOT) {
                        this.state = 3685;
                        this.match(plsqlParser.NOT);
                    }

                    this.state = 3688;
                    localctx.op = this.match(plsqlParser.BETWEEN);
                    this.state = 3689;
                    localctx.right = this.expression(0);
                    this.state = 3690;
                    this.match(plsqlParser.AND);
                    this.state = 3691;
                    localctx.right = this.expression(11);
                    break;

                case 2:
                    localctx = new RelExprContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_expression);
                    this.state = 3693;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 3694;
                    localctx.op = this.relational_operator();
                    this.state = 3695;
                    localctx.right = this.expression(9);
                    break;

                case 3:
                    localctx = new AndExprContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_expression);
                    this.state = 3697;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 3698;
                    localctx.op = this.match(plsqlParser.AND);
                    this.state = 3699;
                    localctx.right = this.expression(5);
                    break;

                case 4:
                    localctx = new OrExprContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_expression);
                    this.state = 3700;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 3701;
                    localctx.op = this.match(plsqlParser.OR);
                    this.state = 3702;
                    localctx.right = this.expression(4);
                    break;

                case 5:
                    localctx = new IsExprContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_expression);
                    this.state = 3703;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 3704;
                    localctx.op = this.match(plsqlParser.IS);
                    this.state = 3705;
                    localctx.right = this.is_part();
                    break;

                case 6:
                    localctx = new InExprContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_expression);
                    this.state = 3706;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 3708;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===plsqlParser.NOT) {
                        this.state = 3707;
                        this.match(plsqlParser.NOT);
                    }

                    this.state = 3710;
                    localctx.op = this.match(plsqlParser.IN);
                    this.state = 3711;
                    this.in_elements();
                    break;

                case 7:
                    localctx = new LikeExprContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_expression);
                    this.state = 3712;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 3714;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===plsqlParser.NOT) {
                        this.state = 3713;
                        this.match(plsqlParser.NOT);
                    }

                    this.state = 3716;
                    localctx.op = this.like_type();
                    this.state = 3717;
                    localctx.right = this.expression(0);
                    this.state = 3720;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
                    if(la_===1) {
                        this.state = 3718;
                        this.match(plsqlParser.ESCAPE);
                        this.state = 3719;
                        localctx.right = this.expression(0);

                    }
                    break;

                case 8:
                    localctx = new MemberExprContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_expression);
                    this.state = 3722;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 3723;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===plsqlParser.MEMBER || _la===plsqlParser.SUBMULTISET)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3725;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===plsqlParser.OF) {
                        this.state = 3724;
                        this.match(plsqlParser.OF);
                    }

                    this.state = 3727;
                    localctx.right = this.binary_expression(0);
                    break;

                } 
            }
            this.state = 3732;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,454,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Is_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_is_part;
    return this;
}

Is_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_partContext.prototype.constructor = Is_partContext;

Is_partContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

Is_partContext.prototype.NAN = function() {
    return this.getToken(plsqlParser.NAN, 0);
};

Is_partContext.prototype.PRESENT = function() {
    return this.getToken(plsqlParser.PRESENT, 0);
};

Is_partContext.prototype.INFINITE = function() {
    return this.getToken(plsqlParser.INFINITE, 0);
};

Is_partContext.prototype.A_LETTER = function() {
    return this.getToken(plsqlParser.A_LETTER, 0);
};

Is_partContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Is_partContext.prototype.EMPTY = function() {
    return this.getToken(plsqlParser.EMPTY, 0);
};

Is_partContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Is_partContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Is_partContext.prototype.NOT = function() {
    return this.getToken(plsqlParser.NOT, 0);
};

Is_partContext.prototype.TYPE = function() {
    return this.getToken(plsqlParser.TYPE, 0);
};

Is_partContext.prototype.ONLY = function() {
    return this.getToken(plsqlParser.ONLY, 0);
};

Is_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIs_part(this);
	}
};

Is_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIs_part(this);
	}
};




plsqlParser.Is_partContext = Is_partContext;

plsqlParser.prototype.is_part = function() {

    var localctx = new Is_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, plsqlParser.RULE_is_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3734;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.NOT) {
            this.state = 3733;
            this.match(plsqlParser.NOT);
        }

        this.state = 3761;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.NULL:
            this.state = 3736;
            this.match(plsqlParser.NULL);
            break;
        case plsqlParser.NAN:
            this.state = 3737;
            this.match(plsqlParser.NAN);
            break;
        case plsqlParser.PRESENT:
            this.state = 3738;
            this.match(plsqlParser.PRESENT);
            break;
        case plsqlParser.INFINITE:
            this.state = 3739;
            this.match(plsqlParser.INFINITE);
            break;
        case plsqlParser.A_LETTER:
            this.state = 3740;
            this.match(plsqlParser.A_LETTER);
            this.state = 3741;
            this.match(plsqlParser.SET);
            break;
        case plsqlParser.EMPTY:
            this.state = 3742;
            this.match(plsqlParser.EMPTY);
            break;
        case plsqlParser.OF:
            this.state = 3743;
            this.match(plsqlParser.OF);
            this.state = 3745;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.TYPE) {
                this.state = 3744;
                this.match(plsqlParser.TYPE);
            }

            this.state = 3747;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3749;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
            if(la_===1) {
                this.state = 3748;
                this.match(plsqlParser.ONLY);

            }
            this.state = 3751;
            this.type_spec();
            this.state = 3756;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3752;
                this.match(plsqlParser.COMMA);
                this.state = 3753;
                this.type_spec();
                this.state = 3758;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3759;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cursor_part;
    return this;
}

Cursor_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_partContext.prototype.constructor = Cursor_partContext;

Cursor_partContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Cursor_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCursor_part(this);
	}
};

Cursor_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCursor_part(this);
	}
};




plsqlParser.Cursor_partContext = Cursor_partContext;

plsqlParser.prototype.cursor_part = function() {

    var localctx = new Cursor_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, plsqlParser.RULE_cursor_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3763;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3764;
        this.subquery(0);
        this.state = 3765;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiset_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_multiset_type;
    return this;
}

Multiset_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiset_typeContext.prototype.constructor = Multiset_typeContext;

Multiset_typeContext.prototype.MEMBER = function() {
    return this.getToken(plsqlParser.MEMBER, 0);
};

Multiset_typeContext.prototype.SUBMULTISET = function() {
    return this.getToken(plsqlParser.SUBMULTISET, 0);
};

Multiset_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMultiset_type(this);
	}
};

Multiset_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMultiset_type(this);
	}
};




plsqlParser.Multiset_typeContext = Multiset_typeContext;

plsqlParser.prototype.multiset_type = function() {

    var localctx = new Multiset_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, plsqlParser.RULE_multiset_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3767;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.MEMBER || _la===plsqlParser.SUBMULTISET)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relational_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_relational_operator;
    return this;
}

Relational_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relational_operatorContext.prototype.constructor = Relational_operatorContext;

Relational_operatorContext.prototype.not_equal_op = function() {
    return this.getTypedRuleContext(Not_equal_opContext,0);
};

Relational_operatorContext.prototype.less_than_or_equals_op = function() {
    return this.getTypedRuleContext(Less_than_or_equals_opContext,0);
};

Relational_operatorContext.prototype.greater_than_or_equals_op = function() {
    return this.getTypedRuleContext(Greater_than_or_equals_opContext,0);
};

Relational_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRelational_operator(this);
	}
};

Relational_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRelational_operator(this);
	}
};




plsqlParser.Relational_operatorContext = Relational_operatorContext;

plsqlParser.prototype.relational_operator = function() {

    var localctx = new Relational_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, plsqlParser.RULE_relational_operator);
    try {
        this.state = 3775;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3769;
            this.match(plsqlParser.EQUALS_OP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3770;
            this.not_equal_op();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3771;
            this.match(plsqlParser.LESS_THAN_OP);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3772;
            this.match(plsqlParser.GREATER_THAN_OP);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3773;
            this.less_than_or_equals_op();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 3774;
            this.greater_than_or_equals_op();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Like_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_like_type;
    return this;
}

Like_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Like_typeContext.prototype.constructor = Like_typeContext;

Like_typeContext.prototype.LIKE = function() {
    return this.getToken(plsqlParser.LIKE, 0);
};

Like_typeContext.prototype.LIKEC = function() {
    return this.getToken(plsqlParser.LIKEC, 0);
};

Like_typeContext.prototype.LIKE2 = function() {
    return this.getToken(plsqlParser.LIKE2, 0);
};

Like_typeContext.prototype.LIKE4 = function() {
    return this.getToken(plsqlParser.LIKE4, 0);
};

Like_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLike_type(this);
	}
};

Like_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLike_type(this);
	}
};




plsqlParser.Like_typeContext = Like_typeContext;

plsqlParser.prototype.like_type = function() {

    var localctx = new Like_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, plsqlParser.RULE_like_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3777;
        _la = this._input.LA(1);
        if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (plsqlParser.LIKE - 199)) | (1 << (plsqlParser.LIKE2 - 199)) | (1 << (plsqlParser.LIKE4 - 199)) | (1 << (plsqlParser.LIKEC - 199)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Like_escape_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_like_escape_part;
    return this;
}

Like_escape_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Like_escape_partContext.prototype.constructor = Like_escape_partContext;

Like_escape_partContext.prototype.ESCAPE = function() {
    return this.getToken(plsqlParser.ESCAPE, 0);
};

Like_escape_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Like_escape_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLike_escape_part(this);
	}
};

Like_escape_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLike_escape_part(this);
	}
};




plsqlParser.Like_escape_partContext = Like_escape_partContext;

plsqlParser.prototype.like_escape_part = function() {

    var localctx = new Like_escape_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, plsqlParser.RULE_like_escape_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3779;
        this.match(plsqlParser.ESCAPE);
        this.state = 3780;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_in_elements;
    return this;
}

In_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_elementsContext.prototype.constructor = In_elementsContext;

In_elementsContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

In_elementsContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

In_elementsContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

In_elementsContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

In_elementsContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

In_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIn_elements(this);
	}
};

In_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIn_elements(this);
	}
};




plsqlParser.In_elementsContext = In_elementsContext;

plsqlParser.prototype.in_elements = function() {

    var localctx = new In_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, plsqlParser.RULE_in_elements);
    var _la = 0; // Token type
    try {
        this.state = 3800;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3782;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3783;
            this.subquery(0);
            this.state = 3784;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3786;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3787;
            this.concatenation();
            this.state = 3792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3788;
                this.match(plsqlParser.COMMA);
                this.state = 3789;
                this.concatenation();
                this.state = 3794;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3795;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3797;
            this.constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3798;
            this.bind_variable();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3799;
            this.general_element();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_between_elements;
    return this;
}

Between_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_elementsContext.prototype.constructor = Between_elementsContext;

Between_elementsContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Between_elementsContext.prototype.AND = function() {
    return this.getToken(plsqlParser.AND, 0);
};

Between_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterBetween_elements(this);
	}
};

Between_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitBetween_elements(this);
	}
};




plsqlParser.Between_elementsContext = Between_elementsContext;

plsqlParser.prototype.between_elements = function() {

    var localctx = new Between_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, plsqlParser.RULE_between_elements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3802;
        this.concatenation();
        this.state = 3803;
        this.match(plsqlParser.AND);
        this.state = 3804;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConcatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_concatenation;
    return this;
}

ConcatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

ConcatenationContext.prototype.binary_expression = function() {
    return this.getTypedRuleContext(Binary_expressionContext,0);
};

ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConcatenation(this);
	}
};




plsqlParser.ConcatenationContext = ConcatenationContext;

plsqlParser.prototype.concatenation = function() {

    var localctx = new ConcatenationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, plsqlParser.RULE_concatenation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3806;
        this.binary_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Binary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_binary_expression;
    return this;
}

Binary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_expressionContext.prototype.constructor = Binary_expressionContext;


 
Binary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function BinaryExprContext(parser, ctx) {
	Binary_expressionContext.call(this, parser);
    this.left = null; // Binary_expressionContext;
    this.op = null; // Token;
    this.right = null; // Binary_expressionContext;
    Binary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryExprContext.prototype = Object.create(Binary_expressionContext.prototype);
BinaryExprContext.prototype.constructor = BinaryExprContext;

plsqlParser.BinaryExprContext = BinaryExprContext;

BinaryExprContext.prototype.binary_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Binary_expressionContext);
    } else {
        return this.getTypedRuleContext(Binary_expressionContext,i);
    }
};

BinaryExprContext.prototype.CONCATENATION_OP = function() {
    return this.getToken(plsqlParser.CONCATENATION_OP, 0);
};

BinaryExprContext.prototype.AT = function() {
    return this.getToken(plsqlParser.AT, 0);
};

BinaryExprContext.prototype.interval_expression = function() {
    return this.getTypedRuleContext(Interval_expressionContext,0);
};

BinaryExprContext.prototype.LOCAL = function() {
    return this.getToken(plsqlParser.LOCAL, 0);
};

BinaryExprContext.prototype.TIME = function() {
    return this.getToken(plsqlParser.TIME, 0);
};

BinaryExprContext.prototype.ZONE = function() {
    return this.getToken(plsqlParser.ZONE, 0);
};
BinaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterBinaryExpr(this);
	}
};

BinaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitBinaryExpr(this);
	}
};


function ParenBinaryExprContext(parser, ctx) {
	Binary_expressionContext.call(this, parser);
    Binary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenBinaryExprContext.prototype = Object.create(Binary_expressionContext.prototype);
ParenBinaryExprContext.prototype.constructor = ParenBinaryExprContext;

plsqlParser.ParenBinaryExprContext = ParenBinaryExprContext;

ParenBinaryExprContext.prototype.binary_expression = function() {
    return this.getTypedRuleContext(Binary_expressionContext,0);
};
ParenBinaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterParenBinaryExpr(this);
	}
};

ParenBinaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitParenBinaryExpr(this);
	}
};


function IgnoreBinaryExprContext(parser, ctx) {
	Binary_expressionContext.call(this, parser);
    Binary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IgnoreBinaryExprContext.prototype = Object.create(Binary_expressionContext.prototype);
IgnoreBinaryExprContext.prototype.constructor = IgnoreBinaryExprContext;

plsqlParser.IgnoreBinaryExprContext = IgnoreBinaryExprContext;

IgnoreBinaryExprContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};
IgnoreBinaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIgnoreBinaryExpr(this);
	}
};

IgnoreBinaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIgnoreBinaryExpr(this);
	}
};



plsqlParser.prototype.binary_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Binary_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 512;
    this.enterRecursionRule(localctx, 512, plsqlParser.RULE_binary_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3814;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ParenBinaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 3809;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3810;
            this.binary_expression(0);
            this.state = 3811;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 2:
            localctx = new IgnoreBinaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3813;
            this.unary_expression(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 3838;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,467,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 3836;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BinaryExprContext(this, new Binary_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_binary_expression);
                    this.state = 3816;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 3817;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 487)) & ~0x1f) == 0 && ((1 << (_la - 487)) & ((1 << (plsqlParser.PERCENT - 487)) | (1 << (plsqlParser.ASTERISK - 487)) | (1 << (plsqlParser.SOLIDUS - 487)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3818;
                    localctx.right = this.binary_expression(6);
                    break;

                case 2:
                    localctx = new BinaryExprContext(this, new Binary_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_binary_expression);
                    this.state = 3819;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 3820;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===plsqlParser.PLUS_SIGN || _la===plsqlParser.MINUS_SIGN)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3821;
                    localctx.right = this.binary_expression(5);
                    break;

                case 3:
                    localctx = new BinaryExprContext(this, new Binary_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_binary_expression);
                    this.state = 3822;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 3823;
                    localctx.op = this.match(plsqlParser.CONCATENATION_OP);
                    this.state = 3824;
                    localctx.right = this.binary_expression(4);
                    break;

                case 4:
                    localctx = new BinaryExprContext(this, new Binary_expressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_binary_expression);
                    this.state = 3825;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 3834;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case plsqlParser.AT:
                        this.state = 3826;
                        this.match(plsqlParser.AT);
                        this.state = 3831;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case plsqlParser.LOCAL:
                            this.state = 3827;
                            this.match(plsqlParser.LOCAL);
                            break;
                        case plsqlParser.TIME:
                            this.state = 3828;
                            this.match(plsqlParser.TIME);
                            this.state = 3829;
                            this.match(plsqlParser.ZONE);
                            this.state = 3830;
                            this.binary_expression(0);
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;
                    case plsqlParser.DAY:
                    case plsqlParser.YEAR:
                        this.state = 3833;
                        this.interval_expression();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                } 
            }
            this.state = 3840;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,467,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Interval_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_interval_expression;
    return this;
}

Interval_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interval_expressionContext.prototype.constructor = Interval_expressionContext;

Interval_expressionContext.prototype.DAY = function() {
    return this.getToken(plsqlParser.DAY, 0);
};

Interval_expressionContext.prototype.TO = function() {
    return this.getToken(plsqlParser.TO, 0);
};

Interval_expressionContext.prototype.SECOND = function() {
    return this.getToken(plsqlParser.SECOND, 0);
};

Interval_expressionContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Interval_expressionContext.prototype.YEAR = function() {
    return this.getToken(plsqlParser.YEAR, 0);
};

Interval_expressionContext.prototype.MONTH = function() {
    return this.getToken(plsqlParser.MONTH, 0);
};

Interval_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterInterval_expression(this);
	}
};

Interval_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitInterval_expression(this);
	}
};




plsqlParser.Interval_expressionContext = Interval_expressionContext;

plsqlParser.prototype.interval_expression = function() {

    var localctx = new Interval_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, plsqlParser.RULE_interval_expression);
    var _la = 0; // Token type
    try {
        this.state = 3865;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.DAY:
            this.enterOuterAlt(localctx, 1);
            this.state = 3841;
            this.match(plsqlParser.DAY);
            this.state = 3846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.LEFT_PAREN) {
                this.state = 3842;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 3843;
                this.concatenation();
                this.state = 3844;
                this.match(plsqlParser.RIGHT_PAREN);
            }

            this.state = 3848;
            this.match(plsqlParser.TO);
            this.state = 3849;
            this.match(plsqlParser.SECOND);
            this.state = 3854;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,469,this._ctx);
            if(la_===1) {
                this.state = 3850;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 3851;
                this.concatenation();
                this.state = 3852;
                this.match(plsqlParser.RIGHT_PAREN);

            }
            break;
        case plsqlParser.YEAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 3856;
            this.match(plsqlParser.YEAR);
            this.state = 3861;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.LEFT_PAREN) {
                this.state = 3857;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 3858;
                this.concatenation();
                this.state = 3859;
                this.match(plsqlParser.RIGHT_PAREN);
            }

            this.state = 3863;
            this.match(plsqlParser.TO);
            this.state = 3864;
            this.match(plsqlParser.MONTH);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_expression;
    return this;
}

Model_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_expressionContext.prototype.constructor = Model_expressionContext;

Model_expressionContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

Model_expressionContext.prototype.model_expression_element = function() {
    return this.getTypedRuleContext(Model_expression_elementContext,0);
};

Model_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_expression(this);
	}
};

Model_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_expression(this);
	}
};




plsqlParser.Model_expressionContext = Model_expressionContext;

plsqlParser.prototype.model_expression = function() {

    var localctx = new Model_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, plsqlParser.RULE_model_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3867;
        this.unary_expression(0);
        this.state = 3868;
        this.match(plsqlParser.LEFT_BRACKET);
        this.state = 3869;
        this.model_expression_element();
        this.state = 3870;
        this.match(plsqlParser.RIGHT_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_expression_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_model_expression_element;
    return this;
}

Model_expression_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_expression_elementContext.prototype.constructor = Model_expression_elementContext;

Model_expression_elementContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.ANY);
    } else {
        return this.getToken(plsqlParser.ANY, i);
    }
};


Model_expression_elementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Model_expression_elementContext.prototype.single_column_for_loop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Single_column_for_loopContext);
    } else {
        return this.getTypedRuleContext(Single_column_for_loopContext,i);
    }
};

Model_expression_elementContext.prototype.multi_column_for_loop = function() {
    return this.getTypedRuleContext(Multi_column_for_loopContext,0);
};

Model_expression_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterModel_expression_element(this);
	}
};

Model_expression_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitModel_expression_element(this);
	}
};




plsqlParser.Model_expression_elementContext = Model_expression_elementContext;

plsqlParser.prototype.model_expression_element = function() {

    var localctx = new Model_expression_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, plsqlParser.RULE_model_expression_element);
    var _la = 0; // Token type
    try {
        this.state = 3895;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,476,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3874;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3872;
                this.match(plsqlParser.ANY);
                break;

            case 2:
                this.state = 3873;
                this.expression(0);
                break;

            }
            this.state = 3883;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3876;
                this.match(plsqlParser.COMMA);
                this.state = 3879;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 3877;
                    this.match(plsqlParser.ANY);
                    break;

                case 2:
                    this.state = 3878;
                    this.expression(0);
                    break;

                }
                this.state = 3885;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3886;
            this.single_column_for_loop();
            this.state = 3891;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3887;
                this.match(plsqlParser.COMMA);
                this.state = 3888;
                this.single_column_for_loop();
                this.state = 3893;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3894;
            this.multi_column_for_loop();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Single_column_for_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_single_column_for_loop;
    this.ex1 = null; // ExpressionContext
    this.ex2 = null; // ExpressionContext
    this.ex3 = null; // ExpressionContext
    return this;
}

Single_column_for_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_column_for_loopContext.prototype.constructor = Single_column_for_loopContext;

Single_column_for_loopContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Single_column_for_loopContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Single_column_for_loopContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Single_column_for_loopContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Single_column_for_loopContext.prototype.FROM = function() {
    return this.getToken(plsqlParser.FROM, 0);
};

Single_column_for_loopContext.prototype.TO = function() {
    return this.getToken(plsqlParser.TO, 0);
};

Single_column_for_loopContext.prototype.for_increment_decrement_type = function() {
    return this.getTypedRuleContext(For_increment_decrement_typeContext,0);
};

Single_column_for_loopContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Single_column_for_loopContext.prototype.for_like_part = function() {
    return this.getTypedRuleContext(For_like_partContext,0);
};

Single_column_for_loopContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSingle_column_for_loop(this);
	}
};

Single_column_for_loopContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSingle_column_for_loop(this);
	}
};




plsqlParser.Single_column_for_loopContext = Single_column_for_loopContext;

plsqlParser.prototype.single_column_for_loop = function() {

    var localctx = new Single_column_for_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, plsqlParser.RULE_single_column_for_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3897;
        this.match(plsqlParser.FOR);
        this.state = 3898;
        this.column_name();
        this.state = 3911;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.IN:
            this.state = 3899;
            this.match(plsqlParser.IN);
            this.state = 3900;
            this.expression_list();
            break;
        case plsqlParser.FROM:
        case plsqlParser.LIKE:
            this.state = 3902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.LIKE) {
                this.state = 3901;
                this.for_like_part();
            }

            this.state = 3904;
            this.match(plsqlParser.FROM);
            this.state = 3905;
            localctx.ex1 = this.expression(0);
            this.state = 3906;
            this.match(plsqlParser.TO);
            this.state = 3907;
            localctx.ex2 = this.expression(0);
            this.state = 3908;
            this.for_increment_decrement_type();
            this.state = 3909;
            localctx.ex3 = this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_like_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_for_like_part;
    return this;
}

For_like_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_like_partContext.prototype.constructor = For_like_partContext;

For_like_partContext.prototype.LIKE = function() {
    return this.getToken(plsqlParser.LIKE, 0);
};

For_like_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_like_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFor_like_part(this);
	}
};

For_like_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFor_like_part(this);
	}
};




plsqlParser.For_like_partContext = For_like_partContext;

plsqlParser.prototype.for_like_part = function() {

    var localctx = new For_like_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, plsqlParser.RULE_for_like_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3913;
        this.match(plsqlParser.LIKE);
        this.state = 3914;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_increment_decrement_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_for_increment_decrement_type;
    return this;
}

For_increment_decrement_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_increment_decrement_typeContext.prototype.constructor = For_increment_decrement_typeContext;

For_increment_decrement_typeContext.prototype.INCREMENT = function() {
    return this.getToken(plsqlParser.INCREMENT, 0);
};

For_increment_decrement_typeContext.prototype.DECREMENT = function() {
    return this.getToken(plsqlParser.DECREMENT, 0);
};

For_increment_decrement_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFor_increment_decrement_type(this);
	}
};

For_increment_decrement_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFor_increment_decrement_type(this);
	}
};




plsqlParser.For_increment_decrement_typeContext = For_increment_decrement_typeContext;

plsqlParser.prototype.for_increment_decrement_type = function() {

    var localctx = new For_increment_decrement_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, plsqlParser.RULE_for_increment_decrement_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3916;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.DECREMENT || _la===plsqlParser.INCREMENT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_column_for_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_multi_column_for_loop;
    return this;
}

Multi_column_for_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_column_for_loopContext.prototype.constructor = Multi_column_for_loopContext;

Multi_column_for_loopContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Multi_column_for_loopContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Multi_column_for_loopContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Multi_column_for_loopContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Multi_column_for_loopContext.prototype.expression_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_listContext);
    } else {
        return this.getTypedRuleContext(Expression_listContext,i);
    }
};

Multi_column_for_loopContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMulti_column_for_loop(this);
	}
};

Multi_column_for_loopContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMulti_column_for_loop(this);
	}
};




plsqlParser.Multi_column_for_loopContext = Multi_column_for_loopContext;

plsqlParser.prototype.multi_column_for_loop = function() {

    var localctx = new Multi_column_for_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, plsqlParser.RULE_multi_column_for_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3918;
        this.match(plsqlParser.FOR);
        this.state = 3919;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3920;
        this.column_name();
        this.state = 3925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 3921;
            this.match(plsqlParser.COMMA);
            this.state = 3922;
            this.column_name();
            this.state = 3927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3928;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 3929;
        this.match(plsqlParser.IN);
        this.state = 3930;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 3943;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,481,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3931;
            this.subquery(0);
            break;

        case 2:
            this.state = 3932;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 3933;
            this.expression_list();
            this.state = 3938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 3934;
                this.match(plsqlParser.COMMA);
                this.state = 3935;
                this.expression_list();
                this.state = 3940;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3941;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        }
        this.state = 3945;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_unary_expression;
    return this;
}

Unary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_expressionContext.prototype.constructor = Unary_expressionContext;


 
Unary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnaryExprContext(parser, ctx) {
	Unary_expressionContext.call(this, parser);
    this.op = null; // Token;
    Unary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExprContext.prototype = Object.create(Unary_expressionContext.prototype);
UnaryExprContext.prototype.constructor = UnaryExprContext;

plsqlParser.UnaryExprContext = UnaryExprContext;

UnaryExprContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

UnaryExprContext.prototype.PRIOR = function() {
    return this.getToken(plsqlParser.PRIOR, 0);
};

UnaryExprContext.prototype.CONNECT_BY_ROOT = function() {
    return this.getToken(plsqlParser.CONNECT_BY_ROOT, 0);
};

UnaryExprContext.prototype.NEW = function() {
    return this.getToken(plsqlParser.NEW, 0);
};

UnaryExprContext.prototype.DISTINCT = function() {
    return this.getToken(plsqlParser.DISTINCT, 0);
};

UnaryExprContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

UnaryExprContext.prototype.model_expression_element = function() {
    return this.getTypedRuleContext(Model_expression_elementContext,0);
};
UnaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUnaryExpr(this);
	}
};

UnaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUnaryExpr(this);
	}
};


function IgnoreUnaryExprContext(parser, ctx) {
	Unary_expressionContext.call(this, parser);
    Unary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IgnoreUnaryExprContext.prototype = Object.create(Unary_expressionContext.prototype);
IgnoreUnaryExprContext.prototype.constructor = IgnoreUnaryExprContext;

plsqlParser.IgnoreUnaryExprContext = IgnoreUnaryExprContext;

IgnoreUnaryExprContext.prototype.case_statement = function() {
    return this.getTypedRuleContext(Case_statementContext,0);
};

IgnoreUnaryExprContext.prototype.quantified_expression = function() {
    return this.getTypedRuleContext(Quantified_expressionContext,0);
};

IgnoreUnaryExprContext.prototype.standard_function = function() {
    return this.getTypedRuleContext(Standard_functionContext,0);
};

IgnoreUnaryExprContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};
IgnoreUnaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIgnoreUnaryExpr(this);
	}
};

IgnoreUnaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIgnoreUnaryExpr(this);
	}
};



plsqlParser.prototype.unary_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Unary_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 528;
    this.enterRecursionRule(localctx, 528, plsqlParser.RULE_unary_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3964;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,482,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 3948;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.PLUS_SIGN || _la===plsqlParser.MINUS_SIGN)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3949;
            this.unary_expression(10);
            break;

        case 2:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3950;
            localctx.op = this.match(plsqlParser.PRIOR);
            this.state = 3951;
            this.unary_expression(9);
            break;

        case 3:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3952;
            localctx.op = this.match(plsqlParser.CONNECT_BY_ROOT);
            this.state = 3953;
            this.unary_expression(8);
            break;

        case 4:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3954;
            localctx.op = this.match(plsqlParser.NEW);
            this.state = 3955;
            this.unary_expression(7);
            break;

        case 5:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3956;
            localctx.op = this.match(plsqlParser.DISTINCT);
            this.state = 3957;
            this.unary_expression(6);
            break;

        case 6:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3958;
            localctx.op = this.match(plsqlParser.ALL);
            this.state = 3959;
            this.unary_expression(5);
            break;

        case 7:
            localctx = new IgnoreUnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3960;
            this.case_statement();
            break;

        case 8:
            localctx = new IgnoreUnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3961;
            this.quantified_expression();
            break;

        case 9:
            localctx = new IgnoreUnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3962;
            this.standard_function();
            break;

        case 10:
            localctx = new IgnoreUnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 3963;
            this.atom();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 3973;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,483,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new UnaryExprContext(this, new Unary_expressionContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, plsqlParser.RULE_unary_expression);
                this.state = 3966;
                if (!( this.precpred(this._ctx, 11))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                }
                this.state = 3967;
                localctx.op = this.match(plsqlParser.LEFT_BRACKET);
                this.state = 3968;
                this.model_expression_element();
                this.state = 3969;
                this.match(plsqlParser.RIGHT_BRACKET); 
            }
            this.state = 3975;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,483,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_case_statement;
    return this;
}

Case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_statementContext.prototype.constructor = Case_statementContext;

Case_statementContext.prototype.searched_case_statement = function() {
    return this.getTypedRuleContext(Searched_case_statementContext,0);
};

Case_statementContext.prototype.simple_case_statement = function() {
    return this.getTypedRuleContext(Simple_case_statementContext,0);
};

Case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCase_statement(this);
	}
};

Case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCase_statement(this);
	}
};




plsqlParser.Case_statementContext = Case_statementContext;

plsqlParser.prototype.case_statement = function() {

    var localctx = new Case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, plsqlParser.RULE_case_statement);
    try {
        this.state = 3978;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3976;
            this.searched_case_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3977;
            this.simple_case_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_simple_case_statement;
    this.ck1 = null; // Token
    return this;
}

Simple_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_case_statementContext.prototype.constructor = Simple_case_statementContext;

Simple_case_statementContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Simple_case_statementContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

Simple_case_statementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.CASE);
    } else {
        return this.getToken(plsqlParser.CASE, i);
    }
};


Simple_case_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Simple_case_statementContext.prototype.simple_case_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_case_when_partContext);
    } else {
        return this.getTypedRuleContext(Simple_case_when_partContext,i);
    }
};

Simple_case_statementContext.prototype.case_else_part = function() {
    return this.getTypedRuleContext(Case_else_partContext,0);
};

Simple_case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSimple_case_statement(this);
	}
};

Simple_case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSimple_case_statement(this);
	}
};




plsqlParser.Simple_case_statementContext = Simple_case_statementContext;

plsqlParser.prototype.simple_case_statement = function() {

    var localctx = new Simple_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, plsqlParser.RULE_simple_case_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3981;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 3980;
            this.label_name();
        }

        this.state = 3983;
        localctx.ck1 = this.match(plsqlParser.CASE);
        this.state = 3984;
        this.atom();
        this.state = 3986; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3985;
            this.simple_case_when_part();
            this.state = 3988; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.WHEN);
        this.state = 3991;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ELSE) {
            this.state = 3990;
            this.case_else_part();
        }

        this.state = 3993;
        this.match(plsqlParser.END);
        this.state = 3995;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,488,this._ctx);
        if(la_===1) {
            this.state = 3994;
            this.match(plsqlParser.CASE);

        }
        this.state = 3998;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
        if(la_===1) {
            this.state = 3997;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_case_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_simple_case_when_part;
    return this;
}

Simple_case_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_case_when_partContext.prototype.constructor = Simple_case_when_partContext;

Simple_case_when_partContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Simple_case_when_partContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Simple_case_when_partContext.prototype.THEN = function() {
    return this.getToken(plsqlParser.THEN, 0);
};

Simple_case_when_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Simple_case_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSimple_case_when_part(this);
	}
};

Simple_case_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSimple_case_when_part(this);
	}
};




plsqlParser.Simple_case_when_partContext = Simple_case_when_partContext;

plsqlParser.prototype.simple_case_when_part = function() {

    var localctx = new Simple_case_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, plsqlParser.RULE_simple_case_when_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4000;
        this.match(plsqlParser.WHEN);
        this.state = 4001;
        this.expression(0);
        this.state = 4002;
        this.match(plsqlParser.THEN);
        this.state = 4005;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4003;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4004;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_searched_case_statement;
    this.ck1 = null; // Token
    return this;
}

Searched_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_case_statementContext.prototype.constructor = Searched_case_statementContext;

Searched_case_statementContext.prototype.END = function() {
    return this.getToken(plsqlParser.END, 0);
};

Searched_case_statementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.CASE);
    } else {
        return this.getToken(plsqlParser.CASE, i);
    }
};


Searched_case_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Searched_case_statementContext.prototype.searched_case_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Searched_case_when_partContext);
    } else {
        return this.getTypedRuleContext(Searched_case_when_partContext,i);
    }
};

Searched_case_statementContext.prototype.case_else_part = function() {
    return this.getTypedRuleContext(Case_else_partContext,0);
};

Searched_case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSearched_case_statement(this);
	}
};

Searched_case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSearched_case_statement(this);
	}
};




plsqlParser.Searched_case_statementContext = Searched_case_statementContext;

plsqlParser.prototype.searched_case_statement = function() {

    var localctx = new Searched_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, plsqlParser.RULE_searched_case_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4008;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 4007;
            this.label_name();
        }

        this.state = 4010;
        localctx.ck1 = this.match(plsqlParser.CASE);
        this.state = 4012; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4011;
            this.searched_case_when_part();
            this.state = 4014; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===plsqlParser.WHEN);
        this.state = 4017;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ELSE) {
            this.state = 4016;
            this.case_else_part();
        }

        this.state = 4019;
        this.match(plsqlParser.END);
        this.state = 4021;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
        if(la_===1) {
            this.state = 4020;
            this.match(plsqlParser.CASE);

        }
        this.state = 4024;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
        if(la_===1) {
            this.state = 4023;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_case_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_searched_case_when_part;
    return this;
}

Searched_case_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_case_when_partContext.prototype.constructor = Searched_case_when_partContext;

Searched_case_when_partContext.prototype.WHEN = function() {
    return this.getToken(plsqlParser.WHEN, 0);
};

Searched_case_when_partContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Searched_case_when_partContext.prototype.THEN = function() {
    return this.getToken(plsqlParser.THEN, 0);
};

Searched_case_when_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Searched_case_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSearched_case_when_part(this);
	}
};

Searched_case_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSearched_case_when_part(this);
	}
};




plsqlParser.Searched_case_when_partContext = Searched_case_when_partContext;

plsqlParser.prototype.searched_case_when_part = function() {

    var localctx = new Searched_case_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, plsqlParser.RULE_searched_case_when_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4026;
        this.match(plsqlParser.WHEN);
        this.state = 4027;
        this.expression(0);
        this.state = 4028;
        this.match(plsqlParser.THEN);
        this.state = 4031;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,496,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4029;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4030;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_case_else_part;
    return this;
}

Case_else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_else_partContext.prototype.constructor = Case_else_partContext;

Case_else_partContext.prototype.ELSE = function() {
    return this.getToken(plsqlParser.ELSE, 0);
};

Case_else_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Case_else_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Case_else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCase_else_part(this);
	}
};

Case_else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCase_else_part(this);
	}
};




plsqlParser.Case_else_partContext = Case_else_partContext;

plsqlParser.prototype.case_else_part = function() {

    var localctx = new Case_else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, plsqlParser.RULE_case_else_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4033;
        this.match(plsqlParser.ELSE);
        this.state = 4036;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4034;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4035;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.table_element = function() {
    return this.getTypedRuleContext(Table_elementContext,0);
};

AtomContext.prototype.outer_join_sign = function() {
    return this.getTypedRuleContext(Outer_join_signContext,0);
};

AtomContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

AtomContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AtomContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

AtomContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

AtomContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

AtomContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAtom(this);
	}
};




plsqlParser.AtomContext = AtomContext;

plsqlParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, plsqlParser.RULE_atom);
    try {
        this.state = 4055;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4038;
            this.table_element();
            this.state = 4039;
            this.outer_join_sign();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4041;
            this.bind_variable();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4042;
            this.constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4043;
            this.general_element();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4044;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4045;
            this.atom();
            this.state = 4046;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4053;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,498,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4048;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 4049;
                this.subquery(0);
                this.state = 4050;
                this.match(plsqlParser.RIGHT_PAREN);
                break;

            case 2:
                this.state = 4052;
                this.expression_list();
                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_or_vectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_expression_or_vector;
    return this;
}

Expression_or_vectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_or_vectorContext.prototype.constructor = Expression_or_vectorContext;

Expression_or_vectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Expression_or_vectorContext.prototype.vector_expr = function() {
    return this.getTypedRuleContext(Vector_exprContext,0);
};

Expression_or_vectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterExpression_or_vector(this);
	}
};

Expression_or_vectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitExpression_or_vector(this);
	}
};




plsqlParser.Expression_or_vectorContext = Expression_or_vectorContext;

plsqlParser.prototype.expression_or_vector = function() {

    var localctx = new Expression_or_vectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, plsqlParser.RULE_expression_or_vector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4057;
        this.expression(0);
        this.state = 4059;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.COMMA) {
            this.state = 4058;
            this.vector_expr();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Vector_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_vector_expr;
    return this;
}

Vector_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vector_exprContext.prototype.constructor = Vector_exprContext;

Vector_exprContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Vector_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterVector_expr(this);
	}
};

Vector_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitVector_expr(this);
	}
};




plsqlParser.Vector_exprContext = Vector_exprContext;

plsqlParser.prototype.vector_expr = function() {

    var localctx = new Vector_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, plsqlParser.RULE_vector_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4061;
        this.match(plsqlParser.COMMA);
        this.state = 4062;
        this.expression(0);
        this.state = 4067;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 4063;
            this.match(plsqlParser.COMMA);
            this.state = 4064;
            this.expression(0);
            this.state = 4069;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quantified_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_quantified_expression;
    return this;
}

Quantified_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantified_expressionContext.prototype.constructor = Quantified_expressionContext;

Quantified_expressionContext.prototype.SOME = function() {
    return this.getToken(plsqlParser.SOME, 0);
};

Quantified_expressionContext.prototype.EXISTS = function() {
    return this.getToken(plsqlParser.EXISTS, 0);
};

Quantified_expressionContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Quantified_expressionContext.prototype.ANY = function() {
    return this.getToken(plsqlParser.ANY, 0);
};

Quantified_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Quantified_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Quantified_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterQuantified_expression(this);
	}
};

Quantified_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitQuantified_expression(this);
	}
};




plsqlParser.Quantified_expressionContext = Quantified_expressionContext;

plsqlParser.prototype.quantified_expression = function() {

    var localctx = new Quantified_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, plsqlParser.RULE_quantified_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4070;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.ALL || _la===plsqlParser.ANY || _la===plsqlParser.EXISTS || _la===plsqlParser.SOME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4079;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4071;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4072;
            this.subquery(0);
            this.state = 4073;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 4075;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4076;
            this.expression(0);
            this.state = 4077;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Standard_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_standard_function;
    return this;
}

Standard_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Standard_functionContext.prototype.constructor = Standard_functionContext;


 
Standard_functionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AggregateCallContext(parser, ctx) {
	Standard_functionContext.call(this, parser);
    Standard_functionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateCallContext.prototype = Object.create(Standard_functionContext.prototype);
AggregateCallContext.prototype.constructor = AggregateCallContext;

plsqlParser.AggregateCallContext = AggregateCallContext;

AggregateCallContext.prototype.aggregate_windowed_function = function() {
    return this.getTypedRuleContext(Aggregate_windowed_functionContext,0);
};
AggregateCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAggregateCall(this);
	}
};

AggregateCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAggregateCall(this);
	}
};


function XmlCallContext(parser, ctx) {
	Standard_functionContext.call(this, parser);
    Standard_functionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

XmlCallContext.prototype = Object.create(Standard_functionContext.prototype);
XmlCallContext.prototype.constructor = XmlCallContext;

plsqlParser.XmlCallContext = XmlCallContext;

XmlCallContext.prototype.XMLAGG = function() {
    return this.getToken(plsqlParser.XMLAGG, 0);
};

XmlCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

XmlCallContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

XmlCallContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

XmlCallContext.prototype.xml_multiuse_expression_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_multiuse_expression_elementContext);
    } else {
        return this.getTypedRuleContext(Xml_multiuse_expression_elementContext,i);
    }
};

XmlCallContext.prototype.XMLCOLATTVAL = function() {
    return this.getToken(plsqlParser.XMLCOLATTVAL, 0);
};

XmlCallContext.prototype.XMLFOREST = function() {
    return this.getToken(plsqlParser.XMLFOREST, 0);
};

XmlCallContext.prototype.XMLELEMENT = function() {
    return this.getToken(plsqlParser.XMLELEMENT, 0);
};

XmlCallContext.prototype.xml_attributes_clause = function() {
    return this.getTypedRuleContext(Xml_attributes_clauseContext,0);
};

XmlCallContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(plsqlParser.ENTITYESCAPING, 0);
};

XmlCallContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(plsqlParser.NOENTITYESCAPING, 0);
};

XmlCallContext.prototype.NAME = function() {
    return this.getToken(plsqlParser.NAME, 0);
};

XmlCallContext.prototype.EVALNAME = function() {
    return this.getToken(plsqlParser.EVALNAME, 0);
};

XmlCallContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

XmlCallContext.prototype.XMLEXISTS = function() {
    return this.getToken(plsqlParser.XMLEXISTS, 0);
};

XmlCallContext.prototype.xml_passing_clause = function() {
    return this.getTypedRuleContext(Xml_passing_clauseContext,0);
};

XmlCallContext.prototype.XMLPARSE = function() {
    return this.getToken(plsqlParser.XMLPARSE, 0);
};

XmlCallContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

XmlCallContext.prototype.DOCUMENT = function() {
    return this.getToken(plsqlParser.DOCUMENT, 0);
};

XmlCallContext.prototype.CONTENT = function() {
    return this.getToken(plsqlParser.CONTENT, 0);
};

XmlCallContext.prototype.WELLFORMED = function() {
    return this.getToken(plsqlParser.WELLFORMED, 0);
};

XmlCallContext.prototype.XMLPI = function() {
    return this.getToken(plsqlParser.XMLPI, 0);
};

XmlCallContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

XmlCallContext.prototype.XMLQUERY = function() {
    return this.getToken(plsqlParser.XMLQUERY, 0);
};

XmlCallContext.prototype.RETURNING = function() {
    return this.getToken(plsqlParser.RETURNING, 0);
};

XmlCallContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

XmlCallContext.prototype.ON = function() {
    return this.getToken(plsqlParser.ON, 0);
};

XmlCallContext.prototype.EMPTY = function() {
    return this.getToken(plsqlParser.EMPTY, 0);
};

XmlCallContext.prototype.XMLROOT = function() {
    return this.getToken(plsqlParser.XMLROOT, 0);
};

XmlCallContext.prototype.xmlroot_param_version_part = function() {
    return this.getTypedRuleContext(Xmlroot_param_version_partContext,0);
};

XmlCallContext.prototype.xmlroot_param_standalone_part = function() {
    return this.getTypedRuleContext(Xmlroot_param_standalone_partContext,0);
};

XmlCallContext.prototype.XMLSERIALIZE = function() {
    return this.getToken(plsqlParser.XMLSERIALIZE, 0);
};

XmlCallContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

XmlCallContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

XmlCallContext.prototype.xmlserialize_param_enconding_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_enconding_partContext,0);
};

XmlCallContext.prototype.xmlserialize_param_version_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_version_partContext,0);
};

XmlCallContext.prototype.xmlserialize_param_ident_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_ident_partContext,0);
};

XmlCallContext.prototype.DEFAULTS = function() {
    return this.getToken(plsqlParser.DEFAULTS, 0);
};

XmlCallContext.prototype.HIDE = function() {
    return this.getToken(plsqlParser.HIDE, 0);
};

XmlCallContext.prototype.SHOW = function() {
    return this.getToken(plsqlParser.SHOW, 0);
};

XmlCallContext.prototype.XMLTABLE = function() {
    return this.getToken(plsqlParser.XMLTABLE, 0);
};

XmlCallContext.prototype.xml_namespaces_clause = function() {
    return this.getTypedRuleContext(Xml_namespaces_clauseContext,0);
};

XmlCallContext.prototype.COLUMNS = function() {
    return this.getToken(plsqlParser.COLUMNS, 0);
};

XmlCallContext.prototype.xml_table_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_table_columnContext);
    } else {
        return this.getTypedRuleContext(Xml_table_columnContext,i);
    }
};
XmlCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXmlCall(this);
	}
};

XmlCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXmlCall(this);
	}
};


function TodoCallContext(parser, ctx) {
	Standard_functionContext.call(this, parser);
    Standard_functionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TodoCallContext.prototype = Object.create(Standard_functionContext.prototype);
TodoCallContext.prototype.constructor = TodoCallContext;

plsqlParser.TodoCallContext = TodoCallContext;

TodoCallContext.prototype.regular_id = function() {
    return this.getTypedRuleContext(Regular_idContext,0);
};

TodoCallContext.prototype.function_argument_modeling = function() {
    return this.getTypedRuleContext(Function_argument_modelingContext,0);
};

TodoCallContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

TodoCallContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

TodoCallContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

TodoCallContext.prototype.CAST = function() {
    return this.getToken(plsqlParser.CAST, 0);
};

TodoCallContext.prototype.XMLCAST = function() {
    return this.getToken(plsqlParser.XMLCAST, 0);
};

TodoCallContext.prototype.MULTISET = function() {
    return this.getToken(plsqlParser.MULTISET, 0);
};

TodoCallContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

TodoCallContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

TodoCallContext.prototype.CHR = function() {
    return this.getToken(plsqlParser.CHR, 0);
};

TodoCallContext.prototype.USING = function() {
    return this.getToken(plsqlParser.USING, 0);
};

TodoCallContext.prototype.NCHAR_CS = function() {
    return this.getToken(plsqlParser.NCHAR_CS, 0);
};

TodoCallContext.prototype.COLLECT = function() {
    return this.getToken(plsqlParser.COLLECT, 0);
};

TodoCallContext.prototype.collect_order_by_part = function() {
    return this.getTypedRuleContext(Collect_order_by_partContext,0);
};

TodoCallContext.prototype.DISTINCT = function() {
    return this.getToken(plsqlParser.DISTINCT, 0);
};

TodoCallContext.prototype.UNIQUE = function() {
    return this.getToken(plsqlParser.UNIQUE, 0);
};

TodoCallContext.prototype.within_or_over_clause_keyword = function() {
    return this.getTypedRuleContext(Within_or_over_clause_keywordContext,0);
};

TodoCallContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

TodoCallContext.prototype.within_or_over_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Within_or_over_partContext);
    } else {
        return this.getTypedRuleContext(Within_or_over_partContext,i);
    }
};

TodoCallContext.prototype.DECOMPOSE = function() {
    return this.getToken(plsqlParser.DECOMPOSE, 0);
};

TodoCallContext.prototype.CANONICAL = function() {
    return this.getToken(plsqlParser.CANONICAL, 0);
};

TodoCallContext.prototype.COMPATIBILITY = function() {
    return this.getToken(plsqlParser.COMPATIBILITY, 0);
};

TodoCallContext.prototype.EXTRACT = function() {
    return this.getToken(plsqlParser.EXTRACT, 0);
};

TodoCallContext.prototype.FROM = function() {
    return this.getToken(plsqlParser.FROM, 0);
};

TodoCallContext.prototype.function_argument_analytic = function() {
    return this.getTypedRuleContext(Function_argument_analyticContext,0);
};

TodoCallContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

TodoCallContext.prototype.FIRST_VALUE = function() {
    return this.getToken(plsqlParser.FIRST_VALUE, 0);
};

TodoCallContext.prototype.LAST_VALUE = function() {
    return this.getToken(plsqlParser.LAST_VALUE, 0);
};

TodoCallContext.prototype.respect_or_ignore_nulls = function() {
    return this.getTypedRuleContext(Respect_or_ignore_nullsContext,0);
};

TodoCallContext.prototype.standard_prediction_function_keyword = function() {
    return this.getTypedRuleContext(Standard_prediction_function_keywordContext,0);
};

TodoCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TodoCallContext.prototype.cost_matrix_clause = function() {
    return this.getTypedRuleContext(Cost_matrix_clauseContext,0);
};

TodoCallContext.prototype.TRANSLATE = function() {
    return this.getToken(plsqlParser.TRANSLATE, 0);
};

TodoCallContext.prototype.CHAR_CS = function() {
    return this.getToken(plsqlParser.CHAR_CS, 0);
};

TodoCallContext.prototype.TREAT = function() {
    return this.getToken(plsqlParser.TREAT, 0);
};

TodoCallContext.prototype.REF = function() {
    return this.getToken(plsqlParser.REF, 0);
};

TodoCallContext.prototype.TRIM = function() {
    return this.getToken(plsqlParser.TRIM, 0);
};

TodoCallContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

TodoCallContext.prototype.LEADING = function() {
    return this.getToken(plsqlParser.LEADING, 0);
};

TodoCallContext.prototype.TRAILING = function() {
    return this.getToken(plsqlParser.TRAILING, 0);
};

TodoCallContext.prototype.BOTH = function() {
    return this.getToken(plsqlParser.BOTH, 0);
};
TodoCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTodoCall(this);
	}
};

TodoCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTodoCall(this);
	}
};



plsqlParser.Standard_functionContext = Standard_functionContext;

plsqlParser.prototype.standard_function = function() {

    var localctx = new Standard_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, plsqlParser.RULE_standard_function);
    var _la = 0; // Token type
    try {
        this.state = 4378;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,551,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AggregateCallContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4081;
            this.aggregate_windowed_function();
            break;

        case 2:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4082;
            this.regular_id();
            this.state = 4083;
            this.function_argument_modeling();
            this.state = 4085;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,503,this._ctx);
            if(la_===1) {
                this.state = 4084;
                this.using_clause();

            }
            break;

        case 3:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4087;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.CAST || _la===plsqlParser.XMLCAST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4088;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4095;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,504,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4089;
                this.match(plsqlParser.MULTISET);
                this.state = 4090;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 4091;
                this.subquery(0);
                this.state = 4092;
                this.match(plsqlParser.RIGHT_PAREN);
                break;

            case 2:
                this.state = 4094;
                this.concatenation();
                break;

            }
            this.state = 4097;
            this.match(plsqlParser.AS);
            this.state = 4098;
            this.type_spec();
            this.state = 4099;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 4:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 4101;
            this.match(plsqlParser.CHR);
            this.state = 4102;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4103;
            this.concatenation();
            this.state = 4104;
            this.match(plsqlParser.USING);
            this.state = 4105;
            this.match(plsqlParser.NCHAR_CS);
            this.state = 4106;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 5:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 4108;
            this.match(plsqlParser.COLLECT);
            this.state = 4109;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4111;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
            if(la_===1) {
                this.state = 4110;
                _la = this._input.LA(1);
                if(!(_la===plsqlParser.DISTINCT || _la===plsqlParser.UNIQUE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4113;
            this.concatenation();
            this.state = 4115;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.ORDER) {
                this.state = 4114;
                this.collect_order_by_part();
            }

            this.state = 4117;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 6:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 4119;
            this.within_or_over_clause_keyword();
            this.state = 4120;
            this.function_argument();
            this.state = 4122; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 4121;
            		this.within_or_over_part();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 4124; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,507, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 7:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 4126;
            this.match(plsqlParser.DECOMPOSE);
            this.state = 4127;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4128;
            this.concatenation();
            this.state = 4130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.CANONICAL || _la===plsqlParser.COMPATIBILITY) {
                this.state = 4129;
                _la = this._input.LA(1);
                if(!(_la===plsqlParser.CANONICAL || _la===plsqlParser.COMPATIBILITY)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 4132;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 8:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 4134;
            this.match(plsqlParser.EXTRACT);
            this.state = 4135;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4136;
            this.regular_id();
            this.state = 4137;
            this.match(plsqlParser.FROM);
            this.state = 4138;
            this.concatenation();
            this.state = 4139;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 9:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 4141;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.FIRST_VALUE || _la===plsqlParser.LAST_VALUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4142;
            this.function_argument_analytic();
            this.state = 4144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.IGNORE || _la===plsqlParser.RESPECT) {
                this.state = 4143;
                this.respect_or_ignore_nulls();
            }

            this.state = 4146;
            this.over_clause();
            break;

        case 10:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 4148;
            this.standard_prediction_function_keyword();
            this.state = 4149;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4150;
            this.expression(0);
            this.state = 4155;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 4151;
                this.match(plsqlParser.COMMA);
                this.state = 4152;
                this.expression(0);
                this.state = 4157;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4159;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.COST) {
                this.state = 4158;
                this.cost_matrix_clause();
            }

            this.state = 4162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.USING) {
                this.state = 4161;
                this.using_clause();
            }

            this.state = 4164;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 11:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 4166;
            this.match(plsqlParser.TRANSLATE);
            this.state = 4167;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4168;
            this.expression(0);
            this.state = 4171;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.USING) {
                this.state = 4169;
                this.match(plsqlParser.USING);
                this.state = 4170;
                _la = this._input.LA(1);
                if(!(_la===plsqlParser.CHAR_CS || _la===plsqlParser.NCHAR_CS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 4177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 4173;
                this.match(plsqlParser.COMMA);
                this.state = 4174;
                this.expression(0);
                this.state = 4179;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4180;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 12:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 4182;
            this.match(plsqlParser.TREAT);
            this.state = 4183;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4184;
            this.expression(0);
            this.state = 4185;
            this.match(plsqlParser.AS);
            this.state = 4187;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,515,this._ctx);
            if(la_===1) {
                this.state = 4186;
                this.match(plsqlParser.REF);

            }
            this.state = 4189;
            this.type_spec();
            this.state = 4190;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 13:
            localctx = new TodoCallContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 4192;
            this.match(plsqlParser.TRIM);
            this.state = 4193;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4201;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
            if(la_===1) {
                this.state = 4195;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===plsqlParser.BOTH || _la===plsqlParser.LEADING || _la===plsqlParser.TRAILING) {
                    this.state = 4194;
                    _la = this._input.LA(1);
                    if(!(_la===plsqlParser.BOTH || _la===plsqlParser.LEADING || _la===plsqlParser.TRAILING)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 4198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===plsqlParser.NATIONAL_CHAR_STRING_LIT || _la===plsqlParser.CHAR_STRING) {
                    this.state = 4197;
                    this.quoted_string();
                }

                this.state = 4200;
                this.match(plsqlParser.FROM);

            }
            this.state = 4203;
            this.concatenation();
            this.state = 4204;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 14:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 4206;
            this.match(plsqlParser.XMLAGG);
            this.state = 4207;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4208;
            this.expression(0);
            this.state = 4210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.ORDER) {
                this.state = 4209;
                this.order_by_clause();
            }

            this.state = 4212;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4215;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,520,this._ctx);
            if(la_===1) {
                this.state = 4213;
                this.match(plsqlParser.PERIOD);
                this.state = 4214;
                this.general_element();

            }
            break;

        case 15:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 4217;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.XMLCOLATTVAL || _la===plsqlParser.XMLFOREST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4218;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4219;
            this.xml_multiuse_expression_element();
            this.state = 4224;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 4220;
                this.match(plsqlParser.COMMA);
                this.state = 4221;
                this.xml_multiuse_expression_element();
                this.state = 4226;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4227;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4230;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,522,this._ctx);
            if(la_===1) {
                this.state = 4228;
                this.match(plsqlParser.PERIOD);
                this.state = 4229;
                this.general_element();

            }
            break;

        case 16:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 4232;
            this.match(plsqlParser.XMLELEMENT);
            this.state = 4233;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4235;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,523,this._ctx);
            if(la_===1) {
                this.state = 4234;
                _la = this._input.LA(1);
                if(!(_la===plsqlParser.ENTITYESCAPING || _la===plsqlParser.NOENTITYESCAPING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4238;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,524,this._ctx);
            if(la_===1) {
                this.state = 4237;
                _la = this._input.LA(1);
                if(!(_la===plsqlParser.EVALNAME || _la===plsqlParser.NAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4240;
            this.expression(0);
            this.state = 4243;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,525,this._ctx);
            if(la_===1) {
                this.state = 4241;
                this.match(plsqlParser.COMMA);
                this.state = 4242;
                this.xml_attributes_clause();

            }
            this.state = 4252;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 4245;
                this.match(plsqlParser.COMMA);
                this.state = 4246;
                this.expression(0);
                this.state = 4248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.AS - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
                    this.state = 4247;
                    this.column_alias();
                }

                this.state = 4254;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4255;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4258;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,528,this._ctx);
            if(la_===1) {
                this.state = 4256;
                this.match(plsqlParser.PERIOD);
                this.state = 4257;
                this.general_element();

            }
            break;

        case 17:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 4260;
            this.match(plsqlParser.XMLEXISTS);
            this.state = 4261;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4262;
            this.expression(0);
            this.state = 4264;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.PASSING) {
                this.state = 4263;
                this.xml_passing_clause();
            }

            this.state = 4266;
            this.match(plsqlParser.RIGHT_PAREN);
            break;

        case 18:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 4268;
            this.match(plsqlParser.XMLPARSE);
            this.state = 4269;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4270;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.CONTENT || _la===plsqlParser.DOCUMENT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4271;
            this.concatenation();
            this.state = 4273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.WELLFORMED) {
                this.state = 4272;
                this.match(plsqlParser.WELLFORMED);
            }

            this.state = 4275;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4278;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
            if(la_===1) {
                this.state = 4276;
                this.match(plsqlParser.PERIOD);
                this.state = 4277;
                this.general_element();

            }
            break;

        case 19:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 4280;
            this.match(plsqlParser.XMLPI);
            this.state = 4281;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4286;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.NAME:
                this.state = 4282;
                this.match(plsqlParser.NAME);
                this.state = 4283;
                this.r_id();
                break;
            case plsqlParser.EVALNAME:
                this.state = 4284;
                this.match(plsqlParser.EVALNAME);
                this.state = 4285;
                this.concatenation();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4290;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.COMMA) {
                this.state = 4288;
                this.match(plsqlParser.COMMA);
                this.state = 4289;
                this.concatenation();
            }

            this.state = 4292;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4295;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,534,this._ctx);
            if(la_===1) {
                this.state = 4293;
                this.match(plsqlParser.PERIOD);
                this.state = 4294;
                this.general_element();

            }
            break;

        case 20:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 4297;
            this.match(plsqlParser.XMLQUERY);
            this.state = 4298;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4299;
            this.concatenation();
            this.state = 4301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.PASSING) {
                this.state = 4300;
                this.xml_passing_clause();
            }

            this.state = 4303;
            this.match(plsqlParser.RETURNING);
            this.state = 4304;
            this.match(plsqlParser.CONTENT);
            this.state = 4308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.NULL) {
                this.state = 4305;
                this.match(plsqlParser.NULL);
                this.state = 4306;
                this.match(plsqlParser.ON);
                this.state = 4307;
                this.match(plsqlParser.EMPTY);
            }

            this.state = 4310;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4313;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,537,this._ctx);
            if(la_===1) {
                this.state = 4311;
                this.match(plsqlParser.PERIOD);
                this.state = 4312;
                this.general_element();

            }
            break;

        case 21:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 4315;
            this.match(plsqlParser.XMLROOT);
            this.state = 4316;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4317;
            this.concatenation();
            this.state = 4320;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,538,this._ctx);
            if(la_===1) {
                this.state = 4318;
                this.match(plsqlParser.COMMA);
                this.state = 4319;
                this.xmlroot_param_version_part();

            }
            this.state = 4324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.COMMA) {
                this.state = 4322;
                this.match(plsqlParser.COMMA);
                this.state = 4323;
                this.xmlroot_param_standalone_part();
            }

            this.state = 4326;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4329;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,540,this._ctx);
            if(la_===1) {
                this.state = 4327;
                this.match(plsqlParser.PERIOD);
                this.state = 4328;
                this.general_element();

            }
            break;

        case 22:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 4331;
            this.match(plsqlParser.XMLSERIALIZE);
            this.state = 4332;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4333;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.CONTENT || _la===plsqlParser.DOCUMENT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4334;
            this.concatenation();
            this.state = 4337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.AS) {
                this.state = 4335;
                this.match(plsqlParser.AS);
                this.state = 4336;
                this.type_spec();
            }

            this.state = 4340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.ENCODING) {
                this.state = 4339;
                this.xmlserialize_param_enconding_part();
            }

            this.state = 4343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.VERSION) {
                this.state = 4342;
                this.xmlserialize_param_version_part();
            }

            this.state = 4346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.INDENT || _la===plsqlParser.NO) {
                this.state = 4345;
                this.xmlserialize_param_ident_part();
            }

            this.state = 4350;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.HIDE || _la===plsqlParser.SHOW) {
                this.state = 4348;
                _la = this._input.LA(1);
                if(!(_la===plsqlParser.HIDE || _la===plsqlParser.SHOW)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4349;
                this.match(plsqlParser.DEFAULTS);
            }

            this.state = 4352;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4355;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,546,this._ctx);
            if(la_===1) {
                this.state = 4353;
                this.match(plsqlParser.PERIOD);
                this.state = 4354;
                this.general_element();

            }
            break;

        case 23:
            localctx = new XmlCallContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 4357;
            this.match(plsqlParser.XMLTABLE);
            this.state = 4358;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4360;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,547,this._ctx);
            if(la_===1) {
                this.state = 4359;
                this.xml_namespaces_clause();

            }
            this.state = 4362;
            this.concatenation();
            this.state = 4364;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.PASSING) {
                this.state = 4363;
                this.xml_passing_clause();
            }

            this.state = 4371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.COLUMNS) {
                this.state = 4366;
                this.match(plsqlParser.COLUMNS);
                this.state = 4367;
                this.xml_table_column();

                this.state = 4368;
                this.match(plsqlParser.COMMA);
                this.state = 4369;
                this.xml_table_column();
            }

            this.state = 4373;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4376;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,550,this._ctx);
            if(la_===1) {
                this.state = 4374;
                this.match(plsqlParser.PERIOD);
                this.state = 4375;
                this.general_element();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Aggregate_windowed_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_aggregate_windowed_function;
    this.args = null; // Token
    this.pref = null; // Token
    return this;
}

Aggregate_windowed_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_windowed_functionContext.prototype.constructor = Aggregate_windowed_functionContext;

Aggregate_windowed_functionContext.prototype.over_clause_keyword = function() {
    return this.getTypedRuleContext(Over_clause_keywordContext,0);
};

Aggregate_windowed_functionContext.prototype.function_argument_analytic = function() {
    return this.getTypedRuleContext(Function_argument_analyticContext,0);
};

Aggregate_windowed_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Aggregate_windowed_functionContext.prototype.COUNT = function() {
    return this.getToken(plsqlParser.COUNT, 0);
};

Aggregate_windowed_functionContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Aggregate_windowed_functionContext.prototype.DISTINCT = function() {
    return this.getToken(plsqlParser.DISTINCT, 0);
};

Aggregate_windowed_functionContext.prototype.UNIQUE = function() {
    return this.getToken(plsqlParser.UNIQUE, 0);
};

Aggregate_windowed_functionContext.prototype.ALL = function() {
    return this.getToken(plsqlParser.ALL, 0);
};

Aggregate_windowed_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAggregate_windowed_function(this);
	}
};

Aggregate_windowed_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAggregate_windowed_function(this);
	}
};




plsqlParser.Aggregate_windowed_functionContext = Aggregate_windowed_functionContext;

plsqlParser.prototype.aggregate_windowed_function = function() {

    var localctx = new Aggregate_windowed_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, plsqlParser.RULE_aggregate_windowed_function);
    var _la = 0; // Token type
    try {
        this.state = 4398;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
            this.enterOuterAlt(localctx, 1);
            this.state = 4380;
            this.over_clause_keyword();
            this.state = 4381;
            this.function_argument_analytic();
            this.state = 4383;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,552,this._ctx);
            if(la_===1) {
                this.state = 4382;
                this.over_clause();

            }
            break;
        case plsqlParser.COUNT:
            this.enterOuterAlt(localctx, 2);
            this.state = 4385;
            this.match(plsqlParser.COUNT);
            this.state = 4386;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4392;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.ASTERISK:
                this.state = 4387;
                localctx.args = this.match(plsqlParser.ASTERISK);
                break;
            case plsqlParser.A_LETTER:
            case plsqlParser.ADD:
            case plsqlParser.AFTER:
            case plsqlParser.AGENT:
            case plsqlParser.AGGREGATE:
            case plsqlParser.ALL:
            case plsqlParser.ANALYZE:
            case plsqlParser.ANY:
            case plsqlParser.ARRAY:
            case plsqlParser.ASSOCIATE:
            case plsqlParser.AT:
            case plsqlParser.ATTRIBUTE:
            case plsqlParser.AUDIT:
            case plsqlParser.AUTHID:
            case plsqlParser.AUTO:
            case plsqlParser.AUTOMATIC:
            case plsqlParser.AUTONOMOUS_TRANSACTION:
            case plsqlParser.BATCH:
            case plsqlParser.BEFORE:
            case plsqlParser.BFILE:
            case plsqlParser.BINARY_DOUBLE:
            case plsqlParser.BINARY_FLOAT:
            case plsqlParser.BINARY_INTEGER:
            case plsqlParser.BLOB:
            case plsqlParser.BLOCK:
            case plsqlParser.BODY:
            case plsqlParser.BOOLEAN:
            case plsqlParser.BOTH:
            case plsqlParser.BULK:
            case plsqlParser.BYTE:
            case plsqlParser.C_LETTER:
            case plsqlParser.CALL:
            case plsqlParser.CANONICAL:
            case plsqlParser.CASCADE:
            case plsqlParser.CASE:
            case plsqlParser.CAST:
            case plsqlParser.CHAR:
            case plsqlParser.CHAR_CS:
            case plsqlParser.CHARACTER:
            case plsqlParser.CHR:
            case plsqlParser.CLOB:
            case plsqlParser.CLOSE:
            case plsqlParser.CLUSTER:
            case plsqlParser.COLLECT:
            case plsqlParser.COLUMNS:
            case plsqlParser.COMMENT:
            case plsqlParser.COMMIT:
            case plsqlParser.COMMITTED:
            case plsqlParser.COMPATIBILITY:
            case plsqlParser.COMPILE:
            case plsqlParser.COMPOUND:
            case plsqlParser.CONNECT_BY_ROOT:
            case plsqlParser.CONSTANT:
            case plsqlParser.CONSTRAINT:
            case plsqlParser.CONSTRAINTS:
            case plsqlParser.CONSTRUCTOR:
            case plsqlParser.CONTENT:
            case plsqlParser.CONTEXT:
            case plsqlParser.CONTINUE:
            case plsqlParser.CONVERT:
            case plsqlParser.CORRUPT_XID:
            case plsqlParser.CORRUPT_XID_ALL:
            case plsqlParser.COST:
            case plsqlParser.COUNT:
            case plsqlParser.CROSS:
            case plsqlParser.CUBE:
            case plsqlParser.CURRENT_USER:
            case plsqlParser.CURSOR:
            case plsqlParser.CUSTOMDATUM:
            case plsqlParser.CYCLE:
            case plsqlParser.DATA:
            case plsqlParser.DATABASE:
            case plsqlParser.DATE:
            case plsqlParser.DAY:
            case plsqlParser.DB_ROLE_CHANGE:
            case plsqlParser.DBTIMEZONE:
            case plsqlParser.DDL:
            case plsqlParser.DEBUG:
            case plsqlParser.DEC:
            case plsqlParser.DECIMAL:
            case plsqlParser.DECOMPOSE:
            case plsqlParser.DECREMENT:
            case plsqlParser.DEFAULT:
            case plsqlParser.DEFAULTS:
            case plsqlParser.DEFERRED:
            case plsqlParser.DEFINER:
            case plsqlParser.DETERMINISTIC:
            case plsqlParser.DIMENSION:
            case plsqlParser.DISABLE:
            case plsqlParser.DISASSOCIATE:
            case plsqlParser.DISTINCT:
            case plsqlParser.DOCUMENT:
            case plsqlParser.DOUBLE:
            case plsqlParser.DSINTERVAL_UNCONSTRAINED:
            case plsqlParser.EACH:
            case plsqlParser.ELEMENT:
            case plsqlParser.EMPTY:
            case plsqlParser.ENABLE:
            case plsqlParser.ENCODING:
            case plsqlParser.ENTITYESCAPING:
            case plsqlParser.ERR:
            case plsqlParser.ERRORS:
            case plsqlParser.ESCAPE:
            case plsqlParser.EVALNAME:
            case plsqlParser.EXCEPTION:
            case plsqlParser.EXCEPTION_INIT:
            case plsqlParser.EXCEPTIONS:
            case plsqlParser.EXCLUDE:
            case plsqlParser.EXECUTE:
            case plsqlParser.EXISTS:
            case plsqlParser.EXIT:
            case plsqlParser.EXPLAIN:
            case plsqlParser.EXTERNAL:
            case plsqlParser.EXTRACT:
            case plsqlParser.FAILURE:
            case plsqlParser.FALSE:
            case plsqlParser.FINAL:
            case plsqlParser.FIRST:
            case plsqlParser.FIRST_VALUE:
            case plsqlParser.FLOAT:
            case plsqlParser.FOLLOWING:
            case plsqlParser.FOLLOWS:
            case plsqlParser.FORALL:
            case plsqlParser.FORCE:
            case plsqlParser.FULL:
            case plsqlParser.FUNCTION:
            case plsqlParser.GROUPING:
            case plsqlParser.HASH:
            case plsqlParser.HIDE:
            case plsqlParser.HOUR:
            case plsqlParser.IGNORE:
            case plsqlParser.IMMEDIATE:
            case plsqlParser.INCLUDE:
            case plsqlParser.INCLUDING:
            case plsqlParser.INCREMENT:
            case plsqlParser.INDENT:
            case plsqlParser.INDEXED:
            case plsqlParser.INDICATOR:
            case plsqlParser.INDICES:
            case plsqlParser.INFINITE:
            case plsqlParser.INLINE:
            case plsqlParser.INNER:
            case plsqlParser.INOUT:
            case plsqlParser.INSTANTIABLE:
            case plsqlParser.INSTEAD:
            case plsqlParser.INT:
            case plsqlParser.INTEGER:
            case plsqlParser.INTERVAL:
            case plsqlParser.INVALIDATE:
            case plsqlParser.ISOLATION:
            case plsqlParser.ITERATE:
            case plsqlParser.JAVA:
            case plsqlParser.JOIN:
            case plsqlParser.KEEP:
            case plsqlParser.LANGUAGE:
            case plsqlParser.LAST:
            case plsqlParser.LAST_VALUE:
            case plsqlParser.LEADING:
            case plsqlParser.LEFT:
            case plsqlParser.LEVEL:
            case plsqlParser.LIBRARY:
            case plsqlParser.LIKE2:
            case plsqlParser.LIKE4:
            case plsqlParser.LIKEC:
            case plsqlParser.LIMIT:
            case plsqlParser.LOCAL:
            case plsqlParser.LOCKED:
            case plsqlParser.LOG:
            case plsqlParser.LOGOFF:
            case plsqlParser.LOGON:
            case plsqlParser.LONG:
            case plsqlParser.LOOP:
            case plsqlParser.MAIN:
            case plsqlParser.MAP:
            case plsqlParser.MATCHED:
            case plsqlParser.MAXVALUE:
            case plsqlParser.MEASURES:
            case plsqlParser.MEMBER:
            case plsqlParser.MERGE:
            case plsqlParser.MINUTE:
            case plsqlParser.MINVALUE:
            case plsqlParser.MLSLABEL:
            case plsqlParser.MODEL:
            case plsqlParser.MODIFY:
            case plsqlParser.MONTH:
            case plsqlParser.MULTISET:
            case plsqlParser.NAME:
            case plsqlParser.NAN:
            case plsqlParser.NATURAL:
            case plsqlParser.NATURALN:
            case plsqlParser.NAV:
            case plsqlParser.NCHAR:
            case plsqlParser.NCHAR_CS:
            case plsqlParser.NCLOB:
            case plsqlParser.NESTED:
            case plsqlParser.NEW:
            case plsqlParser.NO:
            case plsqlParser.NOAUDIT:
            case plsqlParser.NOCOPY:
            case plsqlParser.NOCYCLE:
            case plsqlParser.NOENTITYESCAPING:
            case plsqlParser.NONE:
            case plsqlParser.NOSCHEMACHECK:
            case plsqlParser.NULL:
            case plsqlParser.NULLS:
            case plsqlParser.NUMBER:
            case plsqlParser.NUMERIC:
            case plsqlParser.NVARCHAR2:
            case plsqlParser.OBJECT:
            case plsqlParser.OFF:
            case plsqlParser.OID:
            case plsqlParser.OLD:
            case plsqlParser.ONLY:
            case plsqlParser.OPEN:
            case plsqlParser.ORADATA:
            case plsqlParser.ORDINALITY:
            case plsqlParser.OSERROR:
            case plsqlParser.OUT:
            case plsqlParser.OUTER:
            case plsqlParser.OVER:
            case plsqlParser.OVERRIDING:
            case plsqlParser.PACKAGE:
            case plsqlParser.PARALLEL_ENABLE:
            case plsqlParser.PARAMETERS:
            case plsqlParser.PARENT:
            case plsqlParser.PARTITION:
            case plsqlParser.PASSING:
            case plsqlParser.PATH:
            case plsqlParser.PIPELINED:
            case plsqlParser.PLAN:
            case plsqlParser.PLS_INTEGER:
            case plsqlParser.POSITIVE:
            case plsqlParser.POSITIVEN:
            case plsqlParser.PRAGMA:
            case plsqlParser.PRECEDING:
            case plsqlParser.PRECISION:
            case plsqlParser.PRESENT:
            case plsqlParser.PRIOR:
            case plsqlParser.RAISE:
            case plsqlParser.RANGE:
            case plsqlParser.RAW:
            case plsqlParser.READ:
            case plsqlParser.REAL:
            case plsqlParser.RECORD:
            case plsqlParser.REF:
            case plsqlParser.REFERENCE:
            case plsqlParser.REFERENCING:
            case plsqlParser.REJECT:
            case plsqlParser.RELIES_ON:
            case plsqlParser.RENAME:
            case plsqlParser.REPLACE:
            case plsqlParser.RESPECT:
            case plsqlParser.RESTRICT_REFERENCES:
            case plsqlParser.RESULT:
            case plsqlParser.RESULT_CACHE:
            case plsqlParser.RETURN:
            case plsqlParser.RETURNING:
            case plsqlParser.REUSE:
            case plsqlParser.REVERSE:
            case plsqlParser.RIGHT:
            case plsqlParser.ROLLBACK:
            case plsqlParser.ROLLUP:
            case plsqlParser.ROW:
            case plsqlParser.ROWID:
            case plsqlParser.ROWS:
            case plsqlParser.RULES:
            case plsqlParser.SAMPLE:
            case plsqlParser.SAVE:
            case plsqlParser.SAVEPOINT:
            case plsqlParser.SCHEMA:
            case plsqlParser.SCHEMACHECK:
            case plsqlParser.SCN:
            case plsqlParser.SECOND:
            case plsqlParser.SEED:
            case plsqlParser.SEGMENT:
            case plsqlParser.SELF:
            case plsqlParser.SEQUENTIAL:
            case plsqlParser.SERIALIZABLE:
            case plsqlParser.SERIALLY_REUSABLE:
            case plsqlParser.SERVERERROR:
            case plsqlParser.SESSIONTIMEZONE:
            case plsqlParser.SET:
            case plsqlParser.SETS:
            case plsqlParser.SETTINGS:
            case plsqlParser.SHOW:
            case plsqlParser.SHUTDOWN:
            case plsqlParser.SIBLINGS:
            case plsqlParser.SIGNTYPE:
            case plsqlParser.SIMPLE_INTEGER:
            case plsqlParser.SINGLE:
            case plsqlParser.SKIP_:
            case plsqlParser.SMALLINT:
            case plsqlParser.SNAPSHOT:
            case plsqlParser.SOME:
            case plsqlParser.SPECIFICATION:
            case plsqlParser.SQLDATA:
            case plsqlParser.SQLERROR:
            case plsqlParser.STANDALONE:
            case plsqlParser.STARTUP:
            case plsqlParser.STATEMENT:
            case plsqlParser.STATEMENT_ID:
            case plsqlParser.STATIC:
            case plsqlParser.STATISTICS:
            case plsqlParser.STRING:
            case plsqlParser.SUBMULTISET:
            case plsqlParser.SUBPARTITION:
            case plsqlParser.SUBSTITUTABLE:
            case plsqlParser.SUBTYPE:
            case plsqlParser.SUCCESS:
            case plsqlParser.SUSPEND:
            case plsqlParser.TIME:
            case plsqlParser.TIMESTAMP:
            case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_UNCONSTRAINED:
            case plsqlParser.TIMEZONE_ABBR:
            case plsqlParser.TIMEZONE_HOUR:
            case plsqlParser.TIMEZONE_MINUTE:
            case plsqlParser.TIMEZONE_REGION:
            case plsqlParser.TRAILING:
            case plsqlParser.TRANSACTION:
            case plsqlParser.TRANSLATE:
            case plsqlParser.TREAT:
            case plsqlParser.TRIGGER:
            case plsqlParser.TRIM:
            case plsqlParser.TRUE:
            case plsqlParser.TRUNCATE:
            case plsqlParser.TYPE:
            case plsqlParser.UNBOUNDED:
            case plsqlParser.UNDER:
            case plsqlParser.UNIQUE:
            case plsqlParser.UNLIMITED:
            case plsqlParser.UNTIL:
            case plsqlParser.UPDATED:
            case plsqlParser.UPSERT:
            case plsqlParser.UROWID:
            case plsqlParser.USE:
            case plsqlParser.VALIDATE:
            case plsqlParser.VALUE:
            case plsqlParser.VARCHAR:
            case plsqlParser.VARCHAR2:
            case plsqlParser.VARIABLE:
            case plsqlParser.VARRAY:
            case plsqlParser.VARYING:
            case plsqlParser.VERSION:
            case plsqlParser.VERSIONS:
            case plsqlParser.WAIT:
            case plsqlParser.WARNING:
            case plsqlParser.WELLFORMED:
            case plsqlParser.WHENEVER:
            case plsqlParser.WHILE:
            case plsqlParser.WITHIN:
            case plsqlParser.WORK:
            case plsqlParser.WRITE:
            case plsqlParser.XML:
            case plsqlParser.XMLAGG:
            case plsqlParser.XMLATTRIBUTES:
            case plsqlParser.XMLCAST:
            case plsqlParser.XMLCOLATTVAL:
            case plsqlParser.XMLELEMENT:
            case plsqlParser.XMLEXISTS:
            case plsqlParser.XMLFOREST:
            case plsqlParser.XMLNAMESPACES:
            case plsqlParser.XMLPARSE:
            case plsqlParser.XMLPI:
            case plsqlParser.XMLQUERY:
            case plsqlParser.XMLROOT:
            case plsqlParser.XMLSERIALIZE:
            case plsqlParser.XMLTABLE:
            case plsqlParser.YEAR:
            case plsqlParser.YES:
            case plsqlParser.YMINTERVAL_UNCONSTRAINED:
            case plsqlParser.ZONE:
            case plsqlParser.PREDICTION:
            case plsqlParser.PREDICTION_BOUNDS:
            case plsqlParser.PREDICTION_COST:
            case plsqlParser.PREDICTION_DETAILS:
            case plsqlParser.PREDICTION_PROBABILITY:
            case plsqlParser.PREDICTION_SET:
            case plsqlParser.CUME_DIST:
            case plsqlParser.DENSE_RANK:
            case plsqlParser.LISTAGG:
            case plsqlParser.PERCENT_RANK:
            case plsqlParser.PERCENTILE_CONT:
            case plsqlParser.PERCENTILE_DISC:
            case plsqlParser.RANK:
            case plsqlParser.AVG:
            case plsqlParser.CORR:
            case plsqlParser.LAG:
            case plsqlParser.LEAD:
            case plsqlParser.MAX:
            case plsqlParser.MEDIAN:
            case plsqlParser.MIN:
            case plsqlParser.NTILE:
            case plsqlParser.RATIO_TO_REPORT:
            case plsqlParser.ROW_NUMBER:
            case plsqlParser.SUM:
            case plsqlParser.VARIANCE:
            case plsqlParser.REGR_:
            case plsqlParser.STDDEV:
            case plsqlParser.VAR_:
            case plsqlParser.COVAR_:
            case plsqlParser.NATIONAL_CHAR_STRING_LIT:
            case plsqlParser.UNSIGNED_INTEGER:
            case plsqlParser.APPROXIMATE_NUM_LIT:
            case plsqlParser.CHAR_STRING:
            case plsqlParser.DELIMITED_ID:
            case plsqlParser.LEFT_PAREN:
            case plsqlParser.PLUS_SIGN:
            case plsqlParser.MINUS_SIGN:
            case plsqlParser.BINDVAR:
            case plsqlParser.COLON:
            case plsqlParser.REGULAR_ID:
                this.state = 4389;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,553,this._ctx);
                if(la_===1) {
                    this.state = 4388;
                    localctx.pref = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===plsqlParser.ALL || _la===plsqlParser.DISTINCT || _la===plsqlParser.UNIQUE)) {
                        localctx.pref = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }

                }
                this.state = 4391;
                this.concatenation();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4394;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4396;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,555,this._ctx);
            if(la_===1) {
                this.state = 4395;
                this.over_clause();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Over_clause_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_over_clause_keyword;
    return this;
}

Over_clause_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Over_clause_keywordContext.prototype.constructor = Over_clause_keywordContext;

Over_clause_keywordContext.prototype.AVG = function() {
    return this.getToken(plsqlParser.AVG, 0);
};

Over_clause_keywordContext.prototype.CORR = function() {
    return this.getToken(plsqlParser.CORR, 0);
};

Over_clause_keywordContext.prototype.LAG = function() {
    return this.getToken(plsqlParser.LAG, 0);
};

Over_clause_keywordContext.prototype.LEAD = function() {
    return this.getToken(plsqlParser.LEAD, 0);
};

Over_clause_keywordContext.prototype.MAX = function() {
    return this.getToken(plsqlParser.MAX, 0);
};

Over_clause_keywordContext.prototype.MEDIAN = function() {
    return this.getToken(plsqlParser.MEDIAN, 0);
};

Over_clause_keywordContext.prototype.MIN = function() {
    return this.getToken(plsqlParser.MIN, 0);
};

Over_clause_keywordContext.prototype.NTILE = function() {
    return this.getToken(plsqlParser.NTILE, 0);
};

Over_clause_keywordContext.prototype.RATIO_TO_REPORT = function() {
    return this.getToken(plsqlParser.RATIO_TO_REPORT, 0);
};

Over_clause_keywordContext.prototype.ROW_NUMBER = function() {
    return this.getToken(plsqlParser.ROW_NUMBER, 0);
};

Over_clause_keywordContext.prototype.SUM = function() {
    return this.getToken(plsqlParser.SUM, 0);
};

Over_clause_keywordContext.prototype.VARIANCE = function() {
    return this.getToken(plsqlParser.VARIANCE, 0);
};

Over_clause_keywordContext.prototype.REGR_ = function() {
    return this.getToken(plsqlParser.REGR_, 0);
};

Over_clause_keywordContext.prototype.STDDEV = function() {
    return this.getToken(plsqlParser.STDDEV, 0);
};

Over_clause_keywordContext.prototype.VAR_ = function() {
    return this.getToken(plsqlParser.VAR_, 0);
};

Over_clause_keywordContext.prototype.COVAR_ = function() {
    return this.getToken(plsqlParser.COVAR_, 0);
};

Over_clause_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOver_clause_keyword(this);
	}
};

Over_clause_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOver_clause_keyword(this);
	}
};




plsqlParser.Over_clause_keywordContext = Over_clause_keywordContext;

plsqlParser.prototype.over_clause_keyword = function() {

    var localctx = new Over_clause_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, plsqlParser.RULE_over_clause_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4400;
        _la = this._input.LA(1);
        if(!(((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (plsqlParser.AVG - 462)) | (1 << (plsqlParser.CORR - 462)) | (1 << (plsqlParser.LAG - 462)) | (1 << (plsqlParser.LEAD - 462)) | (1 << (plsqlParser.MAX - 462)) | (1 << (plsqlParser.MEDIAN - 462)) | (1 << (plsqlParser.MIN - 462)) | (1 << (plsqlParser.NTILE - 462)) | (1 << (plsqlParser.RATIO_TO_REPORT - 462)) | (1 << (plsqlParser.ROW_NUMBER - 462)) | (1 << (plsqlParser.SUM - 462)) | (1 << (plsqlParser.VARIANCE - 462)) | (1 << (plsqlParser.REGR_ - 462)) | (1 << (plsqlParser.STDDEV - 462)) | (1 << (plsqlParser.VAR_ - 462)) | (1 << (plsqlParser.COVAR_ - 462)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Within_or_over_clause_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_within_or_over_clause_keyword;
    return this;
}

Within_or_over_clause_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Within_or_over_clause_keywordContext.prototype.constructor = Within_or_over_clause_keywordContext;

Within_or_over_clause_keywordContext.prototype.CUME_DIST = function() {
    return this.getToken(plsqlParser.CUME_DIST, 0);
};

Within_or_over_clause_keywordContext.prototype.DENSE_RANK = function() {
    return this.getToken(plsqlParser.DENSE_RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.LISTAGG = function() {
    return this.getToken(plsqlParser.LISTAGG, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENT_RANK = function() {
    return this.getToken(plsqlParser.PERCENT_RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENTILE_CONT = function() {
    return this.getToken(plsqlParser.PERCENTILE_CONT, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENTILE_DISC = function() {
    return this.getToken(plsqlParser.PERCENTILE_DISC, 0);
};

Within_or_over_clause_keywordContext.prototype.RANK = function() {
    return this.getToken(plsqlParser.RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWithin_or_over_clause_keyword(this);
	}
};

Within_or_over_clause_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWithin_or_over_clause_keyword(this);
	}
};




plsqlParser.Within_or_over_clause_keywordContext = Within_or_over_clause_keywordContext;

plsqlParser.prototype.within_or_over_clause_keyword = function() {

    var localctx = new Within_or_over_clause_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, plsqlParser.RULE_within_or_over_clause_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4402;
        _la = this._input.LA(1);
        if(!(((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Standard_prediction_function_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_standard_prediction_function_keyword;
    return this;
}

Standard_prediction_function_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Standard_prediction_function_keywordContext.prototype.constructor = Standard_prediction_function_keywordContext;

Standard_prediction_function_keywordContext.prototype.PREDICTION = function() {
    return this.getToken(plsqlParser.PREDICTION, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_BOUNDS = function() {
    return this.getToken(plsqlParser.PREDICTION_BOUNDS, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_COST = function() {
    return this.getToken(plsqlParser.PREDICTION_COST, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_DETAILS = function() {
    return this.getToken(plsqlParser.PREDICTION_DETAILS, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_PROBABILITY = function() {
    return this.getToken(plsqlParser.PREDICTION_PROBABILITY, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_SET = function() {
    return this.getToken(plsqlParser.PREDICTION_SET, 0);
};

Standard_prediction_function_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterStandard_prediction_function_keyword(this);
	}
};

Standard_prediction_function_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitStandard_prediction_function_keyword(this);
	}
};




plsqlParser.Standard_prediction_function_keywordContext = Standard_prediction_function_keywordContext;

plsqlParser.prototype.standard_prediction_function_keyword = function() {

    var localctx = new Standard_prediction_function_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, plsqlParser.RULE_standard_prediction_function_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4404;
        _la = this._input.LA(1);
        if(!(((((_la - 449)) & ~0x1f) == 0 && ((1 << (_la - 449)) & ((1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Over_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_over_clause;
    return this;
}

Over_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Over_clauseContext.prototype.constructor = Over_clauseContext;

Over_clauseContext.prototype.OVER = function() {
    return this.getToken(plsqlParser.OVER, 0);
};

Over_clauseContext.prototype.query_partition_clause = function() {
    return this.getTypedRuleContext(Query_partition_clauseContext,0);
};

Over_clauseContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Over_clauseContext.prototype.windowing_clause = function() {
    return this.getTypedRuleContext(Windowing_clauseContext,0);
};

Over_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOver_clause(this);
	}
};

Over_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOver_clause(this);
	}
};




plsqlParser.Over_clauseContext = Over_clauseContext;

plsqlParser.prototype.over_clause = function() {

    var localctx = new Over_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, plsqlParser.RULE_over_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4406;
        this.match(plsqlParser.OVER);
        this.state = 4407;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 4409;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PARTITION) {
            this.state = 4408;
            this.query_partition_clause();
        }

        this.state = 4415;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.ORDER) {
            this.state = 4411;
            this.order_by_clause();
            this.state = 4413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.RANGE || _la===plsqlParser.ROWS) {
                this.state = 4412;
                this.windowing_clause();
            }

        }

        this.state = 4417;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_windowing_clause;
    return this;
}

Windowing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_clauseContext.prototype.constructor = Windowing_clauseContext;

Windowing_clauseContext.prototype.windowing_type = function() {
    return this.getTypedRuleContext(Windowing_typeContext,0);
};

Windowing_clauseContext.prototype.BETWEEN = function() {
    return this.getToken(plsqlParser.BETWEEN, 0);
};

Windowing_clauseContext.prototype.windowing_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Windowing_elementsContext);
    } else {
        return this.getTypedRuleContext(Windowing_elementsContext,i);
    }
};

Windowing_clauseContext.prototype.AND = function() {
    return this.getToken(plsqlParser.AND, 0);
};

Windowing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWindowing_clause(this);
	}
};

Windowing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWindowing_clause(this);
	}
};




plsqlParser.Windowing_clauseContext = Windowing_clauseContext;

plsqlParser.prototype.windowing_clause = function() {

    var localctx = new Windowing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, plsqlParser.RULE_windowing_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4419;
        this.windowing_type();
        this.state = 4426;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.BETWEEN:
            this.state = 4420;
            this.match(plsqlParser.BETWEEN);
            this.state = 4421;
            this.windowing_elements();
            this.state = 4422;
            this.match(plsqlParser.AND);
            this.state = 4423;
            this.windowing_elements();
            break;
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ALL:
        case plsqlParser.ANALYZE:
        case plsqlParser.ANY:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CASE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONNECT_BY_ROOT:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DATE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DISTINCT:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXISTS:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FALSE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULL:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.PRIOR:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUE:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.NATIONAL_CHAR_STRING_LIT:
        case plsqlParser.UNSIGNED_INTEGER:
        case plsqlParser.APPROXIMATE_NUM_LIT:
        case plsqlParser.CHAR_STRING:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.LEFT_PAREN:
        case plsqlParser.PLUS_SIGN:
        case plsqlParser.MINUS_SIGN:
        case plsqlParser.BINDVAR:
        case plsqlParser.COLON:
        case plsqlParser.REGULAR_ID:
            this.state = 4425;
            this.windowing_elements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_windowing_type;
    return this;
}

Windowing_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_typeContext.prototype.constructor = Windowing_typeContext;

Windowing_typeContext.prototype.ROWS = function() {
    return this.getToken(plsqlParser.ROWS, 0);
};

Windowing_typeContext.prototype.RANGE = function() {
    return this.getToken(plsqlParser.RANGE, 0);
};

Windowing_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWindowing_type(this);
	}
};

Windowing_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWindowing_type(this);
	}
};




plsqlParser.Windowing_typeContext = Windowing_typeContext;

plsqlParser.prototype.windowing_type = function() {

    var localctx = new Windowing_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, plsqlParser.RULE_windowing_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4428;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.RANGE || _la===plsqlParser.ROWS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_windowing_elements;
    return this;
}

Windowing_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_elementsContext.prototype.constructor = Windowing_elementsContext;

Windowing_elementsContext.prototype.UNBOUNDED = function() {
    return this.getToken(plsqlParser.UNBOUNDED, 0);
};

Windowing_elementsContext.prototype.PRECEDING = function() {
    return this.getToken(plsqlParser.PRECEDING, 0);
};

Windowing_elementsContext.prototype.CURRENT = function() {
    return this.getToken(plsqlParser.CURRENT, 0);
};

Windowing_elementsContext.prototype.ROW = function() {
    return this.getToken(plsqlParser.ROW, 0);
};

Windowing_elementsContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Windowing_elementsContext.prototype.FOLLOWING = function() {
    return this.getToken(plsqlParser.FOLLOWING, 0);
};

Windowing_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWindowing_elements(this);
	}
};

Windowing_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWindowing_elements(this);
	}
};




plsqlParser.Windowing_elementsContext = Windowing_elementsContext;

plsqlParser.prototype.windowing_elements = function() {

    var localctx = new Windowing_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, plsqlParser.RULE_windowing_elements);
    var _la = 0; // Token type
    try {
        this.state = 4437;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,561,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4430;
            this.match(plsqlParser.UNBOUNDED);
            this.state = 4431;
            this.match(plsqlParser.PRECEDING);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4432;
            this.match(plsqlParser.CURRENT);
            this.state = 4433;
            this.match(plsqlParser.ROW);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4434;
            this.concatenation();
            this.state = 4435;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.FOLLOWING || _la===plsqlParser.PRECEDING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_using_clause;
    return this;
}

Using_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_clauseContext.prototype.constructor = Using_clauseContext;

Using_clauseContext.prototype.USING = function() {
    return this.getToken(plsqlParser.USING, 0);
};

Using_clauseContext.prototype.using_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Using_elementContext);
    } else {
        return this.getTypedRuleContext(Using_elementContext,i);
    }
};

Using_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUsing_clause(this);
	}
};

Using_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUsing_clause(this);
	}
};




plsqlParser.Using_clauseContext = Using_clauseContext;

plsqlParser.prototype.using_clause = function() {

    var localctx = new Using_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, plsqlParser.RULE_using_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4439;
        this.match(plsqlParser.USING);
        this.state = 4449;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,563,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4440;
            this.match(plsqlParser.ASTERISK);
            break;

        case 2:
            this.state = 4441;
            this.using_element();
            this.state = 4446;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,562,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4442;
                    this.match(plsqlParser.COMMA);
                    this.state = 4443;
                    this.using_element(); 
                }
                this.state = 4448;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,562,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_using_element;
    return this;
}

Using_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_elementContext.prototype.constructor = Using_elementContext;

Using_elementContext.prototype.selected_element = function() {
    return this.getTypedRuleContext(Selected_elementContext,0);
};

Using_elementContext.prototype.IN = function() {
    return this.getToken(plsqlParser.IN, 0);
};

Using_elementContext.prototype.OUT = function() {
    return this.getToken(plsqlParser.OUT, 0);
};

Using_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Using_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterUsing_element(this);
	}
};

Using_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitUsing_element(this);
	}
};




plsqlParser.Using_elementContext = Using_elementContext;

plsqlParser.prototype.using_element = function() {

    var localctx = new Using_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, plsqlParser.RULE_using_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4456;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,565,this._ctx);
        if(la_===1) {
            this.state = 4451;
            this.match(plsqlParser.IN);
            this.state = 4453;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,564,this._ctx);
            if(la_===1) {
                this.state = 4452;
                this.match(plsqlParser.OUT);

            }

        } else if(la_===2) {
            this.state = 4455;
            this.match(plsqlParser.OUT);

        }
        this.state = 4458;
        this.selected_element();
        this.state = 4460;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,566,this._ctx);
        if(la_===1) {
            this.state = 4459;
            this.column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collect_order_by_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_collect_order_by_part;
    return this;
}

Collect_order_by_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collect_order_by_partContext.prototype.constructor = Collect_order_by_partContext;

Collect_order_by_partContext.prototype.ORDER = function() {
    return this.getToken(plsqlParser.ORDER, 0);
};

Collect_order_by_partContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Collect_order_by_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Collect_order_by_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCollect_order_by_part(this);
	}
};

Collect_order_by_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCollect_order_by_part(this);
	}
};




plsqlParser.Collect_order_by_partContext = Collect_order_by_partContext;

plsqlParser.prototype.collect_order_by_part = function() {

    var localctx = new Collect_order_by_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, plsqlParser.RULE_collect_order_by_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4462;
        this.match(plsqlParser.ORDER);
        this.state = 4463;
        this.match(plsqlParser.BY);
        this.state = 4464;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Within_or_over_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_within_or_over_part;
    return this;
}

Within_or_over_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Within_or_over_partContext.prototype.constructor = Within_or_over_partContext;

Within_or_over_partContext.prototype.WITHIN = function() {
    return this.getToken(plsqlParser.WITHIN, 0);
};

Within_or_over_partContext.prototype.GROUP = function() {
    return this.getToken(plsqlParser.GROUP, 0);
};

Within_or_over_partContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Within_or_over_partContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Within_or_over_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWithin_or_over_part(this);
	}
};

Within_or_over_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWithin_or_over_part(this);
	}
};




plsqlParser.Within_or_over_partContext = Within_or_over_partContext;

plsqlParser.prototype.within_or_over_part = function() {

    var localctx = new Within_or_over_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, plsqlParser.RULE_within_or_over_part);
    try {
        this.state = 4473;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.WITHIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 4466;
            this.match(plsqlParser.WITHIN);
            this.state = 4467;
            this.match(plsqlParser.GROUP);
            this.state = 4468;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4469;
            this.order_by_clause();
            this.state = 4470;
            this.match(plsqlParser.RIGHT_PAREN);
            break;
        case plsqlParser.OVER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4472;
            this.over_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cost_matrix_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cost_matrix_clause;
    return this;
}

Cost_matrix_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cost_matrix_clauseContext.prototype.constructor = Cost_matrix_clauseContext;

Cost_matrix_clauseContext.prototype.COST = function() {
    return this.getToken(plsqlParser.COST, 0);
};

Cost_matrix_clauseContext.prototype.MODEL = function() {
    return this.getToken(plsqlParser.MODEL, 0);
};

Cost_matrix_clauseContext.prototype.cost_class_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cost_class_nameContext);
    } else {
        return this.getTypedRuleContext(Cost_class_nameContext,i);
    }
};

Cost_matrix_clauseContext.prototype.VALUES = function() {
    return this.getToken(plsqlParser.VALUES, 0);
};

Cost_matrix_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Cost_matrix_clauseContext.prototype.AUTO = function() {
    return this.getToken(plsqlParser.AUTO, 0);
};

Cost_matrix_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCost_matrix_clause(this);
	}
};

Cost_matrix_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCost_matrix_clause(this);
	}
};




plsqlParser.Cost_matrix_clauseContext = Cost_matrix_clauseContext;

plsqlParser.prototype.cost_matrix_clause = function() {

    var localctx = new Cost_matrix_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, plsqlParser.RULE_cost_matrix_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4475;
        this.match(plsqlParser.COST);
        this.state = 4493;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.MODEL:
            this.state = 4476;
            this.match(plsqlParser.MODEL);
            this.state = 4478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.AUTO) {
                this.state = 4477;
                this.match(plsqlParser.AUTO);
            }

            break;
        case plsqlParser.LEFT_PAREN:
            this.state = 4480;
            this.match(plsqlParser.LEFT_PAREN);
            this.state = 4481;
            this.cost_class_name();
            this.state = 4486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 4482;
                this.match(plsqlParser.COMMA);
                this.state = 4483;
                this.cost_class_name();
                this.state = 4488;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4489;
            this.match(plsqlParser.RIGHT_PAREN);
            this.state = 4490;
            this.match(plsqlParser.VALUES);
            this.state = 4491;
            this.expression_list();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_passing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xml_passing_clause;
    return this;
}

Xml_passing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_passing_clauseContext.prototype.constructor = Xml_passing_clauseContext;

Xml_passing_clauseContext.prototype.PASSING = function() {
    return this.getToken(plsqlParser.PASSING, 0);
};

Xml_passing_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Xml_passing_clauseContext.prototype.BY = function() {
    return this.getToken(plsqlParser.BY, 0);
};

Xml_passing_clauseContext.prototype.VALUE = function() {
    return this.getToken(plsqlParser.VALUE, 0);
};

Xml_passing_clauseContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Xml_passing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXml_passing_clause(this);
	}
};

Xml_passing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXml_passing_clause(this);
	}
};




plsqlParser.Xml_passing_clauseContext = Xml_passing_clauseContext;

plsqlParser.prototype.xml_passing_clause = function() {

    var localctx = new Xml_passing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, plsqlParser.RULE_xml_passing_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4495;
        this.match(plsqlParser.PASSING);
        this.state = 4498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.BY) {
            this.state = 4496;
            this.match(plsqlParser.BY);
            this.state = 4497;
            this.match(plsqlParser.VALUE);
        }

        this.state = 4500;
        this.expression(0);
        this.state = 4502;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.AS - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 4501;
            this.column_alias();
        }

        this.state = 4504;
        this.match(plsqlParser.COMMA);
        this.state = 4505;
        this.expression(0);
        this.state = 4507;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,573,this._ctx);
        if(la_===1) {
            this.state = 4506;
            this.column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_attributes_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xml_attributes_clause;
    return this;
}

Xml_attributes_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_attributes_clauseContext.prototype.constructor = Xml_attributes_clauseContext;

Xml_attributes_clauseContext.prototype.XMLATTRIBUTES = function() {
    return this.getToken(plsqlParser.XMLATTRIBUTES, 0);
};

Xml_attributes_clauseContext.prototype.xml_multiuse_expression_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_multiuse_expression_elementContext);
    } else {
        return this.getTypedRuleContext(Xml_multiuse_expression_elementContext,i);
    }
};

Xml_attributes_clauseContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(plsqlParser.ENTITYESCAPING, 0);
};

Xml_attributes_clauseContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(plsqlParser.NOENTITYESCAPING, 0);
};

Xml_attributes_clauseContext.prototype.SCHEMACHECK = function() {
    return this.getToken(plsqlParser.SCHEMACHECK, 0);
};

Xml_attributes_clauseContext.prototype.NOSCHEMACHECK = function() {
    return this.getToken(plsqlParser.NOSCHEMACHECK, 0);
};

Xml_attributes_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXml_attributes_clause(this);
	}
};

Xml_attributes_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXml_attributes_clause(this);
	}
};




plsqlParser.Xml_attributes_clauseContext = Xml_attributes_clauseContext;

plsqlParser.prototype.xml_attributes_clause = function() {

    var localctx = new Xml_attributes_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, plsqlParser.RULE_xml_attributes_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4509;
        this.match(plsqlParser.XMLATTRIBUTES);
        this.state = 4510;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 4512;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,574,this._ctx);
        if(la_===1) {
            this.state = 4511;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.ENTITYESCAPING || _la===plsqlParser.NOENTITYESCAPING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 4515;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,575,this._ctx);
        if(la_===1) {
            this.state = 4514;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.NOSCHEMACHECK || _la===plsqlParser.SCHEMACHECK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 4517;
        this.xml_multiuse_expression_element();
        this.state = 4522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 4518;
            this.match(plsqlParser.COMMA);
            this.state = 4519;
            this.xml_multiuse_expression_element();
            this.state = 4524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4525;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_namespaces_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xml_namespaces_clause;
    return this;
}

Xml_namespaces_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_namespaces_clauseContext.prototype.constructor = Xml_namespaces_clauseContext;

Xml_namespaces_clauseContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(plsqlParser.XMLNAMESPACES, 0);
};

Xml_namespaces_clauseContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Xml_namespaces_clauseContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Xml_namespaces_clauseContext.prototype.xml_general_default_part = function() {
    return this.getTypedRuleContext(Xml_general_default_partContext,0);
};

Xml_namespaces_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXml_namespaces_clause(this);
	}
};

Xml_namespaces_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXml_namespaces_clause(this);
	}
};




plsqlParser.Xml_namespaces_clauseContext = Xml_namespaces_clauseContext;

plsqlParser.prototype.xml_namespaces_clause = function() {

    var localctx = new Xml_namespaces_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, plsqlParser.RULE_xml_namespaces_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4527;
        this.match(plsqlParser.XMLNAMESPACES);
        this.state = 4528;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 4532;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,577,this._ctx);
        if(la_===1) {
            this.state = 4529;
            this.concatenation();
            this.state = 4530;
            this.column_alias();

        }
        this.state = 4540;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 4534;
            this.match(plsqlParser.COMMA);
            this.state = 4535;
            this.concatenation();
            this.state = 4536;
            this.column_alias();
            this.state = 4542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4544;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.DEFAULT) {
            this.state = 4543;
            this.xml_general_default_part();
        }

        this.state = 4546;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_table_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xml_table_column;
    return this;
}

Xml_table_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_table_columnContext.prototype.constructor = Xml_table_columnContext;

Xml_table_columnContext.prototype.xml_column_name = function() {
    return this.getTypedRuleContext(Xml_column_nameContext,0);
};

Xml_table_columnContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Xml_table_columnContext.prototype.ORDINALITY = function() {
    return this.getToken(plsqlParser.ORDINALITY, 0);
};

Xml_table_columnContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Xml_table_columnContext.prototype.PATH = function() {
    return this.getToken(plsqlParser.PATH, 0);
};

Xml_table_columnContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xml_table_columnContext.prototype.xml_general_default_part = function() {
    return this.getTypedRuleContext(Xml_general_default_partContext,0);
};

Xml_table_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXml_table_column(this);
	}
};

Xml_table_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXml_table_column(this);
	}
};




plsqlParser.Xml_table_columnContext = Xml_table_columnContext;

plsqlParser.prototype.xml_table_column = function() {

    var localctx = new Xml_table_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, plsqlParser.RULE_xml_table_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4548;
        this.xml_column_name();
        this.state = 4559;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.FOR:
            this.state = 4549;
            this.match(plsqlParser.FOR);
            this.state = 4550;
            this.match(plsqlParser.ORDINALITY);
            break;
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DATE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 4551;
            this.type_spec();
            this.state = 4554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.PATH) {
                this.state = 4552;
                this.match(plsqlParser.PATH);
                this.state = 4553;
                this.concatenation();
            }

            this.state = 4557;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.DEFAULT) {
                this.state = 4556;
                this.xml_general_default_part();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_general_default_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xml_general_default_part;
    return this;
}

Xml_general_default_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_general_default_partContext.prototype.constructor = Xml_general_default_partContext;

Xml_general_default_partContext.prototype.DEFAULT = function() {
    return this.getToken(plsqlParser.DEFAULT, 0);
};

Xml_general_default_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xml_general_default_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXml_general_default_part(this);
	}
};

Xml_general_default_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXml_general_default_part(this);
	}
};




plsqlParser.Xml_general_default_partContext = Xml_general_default_partContext;

plsqlParser.prototype.xml_general_default_part = function() {

    var localctx = new Xml_general_default_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, plsqlParser.RULE_xml_general_default_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4561;
        this.match(plsqlParser.DEFAULT);
        this.state = 4562;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_multiuse_expression_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xml_multiuse_expression_element;
    return this;
}

Xml_multiuse_expression_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_multiuse_expression_elementContext.prototype.constructor = Xml_multiuse_expression_elementContext;

Xml_multiuse_expression_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Xml_multiuse_expression_elementContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Xml_multiuse_expression_elementContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Xml_multiuse_expression_elementContext.prototype.EVALNAME = function() {
    return this.getToken(plsqlParser.EVALNAME, 0);
};

Xml_multiuse_expression_elementContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xml_multiuse_expression_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXml_multiuse_expression_element(this);
	}
};

Xml_multiuse_expression_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXml_multiuse_expression_element(this);
	}
};




plsqlParser.Xml_multiuse_expression_elementContext = Xml_multiuse_expression_elementContext;

plsqlParser.prototype.xml_multiuse_expression_element = function() {

    var localctx = new Xml_multiuse_expression_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, plsqlParser.RULE_xml_multiuse_expression_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4564;
        this.expression(0);
        this.state = 4571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AS) {
            this.state = 4565;
            this.match(plsqlParser.AS);
            this.state = 4569;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,583,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4566;
                this.id_expression();
                break;

            case 2:
                this.state = 4567;
                this.match(plsqlParser.EVALNAME);
                this.state = 4568;
                this.concatenation();
                break;

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlroot_param_version_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xmlroot_param_version_part;
    return this;
}

Xmlroot_param_version_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlroot_param_version_partContext.prototype.constructor = Xmlroot_param_version_partContext;

Xmlroot_param_version_partContext.prototype.VERSION = function() {
    return this.getToken(plsqlParser.VERSION, 0);
};

Xmlroot_param_version_partContext.prototype.NO = function() {
    return this.getToken(plsqlParser.NO, 0);
};

Xmlroot_param_version_partContext.prototype.VALUE = function() {
    return this.getToken(plsqlParser.VALUE, 0);
};

Xmlroot_param_version_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Xmlroot_param_version_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXmlroot_param_version_part(this);
	}
};

Xmlroot_param_version_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXmlroot_param_version_part(this);
	}
};




plsqlParser.Xmlroot_param_version_partContext = Xmlroot_param_version_partContext;

plsqlParser.prototype.xmlroot_param_version_part = function() {

    var localctx = new Xmlroot_param_version_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, plsqlParser.RULE_xmlroot_param_version_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4573;
        this.match(plsqlParser.VERSION);
        this.state = 4577;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,585,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4574;
            this.match(plsqlParser.NO);
            this.state = 4575;
            this.match(plsqlParser.VALUE);
            break;

        case 2:
            this.state = 4576;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlroot_param_standalone_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xmlroot_param_standalone_part;
    return this;
}

Xmlroot_param_standalone_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlroot_param_standalone_partContext.prototype.constructor = Xmlroot_param_standalone_partContext;

Xmlroot_param_standalone_partContext.prototype.STANDALONE = function() {
    return this.getToken(plsqlParser.STANDALONE, 0);
};

Xmlroot_param_standalone_partContext.prototype.YES = function() {
    return this.getToken(plsqlParser.YES, 0);
};

Xmlroot_param_standalone_partContext.prototype.NO = function() {
    return this.getToken(plsqlParser.NO, 0);
};

Xmlroot_param_standalone_partContext.prototype.VALUE = function() {
    return this.getToken(plsqlParser.VALUE, 0);
};

Xmlroot_param_standalone_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXmlroot_param_standalone_part(this);
	}
};

Xmlroot_param_standalone_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXmlroot_param_standalone_part(this);
	}
};




plsqlParser.Xmlroot_param_standalone_partContext = Xmlroot_param_standalone_partContext;

plsqlParser.prototype.xmlroot_param_standalone_part = function() {

    var localctx = new Xmlroot_param_standalone_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, plsqlParser.RULE_xmlroot_param_standalone_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4579;
        this.match(plsqlParser.STANDALONE);
        this.state = 4585;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.YES:
            this.state = 4580;
            this.match(plsqlParser.YES);
            break;
        case plsqlParser.NO:
            this.state = 4581;
            this.match(plsqlParser.NO);
            this.state = 4583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.VALUE) {
                this.state = 4582;
                this.match(plsqlParser.VALUE);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_enconding_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xmlserialize_param_enconding_part;
    return this;
}

Xmlserialize_param_enconding_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_enconding_partContext.prototype.constructor = Xmlserialize_param_enconding_partContext;

Xmlserialize_param_enconding_partContext.prototype.ENCODING = function() {
    return this.getToken(plsqlParser.ENCODING, 0);
};

Xmlserialize_param_enconding_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xmlserialize_param_enconding_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXmlserialize_param_enconding_part(this);
	}
};

Xmlserialize_param_enconding_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXmlserialize_param_enconding_part(this);
	}
};




plsqlParser.Xmlserialize_param_enconding_partContext = Xmlserialize_param_enconding_partContext;

plsqlParser.prototype.xmlserialize_param_enconding_part = function() {

    var localctx = new Xmlserialize_param_enconding_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, plsqlParser.RULE_xmlserialize_param_enconding_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4587;
        this.match(plsqlParser.ENCODING);
        this.state = 4588;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_version_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xmlserialize_param_version_part;
    return this;
}

Xmlserialize_param_version_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_version_partContext.prototype.constructor = Xmlserialize_param_version_partContext;

Xmlserialize_param_version_partContext.prototype.VERSION = function() {
    return this.getToken(plsqlParser.VERSION, 0);
};

Xmlserialize_param_version_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xmlserialize_param_version_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXmlserialize_param_version_part(this);
	}
};

Xmlserialize_param_version_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXmlserialize_param_version_part(this);
	}
};




plsqlParser.Xmlserialize_param_version_partContext = Xmlserialize_param_version_partContext;

plsqlParser.prototype.xmlserialize_param_version_part = function() {

    var localctx = new Xmlserialize_param_version_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, plsqlParser.RULE_xmlserialize_param_version_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4590;
        this.match(plsqlParser.VERSION);
        this.state = 4591;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_ident_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xmlserialize_param_ident_part;
    return this;
}

Xmlserialize_param_ident_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_ident_partContext.prototype.constructor = Xmlserialize_param_ident_partContext;

Xmlserialize_param_ident_partContext.prototype.NO = function() {
    return this.getToken(plsqlParser.NO, 0);
};

Xmlserialize_param_ident_partContext.prototype.INDENT = function() {
    return this.getToken(plsqlParser.INDENT, 0);
};

Xmlserialize_param_ident_partContext.prototype.SIZE = function() {
    return this.getToken(plsqlParser.SIZE, 0);
};

Xmlserialize_param_ident_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xmlserialize_param_ident_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXmlserialize_param_ident_part(this);
	}
};

Xmlserialize_param_ident_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXmlserialize_param_ident_part(this);
	}
};




plsqlParser.Xmlserialize_param_ident_partContext = Xmlserialize_param_ident_partContext;

plsqlParser.prototype.xmlserialize_param_ident_part = function() {

    var localctx = new Xmlserialize_param_ident_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, plsqlParser.RULE_xmlserialize_param_ident_part);
    var _la = 0; // Token type
    try {
        this.state = 4601;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.NO:
            this.enterOuterAlt(localctx, 1);
            this.state = 4593;
            this.match(plsqlParser.NO);
            this.state = 4594;
            this.match(plsqlParser.INDENT);
            break;
        case plsqlParser.INDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 4595;
            this.match(plsqlParser.INDENT);
            this.state = 4599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.SIZE) {
                this.state = 4596;
                this.match(plsqlParser.SIZE);
                this.state = 4597;
                this.match(plsqlParser.EQUALS_OP);
                this.state = 4598;
                this.concatenation();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_plus_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sql_plus_command;
    return this;
}

Sql_plus_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_plus_commandContext.prototype.constructor = Sql_plus_commandContext;

Sql_plus_commandContext.prototype.whenever_command = function() {
    return this.getTypedRuleContext(Whenever_commandContext,0);
};

Sql_plus_commandContext.prototype.exit_command = function() {
    return this.getTypedRuleContext(Exit_commandContext,0);
};

Sql_plus_commandContext.prototype.prompt_command = function() {
    return this.getTypedRuleContext(Prompt_commandContext,0);
};

Sql_plus_commandContext.prototype.set_command = function() {
    return this.getTypedRuleContext(Set_commandContext,0);
};

Sql_plus_commandContext.prototype.show_errors_command = function() {
    return this.getTypedRuleContext(Show_errors_commandContext,0);
};

Sql_plus_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSql_plus_command(this);
	}
};

Sql_plus_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSql_plus_command(this);
	}
};




plsqlParser.Sql_plus_commandContext = Sql_plus_commandContext;

plsqlParser.prototype.sql_plus_command = function() {

    var localctx = new Sql_plus_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, plsqlParser.RULE_sql_plus_command);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4609;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.SOLIDUS:
            this.state = 4603;
            this.match(plsqlParser.SOLIDUS);
            break;
        case plsqlParser.WHENEVER:
            this.state = 4604;
            this.whenever_command();
            break;
        case plsqlParser.EXIT:
            this.state = 4605;
            this.exit_command();
            break;
        case plsqlParser.PROMPT:
            this.state = 4606;
            this.prompt_command();
            break;
        case plsqlParser.SET:
            this.state = 4607;
            this.set_command();
            break;
        case plsqlParser.SHOW:
            this.state = 4608;
            this.show_errors_command();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Whenever_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_whenever_command;
    return this;
}

Whenever_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Whenever_commandContext.prototype.constructor = Whenever_commandContext;

Whenever_commandContext.prototype.WHENEVER = function() {
    return this.getToken(plsqlParser.WHENEVER, 0);
};

Whenever_commandContext.prototype.SQLERROR = function() {
    return this.getToken(plsqlParser.SQLERROR, 0);
};

Whenever_commandContext.prototype.OSERROR = function() {
    return this.getToken(plsqlParser.OSERROR, 0);
};

Whenever_commandContext.prototype.EXIT = function() {
    return this.getToken(plsqlParser.EXIT, 0);
};

Whenever_commandContext.prototype.CONTINUE = function() {
    return this.getToken(plsqlParser.CONTINUE, 0);
};

Whenever_commandContext.prototype.SUCCESS = function() {
    return this.getToken(plsqlParser.SUCCESS, 0);
};

Whenever_commandContext.prototype.FAILURE = function() {
    return this.getToken(plsqlParser.FAILURE, 0);
};

Whenever_commandContext.prototype.WARNING = function() {
    return this.getToken(plsqlParser.WARNING, 0);
};

Whenever_commandContext.prototype.COMMIT = function() {
    return this.getToken(plsqlParser.COMMIT, 0);
};

Whenever_commandContext.prototype.ROLLBACK = function() {
    return this.getToken(plsqlParser.ROLLBACK, 0);
};

Whenever_commandContext.prototype.NONE = function() {
    return this.getToken(plsqlParser.NONE, 0);
};

Whenever_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWhenever_command(this);
	}
};

Whenever_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWhenever_command(this);
	}
};




plsqlParser.Whenever_commandContext = Whenever_commandContext;

plsqlParser.prototype.whenever_command = function() {

    var localctx = new Whenever_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, plsqlParser.RULE_whenever_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4611;
        this.match(plsqlParser.WHENEVER);
        this.state = 4612;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.OSERROR || _la===plsqlParser.SQLERROR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4618;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.EXIT:
            this.state = 4613;
            this.match(plsqlParser.EXIT);
            this.state = 4614;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.FAILURE || _la===plsqlParser.SUCCESS || _la===plsqlParser.WARNING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4615;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.COMMIT || _la===plsqlParser.ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case plsqlParser.CONTINUE:
            this.state = 4616;
            this.match(plsqlParser.CONTINUE);
            this.state = 4617;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.COMMIT || _la===plsqlParser.NONE || _la===plsqlParser.ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_set_command;
    return this;
}

Set_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_commandContext.prototype.constructor = Set_commandContext;

Set_commandContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Set_commandContext.prototype.regular_id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Regular_idContext);
    } else {
        return this.getTypedRuleContext(Regular_idContext,i);
    }
};

Set_commandContext.prototype.CHAR_STRING = function() {
    return this.getToken(plsqlParser.CHAR_STRING, 0);
};

Set_commandContext.prototype.ON = function() {
    return this.getToken(plsqlParser.ON, 0);
};

Set_commandContext.prototype.OFF = function() {
    return this.getToken(plsqlParser.OFF, 0);
};

Set_commandContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

Set_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSet_command(this);
	}
};

Set_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSet_command(this);
	}
};




plsqlParser.Set_commandContext = Set_commandContext;

plsqlParser.prototype.set_command = function() {

    var localctx = new Set_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, plsqlParser.RULE_set_command);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4620;
        this.match(plsqlParser.SET);
        this.state = 4621;
        this.regular_id();
        this.state = 4627;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,592,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4622;
            this.match(plsqlParser.CHAR_STRING);
            break;

        case 2:
            this.state = 4623;
            this.match(plsqlParser.ON);
            break;

        case 3:
            this.state = 4624;
            this.match(plsqlParser.OFF);
            break;

        case 4:
            this.state = 4625;
            this.numeric();
            break;

        case 5:
            this.state = 4626;
            this.regular_id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exit_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_exit_command;
    return this;
}

Exit_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exit_commandContext.prototype.constructor = Exit_commandContext;

Exit_commandContext.prototype.EXIT = function() {
    return this.getToken(plsqlParser.EXIT, 0);
};

Exit_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterExit_command(this);
	}
};

Exit_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitExit_command(this);
	}
};




plsqlParser.Exit_commandContext = Exit_commandContext;

plsqlParser.prototype.exit_command = function() {

    var localctx = new Exit_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, plsqlParser.RULE_exit_command);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4629;
        this.match(plsqlParser.EXIT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Prompt_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_prompt_command;
    return this;
}

Prompt_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Prompt_commandContext.prototype.constructor = Prompt_commandContext;

Prompt_commandContext.prototype.PROMPT = function() {
    return this.getToken(plsqlParser.PROMPT, 0);
};

Prompt_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPrompt_command(this);
	}
};

Prompt_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPrompt_command(this);
	}
};




plsqlParser.Prompt_commandContext = Prompt_commandContext;

plsqlParser.prototype.prompt_command = function() {

    var localctx = new Prompt_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, plsqlParser.RULE_prompt_command);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4631;
        this.match(plsqlParser.PROMPT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Show_errors_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_show_errors_command;
    return this;
}

Show_errors_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Show_errors_commandContext.prototype.constructor = Show_errors_commandContext;

Show_errors_commandContext.prototype.SHOW = function() {
    return this.getToken(plsqlParser.SHOW, 0);
};

Show_errors_commandContext.prototype.ERR = function() {
    return this.getToken(plsqlParser.ERR, 0);
};

Show_errors_commandContext.prototype.ERRORS = function() {
    return this.getToken(plsqlParser.ERRORS, 0);
};

Show_errors_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterShow_errors_command(this);
	}
};

Show_errors_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitShow_errors_command(this);
	}
};




plsqlParser.Show_errors_commandContext = Show_errors_commandContext;

plsqlParser.prototype.show_errors_command = function() {

    var localctx = new Show_errors_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, plsqlParser.RULE_show_errors_command);
    try {
        this.state = 4637;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,593,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4633;
            this.match(plsqlParser.SHOW);
            this.state = 4634;
            this.match(plsqlParser.ERR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4635;
            this.match(plsqlParser.SHOW);
            this.state = 4636;
            this.match(plsqlParser.ERRORS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partition_extension_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_partition_extension_clause;
    return this;
}

Partition_extension_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partition_extension_clauseContext.prototype.constructor = Partition_extension_clauseContext;

Partition_extension_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Partition_extension_clauseContext.prototype.SUBPARTITION = function() {
    return this.getToken(plsqlParser.SUBPARTITION, 0);
};

Partition_extension_clauseContext.prototype.PARTITION = function() {
    return this.getToken(plsqlParser.PARTITION, 0);
};

Partition_extension_clauseContext.prototype.FOR = function() {
    return this.getToken(plsqlParser.FOR, 0);
};

Partition_extension_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPartition_extension_clause(this);
	}
};

Partition_extension_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPartition_extension_clause(this);
	}
};




plsqlParser.Partition_extension_clauseContext = Partition_extension_clauseContext;

plsqlParser.prototype.partition_extension_clause = function() {

    var localctx = new Partition_extension_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, plsqlParser.RULE_partition_extension_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4639;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.PARTITION || _la===plsqlParser.SUBPARTITION)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.FOR) {
            this.state = 4640;
            this.match(plsqlParser.FOR);
        }

        this.state = 4643;
        this.expression_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_column_alias;
    return this;
}

Column_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_aliasContext.prototype.constructor = Column_aliasContext;

Column_aliasContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Column_aliasContext.prototype.alias_quoted_string = function() {
    return this.getTypedRuleContext(Alias_quoted_stringContext,0);
};

Column_aliasContext.prototype.AS = function() {
    return this.getToken(plsqlParser.AS, 0);
};

Column_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterColumn_alias(this);
	}
};

Column_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitColumn_alias(this);
	}
};




plsqlParser.Column_aliasContext = Column_aliasContext;

plsqlParser.prototype.column_alias = function() {

    var localctx = new Column_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, plsqlParser.RULE_column_alias);
    var _la = 0; // Token type
    try {
        this.state = 4653;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,597,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.AS) {
                this.state = 4645;
                this.match(plsqlParser.AS);
            }

            this.state = 4650;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.A_LETTER:
            case plsqlParser.ADD:
            case plsqlParser.AFTER:
            case plsqlParser.AGENT:
            case plsqlParser.AGGREGATE:
            case plsqlParser.ANALYZE:
            case plsqlParser.ARRAY:
            case plsqlParser.ASSOCIATE:
            case plsqlParser.AT:
            case plsqlParser.ATTRIBUTE:
            case plsqlParser.AUDIT:
            case plsqlParser.AUTHID:
            case plsqlParser.AUTO:
            case plsqlParser.AUTOMATIC:
            case plsqlParser.AUTONOMOUS_TRANSACTION:
            case plsqlParser.BATCH:
            case plsqlParser.BEFORE:
            case plsqlParser.BFILE:
            case plsqlParser.BINARY_DOUBLE:
            case plsqlParser.BINARY_FLOAT:
            case plsqlParser.BINARY_INTEGER:
            case plsqlParser.BLOB:
            case plsqlParser.BLOCK:
            case plsqlParser.BODY:
            case plsqlParser.BOOLEAN:
            case plsqlParser.BOTH:
            case plsqlParser.BULK:
            case plsqlParser.BYTE:
            case plsqlParser.C_LETTER:
            case plsqlParser.CALL:
            case plsqlParser.CANONICAL:
            case plsqlParser.CASCADE:
            case plsqlParser.CAST:
            case plsqlParser.CHAR:
            case plsqlParser.CHAR_CS:
            case plsqlParser.CHARACTER:
            case plsqlParser.CHR:
            case plsqlParser.CLOB:
            case plsqlParser.CLOSE:
            case plsqlParser.CLUSTER:
            case plsqlParser.COLLECT:
            case plsqlParser.COLUMNS:
            case plsqlParser.COMMENT:
            case plsqlParser.COMMIT:
            case plsqlParser.COMMITTED:
            case plsqlParser.COMPATIBILITY:
            case plsqlParser.COMPILE:
            case plsqlParser.COMPOUND:
            case plsqlParser.CONSTANT:
            case plsqlParser.CONSTRAINT:
            case plsqlParser.CONSTRAINTS:
            case plsqlParser.CONSTRUCTOR:
            case plsqlParser.CONTENT:
            case plsqlParser.CONTEXT:
            case plsqlParser.CONTINUE:
            case plsqlParser.CONVERT:
            case plsqlParser.CORRUPT_XID:
            case plsqlParser.CORRUPT_XID_ALL:
            case plsqlParser.COST:
            case plsqlParser.COUNT:
            case plsqlParser.CROSS:
            case plsqlParser.CUBE:
            case plsqlParser.CURRENT_USER:
            case plsqlParser.CURSOR:
            case plsqlParser.CUSTOMDATUM:
            case plsqlParser.CYCLE:
            case plsqlParser.DATA:
            case plsqlParser.DATABASE:
            case plsqlParser.DAY:
            case plsqlParser.DB_ROLE_CHANGE:
            case plsqlParser.DBTIMEZONE:
            case plsqlParser.DDL:
            case plsqlParser.DEBUG:
            case plsqlParser.DEC:
            case plsqlParser.DECIMAL:
            case plsqlParser.DECOMPOSE:
            case plsqlParser.DECREMENT:
            case plsqlParser.DEFAULTS:
            case plsqlParser.DEFERRED:
            case plsqlParser.DEFINER:
            case plsqlParser.DETERMINISTIC:
            case plsqlParser.DIMENSION:
            case plsqlParser.DISABLE:
            case plsqlParser.DISASSOCIATE:
            case plsqlParser.DOCUMENT:
            case plsqlParser.DOUBLE:
            case plsqlParser.DSINTERVAL_UNCONSTRAINED:
            case plsqlParser.EACH:
            case plsqlParser.ELEMENT:
            case plsqlParser.EMPTY:
            case plsqlParser.ENABLE:
            case plsqlParser.ENCODING:
            case plsqlParser.ENTITYESCAPING:
            case plsqlParser.ERR:
            case plsqlParser.ERRORS:
            case plsqlParser.ESCAPE:
            case plsqlParser.EVALNAME:
            case plsqlParser.EXCEPTION:
            case plsqlParser.EXCEPTION_INIT:
            case plsqlParser.EXCEPTIONS:
            case plsqlParser.EXCLUDE:
            case plsqlParser.EXECUTE:
            case plsqlParser.EXIT:
            case plsqlParser.EXPLAIN:
            case plsqlParser.EXTERNAL:
            case plsqlParser.EXTRACT:
            case plsqlParser.FAILURE:
            case plsqlParser.FINAL:
            case plsqlParser.FIRST:
            case plsqlParser.FIRST_VALUE:
            case plsqlParser.FLOAT:
            case plsqlParser.FOLLOWING:
            case plsqlParser.FOLLOWS:
            case plsqlParser.FORALL:
            case plsqlParser.FORCE:
            case plsqlParser.FULL:
            case plsqlParser.FUNCTION:
            case plsqlParser.GROUPING:
            case plsqlParser.HASH:
            case plsqlParser.HIDE:
            case plsqlParser.HOUR:
            case plsqlParser.IGNORE:
            case plsqlParser.IMMEDIATE:
            case plsqlParser.INCLUDE:
            case plsqlParser.INCLUDING:
            case plsqlParser.INCREMENT:
            case plsqlParser.INDENT:
            case plsqlParser.INDEXED:
            case plsqlParser.INDICATOR:
            case plsqlParser.INDICES:
            case plsqlParser.INFINITE:
            case plsqlParser.INLINE:
            case plsqlParser.INNER:
            case plsqlParser.INOUT:
            case plsqlParser.INSTANTIABLE:
            case plsqlParser.INSTEAD:
            case plsqlParser.INT:
            case plsqlParser.INTEGER:
            case plsqlParser.INTERVAL:
            case plsqlParser.INVALIDATE:
            case plsqlParser.ISOLATION:
            case plsqlParser.ITERATE:
            case plsqlParser.JAVA:
            case plsqlParser.JOIN:
            case plsqlParser.KEEP:
            case plsqlParser.LANGUAGE:
            case plsqlParser.LAST:
            case plsqlParser.LAST_VALUE:
            case plsqlParser.LEADING:
            case plsqlParser.LEFT:
            case plsqlParser.LEVEL:
            case plsqlParser.LIBRARY:
            case plsqlParser.LIKE2:
            case plsqlParser.LIKE4:
            case plsqlParser.LIKEC:
            case plsqlParser.LIMIT:
            case plsqlParser.LOCAL:
            case plsqlParser.LOCKED:
            case plsqlParser.LOG:
            case plsqlParser.LOGOFF:
            case plsqlParser.LOGON:
            case plsqlParser.LONG:
            case plsqlParser.LOOP:
            case plsqlParser.MAIN:
            case plsqlParser.MAP:
            case plsqlParser.MATCHED:
            case plsqlParser.MAXVALUE:
            case plsqlParser.MEASURES:
            case plsqlParser.MEMBER:
            case plsqlParser.MERGE:
            case plsqlParser.MINUTE:
            case plsqlParser.MINVALUE:
            case plsqlParser.MLSLABEL:
            case plsqlParser.MODEL:
            case plsqlParser.MODIFY:
            case plsqlParser.MONTH:
            case plsqlParser.MULTISET:
            case plsqlParser.NAME:
            case plsqlParser.NAN:
            case plsqlParser.NATURAL:
            case plsqlParser.NATURALN:
            case plsqlParser.NAV:
            case plsqlParser.NCHAR:
            case plsqlParser.NCHAR_CS:
            case plsqlParser.NCLOB:
            case plsqlParser.NESTED:
            case plsqlParser.NEW:
            case plsqlParser.NO:
            case plsqlParser.NOAUDIT:
            case plsqlParser.NOCOPY:
            case plsqlParser.NOCYCLE:
            case plsqlParser.NOENTITYESCAPING:
            case plsqlParser.NONE:
            case plsqlParser.NOSCHEMACHECK:
            case plsqlParser.NULLS:
            case plsqlParser.NUMBER:
            case plsqlParser.NUMERIC:
            case plsqlParser.NVARCHAR2:
            case plsqlParser.OBJECT:
            case plsqlParser.OFF:
            case plsqlParser.OID:
            case plsqlParser.OLD:
            case plsqlParser.ONLY:
            case plsqlParser.OPEN:
            case plsqlParser.ORADATA:
            case plsqlParser.ORDINALITY:
            case plsqlParser.OSERROR:
            case plsqlParser.OUT:
            case plsqlParser.OUTER:
            case plsqlParser.OVER:
            case plsqlParser.OVERRIDING:
            case plsqlParser.PACKAGE:
            case plsqlParser.PARALLEL_ENABLE:
            case plsqlParser.PARAMETERS:
            case plsqlParser.PARENT:
            case plsqlParser.PARTITION:
            case plsqlParser.PASSING:
            case plsqlParser.PATH:
            case plsqlParser.PIPELINED:
            case plsqlParser.PLAN:
            case plsqlParser.PLS_INTEGER:
            case plsqlParser.POSITIVE:
            case plsqlParser.POSITIVEN:
            case plsqlParser.PRAGMA:
            case plsqlParser.PRECEDING:
            case plsqlParser.PRECISION:
            case plsqlParser.PRESENT:
            case plsqlParser.RAISE:
            case plsqlParser.RANGE:
            case plsqlParser.RAW:
            case plsqlParser.READ:
            case plsqlParser.REAL:
            case plsqlParser.RECORD:
            case plsqlParser.REF:
            case plsqlParser.REFERENCE:
            case plsqlParser.REFERENCING:
            case plsqlParser.REJECT:
            case plsqlParser.RELIES_ON:
            case plsqlParser.RENAME:
            case plsqlParser.REPLACE:
            case plsqlParser.RESPECT:
            case plsqlParser.RESTRICT_REFERENCES:
            case plsqlParser.RESULT:
            case plsqlParser.RESULT_CACHE:
            case plsqlParser.RETURN:
            case plsqlParser.RETURNING:
            case plsqlParser.REUSE:
            case plsqlParser.REVERSE:
            case plsqlParser.RIGHT:
            case plsqlParser.ROLLBACK:
            case plsqlParser.ROLLUP:
            case plsqlParser.ROW:
            case plsqlParser.ROWID:
            case plsqlParser.ROWS:
            case plsqlParser.RULES:
            case plsqlParser.SAMPLE:
            case plsqlParser.SAVE:
            case plsqlParser.SAVEPOINT:
            case plsqlParser.SCHEMA:
            case plsqlParser.SCHEMACHECK:
            case plsqlParser.SCN:
            case plsqlParser.SECOND:
            case plsqlParser.SEED:
            case plsqlParser.SEGMENT:
            case plsqlParser.SELF:
            case plsqlParser.SEQUENTIAL:
            case plsqlParser.SERIALIZABLE:
            case plsqlParser.SERIALLY_REUSABLE:
            case plsqlParser.SERVERERROR:
            case plsqlParser.SESSIONTIMEZONE:
            case plsqlParser.SET:
            case plsqlParser.SETS:
            case plsqlParser.SETTINGS:
            case plsqlParser.SHOW:
            case plsqlParser.SHUTDOWN:
            case plsqlParser.SIBLINGS:
            case plsqlParser.SIGNTYPE:
            case plsqlParser.SIMPLE_INTEGER:
            case plsqlParser.SINGLE:
            case plsqlParser.SKIP_:
            case plsqlParser.SMALLINT:
            case plsqlParser.SNAPSHOT:
            case plsqlParser.SOME:
            case plsqlParser.SPECIFICATION:
            case plsqlParser.SQLDATA:
            case plsqlParser.SQLERROR:
            case plsqlParser.STANDALONE:
            case plsqlParser.STARTUP:
            case plsqlParser.STATEMENT:
            case plsqlParser.STATEMENT_ID:
            case plsqlParser.STATIC:
            case plsqlParser.STATISTICS:
            case plsqlParser.STRING:
            case plsqlParser.SUBMULTISET:
            case plsqlParser.SUBPARTITION:
            case plsqlParser.SUBSTITUTABLE:
            case plsqlParser.SUBTYPE:
            case plsqlParser.SUCCESS:
            case plsqlParser.SUSPEND:
            case plsqlParser.TIME:
            case plsqlParser.TIMESTAMP:
            case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_UNCONSTRAINED:
            case plsqlParser.TIMEZONE_ABBR:
            case plsqlParser.TIMEZONE_HOUR:
            case plsqlParser.TIMEZONE_MINUTE:
            case plsqlParser.TIMEZONE_REGION:
            case plsqlParser.TRAILING:
            case plsqlParser.TRANSACTION:
            case plsqlParser.TRANSLATE:
            case plsqlParser.TREAT:
            case plsqlParser.TRIGGER:
            case plsqlParser.TRIM:
            case plsqlParser.TRUNCATE:
            case plsqlParser.TYPE:
            case plsqlParser.UNBOUNDED:
            case plsqlParser.UNDER:
            case plsqlParser.UNLIMITED:
            case plsqlParser.UNTIL:
            case plsqlParser.UPDATED:
            case plsqlParser.UPSERT:
            case plsqlParser.UROWID:
            case plsqlParser.USE:
            case plsqlParser.VALIDATE:
            case plsqlParser.VALUE:
            case plsqlParser.VARCHAR:
            case plsqlParser.VARCHAR2:
            case plsqlParser.VARIABLE:
            case plsqlParser.VARRAY:
            case plsqlParser.VARYING:
            case plsqlParser.VERSION:
            case plsqlParser.VERSIONS:
            case plsqlParser.WAIT:
            case plsqlParser.WARNING:
            case plsqlParser.WELLFORMED:
            case plsqlParser.WHENEVER:
            case plsqlParser.WHILE:
            case plsqlParser.WITHIN:
            case plsqlParser.WORK:
            case plsqlParser.WRITE:
            case plsqlParser.XML:
            case plsqlParser.XMLAGG:
            case plsqlParser.XMLATTRIBUTES:
            case plsqlParser.XMLCAST:
            case plsqlParser.XMLCOLATTVAL:
            case plsqlParser.XMLELEMENT:
            case plsqlParser.XMLEXISTS:
            case plsqlParser.XMLFOREST:
            case plsqlParser.XMLNAMESPACES:
            case plsqlParser.XMLPARSE:
            case plsqlParser.XMLPI:
            case plsqlParser.XMLQUERY:
            case plsqlParser.XMLROOT:
            case plsqlParser.XMLSERIALIZE:
            case plsqlParser.XMLTABLE:
            case plsqlParser.YEAR:
            case plsqlParser.YES:
            case plsqlParser.YMINTERVAL_UNCONSTRAINED:
            case plsqlParser.ZONE:
            case plsqlParser.PREDICTION:
            case plsqlParser.PREDICTION_BOUNDS:
            case plsqlParser.PREDICTION_COST:
            case plsqlParser.PREDICTION_DETAILS:
            case plsqlParser.PREDICTION_PROBABILITY:
            case plsqlParser.PREDICTION_SET:
            case plsqlParser.CUME_DIST:
            case plsqlParser.DENSE_RANK:
            case plsqlParser.LISTAGG:
            case plsqlParser.PERCENT_RANK:
            case plsqlParser.PERCENTILE_CONT:
            case plsqlParser.PERCENTILE_DISC:
            case plsqlParser.RANK:
            case plsqlParser.AVG:
            case plsqlParser.CORR:
            case plsqlParser.LAG:
            case plsqlParser.LEAD:
            case plsqlParser.MAX:
            case plsqlParser.MEDIAN:
            case plsqlParser.MIN:
            case plsqlParser.NTILE:
            case plsqlParser.RATIO_TO_REPORT:
            case plsqlParser.ROW_NUMBER:
            case plsqlParser.SUM:
            case plsqlParser.VARIANCE:
            case plsqlParser.REGR_:
            case plsqlParser.STDDEV:
            case plsqlParser.VAR_:
            case plsqlParser.COVAR_:
            case plsqlParser.DELIMITED_ID:
            case plsqlParser.REGULAR_ID:
                this.state = 4648;
                this.r_id();
                break;
            case plsqlParser.NATIONAL_CHAR_STRING_LIT:
            case plsqlParser.CHAR_STRING:
                this.state = 4649;
                this.alias_quoted_string();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4652;
            this.match(plsqlParser.AS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_alias;
    return this;
}

Table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_aliasContext.prototype.constructor = Table_aliasContext;

Table_aliasContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Table_aliasContext.prototype.alias_quoted_string = function() {
    return this.getTypedRuleContext(Alias_quoted_stringContext,0);
};

Table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_alias(this);
	}
};

Table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_alias(this);
	}
};




plsqlParser.Table_aliasContext = Table_aliasContext;

plsqlParser.prototype.table_alias = function() {

    var localctx = new Table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, plsqlParser.RULE_table_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4657;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.state = 4655;
            this.r_id();
            break;
        case plsqlParser.NATIONAL_CHAR_STRING_LIT:
        case plsqlParser.CHAR_STRING:
            this.state = 4656;
            this.alias_quoted_string();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alias_quoted_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_alias_quoted_string;
    return this;
}

Alias_quoted_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alias_quoted_stringContext.prototype.constructor = Alias_quoted_stringContext;

Alias_quoted_stringContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Alias_quoted_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAlias_quoted_string(this);
	}
};

Alias_quoted_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAlias_quoted_string(this);
	}
};




plsqlParser.Alias_quoted_stringContext = Alias_quoted_stringContext;

plsqlParser.prototype.alias_quoted_string = function() {

    var localctx = new Alias_quoted_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, plsqlParser.RULE_alias_quoted_string);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4659;
        this.quoted_string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Where_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_where_clause;
    return this;
}

Where_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
    return this.getToken(plsqlParser.WHERE, 0);
};

Where_clauseContext.prototype.current_of_clause = function() {
    return this.getTypedRuleContext(Current_of_clauseContext,0);
};

Where_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterWhere_clause(this);
	}
};

Where_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitWhere_clause(this);
	}
};




plsqlParser.Where_clauseContext = Where_clauseContext;

plsqlParser.prototype.where_clause = function() {

    var localctx = new Where_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, plsqlParser.RULE_where_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4661;
        this.match(plsqlParser.WHERE);
        this.state = 4664;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.CURRENT:
            this.state = 4662;
            this.current_of_clause();
            break;
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ALL:
        case plsqlParser.ANALYZE:
        case plsqlParser.ANY:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CASE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONNECT_BY_ROOT:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DATE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DISTINCT:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXISTS:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FALSE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NOT:
        case plsqlParser.NULL:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.PRIOR:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUE:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.NATIONAL_CHAR_STRING_LIT:
        case plsqlParser.UNSIGNED_INTEGER:
        case plsqlParser.APPROXIMATE_NUM_LIT:
        case plsqlParser.CHAR_STRING:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.LEFT_PAREN:
        case plsqlParser.PLUS_SIGN:
        case plsqlParser.MINUS_SIGN:
        case plsqlParser.BINDVAR:
        case plsqlParser.COLON:
        case plsqlParser.REGULAR_ID:
            this.state = 4663;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Current_of_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_current_of_clause;
    return this;
}

Current_of_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Current_of_clauseContext.prototype.constructor = Current_of_clauseContext;

Current_of_clauseContext.prototype.CURRENT = function() {
    return this.getToken(plsqlParser.CURRENT, 0);
};

Current_of_clauseContext.prototype.OF = function() {
    return this.getToken(plsqlParser.OF, 0);
};

Current_of_clauseContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Current_of_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCurrent_of_clause(this);
	}
};

Current_of_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCurrent_of_clause(this);
	}
};




plsqlParser.Current_of_clauseContext = Current_of_clauseContext;

plsqlParser.prototype.current_of_clause = function() {

    var localctx = new Current_of_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, plsqlParser.RULE_current_of_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4666;
        this.match(plsqlParser.CURRENT);
        this.state = 4667;
        this.match(plsqlParser.OF);
        this.state = 4668;
        this.cursor_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Into_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_into_clause;
    return this;
}

Into_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Into_clauseContext.prototype.constructor = Into_clauseContext;

Into_clauseContext.prototype.INTO = function() {
    return this.getToken(plsqlParser.INTO, 0);
};

Into_clauseContext.prototype.variable_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_nameContext);
    } else {
        return this.getTypedRuleContext(Variable_nameContext,i);
    }
};

Into_clauseContext.prototype.BULK = function() {
    return this.getToken(plsqlParser.BULK, 0);
};

Into_clauseContext.prototype.COLLECT = function() {
    return this.getToken(plsqlParser.COLLECT, 0);
};

Into_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterInto_clause(this);
	}
};

Into_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitInto_clause(this);
	}
};




plsqlParser.Into_clauseContext = Into_clauseContext;

plsqlParser.prototype.into_clause = function() {

    var localctx = new Into_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, plsqlParser.RULE_into_clause);
    var _la = 0; // Token type
    try {
        this.state = 4690;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.INTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 4670;
            this.match(plsqlParser.INTO);
            this.state = 4671;
            this.variable_name();
            this.state = 4676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 4672;
                this.match(plsqlParser.COMMA);
                this.state = 4673;
                this.variable_name();
                this.state = 4678;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case plsqlParser.BULK:
            this.enterOuterAlt(localctx, 2);
            this.state = 4679;
            this.match(plsqlParser.BULK);
            this.state = 4680;
            this.match(plsqlParser.COLLECT);
            this.state = 4681;
            this.match(plsqlParser.INTO);
            this.state = 4682;
            this.variable_name();
            this.state = 4687;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 4683;
                this.match(plsqlParser.COMMA);
                this.state = 4684;
                this.variable_name();
                this.state = 4689;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_xml_column_name;
    return this;
}

Xml_column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_column_nameContext.prototype.constructor = Xml_column_nameContext;

Xml_column_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Xml_column_nameContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Xml_column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterXml_column_name(this);
	}
};

Xml_column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitXml_column_name(this);
	}
};




plsqlParser.Xml_column_nameContext = Xml_column_nameContext;

plsqlParser.prototype.xml_column_name = function() {

    var localctx = new Xml_column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, plsqlParser.RULE_xml_column_name);
    try {
        this.state = 4694;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 4692;
            this.r_id();
            break;
        case plsqlParser.NATIONAL_CHAR_STRING_LIT:
        case plsqlParser.CHAR_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 4693;
            this.quoted_string();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cost_class_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cost_class_name;
    return this;
}

Cost_class_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cost_class_nameContext.prototype.constructor = Cost_class_nameContext;

Cost_class_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Cost_class_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCost_class_name(this);
	}
};

Cost_class_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCost_class_name(this);
	}
};




plsqlParser.Cost_class_nameContext = Cost_class_nameContext;

plsqlParser.prototype.cost_class_name = function() {

    var localctx = new Cost_class_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, plsqlParser.RULE_cost_class_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4696;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_attribute_name;
    return this;
}

Attribute_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_nameContext.prototype.constructor = Attribute_nameContext;

Attribute_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Attribute_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAttribute_name(this);
	}
};

Attribute_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAttribute_name(this);
	}
};




plsqlParser.Attribute_nameContext = Attribute_nameContext;

plsqlParser.prototype.attribute_name = function() {

    var localctx = new Attribute_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, plsqlParser.RULE_attribute_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4698;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_savepoint_name;
    return this;
}

Savepoint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_nameContext.prototype.constructor = Savepoint_nameContext;

Savepoint_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Savepoint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSavepoint_name(this);
	}
};

Savepoint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSavepoint_name(this);
	}
};




plsqlParser.Savepoint_nameContext = Savepoint_nameContext;

plsqlParser.prototype.savepoint_name = function() {

    var localctx = new Savepoint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, plsqlParser.RULE_savepoint_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4700;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollback_segment_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_rollback_segment_name;
    return this;
}

Rollback_segment_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollback_segment_nameContext.prototype.constructor = Rollback_segment_nameContext;

Rollback_segment_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Rollback_segment_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRollback_segment_name(this);
	}
};

Rollback_segment_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRollback_segment_name(this);
	}
};




plsqlParser.Rollback_segment_nameContext = Rollback_segment_nameContext;

plsqlParser.prototype.rollback_segment_name = function() {

    var localctx = new Rollback_segment_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, plsqlParser.RULE_rollback_segment_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4702;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_var_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_var_name;
    return this;
}

Table_var_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_var_nameContext.prototype.constructor = Table_var_nameContext;

Table_var_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Table_var_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_var_name(this);
	}
};

Table_var_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_var_name(this);
	}
};




plsqlParser.Table_var_nameContext = Table_var_nameContext;

plsqlParser.prototype.table_var_name = function() {

    var localctx = new Table_var_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, plsqlParser.RULE_table_var_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4704;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Schema_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_schema_name;
    return this;
}

Schema_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Schema_nameContext.prototype.constructor = Schema_nameContext;

Schema_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Schema_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSchema_name(this);
	}
};

Schema_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSchema_name(this);
	}
};




plsqlParser.Schema_nameContext = Schema_nameContext;

plsqlParser.prototype.schema_name = function() {

    var localctx = new Schema_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, plsqlParser.RULE_schema_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4706;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Routine_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_routine_name;
    return this;
}

Routine_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Routine_nameContext.prototype.constructor = Routine_nameContext;

Routine_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Routine_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Routine_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Routine_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRoutine_name(this);
	}
};

Routine_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRoutine_name(this);
	}
};




plsqlParser.Routine_nameContext = Routine_nameContext;

plsqlParser.prototype.routine_name = function() {

    var localctx = new Routine_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, plsqlParser.RULE_routine_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4708;
        this.r_id();
        this.state = 4713;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.PERIOD) {
            this.state = 4709;
            this.match(plsqlParser.PERIOD);
            this.state = 4710;
            this.id_expression();
            this.state = 4715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AT_SIGN) {
            this.state = 4716;
            this.match(plsqlParser.AT_SIGN);
            this.state = 4717;
            this.link_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_package_name;
    return this;
}

Package_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_nameContext.prototype.constructor = Package_nameContext;

Package_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Package_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPackage_name(this);
	}
};

Package_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPackage_name(this);
	}
};




plsqlParser.Package_nameContext = Package_nameContext;

plsqlParser.prototype.package_name = function() {

    var localctx = new Package_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, plsqlParser.RULE_package_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4720;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Implementation_type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_implementation_type_name;
    return this;
}

Implementation_type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Implementation_type_nameContext.prototype.constructor = Implementation_type_nameContext;

Implementation_type_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Implementation_type_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Implementation_type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterImplementation_type_name(this);
	}
};

Implementation_type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitImplementation_type_name(this);
	}
};




plsqlParser.Implementation_type_nameContext = Implementation_type_nameContext;

plsqlParser.prototype.implementation_type_name = function() {

    var localctx = new Implementation_type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, plsqlParser.RULE_implementation_type_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4722;
        this.r_id();
        this.state = 4725;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PERIOD) {
            this.state = 4723;
            this.match(plsqlParser.PERIOD);
            this.state = 4724;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_parameter_name;
    return this;
}

Parameter_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_nameContext.prototype.constructor = Parameter_nameContext;

Parameter_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Parameter_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterParameter_name(this);
	}
};

Parameter_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitParameter_name(this);
	}
};




plsqlParser.Parameter_nameContext = Parameter_nameContext;

plsqlParser.prototype.parameter_name = function() {

    var localctx = new Parameter_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, plsqlParser.RULE_parameter_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4727;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reference_model_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_reference_model_name;
    return this;
}

Reference_model_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reference_model_nameContext.prototype.constructor = Reference_model_nameContext;

Reference_model_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Reference_model_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterReference_model_name(this);
	}
};

Reference_model_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitReference_model_name(this);
	}
};




plsqlParser.Reference_model_nameContext = Reference_model_nameContext;

plsqlParser.prototype.reference_model_name = function() {

    var localctx = new Reference_model_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, plsqlParser.RULE_reference_model_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4729;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Main_model_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_main_model_name;
    return this;
}

Main_model_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Main_model_nameContext.prototype.constructor = Main_model_nameContext;

Main_model_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Main_model_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterMain_model_name(this);
	}
};

Main_model_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitMain_model_name(this);
	}
};




plsqlParser.Main_model_nameContext = Main_model_nameContext;

plsqlParser.prototype.main_model_name = function() {

    var localctx = new Main_model_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, plsqlParser.RULE_main_model_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4731;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Aggregate_function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_aggregate_function_name;
    return this;
}

Aggregate_function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_function_nameContext.prototype.constructor = Aggregate_function_nameContext;

Aggregate_function_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Aggregate_function_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Aggregate_function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterAggregate_function_name(this);
	}
};

Aggregate_function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitAggregate_function_name(this);
	}
};




plsqlParser.Aggregate_function_nameContext = Aggregate_function_nameContext;

plsqlParser.prototype.aggregate_function_name = function() {

    var localctx = new Aggregate_function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, plsqlParser.RULE_aggregate_function_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4733;
        this.r_id();
        this.state = 4738;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.PERIOD) {
            this.state = 4734;
            this.match(plsqlParser.PERIOD);
            this.state = 4735;
            this.id_expression();
            this.state = 4740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_query_name;
    return this;
}

Query_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_nameContext.prototype.constructor = Query_nameContext;

Query_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Query_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterQuery_name(this);
	}
};

Query_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitQuery_name(this);
	}
};




plsqlParser.Query_nameContext = Query_nameContext;

plsqlParser.prototype.query_name = function() {

    var localctx = new Query_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, plsqlParser.RULE_query_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4741;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constraint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_constraint_name;
    return this;
}

Constraint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constraint_nameContext.prototype.constructor = Constraint_nameContext;

Constraint_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Constraint_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Constraint_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Constraint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConstraint_name(this);
	}
};

Constraint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConstraint_name(this);
	}
};




plsqlParser.Constraint_nameContext = Constraint_nameContext;

plsqlParser.prototype.constraint_name = function() {

    var localctx = new Constraint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, plsqlParser.RULE_constraint_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4743;
        this.r_id();
        this.state = 4748;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.PERIOD) {
            this.state = 4744;
            this.match(plsqlParser.PERIOD);
            this.state = 4745;
            this.id_expression();
            this.state = 4750;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.AT_SIGN) {
            this.state = 4751;
            this.match(plsqlParser.AT_SIGN);
            this.state = 4752;
            this.link_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Label_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_label_name;
    return this;
}

Label_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_nameContext.prototype.constructor = Label_nameContext;

Label_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Label_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLabel_name(this);
	}
};

Label_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLabel_name(this);
	}
};




plsqlParser.Label_nameContext = Label_nameContext;

plsqlParser.prototype.label_name = function() {

    var localctx = new Label_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, plsqlParser.RULE_label_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4755;
        this.id_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_type_name;
    return this;
}

Type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nameContext.prototype.constructor = Type_nameContext;

Type_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterType_name(this);
	}
};

Type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitType_name(this);
	}
};




plsqlParser.Type_nameContext = Type_nameContext;

plsqlParser.prototype.type_name = function() {

    var localctx = new Type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, plsqlParser.RULE_type_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4757;
        this.id_expression();
        this.state = 4762;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.PERIOD) {
            this.state = 4758;
            this.match(plsqlParser.PERIOD);
            this.state = 4759;
            this.id_expression();
            this.state = 4764;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_sequence_name;
    return this;
}

Sequence_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_nameContext.prototype.constructor = Sequence_nameContext;

Sequence_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Sequence_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterSequence_name(this);
	}
};

Sequence_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitSequence_name(this);
	}
};




plsqlParser.Sequence_nameContext = Sequence_nameContext;

plsqlParser.prototype.sequence_name = function() {

    var localctx = new Sequence_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, plsqlParser.RULE_sequence_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4765;
        this.id_expression();
        this.state = 4770;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.PERIOD) {
            this.state = 4766;
            this.match(plsqlParser.PERIOD);
            this.state = 4767;
            this.id_expression();
            this.state = 4772;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_exception_name;
    return this;
}

Exception_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_nameContext.prototype.constructor = Exception_nameContext;

Exception_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Exception_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Exception_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterException_name(this);
	}
};

Exception_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitException_name(this);
	}
};




plsqlParser.Exception_nameContext = Exception_nameContext;

plsqlParser.prototype.exception_name = function() {

    var localctx = new Exception_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, plsqlParser.RULE_exception_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4773;
        this.r_id();
        this.state = 4778;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.PERIOD) {
            this.state = 4774;
            this.match(plsqlParser.PERIOD);
            this.state = 4775;
            this.id_expression();
            this.state = 4780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Function_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFunction_name(this);
	}
};




plsqlParser.Function_nameContext = Function_nameContext;

plsqlParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 666, plsqlParser.RULE_function_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4781;
        this.r_id();
        this.state = 4784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PERIOD) {
            this.state = 4782;
            this.match(plsqlParser.PERIOD);
            this.state = 4783;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_procedure_name;
    return this;
}

Procedure_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_nameContext.prototype.constructor = Procedure_nameContext;

Procedure_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Procedure_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Procedure_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterProcedure_name(this);
	}
};

Procedure_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitProcedure_name(this);
	}
};




plsqlParser.Procedure_nameContext = Procedure_nameContext;

plsqlParser.prototype.procedure_name = function() {

    var localctx = new Procedure_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 668, plsqlParser.RULE_procedure_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4786;
        this.r_id();
        this.state = 4789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PERIOD) {
            this.state = 4787;
            this.match(plsqlParser.PERIOD);
            this.state = 4788;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_trigger_name;
    return this;
}

Trigger_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_nameContext.prototype.constructor = Trigger_nameContext;

Trigger_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Trigger_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Trigger_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTrigger_name(this);
	}
};

Trigger_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTrigger_name(this);
	}
};




plsqlParser.Trigger_nameContext = Trigger_nameContext;

plsqlParser.prototype.trigger_name = function() {

    var localctx = new Trigger_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, plsqlParser.RULE_trigger_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4791;
        this.r_id();
        this.state = 4794;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PERIOD) {
            this.state = 4792;
            this.match(plsqlParser.PERIOD);
            this.state = 4793;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_variable_name;
    return this;
}

Variable_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_nameContext.prototype.constructor = Variable_nameContext;

Variable_nameContext.prototype.dot_id = function() {
    return this.getTypedRuleContext(Dot_idContext,0);
};

Variable_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Variable_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterVariable_name(this);
	}
};

Variable_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitVariable_name(this);
	}
};




plsqlParser.Variable_nameContext = Variable_nameContext;

plsqlParser.prototype.variable_name = function() {

    var localctx = new Variable_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, plsqlParser.RULE_variable_name);
    try {
        this.state = 4798;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 4796;
            this.dot_id();
            break;
        case plsqlParser.BINDVAR:
        case plsqlParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4797;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_index_name;
    return this;
}

Index_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_nameContext.prototype.constructor = Index_nameContext;

Index_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Index_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIndex_name(this);
	}
};

Index_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIndex_name(this);
	}
};




plsqlParser.Index_nameContext = Index_nameContext;

plsqlParser.prototype.index_name = function() {

    var localctx = new Index_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, plsqlParser.RULE_index_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4800;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_cursor_name;
    return this;
}

Cursor_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_nameContext.prototype.constructor = Cursor_nameContext;

Cursor_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Cursor_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Cursor_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCursor_name(this);
	}
};

Cursor_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCursor_name(this);
	}
};




plsqlParser.Cursor_nameContext = Cursor_nameContext;

plsqlParser.prototype.cursor_name = function() {

    var localctx = new Cursor_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 676, plsqlParser.RULE_cursor_name);
    try {
        this.state = 4804;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 4802;
            this.r_id();
            break;
        case plsqlParser.BINDVAR:
        case plsqlParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4803;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_record_name;
    return this;
}

Record_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_nameContext.prototype.constructor = Record_nameContext;

Record_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Record_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Record_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRecord_name(this);
	}
};

Record_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRecord_name(this);
	}
};




plsqlParser.Record_nameContext = Record_nameContext;

plsqlParser.prototype.record_name = function() {

    var localctx = new Record_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, plsqlParser.RULE_record_name);
    try {
        this.state = 4808;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.DELIMITED_ID:
        case plsqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 4806;
            this.r_id();
            break;
        case plsqlParser.BINDVAR:
        case plsqlParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4807;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_collection_name;
    return this;
}

Collection_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_nameContext.prototype.constructor = Collection_nameContext;

Collection_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Collection_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Collection_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterCollection_name(this);
	}
};

Collection_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitCollection_name(this);
	}
};




plsqlParser.Collection_nameContext = Collection_nameContext;

plsqlParser.prototype.collection_name = function() {

    var localctx = new Collection_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, plsqlParser.RULE_collection_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4810;
        this.r_id();
        this.state = 4813;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.PERIOD) {
            this.state = 4811;
            this.match(plsqlParser.PERIOD);
            this.state = 4812;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Link_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_link_name;
    return this;
}

Link_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Link_nameContext.prototype.constructor = Link_nameContext;

Link_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Link_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLink_name(this);
	}
};

Link_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLink_name(this);
	}
};




plsqlParser.Link_nameContext = Link_nameContext;

plsqlParser.prototype.link_name = function() {

    var localctx = new Link_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, plsqlParser.RULE_link_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4815;
        this.r_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_column_name;
    return this;
}

Column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_nameContext.prototype.constructor = Column_nameContext;

Column_nameContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

Column_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterColumn_name(this);
	}
};

Column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitColumn_name(this);
	}
};




plsqlParser.Column_nameContext = Column_nameContext;

plsqlParser.prototype.column_name = function() {

    var localctx = new Column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, plsqlParser.RULE_column_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4817;
        this.r_id();
        this.state = 4822;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,620,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4818;
                this.match(plsqlParser.PERIOD);
                this.state = 4819;
                this.id_expression(); 
            }
            this.state = 4824;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,620,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tableview_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_tableview_name;
    return this;
}

Tableview_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tableview_nameContext.prototype.constructor = Tableview_nameContext;

Tableview_nameContext.prototype.dot_id = function() {
    return this.getTypedRuleContext(Dot_idContext,0);
};

Tableview_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Tableview_nameContext.prototype.partition_extension_clause = function() {
    return this.getTypedRuleContext(Partition_extension_clauseContext,0);
};

Tableview_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTableview_name(this);
	}
};

Tableview_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTableview_name(this);
	}
};




plsqlParser.Tableview_nameContext = Tableview_nameContext;

plsqlParser.prototype.tableview_name = function() {

    var localctx = new Tableview_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, plsqlParser.RULE_tableview_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4825;
        this.dot_id();
        this.state = 4829;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,621,this._ctx);
        if(la_===1) {
            this.state = 4826;
            this.match(plsqlParser.AT_SIGN);
            this.state = 4827;
            this.link_name();

        } else if(la_===2) {
            this.state = 4828;
            this.partition_extension_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dot_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_dot_id;
    this._id_expression = null; // Id_expressionContext
    this.fields = []; // of Id_expressionContexts
    return this;
}

Dot_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dot_idContext.prototype.constructor = Dot_idContext;

Dot_idContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Dot_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDot_id(this);
	}
};

Dot_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDot_id(this);
	}
};




plsqlParser.Dot_idContext = Dot_idContext;

plsqlParser.prototype.dot_id = function() {

    var localctx = new Dot_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, plsqlParser.RULE_dot_id);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4831;
        localctx._id_expression = this.id_expression();
        localctx.fields.push(localctx._id_expression);
        this.state = 4836;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,622,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4832;
                this.match(plsqlParser.PERIOD);
                this.state = 4833;
                localctx._id_expression = this.id_expression();
                localctx.fields.push(localctx._id_expression); 
            }
            this.state = 4838;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,622,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_star;
    return this;
}

StarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StarContext.prototype.constructor = StarContext;


StarContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterStar(this);
	}
};

StarContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitStar(this);
	}
};




plsqlParser.StarContext = StarContext;

plsqlParser.prototype.star = function() {

    var localctx = new StarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, plsqlParser.RULE_star);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4839;
        this.match(plsqlParser.ASTERISK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Keep_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_keep_clause;
    return this;
}

Keep_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Keep_clauseContext.prototype.constructor = Keep_clauseContext;

Keep_clauseContext.prototype.KEEP = function() {
    return this.getToken(plsqlParser.KEEP, 0);
};

Keep_clauseContext.prototype.DENSE_RANK = function() {
    return this.getToken(plsqlParser.DENSE_RANK, 0);
};

Keep_clauseContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Keep_clauseContext.prototype.FIRST = function() {
    return this.getToken(plsqlParser.FIRST, 0);
};

Keep_clauseContext.prototype.LAST = function() {
    return this.getToken(plsqlParser.LAST, 0);
};

Keep_clauseContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Keep_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterKeep_clause(this);
	}
};

Keep_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitKeep_clause(this);
	}
};




plsqlParser.Keep_clauseContext = Keep_clauseContext;

plsqlParser.prototype.keep_clause = function() {

    var localctx = new Keep_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, plsqlParser.RULE_keep_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4841;
        this.match(plsqlParser.KEEP);
        this.state = 4842;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 4843;
        this.match(plsqlParser.DENSE_RANK);
        this.state = 4844;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.FIRST || _la===plsqlParser.LAST)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4845;
        this.order_by_clause();
        this.state = 4846;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 4848;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,623,this._ctx);
        if(la_===1) {
            this.state = 4847;
            this.over_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_function_argument;
    return this;
}

Function_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argumentContext.prototype.constructor = Function_argumentContext;

Function_argumentContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Function_argumentContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFunction_argument(this);
	}
};

Function_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFunction_argument(this);
	}
};




plsqlParser.Function_argumentContext = Function_argumentContext;

plsqlParser.prototype.function_argument = function() {

    var localctx = new Function_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, plsqlParser.RULE_function_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4850;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 4852;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (plsqlParser.BLOCK - 32)) | (1 << (plsqlParser.BODY - 32)) | (1 << (plsqlParser.BOOLEAN - 32)) | (1 << (plsqlParser.BOTH - 32)) | (1 << (plsqlParser.BULK - 32)) | (1 << (plsqlParser.BYTE - 32)) | (1 << (plsqlParser.C_LETTER - 32)) | (1 << (plsqlParser.CALL - 32)) | (1 << (plsqlParser.CANONICAL - 32)) | (1 << (plsqlParser.CASCADE - 32)) | (1 << (plsqlParser.CASE - 32)) | (1 << (plsqlParser.CAST - 32)) | (1 << (plsqlParser.CHAR - 32)) | (1 << (plsqlParser.CHAR_CS - 32)) | (1 << (plsqlParser.CHARACTER - 32)) | (1 << (plsqlParser.CHR - 32)) | (1 << (plsqlParser.CLOB - 32)) | (1 << (plsqlParser.CLOSE - 32)) | (1 << (plsqlParser.CLUSTER - 32)) | (1 << (plsqlParser.COLLECT - 32)) | (1 << (plsqlParser.COLUMNS - 32)) | (1 << (plsqlParser.COMMENT - 32)) | (1 << (plsqlParser.COMMIT - 32)) | (1 << (plsqlParser.COMMITTED - 32)) | (1 << (plsqlParser.COMPATIBILITY - 32)) | (1 << (plsqlParser.COMPILE - 32)) | (1 << (plsqlParser.COMPOUND - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (plsqlParser.DECOMPOSE - 96)) | (1 << (plsqlParser.DECREMENT - 96)) | (1 << (plsqlParser.DEFAULT - 96)) | (1 << (plsqlParser.DEFAULTS - 96)) | (1 << (plsqlParser.DEFERRED - 96)) | (1 << (plsqlParser.DEFINER - 96)) | (1 << (plsqlParser.DETERMINISTIC - 96)) | (1 << (plsqlParser.DIMENSION - 96)) | (1 << (plsqlParser.DISABLE - 96)) | (1 << (plsqlParser.DISASSOCIATE - 96)) | (1 << (plsqlParser.DISTINCT - 96)) | (1 << (plsqlParser.DOCUMENT - 96)) | (1 << (plsqlParser.DOUBLE - 96)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (plsqlParser.EACH - 96)) | (1 << (plsqlParser.ELEMENT - 96)) | (1 << (plsqlParser.EMPTY - 96)) | (1 << (plsqlParser.ENABLE - 96)) | (1 << (plsqlParser.ENCODING - 96)) | (1 << (plsqlParser.ENTITYESCAPING - 96)) | (1 << (plsqlParser.ERR - 96)) | (1 << (plsqlParser.ERRORS - 96)) | (1 << (plsqlParser.ESCAPE - 96)) | (1 << (plsqlParser.EVALNAME - 96)) | (1 << (plsqlParser.EXCEPTION - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HIDE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (plsqlParser.HOUR - 160)) | (1 << (plsqlParser.IGNORE - 160)) | (1 << (plsqlParser.IMMEDIATE - 160)) | (1 << (plsqlParser.INCLUDE - 160)) | (1 << (plsqlParser.INCLUDING - 160)) | (1 << (plsqlParser.INCREMENT - 160)) | (1 << (plsqlParser.INDENT - 160)) | (1 << (plsqlParser.INDEXED - 160)) | (1 << (plsqlParser.INDICATOR - 160)) | (1 << (plsqlParser.INDICES - 160)) | (1 << (plsqlParser.INFINITE - 160)) | (1 << (plsqlParser.INLINE - 160)) | (1 << (plsqlParser.INNER - 160)) | (1 << (plsqlParser.INOUT - 160)) | (1 << (plsqlParser.INSTANTIABLE - 160)) | (1 << (plsqlParser.INSTEAD - 160)) | (1 << (plsqlParser.INT - 160)) | (1 << (plsqlParser.INTEGER - 160)) | (1 << (plsqlParser.INTERVAL - 160)) | (1 << (plsqlParser.INVALIDATE - 160)) | (1 << (plsqlParser.ISOLATION - 160)) | (1 << (plsqlParser.ITERATE - 160)) | (1 << (plsqlParser.JAVA - 160)) | (1 << (plsqlParser.JOIN - 160)) | (1 << (plsqlParser.KEEP - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (plsqlParser.MODEL - 224)) | (1 << (plsqlParser.MODIFY - 224)) | (1 << (plsqlParser.MONTH - 224)) | (1 << (plsqlParser.MULTISET - 224)) | (1 << (plsqlParser.NAME - 224)) | (1 << (plsqlParser.NAN - 224)) | (1 << (plsqlParser.NATURAL - 224)) | (1 << (plsqlParser.NATURALN - 224)) | (1 << (plsqlParser.NAV - 224)) | (1 << (plsqlParser.NCHAR - 224)) | (1 << (plsqlParser.NCHAR_CS - 224)) | (1 << (plsqlParser.NCLOB - 224)) | (1 << (plsqlParser.NESTED - 224)) | (1 << (plsqlParser.NEW - 224)) | (1 << (plsqlParser.NO - 224)) | (1 << (plsqlParser.NOAUDIT - 224)) | (1 << (plsqlParser.NOCOPY - 224)) | (1 << (plsqlParser.NOCYCLE - 224)) | (1 << (plsqlParser.NOENTITYESCAPING - 224)) | (1 << (plsqlParser.NONE - 224)) | (1 << (plsqlParser.NOSCHEMACHECK - 224)) | (1 << (plsqlParser.NOT - 224)) | (1 << (plsqlParser.NULL - 224)) | (1 << (plsqlParser.NULLS - 224)) | (1 << (plsqlParser.NUMBER - 224)) | (1 << (plsqlParser.NUMERIC - 224)) | (1 << (plsqlParser.NVARCHAR2 - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (plsqlParser.POSITIVEN - 288)) | (1 << (plsqlParser.PRAGMA - 288)) | (1 << (plsqlParser.PRECEDING - 288)) | (1 << (plsqlParser.PRECISION - 288)) | (1 << (plsqlParser.PRESENT - 288)) | (1 << (plsqlParser.PRIOR - 288)) | (1 << (plsqlParser.RAISE - 288)) | (1 << (plsqlParser.RANGE - 288)) | (1 << (plsqlParser.RAW - 288)) | (1 << (plsqlParser.READ - 288)) | (1 << (plsqlParser.REAL - 288)) | (1 << (plsqlParser.RECORD - 288)) | (1 << (plsqlParser.REF - 288)) | (1 << (plsqlParser.REFERENCE - 288)) | (1 << (plsqlParser.REFERENCING - 288)) | (1 << (plsqlParser.REJECT - 288)) | (1 << (plsqlParser.RELIES_ON - 288)) | (1 << (plsqlParser.RENAME - 288)) | (1 << (plsqlParser.REPLACE - 288)) | (1 << (plsqlParser.RESPECT - 288)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 288)) | (1 << (plsqlParser.RESULT - 288)) | (1 << (plsqlParser.RESULT_CACHE - 288)) | (1 << (plsqlParser.RETURN - 288)) | (1 << (plsqlParser.RETURNING - 288)) | (1 << (plsqlParser.REUSE - 288)) | (1 << (plsqlParser.REVERSE - 288)) | (1 << (plsqlParser.RIGHT - 288)) | (1 << (plsqlParser.ROLLBACK - 288)) | (1 << (plsqlParser.ROLLUP - 288)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (plsqlParser.SKIP_ - 353)) | (1 << (plsqlParser.SMALLINT - 353)) | (1 << (plsqlParser.SNAPSHOT - 353)) | (1 << (plsqlParser.SOME - 353)) | (1 << (plsqlParser.SPECIFICATION - 353)) | (1 << (plsqlParser.SQLDATA - 353)) | (1 << (plsqlParser.SQLERROR - 353)) | (1 << (plsqlParser.STANDALONE - 353)) | (1 << (plsqlParser.STARTUP - 353)) | (1 << (plsqlParser.STATEMENT - 353)) | (1 << (plsqlParser.STATEMENT_ID - 353)) | (1 << (plsqlParser.STATIC - 353)) | (1 << (plsqlParser.STATISTICS - 353)) | (1 << (plsqlParser.STRING - 353)) | (1 << (plsqlParser.SUBMULTISET - 353)) | (1 << (plsqlParser.SUBPARTITION - 353)) | (1 << (plsqlParser.SUBSTITUTABLE - 353)) | (1 << (plsqlParser.SUBTYPE - 353)) | (1 << (plsqlParser.SUCCESS - 353)) | (1 << (plsqlParser.SUSPEND - 353)) | (1 << (plsqlParser.TIME - 353)) | (1 << (plsqlParser.TIMESTAMP - 353)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMEZONE_ABBR - 353)) | (1 << (plsqlParser.TIMEZONE_HOUR - 353)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 353)))) !== 0) || ((((_la - 385)) & ~0x1f) == 0 && ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUE - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)))) !== 0) || ((((_la - 417)) & ~0x1f) == 0 && ((1 << (_la - 417)) & ((1 << (plsqlParser.VERSION - 417)) | (1 << (plsqlParser.VERSIONS - 417)) | (1 << (plsqlParser.WAIT - 417)) | (1 << (plsqlParser.WARNING - 417)) | (1 << (plsqlParser.WELLFORMED - 417)) | (1 << (plsqlParser.WHENEVER - 417)) | (1 << (plsqlParser.WHILE - 417)) | (1 << (plsqlParser.WITHIN - 417)) | (1 << (plsqlParser.WORK - 417)) | (1 << (plsqlParser.WRITE - 417)) | (1 << (plsqlParser.XML - 417)) | (1 << (plsqlParser.XMLAGG - 417)) | (1 << (plsqlParser.XMLATTRIBUTES - 417)) | (1 << (plsqlParser.XMLCAST - 417)) | (1 << (plsqlParser.XMLCOLATTVAL - 417)) | (1 << (plsqlParser.XMLELEMENT - 417)) | (1 << (plsqlParser.XMLEXISTS - 417)) | (1 << (plsqlParser.XMLFOREST - 417)) | (1 << (plsqlParser.XMLNAMESPACES - 417)) | (1 << (plsqlParser.XMLPARSE - 417)) | (1 << (plsqlParser.XMLPI - 417)) | (1 << (plsqlParser.XMLQUERY - 417)) | (1 << (plsqlParser.XMLROOT - 417)) | (1 << (plsqlParser.XMLSERIALIZE - 417)) | (1 << (plsqlParser.XMLTABLE - 417)) | (1 << (plsqlParser.YEAR - 417)) | (1 << (plsqlParser.YES - 417)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 417)) | (1 << (plsqlParser.ZONE - 417)))) !== 0) || ((((_la - 449)) & ~0x1f) == 0 && ((1 << (_la - 449)) & ((1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)))) !== 0) || ((((_la - 483)) & ~0x1f) == 0 && ((1 << (_la - 483)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 483)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 483)) | (1 << (plsqlParser.CHAR_STRING - 483)) | (1 << (plsqlParser.DELIMITED_ID - 483)) | (1 << (plsqlParser.LEFT_PAREN - 483)) | (1 << (plsqlParser.PLUS_SIGN - 483)) | (1 << (plsqlParser.MINUS_SIGN - 483)) | (1 << (plsqlParser.BINDVAR - 483)) | (1 << (plsqlParser.COLON - 483)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 4851;
            this.argument();
        }

        this.state = 4858;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 4854;
            this.match(plsqlParser.COMMA);
            this.state = 4855;
            this.argument();
            this.state = 4860;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4861;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 4863;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,626,this._ctx);
        if(la_===1) {
            this.state = 4862;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argument_analyticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_function_argument_analytic;
    return this;
}

Function_argument_analyticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argument_analyticContext.prototype.constructor = Function_argument_analyticContext;

Function_argument_analyticContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Function_argument_analyticContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argument_analyticContext.prototype.respect_or_ignore_nulls = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Respect_or_ignore_nullsContext);
    } else {
        return this.getTypedRuleContext(Respect_or_ignore_nullsContext,i);
    }
};

Function_argument_analyticContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFunction_argument_analytic(this);
	}
};

Function_argument_analyticContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFunction_argument_analytic(this);
	}
};




plsqlParser.Function_argument_analyticContext = Function_argument_analyticContext;

plsqlParser.prototype.function_argument_analytic = function() {

    var localctx = new Function_argument_analyticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, plsqlParser.RULE_function_argument_analytic);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4865;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 4870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (plsqlParser.BLOCK - 32)) | (1 << (plsqlParser.BODY - 32)) | (1 << (plsqlParser.BOOLEAN - 32)) | (1 << (plsqlParser.BOTH - 32)) | (1 << (plsqlParser.BULK - 32)) | (1 << (plsqlParser.BYTE - 32)) | (1 << (plsqlParser.C_LETTER - 32)) | (1 << (plsqlParser.CALL - 32)) | (1 << (plsqlParser.CANONICAL - 32)) | (1 << (plsqlParser.CASCADE - 32)) | (1 << (plsqlParser.CASE - 32)) | (1 << (plsqlParser.CAST - 32)) | (1 << (plsqlParser.CHAR - 32)) | (1 << (plsqlParser.CHAR_CS - 32)) | (1 << (plsqlParser.CHARACTER - 32)) | (1 << (plsqlParser.CHR - 32)) | (1 << (plsqlParser.CLOB - 32)) | (1 << (plsqlParser.CLOSE - 32)) | (1 << (plsqlParser.CLUSTER - 32)) | (1 << (plsqlParser.COLLECT - 32)) | (1 << (plsqlParser.COLUMNS - 32)) | (1 << (plsqlParser.COMMENT - 32)) | (1 << (plsqlParser.COMMIT - 32)) | (1 << (plsqlParser.COMMITTED - 32)) | (1 << (plsqlParser.COMPATIBILITY - 32)) | (1 << (plsqlParser.COMPILE - 32)) | (1 << (plsqlParser.COMPOUND - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (plsqlParser.DECOMPOSE - 96)) | (1 << (plsqlParser.DECREMENT - 96)) | (1 << (plsqlParser.DEFAULT - 96)) | (1 << (plsqlParser.DEFAULTS - 96)) | (1 << (plsqlParser.DEFERRED - 96)) | (1 << (plsqlParser.DEFINER - 96)) | (1 << (plsqlParser.DETERMINISTIC - 96)) | (1 << (plsqlParser.DIMENSION - 96)) | (1 << (plsqlParser.DISABLE - 96)) | (1 << (plsqlParser.DISASSOCIATE - 96)) | (1 << (plsqlParser.DISTINCT - 96)) | (1 << (plsqlParser.DOCUMENT - 96)) | (1 << (plsqlParser.DOUBLE - 96)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (plsqlParser.EACH - 96)) | (1 << (plsqlParser.ELEMENT - 96)) | (1 << (plsqlParser.EMPTY - 96)) | (1 << (plsqlParser.ENABLE - 96)) | (1 << (plsqlParser.ENCODING - 96)) | (1 << (plsqlParser.ENTITYESCAPING - 96)) | (1 << (plsqlParser.ERR - 96)) | (1 << (plsqlParser.ERRORS - 96)) | (1 << (plsqlParser.ESCAPE - 96)) | (1 << (plsqlParser.EVALNAME - 96)) | (1 << (plsqlParser.EXCEPTION - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HIDE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (plsqlParser.HOUR - 160)) | (1 << (plsqlParser.IGNORE - 160)) | (1 << (plsqlParser.IMMEDIATE - 160)) | (1 << (plsqlParser.INCLUDE - 160)) | (1 << (plsqlParser.INCLUDING - 160)) | (1 << (plsqlParser.INCREMENT - 160)) | (1 << (plsqlParser.INDENT - 160)) | (1 << (plsqlParser.INDEXED - 160)) | (1 << (plsqlParser.INDICATOR - 160)) | (1 << (plsqlParser.INDICES - 160)) | (1 << (plsqlParser.INFINITE - 160)) | (1 << (plsqlParser.INLINE - 160)) | (1 << (plsqlParser.INNER - 160)) | (1 << (plsqlParser.INOUT - 160)) | (1 << (plsqlParser.INSTANTIABLE - 160)) | (1 << (plsqlParser.INSTEAD - 160)) | (1 << (plsqlParser.INT - 160)) | (1 << (plsqlParser.INTEGER - 160)) | (1 << (plsqlParser.INTERVAL - 160)) | (1 << (plsqlParser.INVALIDATE - 160)) | (1 << (plsqlParser.ISOLATION - 160)) | (1 << (plsqlParser.ITERATE - 160)) | (1 << (plsqlParser.JAVA - 160)) | (1 << (plsqlParser.JOIN - 160)) | (1 << (plsqlParser.KEEP - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (plsqlParser.MODEL - 224)) | (1 << (plsqlParser.MODIFY - 224)) | (1 << (plsqlParser.MONTH - 224)) | (1 << (plsqlParser.MULTISET - 224)) | (1 << (plsqlParser.NAME - 224)) | (1 << (plsqlParser.NAN - 224)) | (1 << (plsqlParser.NATURAL - 224)) | (1 << (plsqlParser.NATURALN - 224)) | (1 << (plsqlParser.NAV - 224)) | (1 << (plsqlParser.NCHAR - 224)) | (1 << (plsqlParser.NCHAR_CS - 224)) | (1 << (plsqlParser.NCLOB - 224)) | (1 << (plsqlParser.NESTED - 224)) | (1 << (plsqlParser.NEW - 224)) | (1 << (plsqlParser.NO - 224)) | (1 << (plsqlParser.NOAUDIT - 224)) | (1 << (plsqlParser.NOCOPY - 224)) | (1 << (plsqlParser.NOCYCLE - 224)) | (1 << (plsqlParser.NOENTITYESCAPING - 224)) | (1 << (plsqlParser.NONE - 224)) | (1 << (plsqlParser.NOSCHEMACHECK - 224)) | (1 << (plsqlParser.NOT - 224)) | (1 << (plsqlParser.NULL - 224)) | (1 << (plsqlParser.NULLS - 224)) | (1 << (plsqlParser.NUMBER - 224)) | (1 << (plsqlParser.NUMERIC - 224)) | (1 << (plsqlParser.NVARCHAR2 - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (plsqlParser.POSITIVEN - 288)) | (1 << (plsqlParser.PRAGMA - 288)) | (1 << (plsqlParser.PRECEDING - 288)) | (1 << (plsqlParser.PRECISION - 288)) | (1 << (plsqlParser.PRESENT - 288)) | (1 << (plsqlParser.PRIOR - 288)) | (1 << (plsqlParser.RAISE - 288)) | (1 << (plsqlParser.RANGE - 288)) | (1 << (plsqlParser.RAW - 288)) | (1 << (plsqlParser.READ - 288)) | (1 << (plsqlParser.REAL - 288)) | (1 << (plsqlParser.RECORD - 288)) | (1 << (plsqlParser.REF - 288)) | (1 << (plsqlParser.REFERENCE - 288)) | (1 << (plsqlParser.REFERENCING - 288)) | (1 << (plsqlParser.REJECT - 288)) | (1 << (plsqlParser.RELIES_ON - 288)) | (1 << (plsqlParser.RENAME - 288)) | (1 << (plsqlParser.REPLACE - 288)) | (1 << (plsqlParser.RESPECT - 288)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 288)) | (1 << (plsqlParser.RESULT - 288)) | (1 << (plsqlParser.RESULT_CACHE - 288)) | (1 << (plsqlParser.RETURN - 288)) | (1 << (plsqlParser.RETURNING - 288)) | (1 << (plsqlParser.REUSE - 288)) | (1 << (plsqlParser.REVERSE - 288)) | (1 << (plsqlParser.RIGHT - 288)) | (1 << (plsqlParser.ROLLBACK - 288)) | (1 << (plsqlParser.ROLLUP - 288)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (plsqlParser.SKIP_ - 353)) | (1 << (plsqlParser.SMALLINT - 353)) | (1 << (plsqlParser.SNAPSHOT - 353)) | (1 << (plsqlParser.SOME - 353)) | (1 << (plsqlParser.SPECIFICATION - 353)) | (1 << (plsqlParser.SQLDATA - 353)) | (1 << (plsqlParser.SQLERROR - 353)) | (1 << (plsqlParser.STANDALONE - 353)) | (1 << (plsqlParser.STARTUP - 353)) | (1 << (plsqlParser.STATEMENT - 353)) | (1 << (plsqlParser.STATEMENT_ID - 353)) | (1 << (plsqlParser.STATIC - 353)) | (1 << (plsqlParser.STATISTICS - 353)) | (1 << (plsqlParser.STRING - 353)) | (1 << (plsqlParser.SUBMULTISET - 353)) | (1 << (plsqlParser.SUBPARTITION - 353)) | (1 << (plsqlParser.SUBSTITUTABLE - 353)) | (1 << (plsqlParser.SUBTYPE - 353)) | (1 << (plsqlParser.SUCCESS - 353)) | (1 << (plsqlParser.SUSPEND - 353)) | (1 << (plsqlParser.TIME - 353)) | (1 << (plsqlParser.TIMESTAMP - 353)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (plsqlParser.TIMEZONE_ABBR - 353)) | (1 << (plsqlParser.TIMEZONE_HOUR - 353)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 353)))) !== 0) || ((((_la - 385)) & ~0x1f) == 0 && ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUE - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)))) !== 0) || ((((_la - 417)) & ~0x1f) == 0 && ((1 << (_la - 417)) & ((1 << (plsqlParser.VERSION - 417)) | (1 << (plsqlParser.VERSIONS - 417)) | (1 << (plsqlParser.WAIT - 417)) | (1 << (plsqlParser.WARNING - 417)) | (1 << (plsqlParser.WELLFORMED - 417)) | (1 << (plsqlParser.WHENEVER - 417)) | (1 << (plsqlParser.WHILE - 417)) | (1 << (plsqlParser.WITHIN - 417)) | (1 << (plsqlParser.WORK - 417)) | (1 << (plsqlParser.WRITE - 417)) | (1 << (plsqlParser.XML - 417)) | (1 << (plsqlParser.XMLAGG - 417)) | (1 << (plsqlParser.XMLATTRIBUTES - 417)) | (1 << (plsqlParser.XMLCAST - 417)) | (1 << (plsqlParser.XMLCOLATTVAL - 417)) | (1 << (plsqlParser.XMLELEMENT - 417)) | (1 << (plsqlParser.XMLEXISTS - 417)) | (1 << (plsqlParser.XMLFOREST - 417)) | (1 << (plsqlParser.XMLNAMESPACES - 417)) | (1 << (plsqlParser.XMLPARSE - 417)) | (1 << (plsqlParser.XMLPI - 417)) | (1 << (plsqlParser.XMLQUERY - 417)) | (1 << (plsqlParser.XMLROOT - 417)) | (1 << (plsqlParser.XMLSERIALIZE - 417)) | (1 << (plsqlParser.XMLTABLE - 417)) | (1 << (plsqlParser.YEAR - 417)) | (1 << (plsqlParser.YES - 417)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 417)) | (1 << (plsqlParser.ZONE - 417)))) !== 0) || ((((_la - 449)) & ~0x1f) == 0 && ((1 << (_la - 449)) & ((1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)))) !== 0) || ((((_la - 483)) & ~0x1f) == 0 && ((1 << (_la - 483)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 483)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 483)) | (1 << (plsqlParser.CHAR_STRING - 483)) | (1 << (plsqlParser.DELIMITED_ID - 483)) | (1 << (plsqlParser.LEFT_PAREN - 483)) | (1 << (plsqlParser.PLUS_SIGN - 483)) | (1 << (plsqlParser.MINUS_SIGN - 483)) | (1 << (plsqlParser.BINDVAR - 483)) | (1 << (plsqlParser.COLON - 483)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
            this.state = 4866;
            this.argument();
            this.state = 4868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.IGNORE || _la===plsqlParser.RESPECT) {
                this.state = 4867;
                this.respect_or_ignore_nulls();
            }

        }

        this.state = 4879;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===plsqlParser.COMMA) {
            this.state = 4872;
            this.match(plsqlParser.COMMA);
            this.state = 4873;
            this.argument();
            this.state = 4875;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.IGNORE || _la===plsqlParser.RESPECT) {
                this.state = 4874;
                this.respect_or_ignore_nulls();
            }

            this.state = 4881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4882;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 4884;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,631,this._ctx);
        if(la_===1) {
            this.state = 4883;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argument_modelingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_function_argument_modeling;
    return this;
}

Function_argument_modelingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argument_modelingContext.prototype.constructor = Function_argument_modelingContext;

Function_argument_modelingContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Function_argument_modelingContext.prototype.USING = function() {
    return this.getToken(plsqlParser.USING, 0);
};

Function_argument_modelingContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Function_argument_modelingContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Function_argument_modelingContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argument_modelingContext.prototype.numeric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericContext);
    } else {
        return this.getTypedRuleContext(NumericContext,i);
    }
};

Function_argument_modelingContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.NULL);
    } else {
        return this.getToken(plsqlParser.NULL, i);
    }
};


Function_argument_modelingContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Function_argument_modelingContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFunction_argument_modeling(this);
	}
};

Function_argument_modelingContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFunction_argument_modeling(this);
	}
};




plsqlParser.Function_argument_modelingContext = Function_argument_modelingContext;

plsqlParser.prototype.function_argument_modeling = function() {

    var localctx = new Function_argument_modelingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, plsqlParser.RULE_function_argument_modeling);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4886;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 4887;
        this.column_name();
        this.state = 4900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.COMMA) {
            this.state = 4888;
            this.match(plsqlParser.COMMA);
            this.state = 4891;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.UNSIGNED_INTEGER:
            case plsqlParser.APPROXIMATE_NUM_LIT:
                this.state = 4889;
                this.numeric();
                break;
            case plsqlParser.NULL:
                this.state = 4890;
                this.match(plsqlParser.NULL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4898;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.COMMA) {
                this.state = 4893;
                this.match(plsqlParser.COMMA);
                this.state = 4896;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case plsqlParser.UNSIGNED_INTEGER:
                case plsqlParser.APPROXIMATE_NUM_LIT:
                    this.state = 4894;
                    this.numeric();
                    break;
                case plsqlParser.NULL:
                    this.state = 4895;
                    this.match(plsqlParser.NULL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

        }

        this.state = 4902;
        this.match(plsqlParser.USING);
        this.state = 4922;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,639,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4903;
            this.tableview_name();
            this.state = 4904;
            this.match(plsqlParser.PERIOD);
            this.state = 4905;
            this.match(plsqlParser.ASTERISK);
            break;

        case 2:
            this.state = 4907;
            this.match(plsqlParser.ASTERISK);
            break;

        case 3:
            this.state = 4908;
            this.expression(0);
            this.state = 4910;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.AS - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
                this.state = 4909;
                this.column_alias();
            }

            this.state = 4919;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===plsqlParser.COMMA) {
                this.state = 4912;
                this.match(plsqlParser.COMMA);
                this.state = 4913;
                this.expression(0);
                this.state = 4915;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (plsqlParser.A_LETTER - 2)) | (1 << (plsqlParser.ADD - 2)) | (1 << (plsqlParser.AFTER - 2)) | (1 << (plsqlParser.AGENT - 2)) | (1 << (plsqlParser.AGGREGATE - 2)) | (1 << (plsqlParser.ANALYZE - 2)) | (1 << (plsqlParser.ARRAY - 2)) | (1 << (plsqlParser.AS - 2)) | (1 << (plsqlParser.ASSOCIATE - 2)) | (1 << (plsqlParser.AT - 2)) | (1 << (plsqlParser.ATTRIBUTE - 2)) | (1 << (plsqlParser.AUDIT - 2)) | (1 << (plsqlParser.AUTHID - 2)) | (1 << (plsqlParser.AUTO - 2)) | (1 << (plsqlParser.AUTOMATIC - 2)) | (1 << (plsqlParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (plsqlParser.BATCH - 2)) | (1 << (plsqlParser.BEFORE - 2)) | (1 << (plsqlParser.BFILE - 2)) | (1 << (plsqlParser.BINARY_DOUBLE - 2)) | (1 << (plsqlParser.BINARY_FLOAT - 2)) | (1 << (plsqlParser.BINARY_INTEGER - 2)) | (1 << (plsqlParser.BLOB - 2)) | (1 << (plsqlParser.BLOCK - 2)) | (1 << (plsqlParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (plsqlParser.BOOLEAN - 34)) | (1 << (plsqlParser.BOTH - 34)) | (1 << (plsqlParser.BULK - 34)) | (1 << (plsqlParser.BYTE - 34)) | (1 << (plsqlParser.C_LETTER - 34)) | (1 << (plsqlParser.CALL - 34)) | (1 << (plsqlParser.CANONICAL - 34)) | (1 << (plsqlParser.CASCADE - 34)) | (1 << (plsqlParser.CAST - 34)) | (1 << (plsqlParser.CHAR - 34)) | (1 << (plsqlParser.CHAR_CS - 34)) | (1 << (plsqlParser.CHARACTER - 34)) | (1 << (plsqlParser.CHR - 34)) | (1 << (plsqlParser.CLOB - 34)) | (1 << (plsqlParser.CLOSE - 34)) | (1 << (plsqlParser.CLUSTER - 34)) | (1 << (plsqlParser.COLLECT - 34)) | (1 << (plsqlParser.COLUMNS - 34)) | (1 << (plsqlParser.COMMENT - 34)) | (1 << (plsqlParser.COMMIT - 34)) | (1 << (plsqlParser.COMMITTED - 34)) | (1 << (plsqlParser.COMPATIBILITY - 34)) | (1 << (plsqlParser.COMPILE - 34)) | (1 << (plsqlParser.COMPOUND - 34)) | (1 << (plsqlParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (plsqlParser.CONSTRAINT - 66)) | (1 << (plsqlParser.CONSTRAINTS - 66)) | (1 << (plsqlParser.CONSTRUCTOR - 66)) | (1 << (plsqlParser.CONTENT - 66)) | (1 << (plsqlParser.CONTEXT - 66)) | (1 << (plsqlParser.CONTINUE - 66)) | (1 << (plsqlParser.CONVERT - 66)) | (1 << (plsqlParser.CORRUPT_XID - 66)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 66)) | (1 << (plsqlParser.COST - 66)) | (1 << (plsqlParser.COUNT - 66)) | (1 << (plsqlParser.CROSS - 66)) | (1 << (plsqlParser.CUBE - 66)) | (1 << (plsqlParser.CURRENT_USER - 66)) | (1 << (plsqlParser.CURSOR - 66)) | (1 << (plsqlParser.CUSTOMDATUM - 66)) | (1 << (plsqlParser.CYCLE - 66)) | (1 << (plsqlParser.DATA - 66)) | (1 << (plsqlParser.DATABASE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 66)) | (1 << (plsqlParser.DBTIMEZONE - 66)) | (1 << (plsqlParser.DDL - 66)) | (1 << (plsqlParser.DEBUG - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)) | (1 << (plsqlParser.DECOMPOSE - 66)) | (1 << (plsqlParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (plsqlParser.DEFAULTS - 99)) | (1 << (plsqlParser.DEFERRED - 99)) | (1 << (plsqlParser.DEFINER - 99)) | (1 << (plsqlParser.DETERMINISTIC - 99)) | (1 << (plsqlParser.DIMENSION - 99)) | (1 << (plsqlParser.DISABLE - 99)) | (1 << (plsqlParser.DISASSOCIATE - 99)) | (1 << (plsqlParser.DOCUMENT - 99)) | (1 << (plsqlParser.DOUBLE - 99)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (plsqlParser.EACH - 99)) | (1 << (plsqlParser.ELEMENT - 99)) | (1 << (plsqlParser.EMPTY - 99)) | (1 << (plsqlParser.ENABLE - 99)) | (1 << (plsqlParser.ENCODING - 99)) | (1 << (plsqlParser.ENTITYESCAPING - 99)) | (1 << (plsqlParser.ERR - 99)) | (1 << (plsqlParser.ERRORS - 99)) | (1 << (plsqlParser.ESCAPE - 99)) | (1 << (plsqlParser.EVALNAME - 99)) | (1 << (plsqlParser.EXCEPTION - 99)) | (1 << (plsqlParser.EXCEPTION_INIT - 99)) | (1 << (plsqlParser.EXCEPTIONS - 99)) | (1 << (plsqlParser.EXCLUDE - 99)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (plsqlParser.EXECUTE - 132)) | (1 << (plsqlParser.EXIT - 132)) | (1 << (plsqlParser.EXPLAIN - 132)) | (1 << (plsqlParser.EXTERNAL - 132)) | (1 << (plsqlParser.EXTRACT - 132)) | (1 << (plsqlParser.FAILURE - 132)) | (1 << (plsqlParser.FINAL - 132)) | (1 << (plsqlParser.FIRST - 132)) | (1 << (plsqlParser.FIRST_VALUE - 132)) | (1 << (plsqlParser.FLOAT - 132)) | (1 << (plsqlParser.FOLLOWING - 132)) | (1 << (plsqlParser.FOLLOWS - 132)) | (1 << (plsqlParser.FORALL - 132)) | (1 << (plsqlParser.FORCE - 132)) | (1 << (plsqlParser.FULL - 132)) | (1 << (plsqlParser.FUNCTION - 132)) | (1 << (plsqlParser.GROUPING - 132)) | (1 << (plsqlParser.HASH - 132)) | (1 << (plsqlParser.HIDE - 132)) | (1 << (plsqlParser.HOUR - 132)) | (1 << (plsqlParser.IGNORE - 132)) | (1 << (plsqlParser.IMMEDIATE - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (plsqlParser.INCLUDE - 165)) | (1 << (plsqlParser.INCLUDING - 165)) | (1 << (plsqlParser.INCREMENT - 165)) | (1 << (plsqlParser.INDENT - 165)) | (1 << (plsqlParser.INDEXED - 165)) | (1 << (plsqlParser.INDICATOR - 165)) | (1 << (plsqlParser.INDICES - 165)) | (1 << (plsqlParser.INFINITE - 165)) | (1 << (plsqlParser.INLINE - 165)) | (1 << (plsqlParser.INNER - 165)) | (1 << (plsqlParser.INOUT - 165)) | (1 << (plsqlParser.INSTANTIABLE - 165)) | (1 << (plsqlParser.INSTEAD - 165)) | (1 << (plsqlParser.INT - 165)) | (1 << (plsqlParser.INTEGER - 165)) | (1 << (plsqlParser.INTERVAL - 165)) | (1 << (plsqlParser.INVALIDATE - 165)) | (1 << (plsqlParser.ISOLATION - 165)) | (1 << (plsqlParser.ITERATE - 165)) | (1 << (plsqlParser.JAVA - 165)) | (1 << (plsqlParser.JOIN - 165)) | (1 << (plsqlParser.KEEP - 165)) | (1 << (plsqlParser.LANGUAGE - 165)) | (1 << (plsqlParser.LAST - 165)) | (1 << (plsqlParser.LAST_VALUE - 165)) | (1 << (plsqlParser.LEADING - 165)) | (1 << (plsqlParser.LEFT - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LOCAL - 197)) | (1 << (plsqlParser.LOCKED - 197)) | (1 << (plsqlParser.LOG - 197)) | (1 << (plsqlParser.LOGOFF - 197)) | (1 << (plsqlParser.LOGON - 197)) | (1 << (plsqlParser.LONG - 197)) | (1 << (plsqlParser.LOOP - 197)) | (1 << (plsqlParser.MAIN - 197)) | (1 << (plsqlParser.MAP - 197)) | (1 << (plsqlParser.MATCHED - 197)) | (1 << (plsqlParser.MAXVALUE - 197)) | (1 << (plsqlParser.MEASURES - 197)) | (1 << (plsqlParser.MEMBER - 197)) | (1 << (plsqlParser.MERGE - 197)) | (1 << (plsqlParser.MINUTE - 197)) | (1 << (plsqlParser.MINVALUE - 197)) | (1 << (plsqlParser.MLSLABEL - 197)) | (1 << (plsqlParser.MODEL - 197)) | (1 << (plsqlParser.MODIFY - 197)) | (1 << (plsqlParser.MONTH - 197)) | (1 << (plsqlParser.MULTISET - 197)) | (1 << (plsqlParser.NAME - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (plsqlParser.NAN - 229)) | (1 << (plsqlParser.NATURAL - 229)) | (1 << (plsqlParser.NATURALN - 229)) | (1 << (plsqlParser.NAV - 229)) | (1 << (plsqlParser.NCHAR - 229)) | (1 << (plsqlParser.NCHAR_CS - 229)) | (1 << (plsqlParser.NCLOB - 229)) | (1 << (plsqlParser.NESTED - 229)) | (1 << (plsqlParser.NEW - 229)) | (1 << (plsqlParser.NO - 229)) | (1 << (plsqlParser.NOAUDIT - 229)) | (1 << (plsqlParser.NOCOPY - 229)) | (1 << (plsqlParser.NOCYCLE - 229)) | (1 << (plsqlParser.NOENTITYESCAPING - 229)) | (1 << (plsqlParser.NONE - 229)) | (1 << (plsqlParser.NOSCHEMACHECK - 229)) | (1 << (plsqlParser.NULLS - 229)) | (1 << (plsqlParser.NUMBER - 229)) | (1 << (plsqlParser.NUMERIC - 229)) | (1 << (plsqlParser.NVARCHAR2 - 229)) | (1 << (plsqlParser.OBJECT - 229)) | (1 << (plsqlParser.OFF - 229)) | (1 << (plsqlParser.OID - 229)) | (1 << (plsqlParser.OLD - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (plsqlParser.ONLY - 262)) | (1 << (plsqlParser.OPEN - 262)) | (1 << (plsqlParser.ORADATA - 262)) | (1 << (plsqlParser.ORDINALITY - 262)) | (1 << (plsqlParser.OSERROR - 262)) | (1 << (plsqlParser.OUT - 262)) | (1 << (plsqlParser.OUTER - 262)) | (1 << (plsqlParser.OVER - 262)) | (1 << (plsqlParser.OVERRIDING - 262)) | (1 << (plsqlParser.PACKAGE - 262)) | (1 << (plsqlParser.PARALLEL_ENABLE - 262)) | (1 << (plsqlParser.PARAMETERS - 262)) | (1 << (plsqlParser.PARENT - 262)) | (1 << (plsqlParser.PARTITION - 262)) | (1 << (plsqlParser.PASSING - 262)) | (1 << (plsqlParser.PATH - 262)) | (1 << (plsqlParser.PIPELINED - 262)) | (1 << (plsqlParser.PLAN - 262)) | (1 << (plsqlParser.PLS_INTEGER - 262)) | (1 << (plsqlParser.POSITIVE - 262)) | (1 << (plsqlParser.POSITIVEN - 262)) | (1 << (plsqlParser.PRAGMA - 262)) | (1 << (plsqlParser.PRECEDING - 262)) | (1 << (plsqlParser.PRECISION - 262)) | (1 << (plsqlParser.PRESENT - 262)))) !== 0) || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & ((1 << (plsqlParser.RAISE - 295)) | (1 << (plsqlParser.RANGE - 295)) | (1 << (plsqlParser.RAW - 295)) | (1 << (plsqlParser.READ - 295)) | (1 << (plsqlParser.REAL - 295)) | (1 << (plsqlParser.RECORD - 295)) | (1 << (plsqlParser.REF - 295)) | (1 << (plsqlParser.REFERENCE - 295)) | (1 << (plsqlParser.REFERENCING - 295)) | (1 << (plsqlParser.REJECT - 295)) | (1 << (plsqlParser.RELIES_ON - 295)) | (1 << (plsqlParser.RENAME - 295)) | (1 << (plsqlParser.REPLACE - 295)) | (1 << (plsqlParser.RESPECT - 295)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 295)) | (1 << (plsqlParser.RESULT - 295)) | (1 << (plsqlParser.RESULT_CACHE - 295)) | (1 << (plsqlParser.RETURN - 295)) | (1 << (plsqlParser.RETURNING - 295)) | (1 << (plsqlParser.REUSE - 295)) | (1 << (plsqlParser.REVERSE - 295)) | (1 << (plsqlParser.RIGHT - 295)) | (1 << (plsqlParser.ROLLBACK - 295)) | (1 << (plsqlParser.ROLLUP - 295)) | (1 << (plsqlParser.ROW - 295)) | (1 << (plsqlParser.ROWID - 295)) | (1 << (plsqlParser.ROWS - 295)) | (1 << (plsqlParser.RULES - 295)) | (1 << (plsqlParser.SAMPLE - 295)) | (1 << (plsqlParser.SAVE - 295)) | (1 << (plsqlParser.SAVEPOINT - 295)))) !== 0) || ((((_la - 327)) & ~0x1f) == 0 && ((1 << (_la - 327)) & ((1 << (plsqlParser.SCHEMA - 327)) | (1 << (plsqlParser.SCHEMACHECK - 327)) | (1 << (plsqlParser.SCN - 327)) | (1 << (plsqlParser.SECOND - 327)) | (1 << (plsqlParser.SEED - 327)) | (1 << (plsqlParser.SEGMENT - 327)) | (1 << (plsqlParser.SELF - 327)) | (1 << (plsqlParser.SEQUENTIAL - 327)) | (1 << (plsqlParser.SERIALIZABLE - 327)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 327)) | (1 << (plsqlParser.SERVERERROR - 327)) | (1 << (plsqlParser.SESSIONTIMEZONE - 327)) | (1 << (plsqlParser.SET - 327)) | (1 << (plsqlParser.SETS - 327)) | (1 << (plsqlParser.SETTINGS - 327)) | (1 << (plsqlParser.SHOW - 327)) | (1 << (plsqlParser.SHUTDOWN - 327)) | (1 << (plsqlParser.SIBLINGS - 327)) | (1 << (plsqlParser.SIGNTYPE - 327)) | (1 << (plsqlParser.SIMPLE_INTEGER - 327)) | (1 << (plsqlParser.SINGLE - 327)) | (1 << (plsqlParser.SKIP_ - 327)) | (1 << (plsqlParser.SMALLINT - 327)) | (1 << (plsqlParser.SNAPSHOT - 327)) | (1 << (plsqlParser.SOME - 327)) | (1 << (plsqlParser.SPECIFICATION - 327)) | (1 << (plsqlParser.SQLDATA - 327)))) !== 0) || ((((_la - 359)) & ~0x1f) == 0 && ((1 << (_la - 359)) & ((1 << (plsqlParser.SQLERROR - 359)) | (1 << (plsqlParser.STANDALONE - 359)) | (1 << (plsqlParser.STARTUP - 359)) | (1 << (plsqlParser.STATEMENT - 359)) | (1 << (plsqlParser.STATEMENT_ID - 359)) | (1 << (plsqlParser.STATIC - 359)) | (1 << (plsqlParser.STATISTICS - 359)) | (1 << (plsqlParser.STRING - 359)) | (1 << (plsqlParser.SUBMULTISET - 359)) | (1 << (plsqlParser.SUBPARTITION - 359)) | (1 << (plsqlParser.SUBSTITUTABLE - 359)) | (1 << (plsqlParser.SUBTYPE - 359)) | (1 << (plsqlParser.SUCCESS - 359)) | (1 << (plsqlParser.SUSPEND - 359)) | (1 << (plsqlParser.TIME - 359)) | (1 << (plsqlParser.TIMESTAMP - 359)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 359)) | (1 << (plsqlParser.TIMEZONE_ABBR - 359)) | (1 << (plsqlParser.TIMEZONE_HOUR - 359)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 359)) | (1 << (plsqlParser.TIMEZONE_REGION - 359)) | (1 << (plsqlParser.TRAILING - 359)) | (1 << (plsqlParser.TRANSACTION - 359)) | (1 << (plsqlParser.TRANSLATE - 359)) | (1 << (plsqlParser.TREAT - 359)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (plsqlParser.TRIGGER - 391)) | (1 << (plsqlParser.TRIM - 391)) | (1 << (plsqlParser.TRUNCATE - 391)) | (1 << (plsqlParser.TYPE - 391)) | (1 << (plsqlParser.UNBOUNDED - 391)) | (1 << (plsqlParser.UNDER - 391)) | (1 << (plsqlParser.UNLIMITED - 391)) | (1 << (plsqlParser.UNTIL - 391)) | (1 << (plsqlParser.UPDATED - 391)) | (1 << (plsqlParser.UPSERT - 391)) | (1 << (plsqlParser.UROWID - 391)) | (1 << (plsqlParser.USE - 391)) | (1 << (plsqlParser.VALIDATE - 391)) | (1 << (plsqlParser.VALUE - 391)) | (1 << (plsqlParser.VARCHAR - 391)) | (1 << (plsqlParser.VARCHAR2 - 391)) | (1 << (plsqlParser.VARIABLE - 391)) | (1 << (plsqlParser.VARRAY - 391)) | (1 << (plsqlParser.VARYING - 391)) | (1 << (plsqlParser.VERSION - 391)) | (1 << (plsqlParser.VERSIONS - 391)) | (1 << (plsqlParser.WAIT - 391)) | (1 << (plsqlParser.WARNING - 391)) | (1 << (plsqlParser.WELLFORMED - 391)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (plsqlParser.WHENEVER - 423)) | (1 << (plsqlParser.WHILE - 423)) | (1 << (plsqlParser.WITHIN - 423)) | (1 << (plsqlParser.WORK - 423)) | (1 << (plsqlParser.WRITE - 423)) | (1 << (plsqlParser.XML - 423)) | (1 << (plsqlParser.XMLAGG - 423)) | (1 << (plsqlParser.XMLATTRIBUTES - 423)) | (1 << (plsqlParser.XMLCAST - 423)) | (1 << (plsqlParser.XMLCOLATTVAL - 423)) | (1 << (plsqlParser.XMLELEMENT - 423)) | (1 << (plsqlParser.XMLEXISTS - 423)) | (1 << (plsqlParser.XMLFOREST - 423)) | (1 << (plsqlParser.XMLNAMESPACES - 423)) | (1 << (plsqlParser.XMLPARSE - 423)) | (1 << (plsqlParser.XMLPI - 423)) | (1 << (plsqlParser.XMLQUERY - 423)) | (1 << (plsqlParser.XMLROOT - 423)) | (1 << (plsqlParser.XMLSERIALIZE - 423)) | (1 << (plsqlParser.XMLTABLE - 423)) | (1 << (plsqlParser.YEAR - 423)) | (1 << (plsqlParser.YES - 423)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 423)) | (1 << (plsqlParser.ZONE - 423)) | (1 << (plsqlParser.PREDICTION - 423)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 423)) | (1 << (plsqlParser.PREDICTION_COST - 423)) | (1 << (plsqlParser.PREDICTION_DETAILS - 423)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 423)) | (1 << (plsqlParser.PREDICTION_SET - 423)))) !== 0) || ((((_la - 455)) & ~0x1f) == 0 && ((1 << (_la - 455)) & ((1 << (plsqlParser.CUME_DIST - 455)) | (1 << (plsqlParser.DENSE_RANK - 455)) | (1 << (plsqlParser.LISTAGG - 455)) | (1 << (plsqlParser.PERCENT_RANK - 455)) | (1 << (plsqlParser.PERCENTILE_CONT - 455)) | (1 << (plsqlParser.PERCENTILE_DISC - 455)) | (1 << (plsqlParser.RANK - 455)) | (1 << (plsqlParser.AVG - 455)) | (1 << (plsqlParser.CORR - 455)) | (1 << (plsqlParser.LAG - 455)) | (1 << (plsqlParser.LEAD - 455)) | (1 << (plsqlParser.MAX - 455)) | (1 << (plsqlParser.MEDIAN - 455)) | (1 << (plsqlParser.MIN - 455)) | (1 << (plsqlParser.NTILE - 455)) | (1 << (plsqlParser.RATIO_TO_REPORT - 455)) | (1 << (plsqlParser.ROW_NUMBER - 455)) | (1 << (plsqlParser.SUM - 455)) | (1 << (plsqlParser.VARIANCE - 455)) | (1 << (plsqlParser.REGR_ - 455)) | (1 << (plsqlParser.STDDEV - 455)) | (1 << (plsqlParser.VAR_ - 455)) | (1 << (plsqlParser.COVAR_ - 455)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 455)) | (1 << (plsqlParser.CHAR_STRING - 455)) | (1 << (plsqlParser.DELIMITED_ID - 455)))) !== 0) || _la===plsqlParser.REGULAR_ID) {
                    this.state = 4914;
                    this.column_alias();
                }

                this.state = 4921;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
        this.state = 4924;
        this.match(plsqlParser.RIGHT_PAREN);
        this.state = 4926;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,640,this._ctx);
        if(la_===1) {
            this.state = 4925;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Respect_or_ignore_nullsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_respect_or_ignore_nulls;
    return this;
}

Respect_or_ignore_nullsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Respect_or_ignore_nullsContext.prototype.constructor = Respect_or_ignore_nullsContext;

Respect_or_ignore_nullsContext.prototype.NULLS = function() {
    return this.getToken(plsqlParser.NULLS, 0);
};

Respect_or_ignore_nullsContext.prototype.RESPECT = function() {
    return this.getToken(plsqlParser.RESPECT, 0);
};

Respect_or_ignore_nullsContext.prototype.IGNORE = function() {
    return this.getToken(plsqlParser.IGNORE, 0);
};

Respect_or_ignore_nullsContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRespect_or_ignore_nulls(this);
	}
};

Respect_or_ignore_nullsContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRespect_or_ignore_nulls(this);
	}
};




plsqlParser.Respect_or_ignore_nullsContext = Respect_or_ignore_nullsContext;

plsqlParser.prototype.respect_or_ignore_nulls = function() {

    var localctx = new Respect_or_ignore_nullsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, plsqlParser.RULE_respect_or_ignore_nulls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4928;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.IGNORE || _la===plsqlParser.RESPECT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4929;
        this.match(plsqlParser.NULLS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgumentContext.prototype.r_id = function() {
    return this.getTypedRuleContext(R_idContext,0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitArgument(this);
	}
};




plsqlParser.ArgumentContext = ArgumentContext;

plsqlParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 702, plsqlParser.RULE_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4935;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,641,this._ctx);
        if(la_===1) {
            this.state = 4931;
            this.r_id();
            this.state = 4932;
            this.match(plsqlParser.EQUALS_OP);
            this.state = 4933;
            this.match(plsqlParser.GREATER_THAN_OP);

        }
        this.state = 4937;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_type_spec;
    return this;
}

Type_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specContext.prototype.constructor = Type_specContext;

Type_specContext.prototype.datatype = function() {
    return this.getTypedRuleContext(DatatypeContext,0);
};

Type_specContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_specContext.prototype.REF = function() {
    return this.getToken(plsqlParser.REF, 0);
};

Type_specContext.prototype.PERCENT_ROWTYPE = function() {
    return this.getToken(plsqlParser.PERCENT_ROWTYPE, 0);
};

Type_specContext.prototype.PERCENT_TYPE = function() {
    return this.getToken(plsqlParser.PERCENT_TYPE, 0);
};

Type_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterType_spec(this);
	}
};

Type_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitType_spec(this);
	}
};




plsqlParser.Type_specContext = Type_specContext;

plsqlParser.prototype.type_spec = function() {

    var localctx = new Type_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 704, plsqlParser.RULE_type_spec);
    var _la = 0; // Token type
    try {
        this.state = 4947;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4939;
            this.datatype();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4941;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,642,this._ctx);
            if(la_===1) {
                this.state = 4940;
                this.match(plsqlParser.REF);

            }
            this.state = 4943;
            this.type_name();
            this.state = 4945;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.PERCENT_ROWTYPE || _la===plsqlParser.PERCENT_TYPE) {
                this.state = 4944;
                _la = this._input.LA(1);
                if(!(_la===plsqlParser.PERCENT_ROWTYPE || _la===plsqlParser.PERCENT_TYPE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatatypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_datatype;
    return this;
}

DatatypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatatypeContext.prototype.constructor = DatatypeContext;

DatatypeContext.prototype.native_datatype_element = function() {
    return this.getTypedRuleContext(Native_datatype_elementContext,0);
};

DatatypeContext.prototype.precision_part = function() {
    return this.getTypedRuleContext(Precision_partContext,0);
};

DatatypeContext.prototype.WITH = function() {
    return this.getToken(plsqlParser.WITH, 0);
};

DatatypeContext.prototype.TIME = function() {
    return this.getToken(plsqlParser.TIME, 0);
};

DatatypeContext.prototype.ZONE = function() {
    return this.getToken(plsqlParser.ZONE, 0);
};

DatatypeContext.prototype.LOCAL = function() {
    return this.getToken(plsqlParser.LOCAL, 0);
};

DatatypeContext.prototype.INTERVAL = function() {
    return this.getToken(plsqlParser.INTERVAL, 0);
};

DatatypeContext.prototype.TO = function() {
    return this.getToken(plsqlParser.TO, 0);
};

DatatypeContext.prototype.YEAR = function() {
    return this.getToken(plsqlParser.YEAR, 0);
};

DatatypeContext.prototype.DAY = function() {
    return this.getToken(plsqlParser.DAY, 0);
};

DatatypeContext.prototype.MONTH = function() {
    return this.getToken(plsqlParser.MONTH, 0);
};

DatatypeContext.prototype.SECOND = function() {
    return this.getToken(plsqlParser.SECOND, 0);
};

DatatypeContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

DatatypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterDatatype(this);
	}
};

DatatypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitDatatype(this);
	}
};




plsqlParser.DatatypeContext = DatatypeContext;

plsqlParser.prototype.datatype = function() {

    var localctx = new DatatypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 706, plsqlParser.RULE_datatype);
    var _la = 0; // Token type
    try {
        this.state = 4977;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BOOLEAN:
        case plsqlParser.CHAR:
        case plsqlParser.CHARACTER:
        case plsqlParser.CLOB:
        case plsqlParser.DATE:
        case plsqlParser.DAY:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.FLOAT:
        case plsqlParser.HOUR:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.LONG:
        case plsqlParser.MINUTE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MONTH:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NCHAR:
        case plsqlParser.NCLOB:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.RAW:
        case plsqlParser.REAL:
        case plsqlParser.ROWID:
        case plsqlParser.SECOND:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SMALLINT:
        case plsqlParser.STRING:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.UROWID:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.YEAR:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 1);
            this.state = 4949;
            this.native_datatype_element();
            this.state = 4951;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,645,this._ctx);
            if(la_===1) {
                this.state = 4950;
                this.precision_part();

            }
            this.state = 4959;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,647,this._ctx);
            if(la_===1) {
                this.state = 4953;
                this.match(plsqlParser.WITH);
                this.state = 4955;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===plsqlParser.LOCAL) {
                    this.state = 4954;
                    this.match(plsqlParser.LOCAL);
                }

                this.state = 4957;
                this.match(plsqlParser.TIME);
                this.state = 4958;
                this.match(plsqlParser.ZONE);

            }
            break;
        case plsqlParser.INTERVAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4961;
            this.match(plsqlParser.INTERVAL);
            this.state = 4962;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.DAY || _la===plsqlParser.YEAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.LEFT_PAREN) {
                this.state = 4963;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 4964;
                this.expression(0);
                this.state = 4965;
                this.match(plsqlParser.RIGHT_PAREN);
            }

            this.state = 4969;
            this.match(plsqlParser.TO);
            this.state = 4970;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.MONTH || _la===plsqlParser.SECOND)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4975;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,649,this._ctx);
            if(la_===1) {
                this.state = 4971;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 4972;
                this.expression(0);
                this.state = 4973;
                this.match(plsqlParser.RIGHT_PAREN);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Precision_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_precision_part;
    return this;
}

Precision_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precision_partContext.prototype.constructor = Precision_partContext;

Precision_partContext.prototype.numeric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericContext);
    } else {
        return this.getTypedRuleContext(NumericContext,i);
    }
};

Precision_partContext.prototype.CHAR = function() {
    return this.getToken(plsqlParser.CHAR, 0);
};

Precision_partContext.prototype.BYTE = function() {
    return this.getToken(plsqlParser.BYTE, 0);
};

Precision_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterPrecision_part(this);
	}
};

Precision_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitPrecision_part(this);
	}
};




plsqlParser.Precision_partContext = Precision_partContext;

plsqlParser.prototype.precision_part = function() {

    var localctx = new Precision_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 708, plsqlParser.RULE_precision_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4979;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 4980;
        this.numeric();
        this.state = 4983;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.COMMA) {
            this.state = 4981;
            this.match(plsqlParser.COMMA);
            this.state = 4982;
            this.numeric();
        }

        this.state = 4986;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===plsqlParser.BYTE || _la===plsqlParser.CHAR) {
            this.state = 4985;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.BYTE || _la===plsqlParser.CHAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 4988;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_datatype_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_native_datatype_element;
    return this;
}

Native_datatype_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_datatype_elementContext.prototype.constructor = Native_datatype_elementContext;

Native_datatype_elementContext.prototype.BINARY_INTEGER = function() {
    return this.getToken(plsqlParser.BINARY_INTEGER, 0);
};

Native_datatype_elementContext.prototype.PLS_INTEGER = function() {
    return this.getToken(plsqlParser.PLS_INTEGER, 0);
};

Native_datatype_elementContext.prototype.NATURAL = function() {
    return this.getToken(plsqlParser.NATURAL, 0);
};

Native_datatype_elementContext.prototype.BINARY_FLOAT = function() {
    return this.getToken(plsqlParser.BINARY_FLOAT, 0);
};

Native_datatype_elementContext.prototype.BINARY_DOUBLE = function() {
    return this.getToken(plsqlParser.BINARY_DOUBLE, 0);
};

Native_datatype_elementContext.prototype.NATURALN = function() {
    return this.getToken(plsqlParser.NATURALN, 0);
};

Native_datatype_elementContext.prototype.POSITIVE = function() {
    return this.getToken(plsqlParser.POSITIVE, 0);
};

Native_datatype_elementContext.prototype.POSITIVEN = function() {
    return this.getToken(plsqlParser.POSITIVEN, 0);
};

Native_datatype_elementContext.prototype.SIGNTYPE = function() {
    return this.getToken(plsqlParser.SIGNTYPE, 0);
};

Native_datatype_elementContext.prototype.SIMPLE_INTEGER = function() {
    return this.getToken(plsqlParser.SIMPLE_INTEGER, 0);
};

Native_datatype_elementContext.prototype.NVARCHAR2 = function() {
    return this.getToken(plsqlParser.NVARCHAR2, 0);
};

Native_datatype_elementContext.prototype.DEC = function() {
    return this.getToken(plsqlParser.DEC, 0);
};

Native_datatype_elementContext.prototype.INTEGER = function() {
    return this.getToken(plsqlParser.INTEGER, 0);
};

Native_datatype_elementContext.prototype.INT = function() {
    return this.getToken(plsqlParser.INT, 0);
};

Native_datatype_elementContext.prototype.NUMERIC = function() {
    return this.getToken(plsqlParser.NUMERIC, 0);
};

Native_datatype_elementContext.prototype.SMALLINT = function() {
    return this.getToken(plsqlParser.SMALLINT, 0);
};

Native_datatype_elementContext.prototype.NUMBER = function() {
    return this.getToken(plsqlParser.NUMBER, 0);
};

Native_datatype_elementContext.prototype.DECIMAL = function() {
    return this.getToken(plsqlParser.DECIMAL, 0);
};

Native_datatype_elementContext.prototype.DOUBLE = function() {
    return this.getToken(plsqlParser.DOUBLE, 0);
};

Native_datatype_elementContext.prototype.PRECISION = function() {
    return this.getToken(plsqlParser.PRECISION, 0);
};

Native_datatype_elementContext.prototype.FLOAT = function() {
    return this.getToken(plsqlParser.FLOAT, 0);
};

Native_datatype_elementContext.prototype.REAL = function() {
    return this.getToken(plsqlParser.REAL, 0);
};

Native_datatype_elementContext.prototype.NCHAR = function() {
    return this.getToken(plsqlParser.NCHAR, 0);
};

Native_datatype_elementContext.prototype.LONG = function() {
    return this.getToken(plsqlParser.LONG, 0);
};

Native_datatype_elementContext.prototype.RAW = function() {
    return this.getToken(plsqlParser.RAW, 0);
};

Native_datatype_elementContext.prototype.CHAR = function() {
    return this.getToken(plsqlParser.CHAR, 0);
};

Native_datatype_elementContext.prototype.CHARACTER = function() {
    return this.getToken(plsqlParser.CHARACTER, 0);
};

Native_datatype_elementContext.prototype.VARCHAR2 = function() {
    return this.getToken(plsqlParser.VARCHAR2, 0);
};

Native_datatype_elementContext.prototype.VARCHAR = function() {
    return this.getToken(plsqlParser.VARCHAR, 0);
};

Native_datatype_elementContext.prototype.STRING = function() {
    return this.getToken(plsqlParser.STRING, 0);
};

Native_datatype_elementContext.prototype.BOOLEAN = function() {
    return this.getToken(plsqlParser.BOOLEAN, 0);
};

Native_datatype_elementContext.prototype.DATE = function() {
    return this.getToken(plsqlParser.DATE, 0);
};

Native_datatype_elementContext.prototype.ROWID = function() {
    return this.getToken(plsqlParser.ROWID, 0);
};

Native_datatype_elementContext.prototype.UROWID = function() {
    return this.getToken(plsqlParser.UROWID, 0);
};

Native_datatype_elementContext.prototype.YEAR = function() {
    return this.getToken(plsqlParser.YEAR, 0);
};

Native_datatype_elementContext.prototype.MONTH = function() {
    return this.getToken(plsqlParser.MONTH, 0);
};

Native_datatype_elementContext.prototype.DAY = function() {
    return this.getToken(plsqlParser.DAY, 0);
};

Native_datatype_elementContext.prototype.HOUR = function() {
    return this.getToken(plsqlParser.HOUR, 0);
};

Native_datatype_elementContext.prototype.MINUTE = function() {
    return this.getToken(plsqlParser.MINUTE, 0);
};

Native_datatype_elementContext.prototype.SECOND = function() {
    return this.getToken(plsqlParser.SECOND, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(plsqlParser.TIMEZONE_HOUR, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(plsqlParser.TIMEZONE_MINUTE, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_REGION = function() {
    return this.getToken(plsqlParser.TIMEZONE_REGION, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_ABBR = function() {
    return this.getToken(plsqlParser.TIMEZONE_ABBR, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP = function() {
    return this.getToken(plsqlParser.TIMESTAMP, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_TZ_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_LTZ_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.YMINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.DSINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.BFILE = function() {
    return this.getToken(plsqlParser.BFILE, 0);
};

Native_datatype_elementContext.prototype.BLOB = function() {
    return this.getToken(plsqlParser.BLOB, 0);
};

Native_datatype_elementContext.prototype.CLOB = function() {
    return this.getToken(plsqlParser.CLOB, 0);
};

Native_datatype_elementContext.prototype.NCLOB = function() {
    return this.getToken(plsqlParser.NCLOB, 0);
};

Native_datatype_elementContext.prototype.MLSLABEL = function() {
    return this.getToken(plsqlParser.MLSLABEL, 0);
};

Native_datatype_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNative_datatype_element(this);
	}
};

Native_datatype_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNative_datatype_element(this);
	}
};




plsqlParser.Native_datatype_elementContext = Native_datatype_elementContext;

plsqlParser.prototype.native_datatype_element = function() {

    var localctx = new Native_datatype_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 710, plsqlParser.RULE_native_datatype_element);
    var _la = 0; // Token type
    try {
        this.state = 5050;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.BINARY_INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 4990;
            this.match(plsqlParser.BINARY_INTEGER);
            break;
        case plsqlParser.PLS_INTEGER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4991;
            this.match(plsqlParser.PLS_INTEGER);
            break;
        case plsqlParser.NATURAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 4992;
            this.match(plsqlParser.NATURAL);
            break;
        case plsqlParser.BINARY_FLOAT:
            this.enterOuterAlt(localctx, 4);
            this.state = 4993;
            this.match(plsqlParser.BINARY_FLOAT);
            break;
        case plsqlParser.BINARY_DOUBLE:
            this.enterOuterAlt(localctx, 5);
            this.state = 4994;
            this.match(plsqlParser.BINARY_DOUBLE);
            break;
        case plsqlParser.NATURALN:
            this.enterOuterAlt(localctx, 6);
            this.state = 4995;
            this.match(plsqlParser.NATURALN);
            break;
        case plsqlParser.POSITIVE:
            this.enterOuterAlt(localctx, 7);
            this.state = 4996;
            this.match(plsqlParser.POSITIVE);
            break;
        case plsqlParser.POSITIVEN:
            this.enterOuterAlt(localctx, 8);
            this.state = 4997;
            this.match(plsqlParser.POSITIVEN);
            break;
        case plsqlParser.SIGNTYPE:
            this.enterOuterAlt(localctx, 9);
            this.state = 4998;
            this.match(plsqlParser.SIGNTYPE);
            break;
        case plsqlParser.SIMPLE_INTEGER:
            this.enterOuterAlt(localctx, 10);
            this.state = 4999;
            this.match(plsqlParser.SIMPLE_INTEGER);
            break;
        case plsqlParser.NVARCHAR2:
            this.enterOuterAlt(localctx, 11);
            this.state = 5000;
            this.match(plsqlParser.NVARCHAR2);
            break;
        case plsqlParser.DEC:
            this.enterOuterAlt(localctx, 12);
            this.state = 5001;
            this.match(plsqlParser.DEC);
            break;
        case plsqlParser.INTEGER:
            this.enterOuterAlt(localctx, 13);
            this.state = 5002;
            this.match(plsqlParser.INTEGER);
            break;
        case plsqlParser.INT:
            this.enterOuterAlt(localctx, 14);
            this.state = 5003;
            this.match(plsqlParser.INT);
            break;
        case plsqlParser.NUMERIC:
            this.enterOuterAlt(localctx, 15);
            this.state = 5004;
            this.match(plsqlParser.NUMERIC);
            break;
        case plsqlParser.SMALLINT:
            this.enterOuterAlt(localctx, 16);
            this.state = 5005;
            this.match(plsqlParser.SMALLINT);
            break;
        case plsqlParser.NUMBER:
            this.enterOuterAlt(localctx, 17);
            this.state = 5006;
            this.match(plsqlParser.NUMBER);
            break;
        case plsqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 18);
            this.state = 5007;
            this.match(plsqlParser.DECIMAL);
            break;
        case plsqlParser.DOUBLE:
            this.enterOuterAlt(localctx, 19);
            this.state = 5008;
            this.match(plsqlParser.DOUBLE);
            this.state = 5010;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.PRECISION) {
                this.state = 5009;
                this.match(plsqlParser.PRECISION);
            }

            break;
        case plsqlParser.FLOAT:
            this.enterOuterAlt(localctx, 20);
            this.state = 5012;
            this.match(plsqlParser.FLOAT);
            break;
        case plsqlParser.REAL:
            this.enterOuterAlt(localctx, 21);
            this.state = 5013;
            this.match(plsqlParser.REAL);
            break;
        case plsqlParser.NCHAR:
            this.enterOuterAlt(localctx, 22);
            this.state = 5014;
            this.match(plsqlParser.NCHAR);
            break;
        case plsqlParser.LONG:
            this.enterOuterAlt(localctx, 23);
            this.state = 5015;
            this.match(plsqlParser.LONG);
            this.state = 5017;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.RAW) {
                this.state = 5016;
                this.match(plsqlParser.RAW);
            }

            break;
        case plsqlParser.CHAR:
            this.enterOuterAlt(localctx, 24);
            this.state = 5019;
            this.match(plsqlParser.CHAR);
            break;
        case plsqlParser.CHARACTER:
            this.enterOuterAlt(localctx, 25);
            this.state = 5020;
            this.match(plsqlParser.CHARACTER);
            break;
        case plsqlParser.VARCHAR2:
            this.enterOuterAlt(localctx, 26);
            this.state = 5021;
            this.match(plsqlParser.VARCHAR2);
            break;
        case plsqlParser.VARCHAR:
            this.enterOuterAlt(localctx, 27);
            this.state = 5022;
            this.match(plsqlParser.VARCHAR);
            break;
        case plsqlParser.STRING:
            this.enterOuterAlt(localctx, 28);
            this.state = 5023;
            this.match(plsqlParser.STRING);
            break;
        case plsqlParser.RAW:
            this.enterOuterAlt(localctx, 29);
            this.state = 5024;
            this.match(plsqlParser.RAW);
            break;
        case plsqlParser.BOOLEAN:
            this.enterOuterAlt(localctx, 30);
            this.state = 5025;
            this.match(plsqlParser.BOOLEAN);
            break;
        case plsqlParser.DATE:
            this.enterOuterAlt(localctx, 31);
            this.state = 5026;
            this.match(plsqlParser.DATE);
            break;
        case plsqlParser.ROWID:
            this.enterOuterAlt(localctx, 32);
            this.state = 5027;
            this.match(plsqlParser.ROWID);
            break;
        case plsqlParser.UROWID:
            this.enterOuterAlt(localctx, 33);
            this.state = 5028;
            this.match(plsqlParser.UROWID);
            break;
        case plsqlParser.YEAR:
            this.enterOuterAlt(localctx, 34);
            this.state = 5029;
            this.match(plsqlParser.YEAR);
            break;
        case plsqlParser.MONTH:
            this.enterOuterAlt(localctx, 35);
            this.state = 5030;
            this.match(plsqlParser.MONTH);
            break;
        case plsqlParser.DAY:
            this.enterOuterAlt(localctx, 36);
            this.state = 5031;
            this.match(plsqlParser.DAY);
            break;
        case plsqlParser.HOUR:
            this.enterOuterAlt(localctx, 37);
            this.state = 5032;
            this.match(plsqlParser.HOUR);
            break;
        case plsqlParser.MINUTE:
            this.enterOuterAlt(localctx, 38);
            this.state = 5033;
            this.match(plsqlParser.MINUTE);
            break;
        case plsqlParser.SECOND:
            this.enterOuterAlt(localctx, 39);
            this.state = 5034;
            this.match(plsqlParser.SECOND);
            break;
        case plsqlParser.TIMEZONE_HOUR:
            this.enterOuterAlt(localctx, 40);
            this.state = 5035;
            this.match(plsqlParser.TIMEZONE_HOUR);
            break;
        case plsqlParser.TIMEZONE_MINUTE:
            this.enterOuterAlt(localctx, 41);
            this.state = 5036;
            this.match(plsqlParser.TIMEZONE_MINUTE);
            break;
        case plsqlParser.TIMEZONE_REGION:
            this.enterOuterAlt(localctx, 42);
            this.state = 5037;
            this.match(plsqlParser.TIMEZONE_REGION);
            break;
        case plsqlParser.TIMEZONE_ABBR:
            this.enterOuterAlt(localctx, 43);
            this.state = 5038;
            this.match(plsqlParser.TIMEZONE_ABBR);
            break;
        case plsqlParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 44);
            this.state = 5039;
            this.match(plsqlParser.TIMESTAMP);
            break;
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 45);
            this.state = 5040;
            this.match(plsqlParser.TIMESTAMP_UNCONSTRAINED);
            break;
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 46);
            this.state = 5041;
            this.match(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED);
            break;
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 47);
            this.state = 5042;
            this.match(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED);
            break;
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 48);
            this.state = 5043;
            this.match(plsqlParser.YMINTERVAL_UNCONSTRAINED);
            break;
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 49);
            this.state = 5044;
            this.match(plsqlParser.DSINTERVAL_UNCONSTRAINED);
            break;
        case plsqlParser.BFILE:
            this.enterOuterAlt(localctx, 50);
            this.state = 5045;
            this.match(plsqlParser.BFILE);
            break;
        case plsqlParser.BLOB:
            this.enterOuterAlt(localctx, 51);
            this.state = 5046;
            this.match(plsqlParser.BLOB);
            break;
        case plsqlParser.CLOB:
            this.enterOuterAlt(localctx, 52);
            this.state = 5047;
            this.match(plsqlParser.CLOB);
            break;
        case plsqlParser.NCLOB:
            this.enterOuterAlt(localctx, 53);
            this.state = 5048;
            this.match(plsqlParser.NCLOB);
            break;
        case plsqlParser.MLSLABEL:
            this.enterOuterAlt(localctx, 54);
            this.state = 5049;
            this.match(plsqlParser.MLSLABEL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bind_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_bind_variable;
    return this;
}

Bind_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bind_variableContext.prototype.constructor = Bind_variableContext;

Bind_variableContext.prototype.BINDVAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.BINDVAR);
    } else {
        return this.getToken(plsqlParser.BINDVAR, i);
    }
};


Bind_variableContext.prototype.UNSIGNED_INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.UNSIGNED_INTEGER);
    } else {
        return this.getToken(plsqlParser.UNSIGNED_INTEGER, i);
    }
};


Bind_variableContext.prototype.general_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(General_elementContext);
    } else {
        return this.getTypedRuleContext(General_elementContext,i);
    }
};

Bind_variableContext.prototype.INDICATOR = function() {
    return this.getToken(plsqlParser.INDICATOR, 0);
};

Bind_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterBind_variable(this);
	}
};

Bind_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitBind_variable(this);
	}
};




plsqlParser.Bind_variableContext = Bind_variableContext;

plsqlParser.prototype.bind_variable = function() {

    var localctx = new Bind_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 712, plsqlParser.RULE_bind_variable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5055;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.BINDVAR:
            this.state = 5052;
            this.match(plsqlParser.BINDVAR);
            break;
        case plsqlParser.COLON:
            this.state = 5053;
            this.match(plsqlParser.COLON);
            this.state = 5054;
            this.match(plsqlParser.UNSIGNED_INTEGER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5065;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,659,this._ctx);
        if(la_===1) {
            this.state = 5058;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===plsqlParser.INDICATOR) {
                this.state = 5057;
                this.match(plsqlParser.INDICATOR);
            }

            this.state = 5063;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.BINDVAR:
                this.state = 5060;
                this.match(plsqlParser.BINDVAR);
                break;
            case plsqlParser.COLON:
                this.state = 5061;
                this.match(plsqlParser.COLON);
                this.state = 5062;
                this.match(plsqlParser.UNSIGNED_INTEGER);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
        this.state = 5071;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,660,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 5067;
                this.match(plsqlParser.PERIOD);
                this.state = 5068;
                this.general_element(); 
            }
            this.state = 5073;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,660,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_general_element;
    return this;
}

General_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_elementContext.prototype.constructor = General_elementContext;


 
General_elementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FuncCallContext(parser, ctx) {
	General_elementContext.call(this, parser);
    General_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuncCallContext.prototype = Object.create(General_elementContext.prototype);
FuncCallContext.prototype.constructor = FuncCallContext;

plsqlParser.FuncCallContext = FuncCallContext;

FuncCallContext.prototype.dot_id = function() {
    return this.getTypedRuleContext(Dot_idContext,0);
};

FuncCallContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};
FuncCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterFuncCall(this);
	}
};

FuncCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitFuncCall(this);
	}
};


function IdentifierContext(parser, ctx) {
	General_elementContext.call(this, parser);
    General_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierContext.prototype = Object.create(General_elementContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

plsqlParser.IdentifierContext = IdentifierContext;

IdentifierContext.prototype.dot_id = function() {
    return this.getTypedRuleContext(Dot_idContext,0);
};
IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitIdentifier(this);
	}
};



plsqlParser.General_elementContext = General_elementContext;

plsqlParser.prototype.general_element = function() {

    var localctx = new General_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 714, plsqlParser.RULE_general_element);
    try {
        this.state = 5078;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,661,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FuncCallContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 5074;
            this.dot_id();
            this.state = 5075;
            this.function_argument();
            break;

        case 2:
            localctx = new IdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 5077;
            this.dot_id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_table_element;
    return this;
}

Table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_elementContext.prototype.constructor = Table_elementContext;

Table_elementContext.prototype.dot_id = function() {
    return this.getTypedRuleContext(Dot_idContext,0);
};

Table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterTable_element(this);
	}
};

Table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitTable_element(this);
	}
};




plsqlParser.Table_elementContext = Table_elementContext;

plsqlParser.prototype.table_element = function() {

    var localctx = new Table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 716, plsqlParser.RULE_table_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5080;
        this.dot_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.TIMESTAMP = function() {
    return this.getToken(plsqlParser.TIMESTAMP, 0);
};

ConstantContext.prototype.quoted_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Quoted_stringContext);
    } else {
        return this.getTypedRuleContext(Quoted_stringContext,i);
    }
};

ConstantContext.prototype.bind_variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bind_variableContext);
    } else {
        return this.getTypedRuleContext(Bind_variableContext,i);
    }
};

ConstantContext.prototype.AT = function() {
    return this.getToken(plsqlParser.AT, 0);
};

ConstantContext.prototype.TIME = function() {
    return this.getToken(plsqlParser.TIME, 0);
};

ConstantContext.prototype.ZONE = function() {
    return this.getToken(plsqlParser.ZONE, 0);
};

ConstantContext.prototype.INTERVAL = function() {
    return this.getToken(plsqlParser.INTERVAL, 0);
};

ConstantContext.prototype.DAY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.DAY);
    } else {
        return this.getToken(plsqlParser.DAY, i);
    }
};


ConstantContext.prototype.HOUR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.HOUR);
    } else {
        return this.getToken(plsqlParser.HOUR, i);
    }
};


ConstantContext.prototype.MINUTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.MINUTE);
    } else {
        return this.getToken(plsqlParser.MINUTE, i);
    }
};


ConstantContext.prototype.SECOND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.SECOND);
    } else {
        return this.getToken(plsqlParser.SECOND, i);
    }
};


ConstantContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

ConstantContext.prototype.TO = function() {
    return this.getToken(plsqlParser.TO, 0);
};

ConstantContext.prototype.UNSIGNED_INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(plsqlParser.UNSIGNED_INTEGER);
    } else {
        return this.getToken(plsqlParser.UNSIGNED_INTEGER, i);
    }
};


ConstantContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

ConstantContext.prototype.DATE = function() {
    return this.getToken(plsqlParser.DATE, 0);
};

ConstantContext.prototype.NULL = function() {
    return this.getToken(plsqlParser.NULL, 0);
};

ConstantContext.prototype.TRUE = function() {
    return this.getToken(plsqlParser.TRUE, 0);
};

ConstantContext.prototype.FALSE = function() {
    return this.getToken(plsqlParser.FALSE, 0);
};

ConstantContext.prototype.DBTIMEZONE = function() {
    return this.getToken(plsqlParser.DBTIMEZONE, 0);
};

ConstantContext.prototype.SESSIONTIMEZONE = function() {
    return this.getToken(plsqlParser.SESSIONTIMEZONE, 0);
};

ConstantContext.prototype.MINVALUE = function() {
    return this.getToken(plsqlParser.MINVALUE, 0);
};

ConstantContext.prototype.MAXVALUE = function() {
    return this.getToken(plsqlParser.MAXVALUE, 0);
};

ConstantContext.prototype.DEFAULT = function() {
    return this.getToken(plsqlParser.DEFAULT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConstant(this);
	}
};




plsqlParser.ConstantContext = ConstantContext;

plsqlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 718, plsqlParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 5144;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5082;
            this.match(plsqlParser.TIMESTAMP);
            this.state = 5085;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.NATIONAL_CHAR_STRING_LIT:
            case plsqlParser.CHAR_STRING:
                this.state = 5083;
                this.quoted_string();
                break;
            case plsqlParser.BINDVAR:
            case plsqlParser.COLON:
                this.state = 5084;
                this.bind_variable();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5091;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,663,this._ctx);
            if(la_===1) {
                this.state = 5087;
                this.match(plsqlParser.AT);
                this.state = 5088;
                this.match(plsqlParser.TIME);
                this.state = 5089;
                this.match(plsqlParser.ZONE);
                this.state = 5090;
                this.quoted_string();

            }
            break;
        case plsqlParser.INTERVAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5093;
            this.match(plsqlParser.INTERVAL);
            this.state = 5097;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case plsqlParser.NATIONAL_CHAR_STRING_LIT:
            case plsqlParser.CHAR_STRING:
                this.state = 5094;
                this.quoted_string();
                break;
            case plsqlParser.BINDVAR:
            case plsqlParser.COLON:
                this.state = 5095;
                this.bind_variable();
                break;
            case plsqlParser.A_LETTER:
            case plsqlParser.ADD:
            case plsqlParser.AFTER:
            case plsqlParser.AGENT:
            case plsqlParser.AGGREGATE:
            case plsqlParser.ANALYZE:
            case plsqlParser.ARRAY:
            case plsqlParser.ASSOCIATE:
            case plsqlParser.AT:
            case plsqlParser.ATTRIBUTE:
            case plsqlParser.AUDIT:
            case plsqlParser.AUTHID:
            case plsqlParser.AUTO:
            case plsqlParser.AUTOMATIC:
            case plsqlParser.AUTONOMOUS_TRANSACTION:
            case plsqlParser.BATCH:
            case plsqlParser.BEFORE:
            case plsqlParser.BFILE:
            case plsqlParser.BINARY_DOUBLE:
            case plsqlParser.BINARY_FLOAT:
            case plsqlParser.BINARY_INTEGER:
            case plsqlParser.BLOB:
            case plsqlParser.BLOCK:
            case plsqlParser.BODY:
            case plsqlParser.BOOLEAN:
            case plsqlParser.BOTH:
            case plsqlParser.BULK:
            case plsqlParser.BYTE:
            case plsqlParser.C_LETTER:
            case plsqlParser.CALL:
            case plsqlParser.CANONICAL:
            case plsqlParser.CASCADE:
            case plsqlParser.CAST:
            case plsqlParser.CHAR:
            case plsqlParser.CHAR_CS:
            case plsqlParser.CHARACTER:
            case plsqlParser.CHR:
            case plsqlParser.CLOB:
            case plsqlParser.CLOSE:
            case plsqlParser.CLUSTER:
            case plsqlParser.COLLECT:
            case plsqlParser.COLUMNS:
            case plsqlParser.COMMENT:
            case plsqlParser.COMMIT:
            case plsqlParser.COMMITTED:
            case plsqlParser.COMPATIBILITY:
            case plsqlParser.COMPILE:
            case plsqlParser.COMPOUND:
            case plsqlParser.CONSTANT:
            case plsqlParser.CONSTRAINT:
            case plsqlParser.CONSTRAINTS:
            case plsqlParser.CONSTRUCTOR:
            case plsqlParser.CONTENT:
            case plsqlParser.CONTEXT:
            case plsqlParser.CONTINUE:
            case plsqlParser.CONVERT:
            case plsqlParser.CORRUPT_XID:
            case plsqlParser.CORRUPT_XID_ALL:
            case plsqlParser.COST:
            case plsqlParser.COUNT:
            case plsqlParser.CROSS:
            case plsqlParser.CUBE:
            case plsqlParser.CURRENT_USER:
            case plsqlParser.CURSOR:
            case plsqlParser.CUSTOMDATUM:
            case plsqlParser.CYCLE:
            case plsqlParser.DATA:
            case plsqlParser.DATABASE:
            case plsqlParser.DAY:
            case plsqlParser.DB_ROLE_CHANGE:
            case plsqlParser.DBTIMEZONE:
            case plsqlParser.DDL:
            case plsqlParser.DEBUG:
            case plsqlParser.DEC:
            case plsqlParser.DECIMAL:
            case plsqlParser.DECOMPOSE:
            case plsqlParser.DECREMENT:
            case plsqlParser.DEFAULTS:
            case plsqlParser.DEFERRED:
            case plsqlParser.DEFINER:
            case plsqlParser.DETERMINISTIC:
            case plsqlParser.DIMENSION:
            case plsqlParser.DISABLE:
            case plsqlParser.DISASSOCIATE:
            case plsqlParser.DOCUMENT:
            case plsqlParser.DOUBLE:
            case plsqlParser.DSINTERVAL_UNCONSTRAINED:
            case plsqlParser.EACH:
            case plsqlParser.ELEMENT:
            case plsqlParser.EMPTY:
            case plsqlParser.ENABLE:
            case plsqlParser.ENCODING:
            case plsqlParser.ENTITYESCAPING:
            case plsqlParser.ERR:
            case plsqlParser.ERRORS:
            case plsqlParser.ESCAPE:
            case plsqlParser.EVALNAME:
            case plsqlParser.EXCEPTION:
            case plsqlParser.EXCEPTION_INIT:
            case plsqlParser.EXCEPTIONS:
            case plsqlParser.EXCLUDE:
            case plsqlParser.EXECUTE:
            case plsqlParser.EXIT:
            case plsqlParser.EXPLAIN:
            case plsqlParser.EXTERNAL:
            case plsqlParser.EXTRACT:
            case plsqlParser.FAILURE:
            case plsqlParser.FINAL:
            case plsqlParser.FIRST:
            case plsqlParser.FIRST_VALUE:
            case plsqlParser.FLOAT:
            case plsqlParser.FOLLOWING:
            case plsqlParser.FOLLOWS:
            case plsqlParser.FORALL:
            case plsqlParser.FORCE:
            case plsqlParser.FULL:
            case plsqlParser.FUNCTION:
            case plsqlParser.GROUPING:
            case plsqlParser.HASH:
            case plsqlParser.HIDE:
            case plsqlParser.HOUR:
            case plsqlParser.IGNORE:
            case plsqlParser.IMMEDIATE:
            case plsqlParser.INCLUDE:
            case plsqlParser.INCLUDING:
            case plsqlParser.INCREMENT:
            case plsqlParser.INDENT:
            case plsqlParser.INDEXED:
            case plsqlParser.INDICATOR:
            case plsqlParser.INDICES:
            case plsqlParser.INFINITE:
            case plsqlParser.INLINE:
            case plsqlParser.INNER:
            case plsqlParser.INOUT:
            case plsqlParser.INSTANTIABLE:
            case plsqlParser.INSTEAD:
            case plsqlParser.INT:
            case plsqlParser.INTEGER:
            case plsqlParser.INTERVAL:
            case plsqlParser.INVALIDATE:
            case plsqlParser.ISOLATION:
            case plsqlParser.ITERATE:
            case plsqlParser.JAVA:
            case plsqlParser.JOIN:
            case plsqlParser.KEEP:
            case plsqlParser.LANGUAGE:
            case plsqlParser.LAST:
            case plsqlParser.LAST_VALUE:
            case plsqlParser.LEADING:
            case plsqlParser.LEFT:
            case plsqlParser.LEVEL:
            case plsqlParser.LIBRARY:
            case plsqlParser.LIKE2:
            case plsqlParser.LIKE4:
            case plsqlParser.LIKEC:
            case plsqlParser.LIMIT:
            case plsqlParser.LOCAL:
            case plsqlParser.LOCKED:
            case plsqlParser.LOG:
            case plsqlParser.LOGOFF:
            case plsqlParser.LOGON:
            case plsqlParser.LONG:
            case plsqlParser.LOOP:
            case plsqlParser.MAIN:
            case plsqlParser.MAP:
            case plsqlParser.MATCHED:
            case plsqlParser.MAXVALUE:
            case plsqlParser.MEASURES:
            case plsqlParser.MEMBER:
            case plsqlParser.MERGE:
            case plsqlParser.MINUTE:
            case plsqlParser.MINVALUE:
            case plsqlParser.MLSLABEL:
            case plsqlParser.MODEL:
            case plsqlParser.MODIFY:
            case plsqlParser.MONTH:
            case plsqlParser.MULTISET:
            case plsqlParser.NAME:
            case plsqlParser.NAN:
            case plsqlParser.NATURAL:
            case plsqlParser.NATURALN:
            case plsqlParser.NAV:
            case plsqlParser.NCHAR:
            case plsqlParser.NCHAR_CS:
            case plsqlParser.NCLOB:
            case plsqlParser.NESTED:
            case plsqlParser.NEW:
            case plsqlParser.NO:
            case plsqlParser.NOAUDIT:
            case plsqlParser.NOCOPY:
            case plsqlParser.NOCYCLE:
            case plsqlParser.NOENTITYESCAPING:
            case plsqlParser.NONE:
            case plsqlParser.NOSCHEMACHECK:
            case plsqlParser.NULLS:
            case plsqlParser.NUMBER:
            case plsqlParser.NUMERIC:
            case plsqlParser.NVARCHAR2:
            case plsqlParser.OBJECT:
            case plsqlParser.OFF:
            case plsqlParser.OID:
            case plsqlParser.OLD:
            case plsqlParser.ONLY:
            case plsqlParser.OPEN:
            case plsqlParser.ORADATA:
            case plsqlParser.ORDINALITY:
            case plsqlParser.OSERROR:
            case plsqlParser.OUT:
            case plsqlParser.OUTER:
            case plsqlParser.OVER:
            case plsqlParser.OVERRIDING:
            case plsqlParser.PACKAGE:
            case plsqlParser.PARALLEL_ENABLE:
            case plsqlParser.PARAMETERS:
            case plsqlParser.PARENT:
            case plsqlParser.PARTITION:
            case plsqlParser.PASSING:
            case plsqlParser.PATH:
            case plsqlParser.PIPELINED:
            case plsqlParser.PLAN:
            case plsqlParser.PLS_INTEGER:
            case plsqlParser.POSITIVE:
            case plsqlParser.POSITIVEN:
            case plsqlParser.PRAGMA:
            case plsqlParser.PRECEDING:
            case plsqlParser.PRECISION:
            case plsqlParser.PRESENT:
            case plsqlParser.RAISE:
            case plsqlParser.RANGE:
            case plsqlParser.RAW:
            case plsqlParser.READ:
            case plsqlParser.REAL:
            case plsqlParser.RECORD:
            case plsqlParser.REF:
            case plsqlParser.REFERENCE:
            case plsqlParser.REFERENCING:
            case plsqlParser.REJECT:
            case plsqlParser.RELIES_ON:
            case plsqlParser.RENAME:
            case plsqlParser.REPLACE:
            case plsqlParser.RESPECT:
            case plsqlParser.RESTRICT_REFERENCES:
            case plsqlParser.RESULT:
            case plsqlParser.RESULT_CACHE:
            case plsqlParser.RETURN:
            case plsqlParser.RETURNING:
            case plsqlParser.REUSE:
            case plsqlParser.REVERSE:
            case plsqlParser.RIGHT:
            case plsqlParser.ROLLBACK:
            case plsqlParser.ROLLUP:
            case plsqlParser.ROW:
            case plsqlParser.ROWID:
            case plsqlParser.ROWS:
            case plsqlParser.RULES:
            case plsqlParser.SAMPLE:
            case plsqlParser.SAVE:
            case plsqlParser.SAVEPOINT:
            case plsqlParser.SCHEMA:
            case plsqlParser.SCHEMACHECK:
            case plsqlParser.SCN:
            case plsqlParser.SECOND:
            case plsqlParser.SEED:
            case plsqlParser.SEGMENT:
            case plsqlParser.SELF:
            case plsqlParser.SEQUENTIAL:
            case plsqlParser.SERIALIZABLE:
            case plsqlParser.SERIALLY_REUSABLE:
            case plsqlParser.SERVERERROR:
            case plsqlParser.SESSIONTIMEZONE:
            case plsqlParser.SET:
            case plsqlParser.SETS:
            case plsqlParser.SETTINGS:
            case plsqlParser.SHOW:
            case plsqlParser.SHUTDOWN:
            case plsqlParser.SIBLINGS:
            case plsqlParser.SIGNTYPE:
            case plsqlParser.SIMPLE_INTEGER:
            case plsqlParser.SINGLE:
            case plsqlParser.SKIP_:
            case plsqlParser.SMALLINT:
            case plsqlParser.SNAPSHOT:
            case plsqlParser.SOME:
            case plsqlParser.SPECIFICATION:
            case plsqlParser.SQLDATA:
            case plsqlParser.SQLERROR:
            case plsqlParser.STANDALONE:
            case plsqlParser.STARTUP:
            case plsqlParser.STATEMENT:
            case plsqlParser.STATEMENT_ID:
            case plsqlParser.STATIC:
            case plsqlParser.STATISTICS:
            case plsqlParser.STRING:
            case plsqlParser.SUBMULTISET:
            case plsqlParser.SUBPARTITION:
            case plsqlParser.SUBSTITUTABLE:
            case plsqlParser.SUBTYPE:
            case plsqlParser.SUCCESS:
            case plsqlParser.SUSPEND:
            case plsqlParser.TIME:
            case plsqlParser.TIMESTAMP:
            case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case plsqlParser.TIMESTAMP_UNCONSTRAINED:
            case plsqlParser.TIMEZONE_ABBR:
            case plsqlParser.TIMEZONE_HOUR:
            case plsqlParser.TIMEZONE_MINUTE:
            case plsqlParser.TIMEZONE_REGION:
            case plsqlParser.TRAILING:
            case plsqlParser.TRANSACTION:
            case plsqlParser.TRANSLATE:
            case plsqlParser.TREAT:
            case plsqlParser.TRIGGER:
            case plsqlParser.TRIM:
            case plsqlParser.TRUNCATE:
            case plsqlParser.TYPE:
            case plsqlParser.UNBOUNDED:
            case plsqlParser.UNDER:
            case plsqlParser.UNLIMITED:
            case plsqlParser.UNTIL:
            case plsqlParser.UPDATED:
            case plsqlParser.UPSERT:
            case plsqlParser.UROWID:
            case plsqlParser.USE:
            case plsqlParser.VALIDATE:
            case plsqlParser.VALUE:
            case plsqlParser.VARCHAR:
            case plsqlParser.VARCHAR2:
            case plsqlParser.VARIABLE:
            case plsqlParser.VARRAY:
            case plsqlParser.VARYING:
            case plsqlParser.VERSION:
            case plsqlParser.VERSIONS:
            case plsqlParser.WAIT:
            case plsqlParser.WARNING:
            case plsqlParser.WELLFORMED:
            case plsqlParser.WHENEVER:
            case plsqlParser.WHILE:
            case plsqlParser.WITHIN:
            case plsqlParser.WORK:
            case plsqlParser.WRITE:
            case plsqlParser.XML:
            case plsqlParser.XMLAGG:
            case plsqlParser.XMLATTRIBUTES:
            case plsqlParser.XMLCAST:
            case plsqlParser.XMLCOLATTVAL:
            case plsqlParser.XMLELEMENT:
            case plsqlParser.XMLEXISTS:
            case plsqlParser.XMLFOREST:
            case plsqlParser.XMLNAMESPACES:
            case plsqlParser.XMLPARSE:
            case plsqlParser.XMLPI:
            case plsqlParser.XMLQUERY:
            case plsqlParser.XMLROOT:
            case plsqlParser.XMLSERIALIZE:
            case plsqlParser.XMLTABLE:
            case plsqlParser.YEAR:
            case plsqlParser.YES:
            case plsqlParser.YMINTERVAL_UNCONSTRAINED:
            case plsqlParser.ZONE:
            case plsqlParser.PREDICTION:
            case plsqlParser.PREDICTION_BOUNDS:
            case plsqlParser.PREDICTION_COST:
            case plsqlParser.PREDICTION_DETAILS:
            case plsqlParser.PREDICTION_PROBABILITY:
            case plsqlParser.PREDICTION_SET:
            case plsqlParser.CUME_DIST:
            case plsqlParser.DENSE_RANK:
            case plsqlParser.LISTAGG:
            case plsqlParser.PERCENT_RANK:
            case plsqlParser.PERCENTILE_CONT:
            case plsqlParser.PERCENTILE_DISC:
            case plsqlParser.RANK:
            case plsqlParser.AVG:
            case plsqlParser.CORR:
            case plsqlParser.LAG:
            case plsqlParser.LEAD:
            case plsqlParser.MAX:
            case plsqlParser.MEDIAN:
            case plsqlParser.MIN:
            case plsqlParser.NTILE:
            case plsqlParser.RATIO_TO_REPORT:
            case plsqlParser.ROW_NUMBER:
            case plsqlParser.SUM:
            case plsqlParser.VARIANCE:
            case plsqlParser.REGR_:
            case plsqlParser.STDDEV:
            case plsqlParser.VAR_:
            case plsqlParser.COVAR_:
            case plsqlParser.DELIMITED_ID:
            case plsqlParser.REGULAR_ID:
                this.state = 5096;
                this.general_element();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5099;
            _la = this._input.LA(1);
            if(!(_la===plsqlParser.DAY || _la===plsqlParser.HOUR || _la===plsqlParser.MINUTE || _la===plsqlParser.SECOND)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5113;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,668,this._ctx);
            if(la_===1) {
                this.state = 5100;
                this.match(plsqlParser.LEFT_PAREN);
                this.state = 5103;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case plsqlParser.UNSIGNED_INTEGER:
                    this.state = 5101;
                    this.match(plsqlParser.UNSIGNED_INTEGER);
                    break;
                case plsqlParser.BINDVAR:
                case plsqlParser.COLON:
                    this.state = 5102;
                    this.bind_variable();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 5110;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===plsqlParser.COMMA) {
                    this.state = 5105;
                    this.match(plsqlParser.COMMA);
                    this.state = 5108;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case plsqlParser.UNSIGNED_INTEGER:
                        this.state = 5106;
                        this.match(plsqlParser.UNSIGNED_INTEGER);
                        break;
                    case plsqlParser.BINDVAR:
                    case plsqlParser.COLON:
                        this.state = 5107;
                        this.bind_variable();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                }

                this.state = 5112;
                this.match(plsqlParser.RIGHT_PAREN);

            }
            this.state = 5130;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,672,this._ctx);
            if(la_===1) {
                this.state = 5115;
                this.match(plsqlParser.TO);
                this.state = 5128;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case plsqlParser.DAY:
                    this.state = 5116;
                    this.match(plsqlParser.DAY);
                    break;
                case plsqlParser.HOUR:
                    this.state = 5117;
                    this.match(plsqlParser.HOUR);
                    break;
                case plsqlParser.MINUTE:
                    this.state = 5118;
                    this.match(plsqlParser.MINUTE);
                    break;
                case plsqlParser.SECOND:
                    this.state = 5119;
                    this.match(plsqlParser.SECOND);
                    this.state = 5126;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,670,this._ctx);
                    if(la_===1) {
                        this.state = 5120;
                        this.match(plsqlParser.LEFT_PAREN);
                        this.state = 5123;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case plsqlParser.UNSIGNED_INTEGER:
                            this.state = 5121;
                            this.match(plsqlParser.UNSIGNED_INTEGER);
                            break;
                        case plsqlParser.BINDVAR:
                        case plsqlParser.COLON:
                            this.state = 5122;
                            this.bind_variable();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        this.state = 5125;
                        this.match(plsqlParser.RIGHT_PAREN);

                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }

            }
            break;
        case plsqlParser.UNSIGNED_INTEGER:
        case plsqlParser.APPROXIMATE_NUM_LIT:
            this.enterOuterAlt(localctx, 3);
            this.state = 5132;
            this.numeric();
            break;
        case plsqlParser.DATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 5133;
            this.match(plsqlParser.DATE);
            this.state = 5134;
            this.quoted_string();
            break;
        case plsqlParser.NATIONAL_CHAR_STRING_LIT:
        case plsqlParser.CHAR_STRING:
            this.enterOuterAlt(localctx, 5);
            this.state = 5135;
            this.quoted_string();
            break;
        case plsqlParser.NULL:
            this.enterOuterAlt(localctx, 6);
            this.state = 5136;
            this.match(plsqlParser.NULL);
            break;
        case plsqlParser.TRUE:
            this.enterOuterAlt(localctx, 7);
            this.state = 5137;
            this.match(plsqlParser.TRUE);
            break;
        case plsqlParser.FALSE:
            this.enterOuterAlt(localctx, 8);
            this.state = 5138;
            this.match(plsqlParser.FALSE);
            break;
        case plsqlParser.DBTIMEZONE:
            this.enterOuterAlt(localctx, 9);
            this.state = 5139;
            this.match(plsqlParser.DBTIMEZONE);
            break;
        case plsqlParser.SESSIONTIMEZONE:
            this.enterOuterAlt(localctx, 10);
            this.state = 5140;
            this.match(plsqlParser.SESSIONTIMEZONE);
            break;
        case plsqlParser.MINVALUE:
            this.enterOuterAlt(localctx, 11);
            this.state = 5141;
            this.match(plsqlParser.MINVALUE);
            break;
        case plsqlParser.MAXVALUE:
            this.enterOuterAlt(localctx, 12);
            this.state = 5142;
            this.match(plsqlParser.MAXVALUE);
            break;
        case plsqlParser.DEFAULT:
            this.enterOuterAlt(localctx, 13);
            this.state = 5143;
            this.match(plsqlParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_numeric;
    return this;
}

NumericContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericContext.prototype.constructor = NumericContext;

NumericContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(plsqlParser.UNSIGNED_INTEGER, 0);
};

NumericContext.prototype.APPROXIMATE_NUM_LIT = function() {
    return this.getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0);
};

NumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNumeric(this);
	}
};

NumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNumeric(this);
	}
};




plsqlParser.NumericContext = NumericContext;

plsqlParser.prototype.numeric = function() {

    var localctx = new NumericContext(this, this._ctx, this.state);
    this.enterRule(localctx, 720, plsqlParser.RULE_numeric);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5146;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.UNSIGNED_INTEGER || _la===plsqlParser.APPROXIMATE_NUM_LIT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_negativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_numeric_negative;
    return this;
}

Numeric_negativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_negativeContext.prototype.constructor = Numeric_negativeContext;

Numeric_negativeContext.prototype.MINUS_SIGN = function() {
    return this.getToken(plsqlParser.MINUS_SIGN, 0);
};

Numeric_negativeContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

Numeric_negativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNumeric_negative(this);
	}
};

Numeric_negativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNumeric_negative(this);
	}
};




plsqlParser.Numeric_negativeContext = Numeric_negativeContext;

plsqlParser.prototype.numeric_negative = function() {

    var localctx = new Numeric_negativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 722, plsqlParser.RULE_numeric_negative);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5148;
        this.match(plsqlParser.MINUS_SIGN);
        this.state = 5149;
        this.numeric();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quoted_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_quoted_string;
    return this;
}

Quoted_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quoted_stringContext.prototype.constructor = Quoted_stringContext;

Quoted_stringContext.prototype.CHAR_STRING = function() {
    return this.getToken(plsqlParser.CHAR_STRING, 0);
};

Quoted_stringContext.prototype.NATIONAL_CHAR_STRING_LIT = function() {
    return this.getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0);
};

Quoted_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterQuoted_string(this);
	}
};

Quoted_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitQuoted_string(this);
	}
};




plsqlParser.Quoted_stringContext = Quoted_stringContext;

plsqlParser.prototype.quoted_string = function() {

    var localctx = new Quoted_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 724, plsqlParser.RULE_quoted_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5151;
        _la = this._input.LA(1);
        if(!(_la===plsqlParser.NATIONAL_CHAR_STRING_LIT || _la===plsqlParser.CHAR_STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function R_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_r_id;
    return this;
}

R_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
R_idContext.prototype.constructor = R_idContext;

R_idContext.prototype.dot_id = function() {
    return this.getTypedRuleContext(Dot_idContext,0);
};

R_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterR_id(this);
	}
};

R_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitR_id(this);
	}
};




plsqlParser.R_idContext = R_idContext;

plsqlParser.prototype.r_id = function() {

    var localctx = new R_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 726, plsqlParser.RULE_r_id);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5153;
        this.dot_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Id_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_id_expression;
    return this;
}

Id_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_expressionContext.prototype.constructor = Id_expressionContext;

Id_expressionContext.prototype.regular_id = function() {
    return this.getTypedRuleContext(Regular_idContext,0);
};

Id_expressionContext.prototype.DELIMITED_ID = function() {
    return this.getToken(plsqlParser.DELIMITED_ID, 0);
};

Id_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterId_expression(this);
	}
};

Id_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitId_expression(this);
	}
};




plsqlParser.Id_expressionContext = Id_expressionContext;

plsqlParser.prototype.id_expression = function() {

    var localctx = new Id_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 728, plsqlParser.RULE_id_expression);
    try {
        this.state = 5157;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.A_LETTER:
        case plsqlParser.ADD:
        case plsqlParser.AFTER:
        case plsqlParser.AGENT:
        case plsqlParser.AGGREGATE:
        case plsqlParser.ANALYZE:
        case plsqlParser.ARRAY:
        case plsqlParser.ASSOCIATE:
        case plsqlParser.AT:
        case plsqlParser.ATTRIBUTE:
        case plsqlParser.AUDIT:
        case plsqlParser.AUTHID:
        case plsqlParser.AUTO:
        case plsqlParser.AUTOMATIC:
        case plsqlParser.AUTONOMOUS_TRANSACTION:
        case plsqlParser.BATCH:
        case plsqlParser.BEFORE:
        case plsqlParser.BFILE:
        case plsqlParser.BINARY_DOUBLE:
        case plsqlParser.BINARY_FLOAT:
        case plsqlParser.BINARY_INTEGER:
        case plsqlParser.BLOB:
        case plsqlParser.BLOCK:
        case plsqlParser.BODY:
        case plsqlParser.BOOLEAN:
        case plsqlParser.BOTH:
        case plsqlParser.BULK:
        case plsqlParser.BYTE:
        case plsqlParser.C_LETTER:
        case plsqlParser.CALL:
        case plsqlParser.CANONICAL:
        case plsqlParser.CASCADE:
        case plsqlParser.CAST:
        case plsqlParser.CHAR:
        case plsqlParser.CHAR_CS:
        case plsqlParser.CHARACTER:
        case plsqlParser.CHR:
        case plsqlParser.CLOB:
        case plsqlParser.CLOSE:
        case plsqlParser.CLUSTER:
        case plsqlParser.COLLECT:
        case plsqlParser.COLUMNS:
        case plsqlParser.COMMENT:
        case plsqlParser.COMMIT:
        case plsqlParser.COMMITTED:
        case plsqlParser.COMPATIBILITY:
        case plsqlParser.COMPILE:
        case plsqlParser.COMPOUND:
        case plsqlParser.CONSTANT:
        case plsqlParser.CONSTRAINT:
        case plsqlParser.CONSTRAINTS:
        case plsqlParser.CONSTRUCTOR:
        case plsqlParser.CONTENT:
        case plsqlParser.CONTEXT:
        case plsqlParser.CONTINUE:
        case plsqlParser.CONVERT:
        case plsqlParser.CORRUPT_XID:
        case plsqlParser.CORRUPT_XID_ALL:
        case plsqlParser.COST:
        case plsqlParser.COUNT:
        case plsqlParser.CROSS:
        case plsqlParser.CUBE:
        case plsqlParser.CURRENT_USER:
        case plsqlParser.CURSOR:
        case plsqlParser.CUSTOMDATUM:
        case plsqlParser.CYCLE:
        case plsqlParser.DATA:
        case plsqlParser.DATABASE:
        case plsqlParser.DAY:
        case plsqlParser.DB_ROLE_CHANGE:
        case plsqlParser.DBTIMEZONE:
        case plsqlParser.DDL:
        case plsqlParser.DEBUG:
        case plsqlParser.DEC:
        case plsqlParser.DECIMAL:
        case plsqlParser.DECOMPOSE:
        case plsqlParser.DECREMENT:
        case plsqlParser.DEFAULTS:
        case plsqlParser.DEFERRED:
        case plsqlParser.DEFINER:
        case plsqlParser.DETERMINISTIC:
        case plsqlParser.DIMENSION:
        case plsqlParser.DISABLE:
        case plsqlParser.DISASSOCIATE:
        case plsqlParser.DOCUMENT:
        case plsqlParser.DOUBLE:
        case plsqlParser.DSINTERVAL_UNCONSTRAINED:
        case plsqlParser.EACH:
        case plsqlParser.ELEMENT:
        case plsqlParser.EMPTY:
        case plsqlParser.ENABLE:
        case plsqlParser.ENCODING:
        case plsqlParser.ENTITYESCAPING:
        case plsqlParser.ERR:
        case plsqlParser.ERRORS:
        case plsqlParser.ESCAPE:
        case plsqlParser.EVALNAME:
        case plsqlParser.EXCEPTION:
        case plsqlParser.EXCEPTION_INIT:
        case plsqlParser.EXCEPTIONS:
        case plsqlParser.EXCLUDE:
        case plsqlParser.EXECUTE:
        case plsqlParser.EXIT:
        case plsqlParser.EXPLAIN:
        case plsqlParser.EXTERNAL:
        case plsqlParser.EXTRACT:
        case plsqlParser.FAILURE:
        case plsqlParser.FINAL:
        case plsqlParser.FIRST:
        case plsqlParser.FIRST_VALUE:
        case plsqlParser.FLOAT:
        case plsqlParser.FOLLOWING:
        case plsqlParser.FOLLOWS:
        case plsqlParser.FORALL:
        case plsqlParser.FORCE:
        case plsqlParser.FULL:
        case plsqlParser.FUNCTION:
        case plsqlParser.GROUPING:
        case plsqlParser.HASH:
        case plsqlParser.HIDE:
        case plsqlParser.HOUR:
        case plsqlParser.IGNORE:
        case plsqlParser.IMMEDIATE:
        case plsqlParser.INCLUDE:
        case plsqlParser.INCLUDING:
        case plsqlParser.INCREMENT:
        case plsqlParser.INDENT:
        case plsqlParser.INDEXED:
        case plsqlParser.INDICATOR:
        case plsqlParser.INDICES:
        case plsqlParser.INFINITE:
        case plsqlParser.INLINE:
        case plsqlParser.INNER:
        case plsqlParser.INOUT:
        case plsqlParser.INSTANTIABLE:
        case plsqlParser.INSTEAD:
        case plsqlParser.INT:
        case plsqlParser.INTEGER:
        case plsqlParser.INTERVAL:
        case plsqlParser.INVALIDATE:
        case plsqlParser.ISOLATION:
        case plsqlParser.ITERATE:
        case plsqlParser.JAVA:
        case plsqlParser.JOIN:
        case plsqlParser.KEEP:
        case plsqlParser.LANGUAGE:
        case plsqlParser.LAST:
        case plsqlParser.LAST_VALUE:
        case plsqlParser.LEADING:
        case plsqlParser.LEFT:
        case plsqlParser.LEVEL:
        case plsqlParser.LIBRARY:
        case plsqlParser.LIKE2:
        case plsqlParser.LIKE4:
        case plsqlParser.LIKEC:
        case plsqlParser.LIMIT:
        case plsqlParser.LOCAL:
        case plsqlParser.LOCKED:
        case plsqlParser.LOG:
        case plsqlParser.LOGOFF:
        case plsqlParser.LOGON:
        case plsqlParser.LONG:
        case plsqlParser.LOOP:
        case plsqlParser.MAIN:
        case plsqlParser.MAP:
        case plsqlParser.MATCHED:
        case plsqlParser.MAXVALUE:
        case plsqlParser.MEASURES:
        case plsqlParser.MEMBER:
        case plsqlParser.MERGE:
        case plsqlParser.MINUTE:
        case plsqlParser.MINVALUE:
        case plsqlParser.MLSLABEL:
        case plsqlParser.MODEL:
        case plsqlParser.MODIFY:
        case plsqlParser.MONTH:
        case plsqlParser.MULTISET:
        case plsqlParser.NAME:
        case plsqlParser.NAN:
        case plsqlParser.NATURAL:
        case plsqlParser.NATURALN:
        case plsqlParser.NAV:
        case plsqlParser.NCHAR:
        case plsqlParser.NCHAR_CS:
        case plsqlParser.NCLOB:
        case plsqlParser.NESTED:
        case plsqlParser.NEW:
        case plsqlParser.NO:
        case plsqlParser.NOAUDIT:
        case plsqlParser.NOCOPY:
        case plsqlParser.NOCYCLE:
        case plsqlParser.NOENTITYESCAPING:
        case plsqlParser.NONE:
        case plsqlParser.NOSCHEMACHECK:
        case plsqlParser.NULLS:
        case plsqlParser.NUMBER:
        case plsqlParser.NUMERIC:
        case plsqlParser.NVARCHAR2:
        case plsqlParser.OBJECT:
        case plsqlParser.OFF:
        case plsqlParser.OID:
        case plsqlParser.OLD:
        case plsqlParser.ONLY:
        case plsqlParser.OPEN:
        case plsqlParser.ORADATA:
        case plsqlParser.ORDINALITY:
        case plsqlParser.OSERROR:
        case plsqlParser.OUT:
        case plsqlParser.OUTER:
        case plsqlParser.OVER:
        case plsqlParser.OVERRIDING:
        case plsqlParser.PACKAGE:
        case plsqlParser.PARALLEL_ENABLE:
        case plsqlParser.PARAMETERS:
        case plsqlParser.PARENT:
        case plsqlParser.PARTITION:
        case plsqlParser.PASSING:
        case plsqlParser.PATH:
        case plsqlParser.PIPELINED:
        case plsqlParser.PLAN:
        case plsqlParser.PLS_INTEGER:
        case plsqlParser.POSITIVE:
        case plsqlParser.POSITIVEN:
        case plsqlParser.PRAGMA:
        case plsqlParser.PRECEDING:
        case plsqlParser.PRECISION:
        case plsqlParser.PRESENT:
        case plsqlParser.RAISE:
        case plsqlParser.RANGE:
        case plsqlParser.RAW:
        case plsqlParser.READ:
        case plsqlParser.REAL:
        case plsqlParser.RECORD:
        case plsqlParser.REF:
        case plsqlParser.REFERENCE:
        case plsqlParser.REFERENCING:
        case plsqlParser.REJECT:
        case plsqlParser.RELIES_ON:
        case plsqlParser.RENAME:
        case plsqlParser.REPLACE:
        case plsqlParser.RESPECT:
        case plsqlParser.RESTRICT_REFERENCES:
        case plsqlParser.RESULT:
        case plsqlParser.RESULT_CACHE:
        case plsqlParser.RETURN:
        case plsqlParser.RETURNING:
        case plsqlParser.REUSE:
        case plsqlParser.REVERSE:
        case plsqlParser.RIGHT:
        case plsqlParser.ROLLBACK:
        case plsqlParser.ROLLUP:
        case plsqlParser.ROW:
        case plsqlParser.ROWID:
        case plsqlParser.ROWS:
        case plsqlParser.RULES:
        case plsqlParser.SAMPLE:
        case plsqlParser.SAVE:
        case plsqlParser.SAVEPOINT:
        case plsqlParser.SCHEMA:
        case plsqlParser.SCHEMACHECK:
        case plsqlParser.SCN:
        case plsqlParser.SECOND:
        case plsqlParser.SEED:
        case plsqlParser.SEGMENT:
        case plsqlParser.SELF:
        case plsqlParser.SEQUENTIAL:
        case plsqlParser.SERIALIZABLE:
        case plsqlParser.SERIALLY_REUSABLE:
        case plsqlParser.SERVERERROR:
        case plsqlParser.SESSIONTIMEZONE:
        case plsqlParser.SET:
        case plsqlParser.SETS:
        case plsqlParser.SETTINGS:
        case plsqlParser.SHOW:
        case plsqlParser.SHUTDOWN:
        case plsqlParser.SIBLINGS:
        case plsqlParser.SIGNTYPE:
        case plsqlParser.SIMPLE_INTEGER:
        case plsqlParser.SINGLE:
        case plsqlParser.SKIP_:
        case plsqlParser.SMALLINT:
        case plsqlParser.SNAPSHOT:
        case plsqlParser.SOME:
        case plsqlParser.SPECIFICATION:
        case plsqlParser.SQLDATA:
        case plsqlParser.SQLERROR:
        case plsqlParser.STANDALONE:
        case plsqlParser.STARTUP:
        case plsqlParser.STATEMENT:
        case plsqlParser.STATEMENT_ID:
        case plsqlParser.STATIC:
        case plsqlParser.STATISTICS:
        case plsqlParser.STRING:
        case plsqlParser.SUBMULTISET:
        case plsqlParser.SUBPARTITION:
        case plsqlParser.SUBSTITUTABLE:
        case plsqlParser.SUBTYPE:
        case plsqlParser.SUCCESS:
        case plsqlParser.SUSPEND:
        case plsqlParser.TIME:
        case plsqlParser.TIMESTAMP:
        case plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case plsqlParser.TIMESTAMP_UNCONSTRAINED:
        case plsqlParser.TIMEZONE_ABBR:
        case plsqlParser.TIMEZONE_HOUR:
        case plsqlParser.TIMEZONE_MINUTE:
        case plsqlParser.TIMEZONE_REGION:
        case plsqlParser.TRAILING:
        case plsqlParser.TRANSACTION:
        case plsqlParser.TRANSLATE:
        case plsqlParser.TREAT:
        case plsqlParser.TRIGGER:
        case plsqlParser.TRIM:
        case plsqlParser.TRUNCATE:
        case plsqlParser.TYPE:
        case plsqlParser.UNBOUNDED:
        case plsqlParser.UNDER:
        case plsqlParser.UNLIMITED:
        case plsqlParser.UNTIL:
        case plsqlParser.UPDATED:
        case plsqlParser.UPSERT:
        case plsqlParser.UROWID:
        case plsqlParser.USE:
        case plsqlParser.VALIDATE:
        case plsqlParser.VALUE:
        case plsqlParser.VARCHAR:
        case plsqlParser.VARCHAR2:
        case plsqlParser.VARIABLE:
        case plsqlParser.VARRAY:
        case plsqlParser.VARYING:
        case plsqlParser.VERSION:
        case plsqlParser.VERSIONS:
        case plsqlParser.WAIT:
        case plsqlParser.WARNING:
        case plsqlParser.WELLFORMED:
        case plsqlParser.WHENEVER:
        case plsqlParser.WHILE:
        case plsqlParser.WITHIN:
        case plsqlParser.WORK:
        case plsqlParser.WRITE:
        case plsqlParser.XML:
        case plsqlParser.XMLAGG:
        case plsqlParser.XMLATTRIBUTES:
        case plsqlParser.XMLCAST:
        case plsqlParser.XMLCOLATTVAL:
        case plsqlParser.XMLELEMENT:
        case plsqlParser.XMLEXISTS:
        case plsqlParser.XMLFOREST:
        case plsqlParser.XMLNAMESPACES:
        case plsqlParser.XMLPARSE:
        case plsqlParser.XMLPI:
        case plsqlParser.XMLQUERY:
        case plsqlParser.XMLROOT:
        case plsqlParser.XMLSERIALIZE:
        case plsqlParser.XMLTABLE:
        case plsqlParser.YEAR:
        case plsqlParser.YES:
        case plsqlParser.YMINTERVAL_UNCONSTRAINED:
        case plsqlParser.ZONE:
        case plsqlParser.PREDICTION:
        case plsqlParser.PREDICTION_BOUNDS:
        case plsqlParser.PREDICTION_COST:
        case plsqlParser.PREDICTION_DETAILS:
        case plsqlParser.PREDICTION_PROBABILITY:
        case plsqlParser.PREDICTION_SET:
        case plsqlParser.CUME_DIST:
        case plsqlParser.DENSE_RANK:
        case plsqlParser.LISTAGG:
        case plsqlParser.PERCENT_RANK:
        case plsqlParser.PERCENTILE_CONT:
        case plsqlParser.PERCENTILE_DISC:
        case plsqlParser.RANK:
        case plsqlParser.AVG:
        case plsqlParser.CORR:
        case plsqlParser.LAG:
        case plsqlParser.LEAD:
        case plsqlParser.MAX:
        case plsqlParser.MEDIAN:
        case plsqlParser.MIN:
        case plsqlParser.NTILE:
        case plsqlParser.RATIO_TO_REPORT:
        case plsqlParser.ROW_NUMBER:
        case plsqlParser.SUM:
        case plsqlParser.VARIANCE:
        case plsqlParser.REGR_:
        case plsqlParser.STDDEV:
        case plsqlParser.VAR_:
        case plsqlParser.COVAR_:
        case plsqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5155;
            this.regular_id();
            break;
        case plsqlParser.DELIMITED_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 5156;
            this.match(plsqlParser.DELIMITED_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Not_equal_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_not_equal_op;
    return this;
}

Not_equal_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_equal_opContext.prototype.constructor = Not_equal_opContext;

Not_equal_opContext.prototype.NOT_EQUAL_OP = function() {
    return this.getToken(plsqlParser.NOT_EQUAL_OP, 0);
};

Not_equal_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterNot_equal_op(this);
	}
};

Not_equal_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitNot_equal_op(this);
	}
};




plsqlParser.Not_equal_opContext = Not_equal_opContext;

plsqlParser.prototype.not_equal_op = function() {

    var localctx = new Not_equal_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 730, plsqlParser.RULE_not_equal_op);
    try {
        this.state = 5166;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.NOT_EQUAL_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5159;
            this.match(plsqlParser.NOT_EQUAL_OP);
            break;
        case plsqlParser.LESS_THAN_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 5160;
            this.match(plsqlParser.LESS_THAN_OP);
            this.state = 5161;
            this.match(plsqlParser.GREATER_THAN_OP);
            break;
        case plsqlParser.EXCLAMATION_OPERATOR_PART:
            this.enterOuterAlt(localctx, 3);
            this.state = 5162;
            this.match(plsqlParser.EXCLAMATION_OPERATOR_PART);
            this.state = 5163;
            this.match(plsqlParser.EQUALS_OP);
            break;
        case plsqlParser.CARRET_OPERATOR_PART:
            this.enterOuterAlt(localctx, 4);
            this.state = 5164;
            this.match(plsqlParser.CARRET_OPERATOR_PART);
            this.state = 5165;
            this.match(plsqlParser.EQUALS_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Greater_than_or_equals_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_greater_than_or_equals_op;
    return this;
}

Greater_than_or_equals_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Greater_than_or_equals_opContext.prototype.constructor = Greater_than_or_equals_opContext;


Greater_than_or_equals_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterGreater_than_or_equals_op(this);
	}
};

Greater_than_or_equals_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitGreater_than_or_equals_op(this);
	}
};




plsqlParser.Greater_than_or_equals_opContext = Greater_than_or_equals_opContext;

plsqlParser.prototype.greater_than_or_equals_op = function() {

    var localctx = new Greater_than_or_equals_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 732, plsqlParser.RULE_greater_than_or_equals_op);
    try {
        this.state = 5171;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.GREATER_THAN_OR_EQUALS_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5168;
            this.match(plsqlParser.GREATER_THAN_OR_EQUALS_OP);
            break;
        case plsqlParser.GREATER_THAN_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 5169;
            this.match(plsqlParser.GREATER_THAN_OP);
            this.state = 5170;
            this.match(plsqlParser.EQUALS_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Less_than_or_equals_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_less_than_or_equals_op;
    return this;
}

Less_than_or_equals_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Less_than_or_equals_opContext.prototype.constructor = Less_than_or_equals_opContext;


Less_than_or_equals_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterLess_than_or_equals_op(this);
	}
};

Less_than_or_equals_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitLess_than_or_equals_op(this);
	}
};




plsqlParser.Less_than_or_equals_opContext = Less_than_or_equals_opContext;

plsqlParser.prototype.less_than_or_equals_op = function() {

    var localctx = new Less_than_or_equals_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 734, plsqlParser.RULE_less_than_or_equals_op);
    try {
        this.state = 5176;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.LESS_THAN_OR_EQUALS_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5173;
            this.match(plsqlParser.LESS_THAN_OR_EQUALS_OP);
            break;
        case plsqlParser.LESS_THAN_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 5174;
            this.match(plsqlParser.LESS_THAN_OP);
            this.state = 5175;
            this.match(plsqlParser.EQUALS_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concatenation_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_concatenation_op;
    return this;
}

Concatenation_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concatenation_opContext.prototype.constructor = Concatenation_opContext;


Concatenation_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterConcatenation_op(this);
	}
};

Concatenation_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitConcatenation_op(this);
	}
};




plsqlParser.Concatenation_opContext = Concatenation_opContext;

plsqlParser.prototype.concatenation_op = function() {

    var localctx = new Concatenation_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 736, plsqlParser.RULE_concatenation_op);
    try {
        this.state = 5181;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case plsqlParser.CONCATENATION_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5178;
            this.match(plsqlParser.CONCATENATION_OP);
            break;
        case plsqlParser.VERTICAL_BAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 5179;
            this.match(plsqlParser.VERTICAL_BAR);
            this.state = 5180;
            this.match(plsqlParser.VERTICAL_BAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_signContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_outer_join_sign;
    return this;
}

Outer_join_signContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_signContext.prototype.constructor = Outer_join_signContext;


Outer_join_signContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterOuter_join_sign(this);
	}
};

Outer_join_signContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitOuter_join_sign(this);
	}
};




plsqlParser.Outer_join_signContext = Outer_join_signContext;

plsqlParser.prototype.outer_join_sign = function() {

    var localctx = new Outer_join_signContext(this, this._ctx, this.state);
    this.enterRule(localctx, 738, plsqlParser.RULE_outer_join_sign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5183;
        this.match(plsqlParser.LEFT_PAREN);
        this.state = 5184;
        this.match(plsqlParser.PLUS_SIGN);
        this.state = 5185;
        this.match(plsqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Regular_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = plsqlParser.RULE_regular_id;
    return this;
}

Regular_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Regular_idContext.prototype.constructor = Regular_idContext;

Regular_idContext.prototype.REGULAR_ID = function() {
    return this.getToken(plsqlParser.REGULAR_ID, 0);
};

Regular_idContext.prototype.A_LETTER = function() {
    return this.getToken(plsqlParser.A_LETTER, 0);
};

Regular_idContext.prototype.ADD = function() {
    return this.getToken(plsqlParser.ADD, 0);
};

Regular_idContext.prototype.AFTER = function() {
    return this.getToken(plsqlParser.AFTER, 0);
};

Regular_idContext.prototype.AGENT = function() {
    return this.getToken(plsqlParser.AGENT, 0);
};

Regular_idContext.prototype.AGGREGATE = function() {
    return this.getToken(plsqlParser.AGGREGATE, 0);
};

Regular_idContext.prototype.ANALYZE = function() {
    return this.getToken(plsqlParser.ANALYZE, 0);
};

Regular_idContext.prototype.ARRAY = function() {
    return this.getToken(plsqlParser.ARRAY, 0);
};

Regular_idContext.prototype.ASSOCIATE = function() {
    return this.getToken(plsqlParser.ASSOCIATE, 0);
};

Regular_idContext.prototype.AT = function() {
    return this.getToken(plsqlParser.AT, 0);
};

Regular_idContext.prototype.ATTRIBUTE = function() {
    return this.getToken(plsqlParser.ATTRIBUTE, 0);
};

Regular_idContext.prototype.AUDIT = function() {
    return this.getToken(plsqlParser.AUDIT, 0);
};

Regular_idContext.prototype.AUTHID = function() {
    return this.getToken(plsqlParser.AUTHID, 0);
};

Regular_idContext.prototype.AUTO = function() {
    return this.getToken(plsqlParser.AUTO, 0);
};

Regular_idContext.prototype.AUTOMATIC = function() {
    return this.getToken(plsqlParser.AUTOMATIC, 0);
};

Regular_idContext.prototype.AUTONOMOUS_TRANSACTION = function() {
    return this.getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0);
};

Regular_idContext.prototype.BATCH = function() {
    return this.getToken(plsqlParser.BATCH, 0);
};

Regular_idContext.prototype.BEFORE = function() {
    return this.getToken(plsqlParser.BEFORE, 0);
};

Regular_idContext.prototype.BFILE = function() {
    return this.getToken(plsqlParser.BFILE, 0);
};

Regular_idContext.prototype.BINARY_DOUBLE = function() {
    return this.getToken(plsqlParser.BINARY_DOUBLE, 0);
};

Regular_idContext.prototype.BINARY_FLOAT = function() {
    return this.getToken(plsqlParser.BINARY_FLOAT, 0);
};

Regular_idContext.prototype.BINARY_INTEGER = function() {
    return this.getToken(plsqlParser.BINARY_INTEGER, 0);
};

Regular_idContext.prototype.BLOB = function() {
    return this.getToken(plsqlParser.BLOB, 0);
};

Regular_idContext.prototype.BLOCK = function() {
    return this.getToken(plsqlParser.BLOCK, 0);
};

Regular_idContext.prototype.BODY = function() {
    return this.getToken(plsqlParser.BODY, 0);
};

Regular_idContext.prototype.BOOLEAN = function() {
    return this.getToken(plsqlParser.BOOLEAN, 0);
};

Regular_idContext.prototype.BOTH = function() {
    return this.getToken(plsqlParser.BOTH, 0);
};

Regular_idContext.prototype.BULK = function() {
    return this.getToken(plsqlParser.BULK, 0);
};

Regular_idContext.prototype.BYTE = function() {
    return this.getToken(plsqlParser.BYTE, 0);
};

Regular_idContext.prototype.C_LETTER = function() {
    return this.getToken(plsqlParser.C_LETTER, 0);
};

Regular_idContext.prototype.CALL = function() {
    return this.getToken(plsqlParser.CALL, 0);
};

Regular_idContext.prototype.CANONICAL = function() {
    return this.getToken(plsqlParser.CANONICAL, 0);
};

Regular_idContext.prototype.CASCADE = function() {
    return this.getToken(plsqlParser.CASCADE, 0);
};

Regular_idContext.prototype.CAST = function() {
    return this.getToken(plsqlParser.CAST, 0);
};

Regular_idContext.prototype.CHAR = function() {
    return this.getToken(plsqlParser.CHAR, 0);
};

Regular_idContext.prototype.CHAR_CS = function() {
    return this.getToken(plsqlParser.CHAR_CS, 0);
};

Regular_idContext.prototype.CHARACTER = function() {
    return this.getToken(plsqlParser.CHARACTER, 0);
};

Regular_idContext.prototype.CHR = function() {
    return this.getToken(plsqlParser.CHR, 0);
};

Regular_idContext.prototype.CLOB = function() {
    return this.getToken(plsqlParser.CLOB, 0);
};

Regular_idContext.prototype.CLOSE = function() {
    return this.getToken(plsqlParser.CLOSE, 0);
};

Regular_idContext.prototype.CLUSTER = function() {
    return this.getToken(plsqlParser.CLUSTER, 0);
};

Regular_idContext.prototype.COLLECT = function() {
    return this.getToken(plsqlParser.COLLECT, 0);
};

Regular_idContext.prototype.COLUMNS = function() {
    return this.getToken(plsqlParser.COLUMNS, 0);
};

Regular_idContext.prototype.COMMENT = function() {
    return this.getToken(plsqlParser.COMMENT, 0);
};

Regular_idContext.prototype.COMMIT = function() {
    return this.getToken(plsqlParser.COMMIT, 0);
};

Regular_idContext.prototype.COMMITTED = function() {
    return this.getToken(plsqlParser.COMMITTED, 0);
};

Regular_idContext.prototype.COMPATIBILITY = function() {
    return this.getToken(plsqlParser.COMPATIBILITY, 0);
};

Regular_idContext.prototype.COMPILE = function() {
    return this.getToken(plsqlParser.COMPILE, 0);
};

Regular_idContext.prototype.COMPOUND = function() {
    return this.getToken(plsqlParser.COMPOUND, 0);
};

Regular_idContext.prototype.CONSTANT = function() {
    return this.getToken(plsqlParser.CONSTANT, 0);
};

Regular_idContext.prototype.CONSTRAINT = function() {
    return this.getToken(plsqlParser.CONSTRAINT, 0);
};

Regular_idContext.prototype.CONSTRAINTS = function() {
    return this.getToken(plsqlParser.CONSTRAINTS, 0);
};

Regular_idContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(plsqlParser.CONSTRUCTOR, 0);
};

Regular_idContext.prototype.CONTENT = function() {
    return this.getToken(plsqlParser.CONTENT, 0);
};

Regular_idContext.prototype.CONTEXT = function() {
    return this.getToken(plsqlParser.CONTEXT, 0);
};

Regular_idContext.prototype.CONTINUE = function() {
    return this.getToken(plsqlParser.CONTINUE, 0);
};

Regular_idContext.prototype.CONVERT = function() {
    return this.getToken(plsqlParser.CONVERT, 0);
};

Regular_idContext.prototype.CORRUPT_XID = function() {
    return this.getToken(plsqlParser.CORRUPT_XID, 0);
};

Regular_idContext.prototype.CORRUPT_XID_ALL = function() {
    return this.getToken(plsqlParser.CORRUPT_XID_ALL, 0);
};

Regular_idContext.prototype.COST = function() {
    return this.getToken(plsqlParser.COST, 0);
};

Regular_idContext.prototype.COUNT = function() {
    return this.getToken(plsqlParser.COUNT, 0);
};

Regular_idContext.prototype.CROSS = function() {
    return this.getToken(plsqlParser.CROSS, 0);
};

Regular_idContext.prototype.CUBE = function() {
    return this.getToken(plsqlParser.CUBE, 0);
};

Regular_idContext.prototype.CURRENT_USER = function() {
    return this.getToken(plsqlParser.CURRENT_USER, 0);
};

Regular_idContext.prototype.CURSOR = function() {
    return this.getToken(plsqlParser.CURSOR, 0);
};

Regular_idContext.prototype.CUSTOMDATUM = function() {
    return this.getToken(plsqlParser.CUSTOMDATUM, 0);
};

Regular_idContext.prototype.CYCLE = function() {
    return this.getToken(plsqlParser.CYCLE, 0);
};

Regular_idContext.prototype.DATA = function() {
    return this.getToken(plsqlParser.DATA, 0);
};

Regular_idContext.prototype.DATABASE = function() {
    return this.getToken(plsqlParser.DATABASE, 0);
};

Regular_idContext.prototype.DAY = function() {
    return this.getToken(plsqlParser.DAY, 0);
};

Regular_idContext.prototype.DB_ROLE_CHANGE = function() {
    return this.getToken(plsqlParser.DB_ROLE_CHANGE, 0);
};

Regular_idContext.prototype.DBTIMEZONE = function() {
    return this.getToken(plsqlParser.DBTIMEZONE, 0);
};

Regular_idContext.prototype.DDL = function() {
    return this.getToken(plsqlParser.DDL, 0);
};

Regular_idContext.prototype.DEBUG = function() {
    return this.getToken(plsqlParser.DEBUG, 0);
};

Regular_idContext.prototype.DEC = function() {
    return this.getToken(plsqlParser.DEC, 0);
};

Regular_idContext.prototype.DECIMAL = function() {
    return this.getToken(plsqlParser.DECIMAL, 0);
};

Regular_idContext.prototype.DECOMPOSE = function() {
    return this.getToken(plsqlParser.DECOMPOSE, 0);
};

Regular_idContext.prototype.DECREMENT = function() {
    return this.getToken(plsqlParser.DECREMENT, 0);
};

Regular_idContext.prototype.DEFAULTS = function() {
    return this.getToken(plsqlParser.DEFAULTS, 0);
};

Regular_idContext.prototype.DEFERRED = function() {
    return this.getToken(plsqlParser.DEFERRED, 0);
};

Regular_idContext.prototype.DEFINER = function() {
    return this.getToken(plsqlParser.DEFINER, 0);
};

Regular_idContext.prototype.DETERMINISTIC = function() {
    return this.getToken(plsqlParser.DETERMINISTIC, 0);
};

Regular_idContext.prototype.DIMENSION = function() {
    return this.getToken(plsqlParser.DIMENSION, 0);
};

Regular_idContext.prototype.DISABLE = function() {
    return this.getToken(plsqlParser.DISABLE, 0);
};

Regular_idContext.prototype.DISASSOCIATE = function() {
    return this.getToken(plsqlParser.DISASSOCIATE, 0);
};

Regular_idContext.prototype.DOCUMENT = function() {
    return this.getToken(plsqlParser.DOCUMENT, 0);
};

Regular_idContext.prototype.DOUBLE = function() {
    return this.getToken(plsqlParser.DOUBLE, 0);
};

Regular_idContext.prototype.DSINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.EACH = function() {
    return this.getToken(plsqlParser.EACH, 0);
};

Regular_idContext.prototype.ELEMENT = function() {
    return this.getToken(plsqlParser.ELEMENT, 0);
};

Regular_idContext.prototype.EMPTY = function() {
    return this.getToken(plsqlParser.EMPTY, 0);
};

Regular_idContext.prototype.ENABLE = function() {
    return this.getToken(plsqlParser.ENABLE, 0);
};

Regular_idContext.prototype.ENCODING = function() {
    return this.getToken(plsqlParser.ENCODING, 0);
};

Regular_idContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(plsqlParser.ENTITYESCAPING, 0);
};

Regular_idContext.prototype.ERR = function() {
    return this.getToken(plsqlParser.ERR, 0);
};

Regular_idContext.prototype.ERRORS = function() {
    return this.getToken(plsqlParser.ERRORS, 0);
};

Regular_idContext.prototype.ESCAPE = function() {
    return this.getToken(plsqlParser.ESCAPE, 0);
};

Regular_idContext.prototype.EVALNAME = function() {
    return this.getToken(plsqlParser.EVALNAME, 0);
};

Regular_idContext.prototype.EXCEPTION = function() {
    return this.getToken(plsqlParser.EXCEPTION, 0);
};

Regular_idContext.prototype.EXCEPTION_INIT = function() {
    return this.getToken(plsqlParser.EXCEPTION_INIT, 0);
};

Regular_idContext.prototype.EXCEPTIONS = function() {
    return this.getToken(plsqlParser.EXCEPTIONS, 0);
};

Regular_idContext.prototype.EXCLUDE = function() {
    return this.getToken(plsqlParser.EXCLUDE, 0);
};

Regular_idContext.prototype.EXECUTE = function() {
    return this.getToken(plsqlParser.EXECUTE, 0);
};

Regular_idContext.prototype.EXIT = function() {
    return this.getToken(plsqlParser.EXIT, 0);
};

Regular_idContext.prototype.EXPLAIN = function() {
    return this.getToken(plsqlParser.EXPLAIN, 0);
};

Regular_idContext.prototype.EXTERNAL = function() {
    return this.getToken(plsqlParser.EXTERNAL, 0);
};

Regular_idContext.prototype.EXTRACT = function() {
    return this.getToken(plsqlParser.EXTRACT, 0);
};

Regular_idContext.prototype.FAILURE = function() {
    return this.getToken(plsqlParser.FAILURE, 0);
};

Regular_idContext.prototype.FINAL = function() {
    return this.getToken(plsqlParser.FINAL, 0);
};

Regular_idContext.prototype.FIRST = function() {
    return this.getToken(plsqlParser.FIRST, 0);
};

Regular_idContext.prototype.FIRST_VALUE = function() {
    return this.getToken(plsqlParser.FIRST_VALUE, 0);
};

Regular_idContext.prototype.FLOAT = function() {
    return this.getToken(plsqlParser.FLOAT, 0);
};

Regular_idContext.prototype.FOLLOWING = function() {
    return this.getToken(plsqlParser.FOLLOWING, 0);
};

Regular_idContext.prototype.FOLLOWS = function() {
    return this.getToken(plsqlParser.FOLLOWS, 0);
};

Regular_idContext.prototype.FORALL = function() {
    return this.getToken(plsqlParser.FORALL, 0);
};

Regular_idContext.prototype.FORCE = function() {
    return this.getToken(plsqlParser.FORCE, 0);
};

Regular_idContext.prototype.FULL = function() {
    return this.getToken(plsqlParser.FULL, 0);
};

Regular_idContext.prototype.FUNCTION = function() {
    return this.getToken(plsqlParser.FUNCTION, 0);
};

Regular_idContext.prototype.GROUPING = function() {
    return this.getToken(plsqlParser.GROUPING, 0);
};

Regular_idContext.prototype.HASH = function() {
    return this.getToken(plsqlParser.HASH, 0);
};

Regular_idContext.prototype.HIDE = function() {
    return this.getToken(plsqlParser.HIDE, 0);
};

Regular_idContext.prototype.HOUR = function() {
    return this.getToken(plsqlParser.HOUR, 0);
};

Regular_idContext.prototype.IGNORE = function() {
    return this.getToken(plsqlParser.IGNORE, 0);
};

Regular_idContext.prototype.IMMEDIATE = function() {
    return this.getToken(plsqlParser.IMMEDIATE, 0);
};

Regular_idContext.prototype.INCLUDE = function() {
    return this.getToken(plsqlParser.INCLUDE, 0);
};

Regular_idContext.prototype.INCLUDING = function() {
    return this.getToken(plsqlParser.INCLUDING, 0);
};

Regular_idContext.prototype.INCREMENT = function() {
    return this.getToken(plsqlParser.INCREMENT, 0);
};

Regular_idContext.prototype.INDENT = function() {
    return this.getToken(plsqlParser.INDENT, 0);
};

Regular_idContext.prototype.INDEXED = function() {
    return this.getToken(plsqlParser.INDEXED, 0);
};

Regular_idContext.prototype.INDICATOR = function() {
    return this.getToken(plsqlParser.INDICATOR, 0);
};

Regular_idContext.prototype.INDICES = function() {
    return this.getToken(plsqlParser.INDICES, 0);
};

Regular_idContext.prototype.INFINITE = function() {
    return this.getToken(plsqlParser.INFINITE, 0);
};

Regular_idContext.prototype.INLINE = function() {
    return this.getToken(plsqlParser.INLINE, 0);
};

Regular_idContext.prototype.INNER = function() {
    return this.getToken(plsqlParser.INNER, 0);
};

Regular_idContext.prototype.INOUT = function() {
    return this.getToken(plsqlParser.INOUT, 0);
};

Regular_idContext.prototype.INSTANTIABLE = function() {
    return this.getToken(plsqlParser.INSTANTIABLE, 0);
};

Regular_idContext.prototype.INSTEAD = function() {
    return this.getToken(plsqlParser.INSTEAD, 0);
};

Regular_idContext.prototype.INT = function() {
    return this.getToken(plsqlParser.INT, 0);
};

Regular_idContext.prototype.INTEGER = function() {
    return this.getToken(plsqlParser.INTEGER, 0);
};

Regular_idContext.prototype.INTERVAL = function() {
    return this.getToken(plsqlParser.INTERVAL, 0);
};

Regular_idContext.prototype.INVALIDATE = function() {
    return this.getToken(plsqlParser.INVALIDATE, 0);
};

Regular_idContext.prototype.ISOLATION = function() {
    return this.getToken(plsqlParser.ISOLATION, 0);
};

Regular_idContext.prototype.ITERATE = function() {
    return this.getToken(plsqlParser.ITERATE, 0);
};

Regular_idContext.prototype.JAVA = function() {
    return this.getToken(plsqlParser.JAVA, 0);
};

Regular_idContext.prototype.JOIN = function() {
    return this.getToken(plsqlParser.JOIN, 0);
};

Regular_idContext.prototype.KEEP = function() {
    return this.getToken(plsqlParser.KEEP, 0);
};

Regular_idContext.prototype.LANGUAGE = function() {
    return this.getToken(plsqlParser.LANGUAGE, 0);
};

Regular_idContext.prototype.LAST = function() {
    return this.getToken(plsqlParser.LAST, 0);
};

Regular_idContext.prototype.LAST_VALUE = function() {
    return this.getToken(plsqlParser.LAST_VALUE, 0);
};

Regular_idContext.prototype.LEADING = function() {
    return this.getToken(plsqlParser.LEADING, 0);
};

Regular_idContext.prototype.LEFT = function() {
    return this.getToken(plsqlParser.LEFT, 0);
};

Regular_idContext.prototype.LEVEL = function() {
    return this.getToken(plsqlParser.LEVEL, 0);
};

Regular_idContext.prototype.LIBRARY = function() {
    return this.getToken(plsqlParser.LIBRARY, 0);
};

Regular_idContext.prototype.LIKE2 = function() {
    return this.getToken(plsqlParser.LIKE2, 0);
};

Regular_idContext.prototype.LIKE4 = function() {
    return this.getToken(plsqlParser.LIKE4, 0);
};

Regular_idContext.prototype.LIKEC = function() {
    return this.getToken(plsqlParser.LIKEC, 0);
};

Regular_idContext.prototype.LIMIT = function() {
    return this.getToken(plsqlParser.LIMIT, 0);
};

Regular_idContext.prototype.LOCAL = function() {
    return this.getToken(plsqlParser.LOCAL, 0);
};

Regular_idContext.prototype.LOCKED = function() {
    return this.getToken(plsqlParser.LOCKED, 0);
};

Regular_idContext.prototype.LOG = function() {
    return this.getToken(plsqlParser.LOG, 0);
};

Regular_idContext.prototype.LOGOFF = function() {
    return this.getToken(plsqlParser.LOGOFF, 0);
};

Regular_idContext.prototype.LOGON = function() {
    return this.getToken(plsqlParser.LOGON, 0);
};

Regular_idContext.prototype.LONG = function() {
    return this.getToken(plsqlParser.LONG, 0);
};

Regular_idContext.prototype.LOOP = function() {
    return this.getToken(plsqlParser.LOOP, 0);
};

Regular_idContext.prototype.MAIN = function() {
    return this.getToken(plsqlParser.MAIN, 0);
};

Regular_idContext.prototype.MAP = function() {
    return this.getToken(plsqlParser.MAP, 0);
};

Regular_idContext.prototype.MATCHED = function() {
    return this.getToken(plsqlParser.MATCHED, 0);
};

Regular_idContext.prototype.MAXVALUE = function() {
    return this.getToken(plsqlParser.MAXVALUE, 0);
};

Regular_idContext.prototype.MEASURES = function() {
    return this.getToken(plsqlParser.MEASURES, 0);
};

Regular_idContext.prototype.MEMBER = function() {
    return this.getToken(plsqlParser.MEMBER, 0);
};

Regular_idContext.prototype.MERGE = function() {
    return this.getToken(plsqlParser.MERGE, 0);
};

Regular_idContext.prototype.MINUTE = function() {
    return this.getToken(plsqlParser.MINUTE, 0);
};

Regular_idContext.prototype.MINVALUE = function() {
    return this.getToken(plsqlParser.MINVALUE, 0);
};

Regular_idContext.prototype.MLSLABEL = function() {
    return this.getToken(plsqlParser.MLSLABEL, 0);
};

Regular_idContext.prototype.MODEL = function() {
    return this.getToken(plsqlParser.MODEL, 0);
};

Regular_idContext.prototype.MODIFY = function() {
    return this.getToken(plsqlParser.MODIFY, 0);
};

Regular_idContext.prototype.MONTH = function() {
    return this.getToken(plsqlParser.MONTH, 0);
};

Regular_idContext.prototype.MULTISET = function() {
    return this.getToken(plsqlParser.MULTISET, 0);
};

Regular_idContext.prototype.NAME = function() {
    return this.getToken(plsqlParser.NAME, 0);
};

Regular_idContext.prototype.NAN = function() {
    return this.getToken(plsqlParser.NAN, 0);
};

Regular_idContext.prototype.NATURAL = function() {
    return this.getToken(plsqlParser.NATURAL, 0);
};

Regular_idContext.prototype.NATURALN = function() {
    return this.getToken(plsqlParser.NATURALN, 0);
};

Regular_idContext.prototype.NAV = function() {
    return this.getToken(plsqlParser.NAV, 0);
};

Regular_idContext.prototype.NCHAR = function() {
    return this.getToken(plsqlParser.NCHAR, 0);
};

Regular_idContext.prototype.NCHAR_CS = function() {
    return this.getToken(plsqlParser.NCHAR_CS, 0);
};

Regular_idContext.prototype.NCLOB = function() {
    return this.getToken(plsqlParser.NCLOB, 0);
};

Regular_idContext.prototype.NESTED = function() {
    return this.getToken(plsqlParser.NESTED, 0);
};

Regular_idContext.prototype.NEW = function() {
    return this.getToken(plsqlParser.NEW, 0);
};

Regular_idContext.prototype.NO = function() {
    return this.getToken(plsqlParser.NO, 0);
};

Regular_idContext.prototype.NOAUDIT = function() {
    return this.getToken(plsqlParser.NOAUDIT, 0);
};

Regular_idContext.prototype.NOCOPY = function() {
    return this.getToken(plsqlParser.NOCOPY, 0);
};

Regular_idContext.prototype.NOCYCLE = function() {
    return this.getToken(plsqlParser.NOCYCLE, 0);
};

Regular_idContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(plsqlParser.NOENTITYESCAPING, 0);
};

Regular_idContext.prototype.NONE = function() {
    return this.getToken(plsqlParser.NONE, 0);
};

Regular_idContext.prototype.NOSCHEMACHECK = function() {
    return this.getToken(plsqlParser.NOSCHEMACHECK, 0);
};

Regular_idContext.prototype.NULLS = function() {
    return this.getToken(plsqlParser.NULLS, 0);
};

Regular_idContext.prototype.NUMBER = function() {
    return this.getToken(plsqlParser.NUMBER, 0);
};

Regular_idContext.prototype.NUMERIC = function() {
    return this.getToken(plsqlParser.NUMERIC, 0);
};

Regular_idContext.prototype.NVARCHAR2 = function() {
    return this.getToken(plsqlParser.NVARCHAR2, 0);
};

Regular_idContext.prototype.OBJECT = function() {
    return this.getToken(plsqlParser.OBJECT, 0);
};

Regular_idContext.prototype.OFF = function() {
    return this.getToken(plsqlParser.OFF, 0);
};

Regular_idContext.prototype.OID = function() {
    return this.getToken(plsqlParser.OID, 0);
};

Regular_idContext.prototype.OLD = function() {
    return this.getToken(plsqlParser.OLD, 0);
};

Regular_idContext.prototype.ONLY = function() {
    return this.getToken(plsqlParser.ONLY, 0);
};

Regular_idContext.prototype.OPEN = function() {
    return this.getToken(plsqlParser.OPEN, 0);
};

Regular_idContext.prototype.ORADATA = function() {
    return this.getToken(plsqlParser.ORADATA, 0);
};

Regular_idContext.prototype.ORDINALITY = function() {
    return this.getToken(plsqlParser.ORDINALITY, 0);
};

Regular_idContext.prototype.OSERROR = function() {
    return this.getToken(plsqlParser.OSERROR, 0);
};

Regular_idContext.prototype.OUT = function() {
    return this.getToken(plsqlParser.OUT, 0);
};

Regular_idContext.prototype.OUTER = function() {
    return this.getToken(plsqlParser.OUTER, 0);
};

Regular_idContext.prototype.OVER = function() {
    return this.getToken(plsqlParser.OVER, 0);
};

Regular_idContext.prototype.OVERRIDING = function() {
    return this.getToken(plsqlParser.OVERRIDING, 0);
};

Regular_idContext.prototype.PACKAGE = function() {
    return this.getToken(plsqlParser.PACKAGE, 0);
};

Regular_idContext.prototype.PARALLEL_ENABLE = function() {
    return this.getToken(plsqlParser.PARALLEL_ENABLE, 0);
};

Regular_idContext.prototype.PARAMETERS = function() {
    return this.getToken(plsqlParser.PARAMETERS, 0);
};

Regular_idContext.prototype.PARENT = function() {
    return this.getToken(plsqlParser.PARENT, 0);
};

Regular_idContext.prototype.PARTITION = function() {
    return this.getToken(plsqlParser.PARTITION, 0);
};

Regular_idContext.prototype.PASSING = function() {
    return this.getToken(plsqlParser.PASSING, 0);
};

Regular_idContext.prototype.PATH = function() {
    return this.getToken(plsqlParser.PATH, 0);
};

Regular_idContext.prototype.PIPELINED = function() {
    return this.getToken(plsqlParser.PIPELINED, 0);
};

Regular_idContext.prototype.PLAN = function() {
    return this.getToken(plsqlParser.PLAN, 0);
};

Regular_idContext.prototype.PLS_INTEGER = function() {
    return this.getToken(plsqlParser.PLS_INTEGER, 0);
};

Regular_idContext.prototype.POSITIVE = function() {
    return this.getToken(plsqlParser.POSITIVE, 0);
};

Regular_idContext.prototype.POSITIVEN = function() {
    return this.getToken(plsqlParser.POSITIVEN, 0);
};

Regular_idContext.prototype.PRAGMA = function() {
    return this.getToken(plsqlParser.PRAGMA, 0);
};

Regular_idContext.prototype.PRECEDING = function() {
    return this.getToken(plsqlParser.PRECEDING, 0);
};

Regular_idContext.prototype.PRECISION = function() {
    return this.getToken(plsqlParser.PRECISION, 0);
};

Regular_idContext.prototype.PRESENT = function() {
    return this.getToken(plsqlParser.PRESENT, 0);
};

Regular_idContext.prototype.RAISE = function() {
    return this.getToken(plsqlParser.RAISE, 0);
};

Regular_idContext.prototype.RANGE = function() {
    return this.getToken(plsqlParser.RANGE, 0);
};

Regular_idContext.prototype.RAW = function() {
    return this.getToken(plsqlParser.RAW, 0);
};

Regular_idContext.prototype.READ = function() {
    return this.getToken(plsqlParser.READ, 0);
};

Regular_idContext.prototype.REAL = function() {
    return this.getToken(plsqlParser.REAL, 0);
};

Regular_idContext.prototype.RECORD = function() {
    return this.getToken(plsqlParser.RECORD, 0);
};

Regular_idContext.prototype.REF = function() {
    return this.getToken(plsqlParser.REF, 0);
};

Regular_idContext.prototype.REFERENCE = function() {
    return this.getToken(plsqlParser.REFERENCE, 0);
};

Regular_idContext.prototype.REFERENCING = function() {
    return this.getToken(plsqlParser.REFERENCING, 0);
};

Regular_idContext.prototype.REJECT = function() {
    return this.getToken(plsqlParser.REJECT, 0);
};

Regular_idContext.prototype.RELIES_ON = function() {
    return this.getToken(plsqlParser.RELIES_ON, 0);
};

Regular_idContext.prototype.RENAME = function() {
    return this.getToken(plsqlParser.RENAME, 0);
};

Regular_idContext.prototype.REPLACE = function() {
    return this.getToken(plsqlParser.REPLACE, 0);
};

Regular_idContext.prototype.RESPECT = function() {
    return this.getToken(plsqlParser.RESPECT, 0);
};

Regular_idContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(plsqlParser.RESTRICT_REFERENCES, 0);
};

Regular_idContext.prototype.RESULT = function() {
    return this.getToken(plsqlParser.RESULT, 0);
};

Regular_idContext.prototype.RESULT_CACHE = function() {
    return this.getToken(plsqlParser.RESULT_CACHE, 0);
};

Regular_idContext.prototype.RETURN = function() {
    return this.getToken(plsqlParser.RETURN, 0);
};

Regular_idContext.prototype.RETURNING = function() {
    return this.getToken(plsqlParser.RETURNING, 0);
};

Regular_idContext.prototype.REUSE = function() {
    return this.getToken(plsqlParser.REUSE, 0);
};

Regular_idContext.prototype.REVERSE = function() {
    return this.getToken(plsqlParser.REVERSE, 0);
};

Regular_idContext.prototype.RIGHT = function() {
    return this.getToken(plsqlParser.RIGHT, 0);
};

Regular_idContext.prototype.ROLLBACK = function() {
    return this.getToken(plsqlParser.ROLLBACK, 0);
};

Regular_idContext.prototype.ROLLUP = function() {
    return this.getToken(plsqlParser.ROLLUP, 0);
};

Regular_idContext.prototype.ROW = function() {
    return this.getToken(plsqlParser.ROW, 0);
};

Regular_idContext.prototype.ROWID = function() {
    return this.getToken(plsqlParser.ROWID, 0);
};

Regular_idContext.prototype.ROWS = function() {
    return this.getToken(plsqlParser.ROWS, 0);
};

Regular_idContext.prototype.RULES = function() {
    return this.getToken(plsqlParser.RULES, 0);
};

Regular_idContext.prototype.SAMPLE = function() {
    return this.getToken(plsqlParser.SAMPLE, 0);
};

Regular_idContext.prototype.SAVE = function() {
    return this.getToken(plsqlParser.SAVE, 0);
};

Regular_idContext.prototype.SAVEPOINT = function() {
    return this.getToken(plsqlParser.SAVEPOINT, 0);
};

Regular_idContext.prototype.SCHEMA = function() {
    return this.getToken(plsqlParser.SCHEMA, 0);
};

Regular_idContext.prototype.SCHEMACHECK = function() {
    return this.getToken(plsqlParser.SCHEMACHECK, 0);
};

Regular_idContext.prototype.SCN = function() {
    return this.getToken(plsqlParser.SCN, 0);
};

Regular_idContext.prototype.SECOND = function() {
    return this.getToken(plsqlParser.SECOND, 0);
};

Regular_idContext.prototype.SEED = function() {
    return this.getToken(plsqlParser.SEED, 0);
};

Regular_idContext.prototype.SEGMENT = function() {
    return this.getToken(plsqlParser.SEGMENT, 0);
};

Regular_idContext.prototype.SELF = function() {
    return this.getToken(plsqlParser.SELF, 0);
};

Regular_idContext.prototype.SEQUENTIAL = function() {
    return this.getToken(plsqlParser.SEQUENTIAL, 0);
};

Regular_idContext.prototype.SERIALIZABLE = function() {
    return this.getToken(plsqlParser.SERIALIZABLE, 0);
};

Regular_idContext.prototype.SERIALLY_REUSABLE = function() {
    return this.getToken(plsqlParser.SERIALLY_REUSABLE, 0);
};

Regular_idContext.prototype.SERVERERROR = function() {
    return this.getToken(plsqlParser.SERVERERROR, 0);
};

Regular_idContext.prototype.SESSIONTIMEZONE = function() {
    return this.getToken(plsqlParser.SESSIONTIMEZONE, 0);
};

Regular_idContext.prototype.SET = function() {
    return this.getToken(plsqlParser.SET, 0);
};

Regular_idContext.prototype.SETS = function() {
    return this.getToken(plsqlParser.SETS, 0);
};

Regular_idContext.prototype.SETTINGS = function() {
    return this.getToken(plsqlParser.SETTINGS, 0);
};

Regular_idContext.prototype.SHOW = function() {
    return this.getToken(plsqlParser.SHOW, 0);
};

Regular_idContext.prototype.SHUTDOWN = function() {
    return this.getToken(plsqlParser.SHUTDOWN, 0);
};

Regular_idContext.prototype.SIBLINGS = function() {
    return this.getToken(plsqlParser.SIBLINGS, 0);
};

Regular_idContext.prototype.SIGNTYPE = function() {
    return this.getToken(plsqlParser.SIGNTYPE, 0);
};

Regular_idContext.prototype.SIMPLE_INTEGER = function() {
    return this.getToken(plsqlParser.SIMPLE_INTEGER, 0);
};

Regular_idContext.prototype.SINGLE = function() {
    return this.getToken(plsqlParser.SINGLE, 0);
};

Regular_idContext.prototype.SKIP_ = function() {
    return this.getToken(plsqlParser.SKIP_, 0);
};

Regular_idContext.prototype.SMALLINT = function() {
    return this.getToken(plsqlParser.SMALLINT, 0);
};

Regular_idContext.prototype.SNAPSHOT = function() {
    return this.getToken(plsqlParser.SNAPSHOT, 0);
};

Regular_idContext.prototype.SOME = function() {
    return this.getToken(plsqlParser.SOME, 0);
};

Regular_idContext.prototype.SPECIFICATION = function() {
    return this.getToken(plsqlParser.SPECIFICATION, 0);
};

Regular_idContext.prototype.SQLDATA = function() {
    return this.getToken(plsqlParser.SQLDATA, 0);
};

Regular_idContext.prototype.SQLERROR = function() {
    return this.getToken(plsqlParser.SQLERROR, 0);
};

Regular_idContext.prototype.STANDALONE = function() {
    return this.getToken(plsqlParser.STANDALONE, 0);
};

Regular_idContext.prototype.STARTUP = function() {
    return this.getToken(plsqlParser.STARTUP, 0);
};

Regular_idContext.prototype.STATEMENT = function() {
    return this.getToken(plsqlParser.STATEMENT, 0);
};

Regular_idContext.prototype.STATEMENT_ID = function() {
    return this.getToken(plsqlParser.STATEMENT_ID, 0);
};

Regular_idContext.prototype.STATIC = function() {
    return this.getToken(plsqlParser.STATIC, 0);
};

Regular_idContext.prototype.STATISTICS = function() {
    return this.getToken(plsqlParser.STATISTICS, 0);
};

Regular_idContext.prototype.STRING = function() {
    return this.getToken(plsqlParser.STRING, 0);
};

Regular_idContext.prototype.SUBMULTISET = function() {
    return this.getToken(plsqlParser.SUBMULTISET, 0);
};

Regular_idContext.prototype.SUBPARTITION = function() {
    return this.getToken(plsqlParser.SUBPARTITION, 0);
};

Regular_idContext.prototype.SUBSTITUTABLE = function() {
    return this.getToken(plsqlParser.SUBSTITUTABLE, 0);
};

Regular_idContext.prototype.SUBTYPE = function() {
    return this.getToken(plsqlParser.SUBTYPE, 0);
};

Regular_idContext.prototype.SUCCESS = function() {
    return this.getToken(plsqlParser.SUCCESS, 0);
};

Regular_idContext.prototype.SUSPEND = function() {
    return this.getToken(plsqlParser.SUSPEND, 0);
};

Regular_idContext.prototype.TIME = function() {
    return this.getToken(plsqlParser.TIME, 0);
};

Regular_idContext.prototype.TIMESTAMP = function() {
    return this.getToken(plsqlParser.TIMESTAMP, 0);
};

Regular_idContext.prototype.TIMESTAMP_LTZ_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMESTAMP_TZ_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMESTAMP_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMEZONE_ABBR = function() {
    return this.getToken(plsqlParser.TIMEZONE_ABBR, 0);
};

Regular_idContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(plsqlParser.TIMEZONE_HOUR, 0);
};

Regular_idContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(plsqlParser.TIMEZONE_MINUTE, 0);
};

Regular_idContext.prototype.TIMEZONE_REGION = function() {
    return this.getToken(plsqlParser.TIMEZONE_REGION, 0);
};

Regular_idContext.prototype.TRAILING = function() {
    return this.getToken(plsqlParser.TRAILING, 0);
};

Regular_idContext.prototype.TRANSACTION = function() {
    return this.getToken(plsqlParser.TRANSACTION, 0);
};

Regular_idContext.prototype.TRANSLATE = function() {
    return this.getToken(plsqlParser.TRANSLATE, 0);
};

Regular_idContext.prototype.TREAT = function() {
    return this.getToken(plsqlParser.TREAT, 0);
};

Regular_idContext.prototype.TRIGGER = function() {
    return this.getToken(plsqlParser.TRIGGER, 0);
};

Regular_idContext.prototype.TRIM = function() {
    return this.getToken(plsqlParser.TRIM, 0);
};

Regular_idContext.prototype.TRUNCATE = function() {
    return this.getToken(plsqlParser.TRUNCATE, 0);
};

Regular_idContext.prototype.TYPE = function() {
    return this.getToken(plsqlParser.TYPE, 0);
};

Regular_idContext.prototype.UNBOUNDED = function() {
    return this.getToken(plsqlParser.UNBOUNDED, 0);
};

Regular_idContext.prototype.UNDER = function() {
    return this.getToken(plsqlParser.UNDER, 0);
};

Regular_idContext.prototype.UNLIMITED = function() {
    return this.getToken(plsqlParser.UNLIMITED, 0);
};

Regular_idContext.prototype.UNTIL = function() {
    return this.getToken(plsqlParser.UNTIL, 0);
};

Regular_idContext.prototype.UPDATED = function() {
    return this.getToken(plsqlParser.UPDATED, 0);
};

Regular_idContext.prototype.UPSERT = function() {
    return this.getToken(plsqlParser.UPSERT, 0);
};

Regular_idContext.prototype.UROWID = function() {
    return this.getToken(plsqlParser.UROWID, 0);
};

Regular_idContext.prototype.USE = function() {
    return this.getToken(plsqlParser.USE, 0);
};

Regular_idContext.prototype.VALIDATE = function() {
    return this.getToken(plsqlParser.VALIDATE, 0);
};

Regular_idContext.prototype.VALUE = function() {
    return this.getToken(plsqlParser.VALUE, 0);
};

Regular_idContext.prototype.VARCHAR = function() {
    return this.getToken(plsqlParser.VARCHAR, 0);
};

Regular_idContext.prototype.VARCHAR2 = function() {
    return this.getToken(plsqlParser.VARCHAR2, 0);
};

Regular_idContext.prototype.VARIABLE = function() {
    return this.getToken(plsqlParser.VARIABLE, 0);
};

Regular_idContext.prototype.VARRAY = function() {
    return this.getToken(plsqlParser.VARRAY, 0);
};

Regular_idContext.prototype.VARYING = function() {
    return this.getToken(plsqlParser.VARYING, 0);
};

Regular_idContext.prototype.VERSION = function() {
    return this.getToken(plsqlParser.VERSION, 0);
};

Regular_idContext.prototype.VERSIONS = function() {
    return this.getToken(plsqlParser.VERSIONS, 0);
};

Regular_idContext.prototype.WAIT = function() {
    return this.getToken(plsqlParser.WAIT, 0);
};

Regular_idContext.prototype.WARNING = function() {
    return this.getToken(plsqlParser.WARNING, 0);
};

Regular_idContext.prototype.WELLFORMED = function() {
    return this.getToken(plsqlParser.WELLFORMED, 0);
};

Regular_idContext.prototype.WHENEVER = function() {
    return this.getToken(plsqlParser.WHENEVER, 0);
};

Regular_idContext.prototype.WHILE = function() {
    return this.getToken(plsqlParser.WHILE, 0);
};

Regular_idContext.prototype.WITHIN = function() {
    return this.getToken(plsqlParser.WITHIN, 0);
};

Regular_idContext.prototype.WORK = function() {
    return this.getToken(plsqlParser.WORK, 0);
};

Regular_idContext.prototype.WRITE = function() {
    return this.getToken(plsqlParser.WRITE, 0);
};

Regular_idContext.prototype.XML = function() {
    return this.getToken(plsqlParser.XML, 0);
};

Regular_idContext.prototype.XMLAGG = function() {
    return this.getToken(plsqlParser.XMLAGG, 0);
};

Regular_idContext.prototype.XMLATTRIBUTES = function() {
    return this.getToken(plsqlParser.XMLATTRIBUTES, 0);
};

Regular_idContext.prototype.XMLCAST = function() {
    return this.getToken(plsqlParser.XMLCAST, 0);
};

Regular_idContext.prototype.XMLCOLATTVAL = function() {
    return this.getToken(plsqlParser.XMLCOLATTVAL, 0);
};

Regular_idContext.prototype.XMLELEMENT = function() {
    return this.getToken(plsqlParser.XMLELEMENT, 0);
};

Regular_idContext.prototype.XMLEXISTS = function() {
    return this.getToken(plsqlParser.XMLEXISTS, 0);
};

Regular_idContext.prototype.XMLFOREST = function() {
    return this.getToken(plsqlParser.XMLFOREST, 0);
};

Regular_idContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(plsqlParser.XMLNAMESPACES, 0);
};

Regular_idContext.prototype.XMLPARSE = function() {
    return this.getToken(plsqlParser.XMLPARSE, 0);
};

Regular_idContext.prototype.XMLPI = function() {
    return this.getToken(plsqlParser.XMLPI, 0);
};

Regular_idContext.prototype.XMLQUERY = function() {
    return this.getToken(plsqlParser.XMLQUERY, 0);
};

Regular_idContext.prototype.XMLROOT = function() {
    return this.getToken(plsqlParser.XMLROOT, 0);
};

Regular_idContext.prototype.XMLSERIALIZE = function() {
    return this.getToken(plsqlParser.XMLSERIALIZE, 0);
};

Regular_idContext.prototype.XMLTABLE = function() {
    return this.getToken(plsqlParser.XMLTABLE, 0);
};

Regular_idContext.prototype.YEAR = function() {
    return this.getToken(plsqlParser.YEAR, 0);
};

Regular_idContext.prototype.YES = function() {
    return this.getToken(plsqlParser.YES, 0);
};

Regular_idContext.prototype.YMINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.ZONE = function() {
    return this.getToken(plsqlParser.ZONE, 0);
};

Regular_idContext.prototype.PREDICTION = function() {
    return this.getToken(plsqlParser.PREDICTION, 0);
};

Regular_idContext.prototype.PREDICTION_BOUNDS = function() {
    return this.getToken(plsqlParser.PREDICTION_BOUNDS, 0);
};

Regular_idContext.prototype.PREDICTION_COST = function() {
    return this.getToken(plsqlParser.PREDICTION_COST, 0);
};

Regular_idContext.prototype.PREDICTION_DETAILS = function() {
    return this.getToken(plsqlParser.PREDICTION_DETAILS, 0);
};

Regular_idContext.prototype.PREDICTION_PROBABILITY = function() {
    return this.getToken(plsqlParser.PREDICTION_PROBABILITY, 0);
};

Regular_idContext.prototype.PREDICTION_SET = function() {
    return this.getToken(plsqlParser.PREDICTION_SET, 0);
};

Regular_idContext.prototype.CUME_DIST = function() {
    return this.getToken(plsqlParser.CUME_DIST, 0);
};

Regular_idContext.prototype.DENSE_RANK = function() {
    return this.getToken(plsqlParser.DENSE_RANK, 0);
};

Regular_idContext.prototype.LISTAGG = function() {
    return this.getToken(plsqlParser.LISTAGG, 0);
};

Regular_idContext.prototype.PERCENT_RANK = function() {
    return this.getToken(plsqlParser.PERCENT_RANK, 0);
};

Regular_idContext.prototype.PERCENTILE_CONT = function() {
    return this.getToken(plsqlParser.PERCENTILE_CONT, 0);
};

Regular_idContext.prototype.PERCENTILE_DISC = function() {
    return this.getToken(plsqlParser.PERCENTILE_DISC, 0);
};

Regular_idContext.prototype.RANK = function() {
    return this.getToken(plsqlParser.RANK, 0);
};

Regular_idContext.prototype.AVG = function() {
    return this.getToken(plsqlParser.AVG, 0);
};

Regular_idContext.prototype.CORR = function() {
    return this.getToken(plsqlParser.CORR, 0);
};

Regular_idContext.prototype.LAG = function() {
    return this.getToken(plsqlParser.LAG, 0);
};

Regular_idContext.prototype.LEAD = function() {
    return this.getToken(plsqlParser.LEAD, 0);
};

Regular_idContext.prototype.MAX = function() {
    return this.getToken(plsqlParser.MAX, 0);
};

Regular_idContext.prototype.MEDIAN = function() {
    return this.getToken(plsqlParser.MEDIAN, 0);
};

Regular_idContext.prototype.MIN = function() {
    return this.getToken(plsqlParser.MIN, 0);
};

Regular_idContext.prototype.NTILE = function() {
    return this.getToken(plsqlParser.NTILE, 0);
};

Regular_idContext.prototype.RATIO_TO_REPORT = function() {
    return this.getToken(plsqlParser.RATIO_TO_REPORT, 0);
};

Regular_idContext.prototype.ROW_NUMBER = function() {
    return this.getToken(plsqlParser.ROW_NUMBER, 0);
};

Regular_idContext.prototype.SUM = function() {
    return this.getToken(plsqlParser.SUM, 0);
};

Regular_idContext.prototype.VARIANCE = function() {
    return this.getToken(plsqlParser.VARIANCE, 0);
};

Regular_idContext.prototype.REGR_ = function() {
    return this.getToken(plsqlParser.REGR_, 0);
};

Regular_idContext.prototype.STDDEV = function() {
    return this.getToken(plsqlParser.STDDEV, 0);
};

Regular_idContext.prototype.VAR_ = function() {
    return this.getToken(plsqlParser.VAR_, 0);
};

Regular_idContext.prototype.COVAR_ = function() {
    return this.getToken(plsqlParser.COVAR_, 0);
};

Regular_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.enterRegular_id(this);
	}
};

Regular_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof plsqlListener ) {
        listener.exitRegular_id(this);
	}
};




plsqlParser.Regular_idContext = Regular_idContext;

plsqlParser.prototype.regular_id = function() {

    var localctx = new Regular_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 740, plsqlParser.RULE_regular_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5187;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (plsqlParser.BLOCK - 32)) | (1 << (plsqlParser.BODY - 32)) | (1 << (plsqlParser.BOOLEAN - 32)) | (1 << (plsqlParser.BOTH - 32)) | (1 << (plsqlParser.BULK - 32)) | (1 << (plsqlParser.BYTE - 32)) | (1 << (plsqlParser.C_LETTER - 32)) | (1 << (plsqlParser.CALL - 32)) | (1 << (plsqlParser.CANONICAL - 32)) | (1 << (plsqlParser.CASCADE - 32)) | (1 << (plsqlParser.CAST - 32)) | (1 << (plsqlParser.CHAR - 32)) | (1 << (plsqlParser.CHAR_CS - 32)) | (1 << (plsqlParser.CHARACTER - 32)) | (1 << (plsqlParser.CHR - 32)) | (1 << (plsqlParser.CLOB - 32)) | (1 << (plsqlParser.CLOSE - 32)) | (1 << (plsqlParser.CLUSTER - 32)) | (1 << (plsqlParser.COLLECT - 32)) | (1 << (plsqlParser.COLUMNS - 32)) | (1 << (plsqlParser.COMMENT - 32)) | (1 << (plsqlParser.COMMIT - 32)) | (1 << (plsqlParser.COMMITTED - 32)) | (1 << (plsqlParser.COMPATIBILITY - 32)) | (1 << (plsqlParser.COMPILE - 32)) | (1 << (plsqlParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (plsqlParser.DECREMENT - 97)) | (1 << (plsqlParser.DEFAULTS - 97)) | (1 << (plsqlParser.DEFERRED - 97)) | (1 << (plsqlParser.DEFINER - 97)) | (1 << (plsqlParser.DETERMINISTIC - 97)) | (1 << (plsqlParser.DIMENSION - 97)) | (1 << (plsqlParser.DISABLE - 97)) | (1 << (plsqlParser.DISASSOCIATE - 97)) | (1 << (plsqlParser.DOCUMENT - 97)) | (1 << (plsqlParser.DOUBLE - 97)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (plsqlParser.EACH - 97)) | (1 << (plsqlParser.ELEMENT - 97)) | (1 << (plsqlParser.EMPTY - 97)) | (1 << (plsqlParser.ENABLE - 97)) | (1 << (plsqlParser.ENCODING - 97)) | (1 << (plsqlParser.ENTITYESCAPING - 97)) | (1 << (plsqlParser.ERR - 97)) | (1 << (plsqlParser.ERRORS - 97)) | (1 << (plsqlParser.ESCAPE - 97)) | (1 << (plsqlParser.EVALNAME - 97)) | (1 << (plsqlParser.EXCEPTION - 97)) | (1 << (plsqlParser.EXCEPTION_INIT - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (plsqlParser.IGNORE - 162)) | (1 << (plsqlParser.IMMEDIATE - 162)) | (1 << (plsqlParser.INCLUDE - 162)) | (1 << (plsqlParser.INCLUDING - 162)) | (1 << (plsqlParser.INCREMENT - 162)) | (1 << (plsqlParser.INDENT - 162)) | (1 << (plsqlParser.INDEXED - 162)) | (1 << (plsqlParser.INDICATOR - 162)) | (1 << (plsqlParser.INDICES - 162)) | (1 << (plsqlParser.INFINITE - 162)) | (1 << (plsqlParser.INLINE - 162)) | (1 << (plsqlParser.INNER - 162)) | (1 << (plsqlParser.INOUT - 162)) | (1 << (plsqlParser.INSTANTIABLE - 162)) | (1 << (plsqlParser.INSTEAD - 162)) | (1 << (plsqlParser.INT - 162)) | (1 << (plsqlParser.INTEGER - 162)) | (1 << (plsqlParser.INTERVAL - 162)) | (1 << (plsqlParser.INVALIDATE - 162)) | (1 << (plsqlParser.ISOLATION - 162)) | (1 << (plsqlParser.ITERATE - 162)) | (1 << (plsqlParser.JAVA - 162)) | (1 << (plsqlParser.JOIN - 162)) | (1 << (plsqlParser.KEEP - 162)) | (1 << (plsqlParser.LANGUAGE - 162)) | (1 << (plsqlParser.LAST - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (plsqlParser.LAST_VALUE - 194)) | (1 << (plsqlParser.LEADING - 194)) | (1 << (plsqlParser.LEFT - 194)) | (1 << (plsqlParser.LEVEL - 194)) | (1 << (plsqlParser.LIBRARY - 194)) | (1 << (plsqlParser.LIKE2 - 194)) | (1 << (plsqlParser.LIKE4 - 194)) | (1 << (plsqlParser.LIKEC - 194)) | (1 << (plsqlParser.LIMIT - 194)) | (1 << (plsqlParser.LOCAL - 194)) | (1 << (plsqlParser.LOCKED - 194)) | (1 << (plsqlParser.LOG - 194)) | (1 << (plsqlParser.LOGOFF - 194)) | (1 << (plsqlParser.LOGON - 194)) | (1 << (plsqlParser.LONG - 194)) | (1 << (plsqlParser.LOOP - 194)) | (1 << (plsqlParser.MAIN - 194)) | (1 << (plsqlParser.MAP - 194)) | (1 << (plsqlParser.MATCHED - 194)) | (1 << (plsqlParser.MAXVALUE - 194)) | (1 << (plsqlParser.MEASURES - 194)) | (1 << (plsqlParser.MEMBER - 194)) | (1 << (plsqlParser.MERGE - 194)) | (1 << (plsqlParser.MINUTE - 194)) | (1 << (plsqlParser.MINVALUE - 194)) | (1 << (plsqlParser.MLSLABEL - 194)) | (1 << (plsqlParser.MODEL - 194)) | (1 << (plsqlParser.MODIFY - 194)))) !== 0) || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (plsqlParser.MONTH - 226)) | (1 << (plsqlParser.MULTISET - 226)) | (1 << (plsqlParser.NAME - 226)) | (1 << (plsqlParser.NAN - 226)) | (1 << (plsqlParser.NATURAL - 226)) | (1 << (plsqlParser.NATURALN - 226)) | (1 << (plsqlParser.NAV - 226)) | (1 << (plsqlParser.NCHAR - 226)) | (1 << (plsqlParser.NCHAR_CS - 226)) | (1 << (plsqlParser.NCLOB - 226)) | (1 << (plsqlParser.NESTED - 226)) | (1 << (plsqlParser.NEW - 226)) | (1 << (plsqlParser.NO - 226)) | (1 << (plsqlParser.NOAUDIT - 226)) | (1 << (plsqlParser.NOCOPY - 226)) | (1 << (plsqlParser.NOCYCLE - 226)) | (1 << (plsqlParser.NOENTITYESCAPING - 226)) | (1 << (plsqlParser.NONE - 226)) | (1 << (plsqlParser.NOSCHEMACHECK - 226)) | (1 << (plsqlParser.NULLS - 226)) | (1 << (plsqlParser.NUMBER - 226)) | (1 << (plsqlParser.NUMERIC - 226)) | (1 << (plsqlParser.NVARCHAR2 - 226)) | (1 << (plsqlParser.OBJECT - 226)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (plsqlParser.OFF - 258)) | (1 << (plsqlParser.OID - 258)) | (1 << (plsqlParser.OLD - 258)) | (1 << (plsqlParser.ONLY - 258)) | (1 << (plsqlParser.OPEN - 258)) | (1 << (plsqlParser.ORADATA - 258)) | (1 << (plsqlParser.ORDINALITY - 258)) | (1 << (plsqlParser.OSERROR - 258)) | (1 << (plsqlParser.OUT - 258)) | (1 << (plsqlParser.OUTER - 258)) | (1 << (plsqlParser.OVER - 258)) | (1 << (plsqlParser.OVERRIDING - 258)) | (1 << (plsqlParser.PACKAGE - 258)) | (1 << (plsqlParser.PARALLEL_ENABLE - 258)) | (1 << (plsqlParser.PARAMETERS - 258)) | (1 << (plsqlParser.PARENT - 258)) | (1 << (plsqlParser.PARTITION - 258)) | (1 << (plsqlParser.PASSING - 258)) | (1 << (plsqlParser.PATH - 258)) | (1 << (plsqlParser.PIPELINED - 258)) | (1 << (plsqlParser.PLAN - 258)) | (1 << (plsqlParser.PLS_INTEGER - 258)) | (1 << (plsqlParser.POSITIVE - 258)) | (1 << (plsqlParser.POSITIVEN - 258)) | (1 << (plsqlParser.PRAGMA - 258)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (plsqlParser.PRECEDING - 290)) | (1 << (plsqlParser.PRECISION - 290)) | (1 << (plsqlParser.PRESENT - 290)) | (1 << (plsqlParser.RAISE - 290)) | (1 << (plsqlParser.RANGE - 290)) | (1 << (plsqlParser.RAW - 290)) | (1 << (plsqlParser.READ - 290)) | (1 << (plsqlParser.REAL - 290)) | (1 << (plsqlParser.RECORD - 290)) | (1 << (plsqlParser.REF - 290)) | (1 << (plsqlParser.REFERENCE - 290)) | (1 << (plsqlParser.REFERENCING - 290)) | (1 << (plsqlParser.REJECT - 290)) | (1 << (plsqlParser.RELIES_ON - 290)) | (1 << (plsqlParser.RENAME - 290)) | (1 << (plsqlParser.REPLACE - 290)) | (1 << (plsqlParser.RESPECT - 290)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 290)) | (1 << (plsqlParser.RESULT - 290)) | (1 << (plsqlParser.RESULT_CACHE - 290)) | (1 << (plsqlParser.RETURN - 290)) | (1 << (plsqlParser.RETURNING - 290)) | (1 << (plsqlParser.REUSE - 290)) | (1 << (plsqlParser.REVERSE - 290)) | (1 << (plsqlParser.RIGHT - 290)) | (1 << (plsqlParser.ROLLBACK - 290)) | (1 << (plsqlParser.ROLLUP - 290)) | (1 << (plsqlParser.ROW - 290)) | (1 << (plsqlParser.ROWID - 290)))) !== 0) || ((((_la - 322)) & ~0x1f) == 0 && ((1 << (_la - 322)) & ((1 << (plsqlParser.ROWS - 322)) | (1 << (plsqlParser.RULES - 322)) | (1 << (plsqlParser.SAMPLE - 322)) | (1 << (plsqlParser.SAVE - 322)) | (1 << (plsqlParser.SAVEPOINT - 322)) | (1 << (plsqlParser.SCHEMA - 322)) | (1 << (plsqlParser.SCHEMACHECK - 322)) | (1 << (plsqlParser.SCN - 322)) | (1 << (plsqlParser.SECOND - 322)) | (1 << (plsqlParser.SEED - 322)) | (1 << (plsqlParser.SEGMENT - 322)) | (1 << (plsqlParser.SELF - 322)) | (1 << (plsqlParser.SEQUENTIAL - 322)) | (1 << (plsqlParser.SERIALIZABLE - 322)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 322)) | (1 << (plsqlParser.SERVERERROR - 322)) | (1 << (plsqlParser.SESSIONTIMEZONE - 322)) | (1 << (plsqlParser.SET - 322)) | (1 << (plsqlParser.SETS - 322)) | (1 << (plsqlParser.SETTINGS - 322)) | (1 << (plsqlParser.SHOW - 322)) | (1 << (plsqlParser.SHUTDOWN - 322)) | (1 << (plsqlParser.SIBLINGS - 322)) | (1 << (plsqlParser.SIGNTYPE - 322)) | (1 << (plsqlParser.SIMPLE_INTEGER - 322)) | (1 << (plsqlParser.SINGLE - 322)) | (1 << (plsqlParser.SKIP_ - 322)))) !== 0) || ((((_la - 354)) & ~0x1f) == 0 && ((1 << (_la - 354)) & ((1 << (plsqlParser.SMALLINT - 354)) | (1 << (plsqlParser.SNAPSHOT - 354)) | (1 << (plsqlParser.SOME - 354)) | (1 << (plsqlParser.SPECIFICATION - 354)) | (1 << (plsqlParser.SQLDATA - 354)) | (1 << (plsqlParser.SQLERROR - 354)) | (1 << (plsqlParser.STANDALONE - 354)) | (1 << (plsqlParser.STARTUP - 354)) | (1 << (plsqlParser.STATEMENT - 354)) | (1 << (plsqlParser.STATEMENT_ID - 354)) | (1 << (plsqlParser.STATIC - 354)) | (1 << (plsqlParser.STATISTICS - 354)) | (1 << (plsqlParser.STRING - 354)) | (1 << (plsqlParser.SUBMULTISET - 354)) | (1 << (plsqlParser.SUBPARTITION - 354)) | (1 << (plsqlParser.SUBSTITUTABLE - 354)) | (1 << (plsqlParser.SUBTYPE - 354)) | (1 << (plsqlParser.SUCCESS - 354)) | (1 << (plsqlParser.SUSPEND - 354)) | (1 << (plsqlParser.TIME - 354)) | (1 << (plsqlParser.TIMESTAMP - 354)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 354)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 354)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 354)) | (1 << (plsqlParser.TIMEZONE_ABBR - 354)) | (1 << (plsqlParser.TIMEZONE_HOUR - 354)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 354)) | (1 << (plsqlParser.TIMEZONE_REGION - 354)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (plsqlParser.TRAILING - 387)) | (1 << (plsqlParser.TRANSACTION - 387)) | (1 << (plsqlParser.TRANSLATE - 387)) | (1 << (plsqlParser.TREAT - 387)) | (1 << (plsqlParser.TRIGGER - 387)) | (1 << (plsqlParser.TRIM - 387)) | (1 << (plsqlParser.TRUNCATE - 387)) | (1 << (plsqlParser.TYPE - 387)) | (1 << (plsqlParser.UNBOUNDED - 387)) | (1 << (plsqlParser.UNDER - 387)) | (1 << (plsqlParser.UNLIMITED - 387)) | (1 << (plsqlParser.UNTIL - 387)) | (1 << (plsqlParser.UPDATED - 387)) | (1 << (plsqlParser.UPSERT - 387)) | (1 << (plsqlParser.UROWID - 387)) | (1 << (plsqlParser.USE - 387)) | (1 << (plsqlParser.VALIDATE - 387)) | (1 << (plsqlParser.VALUE - 387)) | (1 << (plsqlParser.VARCHAR - 387)) | (1 << (plsqlParser.VARCHAR2 - 387)) | (1 << (plsqlParser.VARIABLE - 387)) | (1 << (plsqlParser.VARRAY - 387)) | (1 << (plsqlParser.VARYING - 387)) | (1 << (plsqlParser.VERSION - 387)) | (1 << (plsqlParser.VERSIONS - 387)))) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & ((1 << (plsqlParser.WAIT - 419)) | (1 << (plsqlParser.WARNING - 419)) | (1 << (plsqlParser.WELLFORMED - 419)) | (1 << (plsqlParser.WHENEVER - 419)) | (1 << (plsqlParser.WHILE - 419)) | (1 << (plsqlParser.WITHIN - 419)) | (1 << (plsqlParser.WORK - 419)) | (1 << (plsqlParser.WRITE - 419)) | (1 << (plsqlParser.XML - 419)) | (1 << (plsqlParser.XMLAGG - 419)) | (1 << (plsqlParser.XMLATTRIBUTES - 419)) | (1 << (plsqlParser.XMLCAST - 419)) | (1 << (plsqlParser.XMLCOLATTVAL - 419)) | (1 << (plsqlParser.XMLELEMENT - 419)) | (1 << (plsqlParser.XMLEXISTS - 419)) | (1 << (plsqlParser.XMLFOREST - 419)) | (1 << (plsqlParser.XMLNAMESPACES - 419)) | (1 << (plsqlParser.XMLPARSE - 419)) | (1 << (plsqlParser.XMLPI - 419)) | (1 << (plsqlParser.XMLQUERY - 419)) | (1 << (plsqlParser.XMLROOT - 419)) | (1 << (plsqlParser.XMLSERIALIZE - 419)) | (1 << (plsqlParser.XMLTABLE - 419)) | (1 << (plsqlParser.YEAR - 419)) | (1 << (plsqlParser.YES - 419)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 419)) | (1 << (plsqlParser.ZONE - 419)) | (1 << (plsqlParser.PREDICTION - 419)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 419)))) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & ((1 << (plsqlParser.PREDICTION_COST - 451)) | (1 << (plsqlParser.PREDICTION_DETAILS - 451)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 451)) | (1 << (plsqlParser.PREDICTION_SET - 451)) | (1 << (plsqlParser.CUME_DIST - 451)) | (1 << (plsqlParser.DENSE_RANK - 451)) | (1 << (plsqlParser.LISTAGG - 451)) | (1 << (plsqlParser.PERCENT_RANK - 451)) | (1 << (plsqlParser.PERCENTILE_CONT - 451)) | (1 << (plsqlParser.PERCENTILE_DISC - 451)) | (1 << (plsqlParser.RANK - 451)) | (1 << (plsqlParser.AVG - 451)) | (1 << (plsqlParser.CORR - 451)) | (1 << (plsqlParser.LAG - 451)) | (1 << (plsqlParser.LEAD - 451)) | (1 << (plsqlParser.MAX - 451)) | (1 << (plsqlParser.MEDIAN - 451)) | (1 << (plsqlParser.MIN - 451)) | (1 << (plsqlParser.NTILE - 451)) | (1 << (plsqlParser.RATIO_TO_REPORT - 451)) | (1 << (plsqlParser.ROW_NUMBER - 451)) | (1 << (plsqlParser.SUM - 451)) | (1 << (plsqlParser.VARIANCE - 451)) | (1 << (plsqlParser.REGR_ - 451)) | (1 << (plsqlParser.STDDEV - 451)) | (1 << (plsqlParser.VAR_ - 451)) | (1 << (plsqlParser.COVAR_ - 451)))) !== 0) || _la===plsqlParser.REGULAR_ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


plsqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 158:
			return this.subquery_sempred(localctx, predIndex);
	case 246:
			return this.expression_sempred(localctx, predIndex);
	case 256:
			return this.binary_expression_sempred(localctx, predIndex);
	case 264:
			return this.unary_expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

plsqlParser.prototype.subquery_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

plsqlParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 10);
		case 2:
			return this.precpred(this._ctx, 8);
		case 3:
			return this.precpred(this._ctx, 4);
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 12);
		case 6:
			return this.precpred(this._ctx, 11);
		case 7:
			return this.precpred(this._ctx, 9);
		case 8:
			return this.precpred(this._ctx, 7);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

plsqlParser.prototype.binary_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 5);
		case 10:
			return this.precpred(this._ctx, 4);
		case 11:
			return this.precpred(this._ctx, 3);
		case 12:
			return this.precpred(this._ctx, 6);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

plsqlParser.prototype.unary_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 13:
			return this.precpred(this._ctx, 11);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.plsqlParser = plsqlParser;
